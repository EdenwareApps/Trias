'use strict';

var require$$1 = require('util');
var fs = require('fs');
var path = require('path');
var zlib = require('zlib');
var stream = require('stream');
var require$$3$1 = require('http');
var require$$4 = require('https');
var require$$0$2 = require('url');
var require$$4$1 = require('assert');
var require$$1$1 = require('tty');
var require$$0$3 = require('os');
var events = require('events');

function getDefaultExportFromCjs (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

var stemmers = {};

var stopwords = {};

/*
Copyright (c) 2011, Chris Umbel

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/
var hasRequiredStopwords;
function requireStopwords() {
  if (hasRequiredStopwords) return stopwords;
  hasRequiredStopwords = 1;

  // a list of commonly used words that have little meaning and can be excluded
  // from analysis.
  const words = ['about', 'above', 'after', 'again', 'all', 'also', 'am', 'an', 'and', 'another', 'any', 'are', 'as', 'at', 'be', 'because', 'been', 'before', 'being', 'below', 'between', 'both', 'but', 'by', 'came', 'can', 'cannot', 'come', 'could', 'did', 'do', 'does', 'doing', 'during', 'each', 'few', 'for', 'from', 'further', 'get', 'got', 'has', 'had', 'he', 'have', 'her', 'here', 'him', 'himself', 'his', 'how', 'if', 'in', 'into', 'is', 'it', 'its', 'itself', 'like', 'make', 'many', 'me', 'might', 'more', 'most', 'much', 'must', 'my', 'myself', 'never', 'now', 'of', 'on', 'only', 'or', 'other', 'our', 'ours', 'ourselves', 'out', 'over', 'own', 'said', 'same', 'see', 'she', 'should', 'since', 'so', 'some', 'still', 'such', 'take', 'than', 'that', 'the', 'their', 'theirs', 'them', 'themselves', 'then', 'there', 'these', 'they', 'this', 'those', 'through', 'to', 'too', 'under', 'until', 'up', 'very', 'was', 'way', 'we', 'well', 'were', 'what', 'where', 'when', 'which', 'while', 'who', 'whom', 'with', 'would', 'why', 'you', 'your', 'yours', 'yourself', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '$', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '_'];

  // tell the world about the noise words.
  stopwords.words = words;
  return stopwords;
}

/*
Copyright (c) 2011, Chris Umbel

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/
var tokenizer;
var hasRequiredTokenizer;
function requireTokenizer() {
  if (hasRequiredTokenizer) return tokenizer;
  hasRequiredTokenizer = 1;
  class Tokenizer {
    trim(array) {
      while (array[array.length - 1] === '') {
        array.pop();
      }
      while (array[0] === '') {
        array.shift();
      }
      return array;
    }
  }
  tokenizer = Tokenizer;
  return tokenizer;
}

/*
Copyright (c) 2011, Chris Umbel

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/
var aggressive_tokenizer;
var hasRequiredAggressive_tokenizer;
function requireAggressive_tokenizer() {
  if (hasRequiredAggressive_tokenizer) return aggressive_tokenizer;
  hasRequiredAggressive_tokenizer = 1;
  const Tokenizer = requireTokenizer();
  class AggressiveTokenizer extends Tokenizer {
    tokenize(text) {
      // break a string up into an array of tokens by anything non-word
      // underscore is considered to be non word character
      // Old splitter:
      // return this.trim(text.split(/[\W|_]+/))
      // New splitter:
      // Explicitly mentions which characters make up words.
      // So words may contain hyphen -, single quote ' and slash /
      return this.trim(text.split(/[^a-zA-Z0-9'\-/]+/));
    }
  }
  aggressive_tokenizer = AggressiveTokenizer;
  return aggressive_tokenizer;
}

/*
Copyright (c) 2011, Chris Umbel

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/
var stemmer;
var hasRequiredStemmer;
function requireStemmer() {
  if (hasRequiredStemmer) return stemmer;
  hasRequiredStemmer = 1;
  const stopwords = requireStopwords();
  const Tokenizer = requireAggressive_tokenizer();
  stemmer = function () {
    const stemmer = this;
    stemmer.stem = function (token) {
      return token;
    };
    stemmer.addStopWord = function (stopWord) {
      stopwords.words.push(stopWord);
    };
    stemmer.addStopWords = function (moreStopWords) {
      stopwords.words = stopwords.words.concat(moreStopWords);
    };
    stemmer.removeStopWord = function (stopWord) {
      this.removeStopWords([stopWord]);
    };
    stemmer.removeStopWords = function (moreStopWords) {
      moreStopWords.forEach(function (stopWord) {
        const idx = stopwords.words.indexOf(stopWord);
        if (idx >= 0) {
          stopwords.words.splice(idx, 1);
        }
      });
    };
    stemmer.tokenizeAndStem = function (text, keepStops) {
      const stemmedTokens = [];
      const lowercaseText = text.toLowerCase();
      const tokens = new Tokenizer().tokenize(lowercaseText);
      if (keepStops) {
        tokens.forEach(function (token) {
          stemmedTokens.push(stemmer.stem(token));
        });
      } else {
        tokens.forEach(function (token) {
          if (stopwords.words.indexOf(token) === -1) {
            stemmedTokens.push(stemmer.stem(token));
          }
        });
      }
      return stemmedTokens;
    };

    /*
    stemmer.attach = function () {
      String.prototype.stem = function () {
        return stemmer.stem(this)
      }
       String.prototype.tokenizeAndStem = function (keepStops) {
        return stemmer.tokenizeAndStem(this, keepStops)
      }
    }
    */
  };
  return stemmer;
}

/*
Copyright (c) 2011, Chris Umbel

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/
var porter_stemmer;
var hasRequiredPorter_stemmer;
function requirePorter_stemmer() {
  if (hasRequiredPorter_stemmer) return porter_stemmer;
  hasRequiredPorter_stemmer = 1;
  const Stemmer = requireStemmer();

  // denote groups of consecutive consonants with a C and consecutive vowels
  // with a V.
  function categorizeGroups(token) {
    return token.replace(/[^aeiouy]+y/g, 'CV').replace(/[aeiou]+/g, 'V').replace(/[^V]+/g, 'C');
  }

  // denote single consonants with a C and single vowels with a V
  function categorizeChars(token) {
    return token.replace(/[^aeiouy]y/g, 'CV').replace(/[aeiou]/g, 'V').replace(/[^V]/g, 'C');
  }

  // calculate the "measure" M of a word. M is the count of VC sequences dropping
  // an initial C if it exists and a trailing V if it exists.
  function measure(token) {
    if (!token) {
      return -1;
    }
    return categorizeGroups(token).replace(/^C/, '').replace(/V$/, '').length / 2;
  }

  // determine if a token end with a double consonant i.e. happ
  function endsWithDoublCons(token) {
    return token.match(/([^aeiou])\1$/);
  }

  // replace a pattern in a word. if a replacement occurs an optional callback
  // can be called to post-process the result. if no match is made NULL is
  // returned.
  function attemptReplace(token, pattern, replacement, callback) {
    let result = null;
    if (typeof pattern === 'string' && token.substr(0 - pattern.length) === pattern) {
      result = token.replace(new RegExp(pattern + '$'), replacement);
    } else if (pattern instanceof RegExp && token.match(pattern)) {
      result = token.replace(pattern, replacement);
    }
    if (result && callback) {
      return callback(result);
    } else {
      return result;
    }
  }

  // attempt to replace a list of patterns/replacements on a token for a minimum
  // measure M.
  function attemptReplacePatterns(token, replacements, measureThreshold) {
    let replacement = token;
    for (let i = 0; i < replacements.length; i++) {
      if (measureThreshold == null || measure(attemptReplace(token, replacements[i][0], replacements[i][1])) > measureThreshold) {
        replacement = attemptReplace(replacement, replacements[i][0], replacements[i][2]) || replacement;
      }
    }
    return replacement;
  }

  // replace a list of patterns/replacements on a word. if no match is made return
  // the original token.
  function replacePatterns(token, replacements, measureThreshold) {
    return attemptReplacePatterns(token, replacements, measureThreshold) || token;
  }

  // TODO: this should replace all of the messy replacement stuff above
  function replaceRegex(token, regex, includeParts, minimumMeasure) {
    let parts;
    let result = '';
    if (regex.test(token)) {
      parts = regex.exec(token);
      includeParts.forEach(function (i) {
        result += parts[i];
      });
    }
    if (measure(result) > minimumMeasure) {
      return result;
    }
    return null;
  }

  // step 1a as defined for the porter stemmer algorithm.
  function step1a(token) {
    if (token.match(/(ss|i)es$/)) {
      return token.replace(/(ss|i)es$/, '$1');
    }
    if (token.substr(-1) === 's' && token.substr(-2, 1) !== 's' && token.length > 2) {
      return token.replace(/s?$/, '');
    }
    return token;
  }

  // step 1b as defined for the porter stemmer algorithm.
  function step1b(token) {
    let result;
    if (token.substr(-3) === 'eed') {
      if (measure(token.substr(0, token.length - 3)) > 0) {
        return token.replace(/eed$/, 'ee');
      }
    } else {
      result = attemptReplace(token, /(ed|ing)$/, '', function (token) {
        if (categorizeGroups(token).indexOf('V') >= 0) {
          result = attemptReplacePatterns(token, [['at', '', 'ate'], ['bl', '', 'ble'], ['iz', '', 'ize']]);
          if (result !== token) {
            return result;
          } else {
            if (endsWithDoublCons(token) && token.match(/[^lsz]$/)) {
              return token.replace(/([^aeiou])\1$/, '$1');
            }
            if (measure(token) === 1 && categorizeChars(token).substr(-3) === 'CVC' && token.match(/[^wxy]$/)) {
              return token + 'e';
            }
          }
          return token;
        }
        return null;
      });
      if (result) {
        return result;
      }
    }
    return token;
  }

  // step 1c as defined for the porter stemmer algorithm.
  function step1c(token) {
    const categorizedGroups = categorizeGroups(token);
    if (token.substr(-1) === 'y' && categorizedGroups.substr(0, categorizedGroups.length - 1).indexOf('V') > -1) {
      return token.replace(/y$/, 'i');
    }
    return token;
  }

  // step 2 as defined for the porter stemmer algorithm.
  function step2(token) {
    token = replacePatterns(token, [['ational', '', 'ate'], ['tional', '', 'tion'], ['enci', '', 'ence'], ['anci', '', 'ance'], ['izer', '', 'ize'], ['abli', '', 'able'], ['bli', '', 'ble'], ['alli', '', 'al'], ['entli', '', 'ent'], ['eli', '', 'e'], ['ousli', '', 'ous'], ['ization', '', 'ize'], ['ation', '', 'ate'], ['ator', '', 'ate'], ['alism', '', 'al'], ['iveness', '', 'ive'], ['fulness', '', 'ful'], ['ousness', '', 'ous'], ['aliti', '', 'al'], ['iviti', '', 'ive'], ['biliti', '', 'ble'], ['logi', '', 'log']], 0);
    return token;
  }

  // step 3 as defined for the porter stemmer algorithm.
  function step3(token) {
    return replacePatterns(token, [['icate', '', 'ic'], ['ative', '', ''], ['alize', '', 'al'], ['iciti', '', 'ic'], ['ical', '', 'ic'], ['ful', '', ''], ['ness', '', '']], 0);
  }

  // step 4 as defined for the porter stemmer algorithm.
  function step4(token) {
    return replaceRegex(token, /^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/, [1], 1) || replaceRegex(token, /^(.+?)(s|t)(ion)$/, [1, 2], 1) || token;
  }

  // step 5a as defined for the porter stemmer algorithm.
  function step5a(token) {
    const m = measure(token.replace(/e$/, ''));
    if (m > 1 || m === 1 && !(categorizeChars(token).substr(-4, 3) === 'CVC' && token.match(/[^wxy].$/))) {
      token = token.replace(/e$/, '');
    }
    return token;
  }

  // step 5b as defined for the porter stemmer algorithm.
  function step5b(token) {
    if (measure(token) > 1) {
      return token.replace(/ll$/, 'l');
    }
    return token;
  }
  const PorterStemmer = new Stemmer();
  porter_stemmer = PorterStemmer;

  // perform full stemming algorithm on a single word
  PorterStemmer.stem = function (token) {
    if (token.length < 3) return token.toString();
    return step5b(step5a(step4(step3(step2(step1c(step1b(step1a(token.toLowerCase())))))))).toString();
  };

  // exports for tests
  PorterStemmer.categorizeGroups = categorizeGroups;
  PorterStemmer.measure = measure;
  PorterStemmer.step1a = step1a;
  PorterStemmer.step1b = step1b;
  PorterStemmer.step1c = step1c;
  PorterStemmer.step2 = step2;
  PorterStemmer.step3 = step3;
  PorterStemmer.step4 = step4;
  PorterStemmer.step5a = step5a;
  PorterStemmer.step5b = step5b;
  return porter_stemmer;
}

var stopwords_fa = {};

/*
Copyright (c) 2011, Chris Umbel
Farsi Stop Words by Fardin Koochaki <me@fardinak.com>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/
var hasRequiredStopwords_fa;
function requireStopwords_fa() {
  if (hasRequiredStopwords_fa) return stopwords_fa;
  hasRequiredStopwords_fa = 1;

  // a list of commonly used words that have little meaning and can be excluded
  // from analysis.
  const words = [
  // Words
  'از', 'با', 'یه', 'برای', 'و', 'باید', 'شاید',
  // Symbols
  '؟', '!', '٪', '.', '،', '؛', ':', ';', ',',
  // Numbers
  '۱', '۲', '۳', '۴', '۵', '۶', '۷', '۸', '۹', '۰'];

  // tell the world about the noise words.
  stopwords_fa.words = words;
  return stopwords_fa;
}

/*
Copyright (c) 2011, Chris Umbel
Farsi Aggressive Tokenizer by Fardin Koochaki <me@fardinak.com>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/
var aggressive_tokenizer_fa;
var hasRequiredAggressive_tokenizer_fa;
function requireAggressive_tokenizer_fa() {
  if (hasRequiredAggressive_tokenizer_fa) return aggressive_tokenizer_fa;
  hasRequiredAggressive_tokenizer_fa = 1;
  const Tokenizer = requireTokenizer();
  class AggressiveTokenizer extends Tokenizer {
    clearEmptyString(array) {
      return array.filter(function (a) {
        return a !== '';
      });
    }
    clearText(text) {
      return text.replace(/.:\+-=\(\)"'!\?،,؛;/g, ' ');
    }
    tokenize(text) {
      // break a string up into an array of tokens by anything non-word
      text = this.clearText(text);
      return this.clearEmptyString(text.split(/\s+/));
    }
  }
  aggressive_tokenizer_fa = AggressiveTokenizer;
  return aggressive_tokenizer_fa;
}

/*
Copyright (c) 2011, Chris Umbel
Farsi Stemmer by Fardin Koochaki <me@fardinak.com>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/
var stemmer_fa;
var hasRequiredStemmer_fa;
function requireStemmer_fa() {
  if (hasRequiredStemmer_fa) return stemmer_fa;
  hasRequiredStemmer_fa = 1;
  const stopwords = requireStopwords_fa();
  const Tokenizer = requireAggressive_tokenizer_fa();
  stemmer_fa = function () {
    const stemmer = this;
    stemmer.stem = function (token) {
      return token;
    };
    stemmer.tokenizeAndStem = function (text, keepStops) {
      const stemmedTokens = [];
      new Tokenizer().tokenize(text).forEach(function (token) {
        if (keepStops || stopwords.words.indexOf(token) === -1) {
          stemmedTokens.push(stemmer.stem(token));
        }
      });
      return stemmedTokens;
    };

    /*
    stemmer.attach = function () {
      String.prototype.stem = function () {
        return stemmer.stem(this)
      }
        String.prototype.tokenizeAndStem = function (keepStops) {
        return stemmer.tokenizeAndStem(this, keepStops)
      }
    }
    */
  };
  return stemmer_fa;
}

/*
Copyright (c) 2011, Chris Umbel
Farsi Porter Stemmer by Fardin Koochaki <me@fardinak.com>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/
var porter_stemmer_fa;
var hasRequiredPorter_stemmer_fa;
function requirePorter_stemmer_fa() {
  if (hasRequiredPorter_stemmer_fa) return porter_stemmer_fa;
  hasRequiredPorter_stemmer_fa = 1;
  const Stemmer = requireStemmer_fa();
  const PorterStemmer = new Stemmer();
  porter_stemmer_fa = PorterStemmer;

  // disabled stemming for Farsi
  // Farsi stemming will be supported soon
  PorterStemmer.stem = function (token) {
    return token;
  };
  return porter_stemmer_fa;
}

var stopwords_fr = {};

/*
 Copyright (c) 2014, Ismaël Héry

 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights
 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions:

 The above copyright notice and this permission notice shall be included in
 all copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 THE SOFTWARE.
 */
var hasRequiredStopwords_fr;
function requireStopwords_fr() {
  if (hasRequiredStopwords_fr) return stopwords_fr;
  hasRequiredStopwords_fr = 1;
  const words = ['être', 'avoir', 'faire', 'a', 'au', 'aux', 'avec', 'ce', 'ces', 'dans', 'de', 'des', 'du', 'elle', 'en', 'et', 'eux', 'il', 'je', 'la', 'le', 'leur', 'lui', 'ma', 'mais', 'me', 'même', 'mes', 'moi', 'mon', 'ne', 'nos', 'notre', 'nous', 'on', 'ou', 'où', 'par', 'pas', 'pour', 'qu', 'que', 'qui', 'sa', 'se', 'ses', 'son', 'sur', 'ta', 'te', 'tes', 'toi', 'ton', 'tu', 'un', 'une', 'vos', 'votre', 'vous', 'c', 'd', 'j', 'l', 'à', 'm', 'n', 's', 't', 'y', 'été', 'étée', 'étées', 'étés', 'étant', 'suis', 'es', 'est', 'sommes', 'êtes', 'sont', 'serai', 'seras', 'sera', 'serons', 'serez', 'seront', 'serais', 'serait', 'serions', 'seriez', 'seraient', 'étais', 'était', 'étions', 'étiez', 'étaient', 'fus', 'fut', 'fûmes', 'fûtes', 'furent', 'sois', 'soit', 'soyons', 'soyez', 'soient', 'fusse', 'fusses', 'fût', 'fussions', 'fussiez', 'fussent', 'ayant', 'eu', 'eue', 'eues', 'eus', 'ai', 'as', 'avons', 'avez', 'ont', 'aurai', 'auras', 'aura', 'aurons', 'aurez', 'auront', 'aurais', 'aurait', 'aurions', 'auriez', 'auraient', 'avais', 'avait', 'avions', 'aviez', 'avaient', 'eut', 'eûmes', 'eûtes', 'eurent', 'aie', 'aies', 'ait', 'ayons', 'ayez', 'aient', 'eusse', 'eusses', 'eût', 'eussions', 'eussiez', 'eussent', 'ceci', 'cela', 'cet', 'cette', 'ici', 'ils', 'les', 'leurs', 'quel', 'quels', 'quelle', 'quelles', 'sans', 'soi'];
  stopwords_fr.words = words;
  return stopwords_fr;
}

/*
Copyright (c) 2011, Chris Umbel

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/
var aggressive_tokenizer_fr;
var hasRequiredAggressive_tokenizer_fr;
function requireAggressive_tokenizer_fr() {
  if (hasRequiredAggressive_tokenizer_fr) return aggressive_tokenizer_fr;
  hasRequiredAggressive_tokenizer_fr = 1;
  const Tokenizer = requireTokenizer();
  class AggressiveTokenizer extends Tokenizer {
    tokenize(text) {
      // break a string up into an array of tokens by anything non-word
      return this.trim(text.split(/[^a-z0-9äâàéèëêïîöôùüûœç-]+/i));
    }
  }
  aggressive_tokenizer_fr = AggressiveTokenizer;
  return aggressive_tokenizer_fr;
}

/*
Copyright (c) 2014, Ismaël Héry

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/
var stemmer_fr;
var hasRequiredStemmer_fr;
function requireStemmer_fr() {
  if (hasRequiredStemmer_fr) return stemmer_fr;
  hasRequiredStemmer_fr = 1;
  const stopwords = requireStopwords_fr();
  const Tokenizer = requireAggressive_tokenizer_fr();
  stemmer_fr = function () {
    const stemmer = this;
    stemmer.stem = function (token) {
      return token;
    };
    stemmer.tokenizeAndStem = function (text, keepStops) {
      const stemmedTokens = [];
      new Tokenizer().tokenize(text).forEach(function (token) {
        let resultToken = token.toLowerCase();
        if (keepStops || stopwords.words.indexOf(resultToken) === -1) {
          // var resultToken = token.toLowerCase();
          if (resultToken.match(/[a-zâàëéêèïîôûùç0-9]/gi)) {
            resultToken = stemmer.stem(resultToken);
          }
          stemmedTokens.push(resultToken);
        }
      });
      return stemmedTokens;
    };

    /*
    stemmer.attach = function () {
      String.prototype.stem = function () {
        return stemmer.stem(this)
      }
       String.prototype.tokenizeAndStem = function (keepStops) {
        return stemmer.tokenizeAndStem(this, keepStops)
      }
    }
    */
  };
  return stemmer_fr;
}

/*
Copyright (c) 2014, Ismaël Héry

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/
var porter_stemmer_fr;
var hasRequiredPorter_stemmer_fr;
function requirePorter_stemmer_fr() {
  if (hasRequiredPorter_stemmer_fr) return porter_stemmer_fr;
  hasRequiredPorter_stemmer_fr = 1;
  const Stemmer = requireStemmer_fr();
  const PorterStemmer = new Stemmer();
  porter_stemmer_fr = PorterStemmer;

  // Export
  PorterStemmer.stem = stem;

  // Exports for test purpose
  PorterStemmer.prelude = prelude;
  PorterStemmer.regions = regions;
  PorterStemmer.endsinArr = endsinArr;

  /**
   * Stem a word thanks to Porter Stemmer rules
   * @param  {String} token Word to be stemmed
   * @return {String}       Stemmed word
   */
  function stem(token) {
    token = prelude(token.toLowerCase());
    if (token.length === 1) {
      return token;
    }
    const regs = regions(token);
    let r1txt, r2txt, rvtxt;
    r1txt = token.substring(regs.r1);
    r2txt = token.substring(regs.r2);
    rvtxt = token.substring(regs.rv);

    // Step 1
    const beforeStep1 = token;
    let suf, letterBefore, letter2Before, i;
    let doStep2a = false;
    if ((suf = endsinArr(r2txt, ['ance', 'iqUe', 'isme', 'able', 'iste', 'eux', 'ances', 'iqUes', 'ismes', 'ables', 'istes'])) !== '') {
      token = token.slice(0, -suf.length); // delete
    } else if ((suf = endsinArr(token, ['icatrice', 'icateur', 'ication', 'icatrices', 'icateurs', 'ications'])) !== '') {
      if (endsinArr(r2txt, ['icatrice', 'icateur', 'ication', 'icatrices', 'icateurs', 'ications']) !== '') {
        token = token.slice(0, -suf.length); // delete
      } else {
        token = token.slice(0, -suf.length) + 'iqU'; // replace by iqU
      }
    } else if ((suf = endsinArr(r2txt, ['atrice', 'ateur', 'ation', 'atrices', 'ateurs', 'ations'])) !== '') {
      token = token.slice(0, -suf.length); // delete
    } else if ((suf = endsinArr(r2txt, ['logie', 'logies'])) !== '') {
      token = token.slice(0, -suf.length) + 'log'; // replace with log
    } else if ((suf = endsinArr(r2txt, ['usion', 'ution', 'usions', 'utions'])) !== '') {
      token = token.slice(0, -suf.length) + 'u'; // replace with u
    } else if ((suf = endsinArr(r2txt, ['ence', 'ences'])) !== '') {
      token = token.slice(0, -suf.length) + 'ent'; // replace with ent
    } else if ((suf = endsinArr(r1txt, ['issement', 'issements'])) !== '') {
      if (!isVowel(token[token.length - suf.length - 1])) {
        token = token.slice(0, -suf.length); // delete
        r1txt = token.substring(regs.r1);
        r2txt = token.substring(regs.r2);
        rvtxt = token.substring(regs.rv);
      }
    } else if ((suf = endsinArr(r2txt, ['ativement', 'ativements'])) !== '') {
      token = token.slice(0, -suf.length); // delete
    } else if ((suf = endsinArr(r2txt, ['ivement', 'ivements'])) !== '') {
      token = token.slice(0, -suf.length); // delete
    } else if ((suf = endsinArr(token, ['eusement', 'eusements'])) !== '') {
      if ((suf = endsinArr(r2txt, ['eusement', 'eusements'])) !== '') {
        token = token.slice(0, -suf.length);
      } else if ((suf = endsinArr(r1txt, ['eusement', 'eusements'])) !== '') {
        token = token.slice(0, -suf.length) + 'eux';
      } else if ((suf = endsinArr(rvtxt, ['ement', 'ements'])) !== '') {
        token = token.slice(0, -suf.length);
      } // delete
    } else if ((suf = endsinArr(r2txt, ['ablement', 'ablements', 'iqUement', 'iqUements'])) !== '') {
      token = token.slice(0, -suf.length); // delete
    } else if ((suf = endsinArr(rvtxt, ['ièrement', 'ièrements', 'Ièrement', 'Ièrements'])) !== '') {
      token = token.slice(0, -suf.length) + 'i'; // replace by i
    } else if ((suf = endsinArr(rvtxt, ['ement', 'ements'])) !== '') {
      token = token.slice(0, -suf.length); // delete
    } else if ((suf = endsinArr(token, ['icité', 'icités'])) !== '') {
      if (endsinArr(r2txt, ['icité', 'icités']) !== '') {
        token = token.slice(0, -suf.length);
      } else {
        token = token.slice(0, -suf.length) + 'iqU';
      }
    } else if ((suf = endsinArr(token, ['abilité', 'abilités'])) !== '') {
      if (endsinArr(r2txt, ['abilité', 'abilités']) !== '') {
        token = token.slice(0, -suf.length);
      } else {
        token = token.slice(0, -suf.length) + 'abl';
      }
    } else if ((suf = endsinArr(r2txt, ['ité', 'ités'])) !== '') {
      token = token.slice(0, -suf.length); // delete if in R2
    } else if ((suf = endsinArr(token, ['icatif', 'icative', 'icatifs', 'icatives'])) !== '') {
      if ((suf = endsinArr(r2txt, ['icatif', 'icative', 'icatifs', 'icatives'])) !== '') {
        token = token.slice(0, -suf.length); // delete
        r2txt = token.substring(regs.r2);
        rvtxt = token.substring(regs.rv);
      }
      if ((suf = endsinArr(r2txt, ['atif', 'ative', 'atifs', 'atives'])) !== '') {
        token = token.slice(0, -suf.length - 2) + 'iqU'; // replace with iqU
        r2txt = token.substring(regs.r2);
        rvtxt = token.substring(regs.rv);
      }
    } else if ((suf = endsinArr(r2txt, ['atif', 'ative', 'atifs', 'atives'])) !== '') {
      token = token.slice(0, -suf.length); // delete
    } else if ((suf = endsinArr(r2txt, ['if', 'ive', 'ifs', 'ives'])) !== '') {
      token = token.slice(0, -suf.length); // delete
    } else if ((suf = endsinArr(token, ['eaux'])) !== '') {
      token = token.slice(0, -suf.length) + 'eau'; // replace by eau
    } else if ((suf = endsinArr(r1txt, ['aux'])) !== '') {
      token = token.slice(0, -suf.length) + 'al'; // replace by al
    } else if ((suf = endsinArr(r2txt, ['euse', 'euses'])) !== '') {
      token = token.slice(0, -suf.length); // delete
    } else if ((suf = endsinArr(r1txt, ['euse', 'euses'])) !== '') {
      token = token.slice(0, -suf.length) + 'eux'; // replace by eux
    } else if ((suf = endsinArr(rvtxt, ['amment'])) !== '') {
      token = token.slice(0, -suf.length) + 'ant'; // replace by ant
      doStep2a = true;
    } else if ((suf = endsinArr(rvtxt, ['emment'])) !== '') {
      token = token.slice(0, -suf.length) + 'ent'; // replace by ent
      doStep2a = true;
    } else if ((suf = endsinArr(rvtxt, ['ment', 'ments'])) !== '') {
      // letter before must be a vowel in RV
      letterBefore = token[token.length - suf.length - 1];
      if (isVowel(letterBefore) && endsin(rvtxt, letterBefore + suf)) {
        token = token.slice(0, -suf.length); // delete
        doStep2a = true;
      }
    }

    // re compute regions
    r1txt = token.substring(regs.r1);
    r2txt = token.substring(regs.r2);
    rvtxt = token.substring(regs.rv);

    // Step 2a
    const beforeStep2a = token;
    let step2aDone = false;
    if (beforeStep1 === token || doStep2a) {
      step2aDone = true;
      if ((suf = endsinArr(rvtxt, ['îmes', 'ît', 'îtes', 'i', 'ie', 'Ie', 'ies', 'ir', 'ira', 'irai', 'iraIent', 'irais', 'irait', 'iras', 'irent', 'irez', 'iriez', 'irions', 'irons', 'iront', 'is', 'issaIent', 'issais', 'issait', 'issant', 'issante', 'issantes', 'issants', 'isse', 'issent', 'isses', 'issez', 'issiez', 'issions', 'issons', 'it'])) !== '') {
        letterBefore = token[token.length - suf.length - 1];
        if (!isVowel(letterBefore) && endsin(rvtxt, letterBefore + suf)) {
          token = token.slice(0, -suf.length);
        } // delete
      }
    }

    // Step 2b
    if (step2aDone && token === beforeStep2a) {
      if ((suf = endsinArr(rvtxt, ['é', 'ée', 'ées', 'és', 'èrent', 'er', 'era', 'erai', 'eraIent', 'erais', 'erait', 'eras', 'erez', 'eriez', 'erions', 'erons', 'eront', 'ez', 'iez', 'Iez'])) !== '') {
        token = token.slice(0, -suf.length); // delete
        r2txt = token.substring(regs.r2);
        rvtxt = token.substring(regs.rv);
      } else if ((suf = endsinArr(rvtxt, ['ions'])) !== '' && endsinArr(r2txt, ['ions'])) {
        token = token.slice(0, -suf.length); // delete
        r2txt = token.substring(regs.r2);
        rvtxt = token.substring(regs.rv);
      } else if ((suf = endsinArr(rvtxt, ['âmes', 'ât', 'âtes', 'a', 'ai', 'aIent', 'ais', 'ait', 'ant', 'ante', 'antes', 'ants', 'as', 'asse', 'assent', 'asses', 'assiez', 'assions'])) !== '') {
        token = token.slice(0, -suf.length); // delete

        letterBefore = token[token.length - 1];
        if (letterBefore === 'e' && endsin(rvtxt, 'e' + suf)) {
          token = token.slice(0, -1);
        }
        r2txt = token.substring(regs.r2);
        rvtxt = token.substring(regs.rv);
      }
    }

    // Step 3
    if (!(token === beforeStep1)) {
      if (token[token.length - 1] === 'Y') {
        token = token.slice(0, -1) + 'i';
      }
      if (token[token.length - 1] === 'ç') {
        token = token.slice(0, -1) + 'c';
      }
    } else {
      // Step 4
      letterBefore = token[token.length - 1];
      letter2Before = token[token.length - 2];
      if (letterBefore === 's' && ['a', 'i', 'o', 'u', 'è', 's'].indexOf(letter2Before) === -1) {
        token = token.slice(0, -1);
        r1txt = token.substring(regs.r1);
        r2txt = token.substring(regs.r2);
        rvtxt = token.substring(regs.rv);
      }
      if ((suf = endsinArr(r2txt, ['ion'])) !== '') {
        letterBefore = token[token.length - suf.length - 1];
        if (letterBefore === 's' || letterBefore === 't') {
          token = token.slice(0, -suf.length); // delete
          r1txt = token.substring(regs.r1);
          r2txt = token.substring(regs.r2);
          rvtxt = token.substring(regs.rv);
        }
      }
      if ((suf = endsinArr(rvtxt, ['ier', 'ière', 'Ier', 'Ière'])) !== '') {
        token = token.slice(0, -suf.length) + 'i'; // replace by i
        r1txt = token.substring(regs.r1);
        r2txt = token.substring(regs.r2);
        rvtxt = token.substring(regs.rv);
      }
      if ((suf = endsinArr(rvtxt, 'e')) !== '') {
        token = token.slice(0, -suf.length); // delete
        r1txt = token.substring(regs.r1);
        r2txt = token.substring(regs.r2);
        rvtxt = token.substring(regs.rv);
      }
      if ((suf = endsinArr(rvtxt, 'ë')) !== '') {
        if (token.slice(token.length - 3, -1) === 'gu') {
          token = token.slice(0, -suf.length);
        } // delete
      }
    }

    // Step 5
    if ((suf = endsinArr(token, ['enn', 'onn', 'ett', 'ell', 'eill'])) !== '') {
      token = token.slice(0, -1); // delete last letter
    }

    // Step 6
    i = token.length - 1;
    while (i > 0) {
      if (!isVowel(token[i])) {
        i--;
      } else if (i !== token.length - 1 && (token[i] === 'é' || token[i] === 'è')) {
        token = token.substring(0, i) + 'e' + token.substring(i + 1, token.length);
        break;
      } else {
        break;
      }
    }
    return token.toLowerCase();
  }

  /**
   * Compute r1, r2, rv regions as required by french porter stemmer algorithm
   * @param  {String} token Word to compute regions on
   * @return {Object}       Regions r1, r2, rv as offsets from the begining of the word
   */
  function regions(token) {
    let r1, r2, rv, len;
    // var i

    r1 = r2 = rv = len = token.length;

    // R1 is the region after the first non-vowel following a vowel,
    for (let i = 0; i < len - 1 && r1 === len; i++) {
      if (isVowel(token[i]) && !isVowel(token[i + 1])) {
        r1 = i + 2;
      }
    }
    // Or is the null region at the end of the word if there is no such non-vowel.

    // R2 is the region after the first non-vowel following a vowel in R1
    for (let i = r1; i < len - 1 && r2 === len; i++) {
      if (isVowel(token[i]) && !isVowel(token[i + 1])) {
        r2 = i + 2;
      }
    }
    // Or is the null region at the end of the word if there is no such non-vowel.

    // RV region
    const three = token.slice(0, 3);
    if (isVowel(token[0]) && isVowel(token[1])) {
      rv = 3;
    }
    if (three === 'par' || three === 'col' || three === 'tap') {
      rv = 3;
    } else {
      // the region after the first vowel not at the beginning of the word or null
      for (let i = 1; i < len - 1 && rv === len; i++) {
        if (isVowel(token[i])) {
          rv = i + 1;
        }
      }
    }
    return {
      r1: r1,
      r2: r2,
      rv: rv
    };
  }

  /**
   * Pre-process/prepare words as required by french porter stemmer algorithm
   * @param  {String} token Word to be prepared
   * @return {String}       Prepared word
   */
  function prelude(token) {
    token = token.toLowerCase();
    let result = '';
    let i = 0;

    // special case for i = 0 to avoid '-1' index
    if (token[i] === 'y' && isVowel(token[i + 1])) {
      result += token[i].toUpperCase();
    } else {
      result += token[i];
    }
    for (i = 1; i < token.length; i++) {
      if ((token[i] === 'u' || token[i] === 'i') && isVowel(token[i - 1]) && isVowel(token[i + 1])) {
        result += token[i].toUpperCase();
      } else if (token[i] === 'y' && (isVowel(token[i - 1]) || isVowel(token[i + 1]))) {
        result += token[i].toUpperCase();
      } else if (token[i] === 'u' && token[i - 1] === 'q') {
        result += token[i].toUpperCase();
      } else {
        result += token[i];
      }
    }
    return result;
  }

  /**
   * Return longest matching suffixes for a token or '' if no suffix match
   * @param  {String} token    Word to find matching suffix
   * @param  {Array} suffixes  Array of suffixes to test matching
   * @return {String}          Longest found matching suffix or ''
   */
  function endsinArr(token, suffixes) {
    let i;
    let longest = '';
    for (i = 0; i < suffixes.length; i++) {
      if (endsin(token, suffixes[i]) && suffixes[i].length > longest.length) {
        longest = suffixes[i];
      }
    }
    return longest;
  }
  function isVowel(letter) {
    return letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u' || letter === 'y' || letter === 'â' || letter === 'à' || letter === 'ë' || letter === 'é' || letter === 'ê' || letter === 'è' || letter === 'ï' || letter === 'î' || letter === 'ô' || letter === 'û' || letter === 'ù';
  }
  function endsin(token, suffix) {
    if (token.length < suffix.length) return false;
    return token.slice(-suffix.length) === suffix;
  }
  return porter_stemmer_fr;
}

/*
Copyright (c) 2020, Johan Maupetit

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/
var stepConfs;
var hasRequiredStepConfs;
function requireStepConfs() {
  if (hasRequiredStepConfs) return stepConfs;
  hasRequiredStepConfs = 1;
  const steps = [
  // === Step 1
  [
  // Transformations with 1 as minimal radix
  {
    issaient: '',
    ellement: 'el',
    issement: '',
    alement: 'al',
    eraient: '',
    iraient: '',
    eassent: '',
    ussent: '',
    amment: '',
    emment: '',
    issant: '',
    issent: '',
    assent: '',
    eaient: '',
    issait: '',
    èrent: '',
    erent: '',
    irent: '',
    erait: '',
    irait: '',
    iront: '',
    eront: '',
    ement: '',
    aient: '',
    îrent: '',
    eont: '',
    eant: '',
    eait: '',
    ient: '',
    ent: '',
    ont: '',
    ant: '',
    eât: '',
    ait: '',
    at: '',
    ât: '',
    it: '',
    ît: '',
    t: '',
    uction: '',
    ition: '',
    tion: '',
    eur: '',
    ier: '',
    er: '',
    ir: '',
    r: '',
    eassiez: '',
    issiez: '',
    assiez: '',
    ussiez: '',
    issez: '',
    assez: '',
    eriez: '',
    iriez: '',
    erez: '',
    irez: '',
    iez: '',
    ez: '',
    erai: '',
    irai: '',
    eai: '',
    ai: '',
    i: '',
    ira: '',
    era: '',
    ea: '',
    a: '',
    f: 'v',
    yeux: 'oeil',
    eux: '',
    aux: 'al',
    x: '',
    issante: '',
    eresse: '',
    eante: '',
    easse: '',
    eure: '',
    esse: '',
    asse: '',
    ance: '',
    ence: '',
    aise: '',
    euse: '',
    oise: 'o',
    isse: '',
    ante: '',
    ouse: 'ou',
    ière: '',
    ete: '',
    ète: '',
    iere: '',
    aire: '',
    erie: '',
    étude: '',
    etude: '',
    itude: '',
    ade: '',
    isme: '',
    age: '',
    trice: '',
    cque: 'c',
    que: 'c',
    eille: 'eil',
    elle: '',
    able: '',
    iste: '',
    ulle: 'ul',
    gue: 'g',
    ette: '',
    nne: 'n',
    itée: '',
    ité: '',
    té: '',
    ée: '',
    é: '',
    usse: '',
    // aise: '',
    ate: '',
    ite: '',
    ee: '',
    e: '',
    issements: '',
    issantes: '',
    eassions: '',
    eresses: '',
    issions: '',
    assions: '',
    issants: '',
    ussions: '',
    ements: '',
    eantes: '',
    issons: '',
    assons: '',
    easses: '',
    études: '',
    etudes: '',
    itudes: '',
    issais: '',
    trices: '',
    eilles: 'eil',
    irions: '',
    erions: '',
    usses: '',
    tions: '',
    ances: '',
    entes: '',
    eants: '',
    ables: '',
    irons: '',
    irais: '',
    ences: '',
    ients: '',
    ieres: '',
    eures: '',
    aires: '',
    erons: '',
    esses: '',
    euses: '',
    ulles: 'ul',
    cques: 'c',
    elles: '',
    // ables: '',
    istes: '',
    aises: '',
    asses: '',
    isses: '',
    oises: 'o',
    // tions: '',
    ouses: 'ou',
    ières: '',
    eries: '',
    antes: '',
    ismes: '',
    erais: '',
    eâtes: '',
    eâmes: '',
    itées: '',
    ettes: '',
    ages: '',
    eurs: '',
    ents: '',
    ètes: '',
    etes: '',
    ions: '',
    ités: '',
    ites: '',
    ates: '',
    âtes: '',
    îtes: '',
    // eurs: '',
    iers: '',
    iras: '',
    eras: '',
    ants: '',
    îmes: '',
    ûmes: '',
    âmes: '',
    ades: '',
    eais: '',
    eons: '',
    ques: 'c',
    gues: 'g',
    nnes: 'n',
    ttes: '',
    // îtes: '',
    tés: '',
    ons: '',
    ais: '',
    ées: '',
    ees: '',
    ats: '',
    eas: '',
    ts: '',
    rs: '',
    as: '',
    es: '',
    fs: 'v',
    és: '',
    is: '',
    s: '',
    eau: '',
    au: '',
    // aire: '',
    ien: 'i'
  },
  // Transformations with 2 as minimal radix
  {
    ication: '',
    iation: '',
    ation: '',
    ateur: '',
    teur: '',
    ure: '',
    ications: '',
    iations: '',
    ateurs: '',
    ations: '',
    teurs: '',
    ures: ''
  }],
  // === Step 2
  [{
    i: ''
  }, {
    ent: '',
    ation: '',
    ition: '',
    tion: '',
    el: ''
  }],
  // === Step 3
  [{
    ll: 'l',
    mm: 'm',
    nn: 'n',
    pp: 'p',
    tt: 't',
    ss: 's',
    y: '',
    t: '',
    qu: 'c'
  }]];
  stepConfs = steps;
  return stepConfs;
}

/*
Copyright (c) 2020, Johan Maupetit

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/
var utils$3;
var hasRequiredUtils$1;
function requireUtils$1() {
  if (hasRequiredUtils$1) return utils$3;
  hasRequiredUtils$1 = 1;
  const compose = (...fns) => x => fns.reduceRight((v, f) => f(v), x);
  const pipe = (...fns) => x => fns.reduce((v, f) => f(v), x);
  utils$3 = {
    compose,
    pipe
  };
  return utils$3;
}

/*
Copyright (c) 2020, Johan Maupetit, Hugo W.L. ter Doest

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/
var Carry;
var hasRequiredCarry;
function requireCarry() {
  if (hasRequiredCarry) return Carry;
  hasRequiredCarry = 1;

  // Integration with natural
  const Stemmer = requireStemmer_fr();
  const CarryStemmer = new Stemmer();
  const stepConfs = requireStepConfs();
  const {
    pipe
  } = requireUtils$1();
  const defaultConf = {
    steps: stepConfs,
    vowels: /[aeiouäâàéèëêïîöôùüûœ]/i
  };

  // count number of vowel-consonant groups
  const getWordSize = word => {
    let isPrevVowel = false;
    let nbVCgroups = 0;
    for (let i = 0; i < word.length; i += 1) {
      const letter = word[i];
      const isVowel = defaultConf.vowels.test(letter);
      if (!isVowel && isPrevVowel) {
        nbVCgroups += 1;
      }
      isPrevVowel = isVowel;
    }
    return nbVCgroups;
  };
  const tranform = (word, stepConf) => {
    let newWord = null;
    for (let suffixLength = word.length - 1; suffixLength > 0 && !newWord; suffixLength -= 1) {
      const suffix = word.substr(-suffixLength);
      const baseWord = word.substr(0, word.length - suffixLength);
      for (let minRadixSize = 0; minRadixSize <= 1 && !newWord; minRadixSize += 1) {
        const transformations = stepConf[minRadixSize] || {};
        const newSuffix = transformations[suffix];
        if (newSuffix === undefined) {
          continue;
        }
        const candidate = `${baseWord}${newSuffix}`;
        if (getWordSize(candidate) > minRadixSize) {
          newWord = candidate;
          break;
        }
      }
    }
    return newWord || word;
  };
  function NodeCarry(userConf = defaultConf) {
    const conf = {
      ...defaultConf,
      ...userConf
    };
    this.steps = [0, 1, 2].map(iStep => word => tranform(word, conf.steps[iStep]));
    this.stem = pipe(...this.steps);
  }

  // Create a Carry stemmer
  const nodeCarry = new NodeCarry();
  // Attach the Carry stemmer to natural's generic stemmer
  CarryStemmer.stem = nodeCarry.stem;
  Carry = CarryStemmer;
  return Carry;
}

var de = [
	"a",
	"ab",
	"aber",
	"ach",
	"acht",
	"achte",
	"achten",
	"achter",
	"achtes",
	"ag",
	"alle",
	"allein",
	"allem",
	"allen",
	"aller",
	"allerdings",
	"alles",
	"allgemeinen",
	"als",
	"also",
	"am",
	"an",
	"ander",
	"andere",
	"anderem",
	"anderen",
	"anderer",
	"anderes",
	"anderm",
	"andern",
	"anderr",
	"anders",
	"au",
	"auch",
	"auf",
	"aus",
	"ausser",
	"ausserdem",
	"außer",
	"außerdem",
	"b",
	"bald",
	"bei",
	"beide",
	"beiden",
	"beim",
	"beispiel",
	"bekannt",
	"bereits",
	"besonders",
	"besser",
	"besten",
	"bin",
	"bis",
	"bisher",
	"bist",
	"c",
	"d",
	"d.h",
	"da",
	"dabei",
	"dadurch",
	"dafür",
	"dagegen",
	"daher",
	"dahin",
	"dahinter",
	"damals",
	"damit",
	"danach",
	"daneben",
	"dank",
	"dann",
	"daran",
	"darauf",
	"daraus",
	"darf",
	"darfst",
	"darin",
	"darum",
	"darunter",
	"darüber",
	"das",
	"dasein",
	"daselbst",
	"dass",
	"dasselbe",
	"davon",
	"davor",
	"dazu",
	"dazwischen",
	"daß",
	"dein",
	"deine",
	"deinem",
	"deinen",
	"deiner",
	"deines",
	"dem",
	"dementsprechend",
	"demgegenüber",
	"demgemäss",
	"demgemäß",
	"demselben",
	"demzufolge",
	"den",
	"denen",
	"denn",
	"denselben",
	"der",
	"deren",
	"derer",
	"derjenige",
	"derjenigen",
	"dermassen",
	"dermaßen",
	"derselbe",
	"derselben",
	"des",
	"deshalb",
	"desselben",
	"dessen",
	"deswegen",
	"dich",
	"die",
	"diejenige",
	"diejenigen",
	"dies",
	"diese",
	"dieselbe",
	"dieselben",
	"diesem",
	"diesen",
	"dieser",
	"dieses",
	"dir",
	"doch",
	"dort",
	"drei",
	"drin",
	"dritte",
	"dritten",
	"dritter",
	"drittes",
	"du",
	"durch",
	"durchaus",
	"durfte",
	"durften",
	"dürfen",
	"dürft",
	"e",
	"eben",
	"ebenso",
	"ehrlich",
	"ei",
	"ei,",
	"eigen",
	"eigene",
	"eigenen",
	"eigener",
	"eigenes",
	"ein",
	"einander",
	"eine",
	"einem",
	"einen",
	"einer",
	"eines",
	"einig",
	"einige",
	"einigem",
	"einigen",
	"einiger",
	"einiges",
	"einmal",
	"eins",
	"elf",
	"en",
	"ende",
	"endlich",
	"entweder",
	"er",
	"ernst",
	"erst",
	"erste",
	"ersten",
	"erster",
	"erstes",
	"es",
	"etwa",
	"etwas",
	"euch",
	"euer",
	"eure",
	"eurem",
	"euren",
	"eurer",
	"eures",
	"f",
	"folgende",
	"früher",
	"fünf",
	"fünfte",
	"fünften",
	"fünfter",
	"fünftes",
	"für",
	"g",
	"gab",
	"ganz",
	"ganze",
	"ganzen",
	"ganzer",
	"ganzes",
	"gar",
	"gedurft",
	"gegen",
	"gegenüber",
	"gehabt",
	"gehen",
	"geht",
	"gekannt",
	"gekonnt",
	"gemacht",
	"gemocht",
	"gemusst",
	"genug",
	"gerade",
	"gern",
	"gesagt",
	"geschweige",
	"gewesen",
	"gewollt",
	"geworden",
	"gibt",
	"ging",
	"gleich",
	"gott",
	"gross",
	"grosse",
	"grossen",
	"grosser",
	"grosses",
	"groß",
	"große",
	"großen",
	"großer",
	"großes",
	"gut",
	"gute",
	"guter",
	"gutes",
	"h",
	"hab",
	"habe",
	"haben",
	"habt",
	"hast",
	"hat",
	"hatte",
	"hatten",
	"hattest",
	"hattet",
	"heisst",
	"her",
	"heute",
	"hier",
	"hin",
	"hinter",
	"hoch",
	"hätte",
	"hätten",
	"i",
	"ich",
	"ihm",
	"ihn",
	"ihnen",
	"ihr",
	"ihre",
	"ihrem",
	"ihren",
	"ihrer",
	"ihres",
	"im",
	"immer",
	"in",
	"indem",
	"infolgedessen",
	"ins",
	"irgend",
	"ist",
	"j",
	"ja",
	"jahr",
	"jahre",
	"jahren",
	"je",
	"jede",
	"jedem",
	"jeden",
	"jeder",
	"jedermann",
	"jedermanns",
	"jedes",
	"jedoch",
	"jemand",
	"jemandem",
	"jemanden",
	"jene",
	"jenem",
	"jenen",
	"jener",
	"jenes",
	"jetzt",
	"k",
	"kam",
	"kann",
	"kannst",
	"kaum",
	"kein",
	"keine",
	"keinem",
	"keinen",
	"keiner",
	"keines",
	"kleine",
	"kleinen",
	"kleiner",
	"kleines",
	"kommen",
	"kommt",
	"konnte",
	"konnten",
	"kurz",
	"können",
	"könnt",
	"könnte",
	"l",
	"lang",
	"lange",
	"leicht",
	"leide",
	"lieber",
	"los",
	"m",
	"machen",
	"macht",
	"machte",
	"mag",
	"magst",
	"mahn",
	"mal",
	"man",
	"manche",
	"manchem",
	"manchen",
	"mancher",
	"manches",
	"mann",
	"mehr",
	"mein",
	"meine",
	"meinem",
	"meinen",
	"meiner",
	"meines",
	"mensch",
	"menschen",
	"mich",
	"mir",
	"mit",
	"mittel",
	"mochte",
	"mochten",
	"morgen",
	"muss",
	"musst",
	"musste",
	"mussten",
	"muß",
	"mußt",
	"möchte",
	"mögen",
	"möglich",
	"mögt",
	"müssen",
	"müsst",
	"müßt",
	"n",
	"na",
	"nach",
	"nachdem",
	"nahm",
	"natürlich",
	"neben",
	"nein",
	"neue",
	"neuen",
	"neun",
	"neunte",
	"neunten",
	"neunter",
	"neuntes",
	"nicht",
	"nichts",
	"nie",
	"niemand",
	"niemandem",
	"niemanden",
	"noch",
	"nun",
	"nur",
	"o",
	"ob",
	"oben",
	"oder",
	"offen",
	"oft",
	"ohne",
	"ordnung",
	"p",
	"q",
	"r",
	"recht",
	"rechte",
	"rechten",
	"rechter",
	"rechtes",
	"richtig",
	"rund",
	"s",
	"sa",
	"sache",
	"sagt",
	"sagte",
	"sah",
	"satt",
	"schlecht",
	"schluss",
	"schon",
	"sechs",
	"sechste",
	"sechsten",
	"sechster",
	"sechstes",
	"sehr",
	"sei",
	"seid",
	"seien",
	"sein",
	"seine",
	"seinem",
	"seinen",
	"seiner",
	"seines",
	"seit",
	"seitdem",
	"selbst",
	"sich",
	"sie",
	"sieben",
	"siebente",
	"siebenten",
	"siebenter",
	"siebentes",
	"sind",
	"so",
	"solang",
	"solche",
	"solchem",
	"solchen",
	"solcher",
	"solches",
	"soll",
	"sollen",
	"sollst",
	"sollt",
	"sollte",
	"sollten",
	"sondern",
	"sonst",
	"soweit",
	"sowie",
	"später",
	"startseite",
	"statt",
	"steht",
	"suche",
	"t",
	"tag",
	"tage",
	"tagen",
	"tat",
	"teil",
	"tel",
	"tritt",
	"trotzdem",
	"tun",
	"u",
	"uhr",
	"um",
	"und",
	"uns",
	"unse",
	"unsem",
	"unsen",
	"unser",
	"unsere",
	"unserer",
	"unses",
	"unter",
	"v",
	"vergangenen",
	"viel",
	"viele",
	"vielem",
	"vielen",
	"vielleicht",
	"vier",
	"vierte",
	"vierten",
	"vierter",
	"viertes",
	"vom",
	"von",
	"vor",
	"w",
	"wahr",
	"wann",
	"war",
	"waren",
	"warst",
	"wart",
	"warum",
	"was",
	"weg",
	"wegen",
	"weil",
	"weit",
	"weiter",
	"weitere",
	"weiteren",
	"weiteres",
	"welche",
	"welchem",
	"welchen",
	"welcher",
	"welches",
	"wem",
	"wen",
	"wenig",
	"wenige",
	"weniger",
	"weniges",
	"wenigstens",
	"wenn",
	"wer",
	"werde",
	"werden",
	"werdet",
	"weshalb",
	"wessen",
	"wie",
	"wieder",
	"wieso",
	"will",
	"willst",
	"wir",
	"wird",
	"wirklich",
	"wirst",
	"wissen",
	"wo",
	"woher",
	"wohin",
	"wohl",
	"wollen",
	"wollt",
	"wollte",
	"wollten",
	"worden",
	"wurde",
	"wurden",
	"während",
	"währenddem",
	"währenddessen",
	"wäre",
	"würde",
	"würden",
	"x",
	"y",
	"z",
	"z.b",
	"zehn",
	"zehnte",
	"zehnten",
	"zehnter",
	"zehntes",
	"zeit",
	"zu",
	"zuerst",
	"zugleich",
	"zum",
	"zunächst",
	"zur",
	"zurück",
	"zusammen",
	"zwanzig",
	"zwar",
	"zwei",
	"zweite",
	"zweiten",
	"zweiter",
	"zweites",
	"zwischen",
	"zwölf",
	"über",
	"überhaupt",
	"übrigens"
];
var require$$0$1 = {
	de: de};

/*
Copyright (c) 2011, Chris Umbel, Martijn de Boer

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/
var aggressive_tokenizer_de;
var hasRequiredAggressive_tokenizer_de;
function requireAggressive_tokenizer_de() {
  if (hasRequiredAggressive_tokenizer_de) return aggressive_tokenizer_de;
  hasRequiredAggressive_tokenizer_de = 1;
  const Tokenizer = requireTokenizer();
  class AggressiveTokenizer extends Tokenizer {
    tokenize(text) {
      // break a string up into an array of tokens by anything non-word
      return this.trim(text.split(/[^a-zA-Z0-9ßäöü_'-]+/));
    }
  }
  aggressive_tokenizer_de = AggressiveTokenizer;
  return aggressive_tokenizer_de;
}

var stemmer_de;
var hasRequiredStemmer_de;
function requireStemmer_de() {
  if (hasRequiredStemmer_de) return stemmer_de;
  hasRequiredStemmer_de = 1;
  const stopwords = require$$0$1;
  const englishStopWords = stopwords.de;
  const Tokenizer = requireAggressive_tokenizer_de();
  class Stemmer {
    stem(token) {
      return token;
    }
    tokenizeAndStem(text, keepStops) {
      const stemmedTokens = [];
      const that = this;
      new Tokenizer().tokenize(text).forEach(function (token) {
        if (keepStops || englishStopWords.indexOf(token) === -1) {
          let resultToken = token.toLowerCase();
          // if (resultToken.match(new RegExp('[a-záéíóúüñ0-9]+', 'gi'))) {
          if (resultToken.match(/[a-záéíóúüñ0-9]+/gi)) {
            resultToken = that.stem(resultToken);
          }
          stemmedTokens.push(resultToken);
        }
      });
      return stemmedTokens;
    }
  }
  stemmer_de = Stemmer;
  return stemmer_de;
}

/*
 * Original author: Joder Illi
 * Integration in Natural by Hugo W.L. ter Doest
 *
 * Copyright (c) 2010, FormBlitz AG
 * All rights reserved.
 * Implementation of the stemming algorithm from http://snowball.tartarus.org/algorithms/german/stemmer.html
 * Copyright of the algorithm is: Copyright (c) 2001, Dr Martin Porter and can be found at http://snowball.tartarus.org/license.php
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, is covered by the standard BSD license.
 *
*/
var porter_stemmer_de;
var hasRequiredPorter_stemmer_de;
function requirePorter_stemmer_de() {
  if (hasRequiredPorter_stemmer_de) return porter_stemmer_de;
  hasRequiredPorter_stemmer_de = 1;
  const Stemmer = requireStemmer_de();
  const PorterStemmer = new Stemmer();
  PorterStemmer.stem = stemm;
  porter_stemmer_de = PorterStemmer;

  /* by Joder Illi, Snowball mailing list */
  function stemm(word) {
    /*
    Put u and y between vowels into upper case
    */
    word = word.replace(/([aeiouyäöü])u([aeiouyäöü])/g, '$1U$2');
    word = word.replace(/([aeiouyäöü])y([aeiouyäöü])/g, '$1Y$2');

    /*
    and then do the following mappings,
    (a) replace ß with ss,
    (a) replace ae with ä, Not doing these,
    have trouble with diphtongs
    (a) replace oe with ö, Not doing these,
    have trouble with diphtongs
    (a) replace ue with ü unless preceded by q. Not doing these,
    have trouble with diphtongs
    So in quelle, ue is not mapped to ü because it follows q, and in
    feuer it is not mapped because the first part of the rule changes it to
    feUer, so the u is not found.
    */
    word = word.replace(/ß/g, 'ss');
    // word = word.replace(/ae/g, 'ä');
    // word = word.replace(/oe/g, 'ö');
    // word = word.replace(/([^q])ue/g, '$1ü');

    /*
    R1 and R2 are first set up in the standard way (see the note on R1
    and R2), but then R1 is adjusted so that the region before it contains at
    least 3 letters.
    R1 is the region after the first non-vowel following a vowel, or is
    the null region at the end of the word if there is no such non-vowel.
    R2 is the region after the first non-vowel following a vowel in R1,
    or is the null region at the end of the word if there is no such non-vowel.
    */

    let r1Index = word.search(/[aeiouyäöü][^aeiouyäöü]/);
    let r1 = '';
    if (r1Index !== -1) {
      r1Index += 2;
      r1 = word.substring(r1Index);
    }
    let r2Index = -1;
    // let r2 = ''

    if (r1Index !== -1) {
      r2Index = r1.search(/[aeiouyäöü][^aeiouyäöü]/);
      if (r2Index !== -1) {
        r2Index += 2;
        // r2 = r1.substring(r2Index)
        r2Index += r1Index;
      }
    }
    if (r1Index !== -1 && r1Index < 3) {
      r1Index = 3;
      r1 = word.substring(r1Index);
    }

    /*
    Define a valid s-ending as one of b, d, f, g, h, k, l, m, n, r or t.
    Define a valid st-ending as the same list, excluding letter r.
    */

    /*
    Do each of steps 1, 2 and 3.
    */

    /*
    Step 1:
    Search for the longest among the following suffixes,
    (a) em ern er
    (b) e en es
    (c) s (preceded by a valid s-ending)
    */
    const a1Index = word.search(/(em|ern|er)$/g);
    const b1Index = word.search(/(e|en|es)$/g);
    let c1Index = word.search(/([bdfghklmnrt]s)$/g);
    if (c1Index !== -1) {
      c1Index++;
    }
    let index1 = 10000;
    let optionUsed1 = '';
    if (a1Index !== -1 && a1Index < index1) {
      optionUsed1 = 'a';
      index1 = a1Index;
    }
    if (b1Index !== -1 && b1Index < index1) {
      optionUsed1 = 'b';
      index1 = b1Index;
    }
    if (c1Index !== -1 && c1Index < index1) {
      optionUsed1 = 'c';
      index1 = c1Index;
    }

    /*
    and delete if in R1. (Of course the letter of the valid s-ending is
    not necessarily in R1.) If an ending of group (b) is deleted, and the ending
    is preceded by niss, delete the final s.
    (For example, äckern -> äck, ackers -> acker, armes -> arm,
    bedürfnissen -> bedürfnis)
    */

    if (index1 !== 10000 && r1Index !== -1) {
      if (index1 >= r1Index) {
        word = word.substring(0, index1);
        if (optionUsed1 === 'b') {
          if (word.search(/niss$/) !== -1) {
            word = word.substring(0, word.length - 1);
          }
        }
      }
    }

    /*
    Step 2:
    Search for the longest among the following suffixes,
    (a) en er est
    (b) st (preceded by a valid st-ending, itself preceded by at least 3
    letters)
    */

    const a2Index = word.search(/(en|er|est)$/g);
    let b2Index = word.search(/(.{3}[bdfghklmnt]st)$/g);
    if (b2Index !== -1) {
      b2Index += 4;
    }
    let index2 = 10000;
    // const optionUsed2 = ''
    if (a2Index !== -1 && a2Index < index2) {
      // optionUsed2 = 'a'
      index2 = a2Index;
    }
    if (b2Index !== -1 && b2Index < index2) {
      // optionUsed2 = 'b'
      index2 = b2Index;
    }

    /*
    and delete if in R1.
    (For example, derbsten -> derbst by step 1, and derbst -> derb by
    step 2, since b is a valid st-ending, and is preceded by just 3 letters)
    */

    if (index2 !== 10000 && r1Index !== -1) {
      if (index2 >= r1Index) {
        word = word.substring(0, index2);
      }
    }

    /*
    Step 3: d-suffixes (*)
    Search for the longest among the following suffixes, and perform the
    action indicated.
    end ung
    delete if in R2
    if preceded by ig, delete if in R2 and not preceded by e
    ig ik isch
    delete if in R2 and not preceded by e
    lich heit
    delete if in R2
    if preceded by er or en, delete if in R1
    keit
    delete if in R2
    if preceded by lich or ig, delete if in R2
    */

    const a3Index = word.search(/(end|ung)$/g);
    let b3Index = word.search(/[^e](ig|ik|isch)$/g);
    const c3Index = word.search(/(lich|heit)$/g);
    const d3Index = word.search(/(keit)$/g);
    if (b3Index !== -1) {
      b3Index++;
    }
    let index3 = 10000;
    let optionUsed3 = '';
    if (a3Index !== -1 && a3Index < index3) {
      optionUsed3 = 'a';
      index3 = a3Index;
    }
    if (b3Index !== -1 && b3Index < index3) {
      optionUsed3 = 'b';
      index3 = b3Index;
    }
    if (c3Index !== -1 && c3Index < index3) {
      optionUsed3 = 'c';
      index3 = c3Index;
    }
    if (d3Index !== -1 && d3Index < index3) {
      optionUsed3 = 'd';
      index3 = d3Index;
    }
    if (index3 !== 10000 && r2Index !== -1) {
      if (index3 >= r2Index) {
        word = word.substring(0, index3);
        let optionIndex = -1;
        // const optionSubsrt = ''
        if (optionUsed3 === 'a') {
          optionIndex = word.search(/[^e](ig)$/);
          if (optionIndex !== -1) {
            optionIndex++;
            if (optionIndex >= r2Index) {
              word = word.substring(0, optionIndex);
            }
          }
        } else if (optionUsed3 === 'c') {
          optionIndex = word.search(/(er|en)$/);
          if (optionIndex !== -1) {
            if (optionIndex >= r1Index) {
              word = word.substring(0, optionIndex);
            }
          }
        } else if (optionUsed3 === 'd') {
          optionIndex = word.search(/(lich|ig)$/);
          if (optionIndex !== -1) {
            if (optionIndex >= r2Index) {
              word = word.substring(0, optionIndex);
            }
          }
        }
      }
    }

    /*
    Finally,
    turn U and Y back into lower case, and remove the umlaut accent from
    a, o and u.
    */
    word = word.replace(/U/g, 'u');
    word = word.replace(/Y/g, 'y');
    word = word.replace(/ä/g, 'a');
    word = word.replace(/ö/g, 'o');
    word = word.replace(/ü/g, 'u');
    return word;
  }
  return porter_stemmer_de;
}

var stopwords_uk = {};

var hasRequiredStopwords_uk;
function requireStopwords_uk() {
  if (hasRequiredStopwords_uk) return stopwords_uk;
  hasRequiredStopwords_uk = 1;

  // a list of commonly used words that have little meaning and can be excluded
  // from analysis.
  const words = ['о', 'після', 'всі', 'також', 'і', 'інші', 'все', 'як', 'в', 'бути', 'тому', 'був', 'до', 'є', 'між', 'вся', 'але', 'від', 'іди', 'можу', 'підійди', 'міг', 'робив', 'роблю', 'кожен', 'для', 'звідки', 'мав', 'він', 'має', 'її', 'тут', 'його', 'якщо', 'у', 'воно', 'за', 'робити', 'багато', 'може бути', 'самий', 'повинен', 'мій', 'ніколи', 'зараз', 'із', 'на', 'тільки', 'або', 'наше', 'поза', 'кінець', 'сказав', 'сказала', 'бачив', 'з', 'трохи', 'все ще', 'так', 'потім', 'той', 'їх', 'там', 'цей', 'вони', 'те', 'через', 'теж', 'під', 'над', 'дуже', 'був', 'добре', 'що', 'де', 'який', 'доки', 'хто', 'хотів би', 'а', 'б', 'в', 'г', 'ґ', 'д', 'е', 'є', 'ж', 'з', 'и', 'і', 'й', 'ї', 'к', 'л', 'м', 'н', 'o', 'п', 'р', 'с', 'т', 'у', 'ф', 'х', 'ц', 'ч', 'ш', 'щ', 'ь', 'ю', 'я', '$', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '_'];

  // tell the world about the noise words.
  stopwords_uk.words = words;
  return stopwords_uk;
}

/*
Copyright (c) 2023, Pluto Rotegott
Tokenizer for Ukrainian

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/
var aggressive_tokenizer_uk;
var hasRequiredAggressive_tokenizer_uk;
function requireAggressive_tokenizer_uk() {
  if (hasRequiredAggressive_tokenizer_uk) return aggressive_tokenizer_uk;
  hasRequiredAggressive_tokenizer_uk = 1;
  const Tokenizer = requireTokenizer();
  class AggressiveTokenizer extends Tokenizer {
    withoutEmpty(array) {
      return array.filter(function (a) {
        return a;
      });
    }
    clearText(text) {
      return text.replace(/[^a-zа-яґєії0-9]/gi, ' ').replace(/[\s\n]+/g, ' ').trim();
    }
    tokenize(text) {
      // break a string up into an array of tokens by anything non-word
      return this.withoutEmpty(this.clearText(text).split(' '));
    }
  }
  aggressive_tokenizer_uk = AggressiveTokenizer;
  return aggressive_tokenizer_uk;
}

var stemmer_uk;
var hasRequiredStemmer_uk;
function requireStemmer_uk() {
  if (hasRequiredStemmer_uk) return stemmer_uk;
  hasRequiredStemmer_uk = 1;
  const stopwords = requireStopwords_uk();
  const Tokenizer = requireAggressive_tokenizer_uk();
  stemmer_uk = function () {
    const stemmer = this;
    stemmer.stem = function (token) {
      return token;
    };
    stemmer.tokenizeAndStem = function (text, keepStops) {
      const stemmedTokens = [];
      new Tokenizer().tokenize(text).forEach(function (token) {
        if (keepStops || stopwords.words.indexOf(token) === -1) {
          let resultToken = token.toLowerCase();
          if (resultToken.match(/[а-яґєії0-9]+/gi)) {
            resultToken = stemmer.stem(resultToken);
          }
          stemmedTokens.push(resultToken);
        }
      });
      return stemmedTokens;
    };
  };
  return stemmer_uk;
}

var porter_stemmer_uk;
var hasRequiredPorter_stemmer_uk;
function requirePorter_stemmer_uk() {
  if (hasRequiredPorter_stemmer_uk) return porter_stemmer_uk;
  hasRequiredPorter_stemmer_uk = 1;
  const Stemmer = requireStemmer_uk();
  const PorterStemmer = new Stemmer();
  porter_stemmer_uk = PorterStemmer;
  function attemptReplacePatterns(token, patterns) {
    let replacement = null;
    let i = 0;
    let isReplaced = false;
    while (i < patterns.length && !isReplaced) {
      if (patterns[i][0].test(token)) {
        replacement = token.replace(patterns[i][0], patterns[i][1]);
        isReplaced = true;
      }
      i++;
    }
    return replacement;
  }
  function perfectiveGerund(token) {
    const result = attemptReplacePatterns(token, [[/[ая]в(ши|шись)$/g, ''], [/(ив|ивши|ившись)$/g, '']]);
    return result;
  }
  function adjectival(token) {
    let result = adjective(token);
    if (result != null) {
      const pariticipleResult = participle(result);
      result = pariticipleResult || result;
    }
    return result;
  }
  function adjective(token) {
    const result = attemptReplacePatterns(token, [[/(ими|ій|ий|а|е|ова|ове|ів|є|їй|єє|еє|я|ім|ем|им|ім|их|іх|ою|йми|іми|у|ю|ого|ому|ої)$/g, '']]);
    return result;
  }
  function participle(token) {
    // edit
    const result = attemptReplacePatterns(token, [[/(ий|ого|ому|им|ім|а|ій|у|ою|ій|і|их|йми|их)$/g, '']]);
    return result;
  }
  function reflexive(token) {
    const result = attemptReplacePatterns(token, [[/(с[яьи])$/g, '']]);
    return result;
  }
  function verb(token) {
    const result = attemptReplacePatterns(token, [[/(сь|ся|ив|ать|ять|у|ю|ав|али|учи|ячи|вши|ши|е|ме|ати|яти|є)$/g, '']]);
    return result;
  }
  function noun(token) {
    const result = attemptReplacePatterns(token, [[/(а|ев|ов|е|ями|ами|еи|и|ей|ой|ий|й|иям|ям|ием|ем|ам|ом|о|у|ах|иях|ях|ы|ь|ию|ью|ю|ия|ья|я|і|ові|ї|ею|єю|ою|є|еві|ем|єм|ів|їв|ю)$/g, '']]);
    return result;
  }
  function superlative(token) {
    const result = attemptReplacePatterns(token, [[/(ейш|ейше)$/g, '']]);
    return result;
  }
  function derivational(token) {
    const result = attemptReplacePatterns(token, [[/[^аеиоуюяіїє][аеиоуюяіїє]+[^аеиоуюяіїє]+[аеиоуюяіїє].*(?<=о)сть?$/g, '']]);
    return result;
  }

  // perform full stemming algorithm on a single word
  PorterStemmer.stem = function (token) {
    token = token.toLowerCase();
    const volwesRegexp = /^(.*?[аеиоуюяіїє])(.*)$/g;
    let RV = volwesRegexp.exec(token);
    if (!RV || RV.length < 3) {
      return token;
    }
    const head = RV[1];
    RV = RV[2];
    volwesRegexp.lastIndex = 0;
    const R2 = volwesRegexp.exec(RV);
    let result = perfectiveGerund(RV);
    if (result === null) {
      const resultReflexive = reflexive(RV) || RV;
      result = adjectival(resultReflexive);
      if (result === null) {
        result = verb(resultReflexive);
        if (result === null) {
          result = noun(resultReflexive);
          if (result === null) {
            result = resultReflexive;
          }
        }
      }
    }
    result = result.replace(/и$/g, '');
    let derivationalResult = result;
    if (R2 && R2[2]) {
      derivationalResult = derivational(R2[2]);
      if (derivationalResult != null) {
        derivationalResult = derivational(result);
      } else {
        derivationalResult = result;
      }
    }
    let superlativeResult = superlative(derivationalResult) || derivationalResult;
    superlativeResult = superlativeResult.replace(/(н)н/g, '$1');
    superlativeResult = superlativeResult.replace(/ь$/g, '');
    return head + superlativeResult;
  };
  return porter_stemmer_uk;
}

var stopwords_ru = {};

/*
Copyright (c) 2011, Polyakov Vladimir, Chris Umbel

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/
var hasRequiredStopwords_ru;
function requireStopwords_ru() {
  if (hasRequiredStopwords_ru) return stopwords_ru;
  hasRequiredStopwords_ru = 1;

  // a list of commonly used words that have little meaning and can be excluded
  // from analysis.
  const words = ['о', 'после', 'все', 'также', 'и', 'другие', 'все', 'как', 'во', 'быть', 'потому', 'был', 'до', 'являюсь', 'между', 'все', 'но', 'от', 'иди', 'могу', 'подойди', 'мог', 'делал', 'делаю', 'каждый', 'для', 'откуда', 'иметь', 'имел', 'он', 'имеет', 'её', 'здесь', 'его', 'как', 'если', 'в', 'оно', 'за', 'делать', 'много', 'я', 'может быть', 'более', 'самый', 'должен', 'мой', 'никогда', 'сейчас', 'из', 'на', 'только', 'или', 'другой', 'другая', 'другое', 'наше', 'вне', 'конец', 'сказал', 'сказала', 'также', 'видел', 'c', 'немного', 'все еще', 'так', 'затем', 'тот', 'их', 'там', 'этот', 'они', 'те', 'через', 'тоже', 'под', 'над', 'очень', 'был', 'путь', 'мы', 'хорошо', 'что', 'где', 'который', 'пока', 'кто', 'с кем', 'хотел бы', 'ты', 'твои', 'а', 'б', 'в', 'г', 'д', 'е', 'ё', 'ж', 'з', 'и', 'й', 'к', 'л', 'м', 'н', 'o', 'п', 'р', 'с', 'т', 'у', 'ф', 'х', 'ц', 'ч', 'ш', 'щ', 'ъ', 'ы', 'ь', 'э', 'ю', 'я', '$', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '_'];

  // tell the world about the noise words.
  stopwords_ru.words = words;
  return stopwords_ru;
}

/*
Copyright (c) 2011, Chris Umbel

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/
var aggressive_tokenizer_ru;
var hasRequiredAggressive_tokenizer_ru;
function requireAggressive_tokenizer_ru() {
  if (hasRequiredAggressive_tokenizer_ru) return aggressive_tokenizer_ru;
  hasRequiredAggressive_tokenizer_ru = 1;
  const Tokenizer = requireTokenizer();
  class AggressiveTokenizer extends Tokenizer {
    withoutEmpty(array) {
      return array.filter(function (a) {
        return a;
      });
    }
    clearText(text) {
      return text.replace(/[^a-zа-яё0-9]/gi, ' ').replace(/[\s\n]+/g, ' ').trim();
    }
    tokenize(text) {
      // break a string up into an array of tokens by anything non-word
      return this.withoutEmpty(this.clearText(text).split(' '));
    }
  }
  aggressive_tokenizer_ru = AggressiveTokenizer;
  return aggressive_tokenizer_ru;
}

/*
Copyright (c) 2012, Polyakov Vladimir, Chris Umbel

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/
var stemmer_ru;
var hasRequiredStemmer_ru;
function requireStemmer_ru() {
  if (hasRequiredStemmer_ru) return stemmer_ru;
  hasRequiredStemmer_ru = 1;
  const stopwords = requireStopwords_ru();
  const Tokenizer = requireAggressive_tokenizer_ru();
  stemmer_ru = function () {
    const stemmer = this;
    stemmer.stem = function (token) {
      return token;
    };
    stemmer.tokenizeAndStem = function (text, keepStops) {
      const stemmedTokens = [];
      new Tokenizer().tokenize(text).forEach(function (token) {
        if (keepStops || stopwords.words.indexOf(token) === -1) {
          let resultToken = token.toLowerCase();
          // if (resultToken.match(new RegExp('[а-яё0-9]+', 'gi'))) {
          if (resultToken.match(/[а-яё0-9]+/gi)) {
            resultToken = stemmer.stem(resultToken);
          }
          stemmedTokens.push(resultToken);
        }
      });
      return stemmedTokens;
    };

    /*
    stemmer.attach = function () {
      String.prototype.stem = function () {
        return stemmer.stem(this)
      }
       String.prototype.tokenizeAndStem = function (keepStops) {
        return stemmer.tokenizeAndStem(this, keepStops)
      }
    }
    */
  };
  return stemmer_ru;
}

/*
Copyright (c) 2012, Polyakov Vladimir, Chris Umbel

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/
var porter_stemmer_ru;
var hasRequiredPorter_stemmer_ru;
function requirePorter_stemmer_ru() {
  if (hasRequiredPorter_stemmer_ru) return porter_stemmer_ru;
  hasRequiredPorter_stemmer_ru = 1;
  const Stemmer = requireStemmer_ru();
  const PorterStemmer = new Stemmer();
  porter_stemmer_ru = PorterStemmer;
  function attemptReplacePatterns(token, patterns) {
    let replacement = null;
    let i = 0;
    let isReplaced = false;
    while (i < patterns.length && !isReplaced) {
      if (patterns[i][0].test(token)) {
        replacement = token.replace(patterns[i][0], patterns[i][1]);
        isReplaced = true;
      }
      i++;
    }
    return replacement;
  }
  function perfectiveGerund(token) {
    const result = attemptReplacePatterns(token, [[/[ая]в(ши|шись)$/g, ''], [/(ив|ивши|ившись|ывши|ывшись|ыв)$/g, '']]);
    return result;
  }
  function adjectival(token) {
    let result = adjective(token);
    if (result != null) {
      const pariticipleResult = participle(result);
      result = pariticipleResult || result;
    }
    return result;
  }
  function adjective(token) {
    const result = attemptReplacePatterns(token, [[/(ее|ие|ые|ое|ими|ыми|ей|ий|ый|ой|ем|им|ым|ом|его|ого|ему|ому|их|ых|ую|юю|ая|яя|ою|ею)$/g, '']]);
    return result;
  }
  function participle(token) {
    const result = attemptReplacePatterns(token, [[/([ая])(ем|нн|вш|ющ|щ)$/g, '$1'], [/(ивш|ывш|ующ)$/g, '']]);
    return result;
  }
  function reflexive(token) {
    const result = attemptReplacePatterns(token, [[/(ся|сь)$/g, '']]);
    return result;
  }
  function verb(token) {
    const result = attemptReplacePatterns(token, [[/([ая])(ла|на|ете|йте|ли|й|л|ем|н|ло|но|ет|ют|ны|ть|ешь|нно)$/g, '$1'], [/(ила|ыла|ена|ейте|уйте|ите|или|ыли|ей|уй|ил|ыл|им|ым|ен|ило|ыло|ено|ят|ует|ит|ыт|ены|ить|ыть|ишь|ую|ю)$/g, '']]);
    return result;
  }
  function noun(token) {
    const result = attemptReplacePatterns(token, [[/(а|ев|ов|ие|ье|е|иями|ями|ами|еи|ии|и|ией|ей|ой|ий|й|иям|ям|ием|ем|ам|ом|о|у|ах|иях|ях|ы|ь|ию|ью|ю|ия|ья|я)$/g, '']]);
    return result;
  }
  function superlative(token) {
    const result = attemptReplacePatterns(token, [[/(ейш|ейше)$/g, '']]);
    return result;
  }
  function derivational(token) {
    const result = attemptReplacePatterns(token, [[/(ост|ость)$/g, '']]);
    return result;
  }

  // perform full stemming algorithm on a single word
  PorterStemmer.stem = function (token) {
    token = token.toLowerCase().replace(/ё/g, 'е');
    const volwesRegexp = /^(.*?[аеиоюяуыиэ])(.*)$/g;
    let RV = volwesRegexp.exec(token);
    if (!RV || RV.length < 3) {
      return token;
    }
    const head = RV[1];
    RV = RV[2];
    volwesRegexp.lastIndex = 0;
    const R2 = volwesRegexp.exec(RV);
    let result = perfectiveGerund(RV);
    if (result === null) {
      const resultReflexive = reflexive(RV) || RV;
      result = adjectival(resultReflexive);
      if (result === null) {
        result = verb(resultReflexive);
        if (result === null) {
          result = noun(resultReflexive);
          if (result === null) {
            result = resultReflexive;
          }
        }
      }
    }
    result = result.replace(/и$/g, '');
    let derivationalResult = result;
    if (R2 && R2[2]) {
      derivationalResult = derivational(R2[2]);
      if (derivationalResult != null) {
        derivationalResult = derivational(result);
      } else {
        derivationalResult = result;
      }
    }
    let superlativeResult = superlative(derivationalResult) || derivationalResult;
    superlativeResult = superlativeResult.replace(/(н)н/g, '$1');
    superlativeResult = superlativeResult.replace(/ь$/g, '');
    return head + superlativeResult;
  };
  return porter_stemmer_ru;
}

var stopwords_es = {};

/*
Copyright (c) 2011, David Przybilla, Chris Umbel

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/
var hasRequiredStopwords_es;
function requireStopwords_es() {
  if (hasRequiredStopwords_es) return stopwords_es;
  hasRequiredStopwords_es = 1;

  // a list of commonly used words that have little meaning and can be excluded
  // from analysis.
  const words = ['a', 'un', 'el', 'ella', 'y', 'sobre', 'de', 'la', 'que', 'en', 'los', 'del', 'se', 'las', 'por', 'un', 'para', 'con', 'no', 'una', 'su', 'al', 'lo', 'como', 'más', 'pero', 'sus', 'le', 'ya', 'o', 'porque', 'cuando', 'muy', 'sin', 'sobre', 'también', 'me', 'hasta', 'donde', 'quien', 'desde', 'nos', 'durante', 'uno', 'ni', 'contra', 'ese', 'eso', 'mí', 'qué', 'otro', 'él', 'cual', 'poco', 'mi', 'tú', 'te', 'ti', 'sí', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '_'];

  // tell the world about the noise words.
  stopwords_es.words = words;
  return stopwords_es;
}

/*
Copyright (c) 2011, Chris Umbel,David Przybilla

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/
var aggressive_tokenizer_es;
var hasRequiredAggressive_tokenizer_es;
function requireAggressive_tokenizer_es() {
  if (hasRequiredAggressive_tokenizer_es) return aggressive_tokenizer_es;
  hasRequiredAggressive_tokenizer_es = 1;
  const Tokenizer = requireTokenizer();
  class AggressiveTokenizer extends Tokenizer {
    tokenize(text) {
      // break a string up into an array of tokens by anything non-word
      return this.trim(text.split(/[^a-zA-Zá-úÁ-ÚñÑüÜ]+/));
    }
  }
  aggressive_tokenizer_es = AggressiveTokenizer;
  return aggressive_tokenizer_es;
}

/*
Copyright (c) 2012, 2018 David Przybilla, Chris Umbel, Hugo W.L. ter Doest

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/
var stemmer_es;
var hasRequiredStemmer_es;
function requireStemmer_es() {
  if (hasRequiredStemmer_es) return stemmer_es;
  hasRequiredStemmer_es = 1;
  const stopwords = requireStopwords_es();
  const Tokenizer = requireAggressive_tokenizer_es();
  class Stemmer {
    stem(token) {
      return token;
    }
    tokenizeAndStem(text, keepStops) {
      const stemmedTokens = [];
      const that = this;
      new Tokenizer().tokenize(text).forEach(function (token) {
        if (keepStops || stopwords.words.indexOf(token) === -1) {
          let resultToken = token.toLowerCase();
          // if (resultToken.match(new RegExp('[a-záéíóúüñ0-9]+', 'gi'))) {
          if (resultToken.match(/[a-záéíóúüñ0-9]+/gi)) {
            resultToken = that.stem(resultToken);
          }
          stemmedTokens.push(resultToken);
        }
      });
      return stemmedTokens;
    }

    /*
    attach () {
      const that = this
      String.prototype.stem = function () {
        return that.stem(this)
      }
       String.prototype.tokenizeAndStem = function (keepStops) {
        return that.tokenizeAndStem(this, keepStops)
      }
    }
    */
  }
  stemmer_es = Stemmer;
  return stemmer_es;
}

/*
  Copyright (c) 2018, Domingo Martín Mancera

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  THE SOFTWARE.
*/
var porter_stemmer_es;
var hasRequiredPorter_stemmer_es;
function requirePorter_stemmer_es() {
  if (hasRequiredPorter_stemmer_es) return porter_stemmer_es;
  hasRequiredPorter_stemmer_es = 1;
  const Stemmer = requireStemmer_es();

  // Inherit from the utility class in stemmer_es
  class PorterStemmer extends Stemmer {
    isVowel(c) {
      const regex = /[aeiouáéíóú]/gi;
      return regex.test(c);
    }
    nextVowelPosition(word, start = 0) {
      const length = word.length;
      for (let position = start; position < length; position++) {
        if (this.isVowel(word[position])) {
          return position;
        }
      }
      return length;
    }
    nextConsonantPosition(word, start = 0) {
      const length = word.length;
      for (let position = start; position < length; position++) {
        if (!this.isVowel(word[position])) {
          return position;
        }
      }
      return length;
    }
    endsIn(word, suffix) {
      if (word.length < suffix.length) {
        return false;
      }
      return word.slice(-suffix.length) === suffix;
    }
    endsInArr(word, suffixes) {
      const matches = [];
      for (const i in suffixes) {
        if (this.endsIn(word, suffixes[i])) {
          matches.push(suffixes[i]);
        }
      }
      const longest = matches.sort(function (a, b) {
        return b.length - a.length;
      })[0];
      if (longest) {
        return longest;
      } else {
        return '';
      }
    }
    removeAccent(word) {
      const accentedVowels = ['á', 'é', 'í', 'ó', 'ú'];
      const vowels = ['a', 'e', 'i', 'o', 'u'];
      for (const i in accentedVowels) {
        word = word.replace(accentedVowels[i], vowels[i]);
      }
      return word;
    }
    stem(word) {
      const length = word.length;
      word.toLowerCase();
      if (length < 2) {
        return this.removeAccent(word);
      }
      let r1, r2, rv;
      r1 = length;
      r2 = length;
      rv = length;

      // R1 is the region after the first non-vowel following a vowel, or is the null region
      // at the end of the word if there is no such non-vowel.
      for (let i = 0; i < length - 1 && r1 === length; i++) {
        if (this.isVowel(word[i]) && !this.isVowel(word[i + 1])) {
          r1 = i + 2;
        }
      }

      // R2 is the region after the first non-vowel following a vowel in R1,
      // or is the null region at the end of the word if there is no such non-vowel.
      for (let i = r1; i < length - 1 && r2 === length; i++) {
        if (this.isVowel(word[i]) && !this.isVowel(word[i + 1])) {
          r2 = i + 2;
        }
      }
      if (length > 3) {
        if (!this.isVowel(word[1])) {
          rv = this.nextVowelPosition(word, 2) + 1;
        } else if (this.isVowel(word[0]) && this.isVowel(word[1])) {
          rv = this.nextConsonantPosition(word, 2) + 1;
        } else {
          rv = 3;
        }
      }
      let r1Text = word.slice(r1);
      let r2Text = word.slice(r2);
      let rvText = word.slice(rv);
      const originalWord = word;

      // Step 0: Attached pronoun
      const pronounSuffix = ['me', 'se', 'sela', 'selo', 'selas', 'selos', 'la', 'le', 'lo', 'las', 'les', 'los', 'nos'];
      const pronounSuffixPre1 = ['iéndo', 'ándo', 'ár', 'ér', 'ír'];
      const pronounSuffixPre2 = ['iendo', 'ando', 'ar', 'er', 'ir'];
      const suffix = this.endsInArr(word, pronounSuffix);
      if (suffix !== '') {
        let preSuffix = this.endsInArr(rvText.slice(0, -suffix.length), pronounSuffixPre1);
        if (preSuffix !== '') {
          word = this.removeAccent(word.slice(0, -suffix.length));
        } else {
          preSuffix = this.endsInArr(rvText.slice(0, -suffix.length), pronounSuffixPre2);
          if (preSuffix !== '' || this.endsIn(word.slice(0, -suffix.length), 'uyendo')) {
            word = word.slice(0, -suffix.length);
          }
        }
      }
      if (word !== originalWord) {
        r1Text = word.slice(r1);
        r2Text = word.slice(r2);
        rvText = word.slice(rv);
      }
      const wordAfter0 = word;
      let suf = null;
      if ((suf = this.endsInArr(r2Text, ['anza', 'anzas', 'ico', 'ica', 'icos', 'icas', 'ismo', 'ismos', 'able', 'ables', 'ible', 'ibles', 'ista', 'istas', 'oso', 'osa', 'osos', 'osas', 'amiento', 'amientos', 'imiento', 'imientos'])) !== '') {
        word = word.slice(0, -suf.length);
      } else if ((suf = this.endsInArr(r2Text, ['icadora', 'icador', 'icación', 'icadoras', 'icadores', 'icaciones', 'icante', 'icantes', 'icancia', 'icancias', 'adora', 'ador', 'ación', 'adoras', 'adores', 'aciones', 'ante', 'antes', 'ancia', 'ancias'])) !== '') {
        word = word.slice(0, -suf.length);
      } else if ((suf = this.endsInArr(r2Text, ['logía', 'logías'])) !== '') {
        word = word.slice(0, -suf.length) + 'log';
      } else if ((suf = this.endsInArr(r2Text, ['ución', 'uciones'])) !== '') {
        word = word.slice(0, -suf.length) + 'u';
      } else if ((suf = this.endsInArr(r2Text, ['encia', 'encias'])) !== '') {
        word = word.slice(0, -suf.length) + 'ente';
      } else if ((suf = this.endsInArr(r2Text, ['ativamente', 'ivamente', 'osamente', 'icamente', 'adamente'])) !== '') {
        word = word.slice(0, -suf.length);
      } else if ((suf = this.endsInArr(r1Text, ['amente'])) !== '') {
        word = word.slice(0, -suf.length);
      } else if ((suf = this.endsInArr(r2Text, ['antemente', 'ablemente', 'iblemente', 'mente'])) !== '') {
        word = word.slice(0, -suf.length);
      } else if ((suf = this.endsInArr(r2Text, ['abilidad', 'abilidades', 'icidad', 'icidades', 'ividad', 'ividades', 'idad', 'idades'])) !== '') {
        word = word.slice(0, -suf.length);
      } else if ((suf = this.endsInArr(r2Text, ['ativa', 'ativo', 'ativas', 'ativos', 'iva', 'ivo', 'ivas', 'ivos'])) !== '') {
        word = word.slice(0, -suf.length);
      }
      if (word !== wordAfter0) {
        r1Text = word.slice(r1);
        r2Text = word.slice(r2);
        rvText = word.slice(rv);
      }
      const wordAfter1 = word;
      if (wordAfter0 === wordAfter1) {
        // Do step 2a if no ending was removed by step 1.
        suf = this.endsInArr(rvText, ['ya', 'ye', 'yan', 'yen', 'yeron', 'yendo', 'yo', 'yó', 'yas', 'yes', 'yais', 'yamos']);
        if (suf !== '' && word.slice(-suf.length - 1, -suf.length) === 'u') {
          word = word.slice(0, -suf.length);
        }
        if (word !== wordAfter1) {
          r1Text = word.slice(r1);
          r2Text = word.slice(r2);
          rvText = word.slice(rv);
        }
        const wordAfter2a = word;
        // Do Step 2b if step 2a was done, but failed to remove a suffix.
        if (wordAfter2a === wordAfter1) {
          if ((suf = this.endsInArr(rvText, ['arían', 'arías', 'arán', 'arás', 'aríais', 'aría', 'aréis', 'aríamos', 'aremos', 'ará', 'aré', 'erían', 'erías', 'erán', 'erás', 'eríais', 'ería', 'eréis', 'eríamos', 'eremos', 'erá', 'eré', 'irían', 'irías', 'irán', 'irás', 'iríais', 'iría', 'iréis', 'iríamos', 'iremos', 'irá', 'iré', 'aba', 'ada', 'ida', 'ía', 'ara', 'iera', 'ad', 'ed', 'id', 'ase', 'iese', 'aste', 'iste', 'an', 'aban', 'ían', 'aran', 'ieran', 'asen', 'iesen', 'aron', 'ieron', 'ado', 'ido', 'ando', 'iendo', 'ió', 'ar', 'er', 'ir', 'as', 'abas', 'adas', 'idas', 'ías', 'aras', 'ieras', 'ases', 'ieses', 'ís', 'áis', 'abais', 'íais', 'arais', 'ierais', '  aseis', 'ieseis', 'asteis', 'isteis', 'ados', 'idos', 'amos', 'ábamos', 'íamos', 'imos', 'áramos', 'iéramos', 'iésemos', 'ásemos'])) !== '') {
            word = word.slice(0, -suf.length);
          } else if ((suf = this.endsInArr(rvText, ['en', 'es', 'éis', 'emos'])) !== '') {
            word = word.slice(0, -suf.length);
            if (this.endsIn(word, 'gu')) {
              word = word.slice(0, -1);
            }
          }
        }
      }
      r1Text = word.slice(r1);
      r2Text = word.slice(r2);
      rvText = word.slice(rv);
      if ((suf = this.endsInArr(rvText, ['os', 'a', 'o', 'á', 'í', 'ó'])) !== '') {
        word = word.slice(0, -suf.length);
      } else if (this.endsInArr(rvText, ['e', 'é']) !== '') {
        word = word.slice(0, -1);
        rvText = word.slice(rv);
        if (this.endsIn(rvText, 'u') && this.endsIn(word, 'gu')) {
          word = word.slice(0, -1);
        }
      }
      return this.removeAccent(word);
    }
  }
  porter_stemmer_es = new PorterStemmer();
  return porter_stemmer_es;
}

var stopwords_it = {};

/*
Copyright (c) 2011, David Przybilla, Chris Umbel

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/
var hasRequiredStopwords_it;
function requireStopwords_it() {
  if (hasRequiredStopwords_it) return stopwords_it;
  hasRequiredStopwords_it = 1;

  // a list of commonly used words that have little meaning and can be excluded
  // from analysis.
  const words = ['ad', 'al', 'allo', 'ai', 'agli', 'all', 'agl', 'alla', 'alle', 'con', 'col', 'coi', 'da', 'dal', 'dallo', 'dai', 'dagli', 'dall', 'dagl', 'dalla', 'dalle', 'di', 'del', 'dello', 'dei', 'degli', 'dell', 'degl', 'della', 'delle', 'in', 'nel', 'nello', 'nei', 'negli', 'nell', 'negl', 'nella', 'nelle', 'su', 'sul', 'sullo', 'sui', 'sugli', 'sull', 'sugl', 'sulla', 'sulle', 'per', 'tra', 'contro', 'io', 'tu', 'lui', 'lei', 'noi', 'voi', 'loro', 'mio', 'mia', 'miei', 'mie', 'tuo', 'tua', 'tuoi', 'tue', 'suo', 'sua', 'suoi', 'sue', 'nostro', 'nostra', 'nostri', 'nostre', 'vostro', 'vostra', 'vostri', 'vostre', 'mi', 'ti', 'ci', 'vi', 'lo', 'la', 'li', 'le', 'gli', 'ne', 'il', 'un', 'uno', 'una', 'ma', 'ed', 'se', 'perché', 'anche', 'come', 'dov', 'dove', 'che', 'chi', 'cui', 'non', 'più', 'quale', 'quanto', 'quanti', 'quanta', 'quante', 'quello', 'quelli', 'quella', 'quelle', 'questo', 'questi', 'questa', 'queste', 'si', 'tutto', 'tutti', 'a', 'c', 'e', 'i', 'l', 'o', 'ho', 'hai', 'ha', 'abbiamo', 'avete', 'hanno', 'abbia', 'abbiate', 'abbiano', 'avrò', 'avrai', 'avrà', 'avremo', 'avrete', 'avranno', 'avrei', 'avresti', 'avrebbe', 'avremmo', 'avreste', 'avrebbero', 'avevo', 'avevi', 'aveva', 'avevamo', 'avevate', 'avevano', 'ebbi', 'avesti', 'ebbe', 'avemmo', 'aveste', 'ebbero', 'avessi', 'avesse', 'avessimo', 'avessero', 'avendo', 'avuto', 'avuta', 'avuti', 'avute', 'sono', 'sei', 'è', 'siamo', 'siete', 'sia', 'siate', 'siano', 'sarò', 'sarai', 'sarà', 'saremo', 'sarete', 'saranno', 'sarei', 'saresti', 'sarebbe', 'saremmo', 'sareste', 'sarebbero', 'ero', 'eri', 'era', 'eravamo', 'eravate', 'erano', 'fui', 'fosti', 'fu', 'fummo', 'foste', 'furono', 'fossi', 'fosse', 'fossimo', 'fossero', 'essendo', 'faccio', 'fai', 'facciamo', 'fanno', 'faccia', 'facciate', 'facciano', 'farò', 'farai', 'farà', 'faremo', 'farete', 'faranno', 'farei', 'faresti', 'farebbe', 'faremmo', 'fareste', 'farebbero', 'facevo', 'facevi', 'faceva', 'facevamo', 'facevate', 'facevano', 'feci', 'facesti', 'fece', 'facemmo', 'faceste', 'fecero', 'facessi', 'facesse', 'facessimo', 'facessero', 'facendo', 'sto', 'stai', 'sta', 'stiamo', 'stanno', 'stia', 'stiate', 'stiano', 'starò', 'starai', 'starà', 'staremo', 'starete', 'staranno', 'starei', 'staresti', 'starebbe', 'staremmo', 'stareste', 'starebbero', 'stavo', 'stavi', 'stava', 'stavamo', 'stavate', 'stavano', 'stetti', 'stesti', 'stette', 'stemmo', 'steste', 'stettero', 'stessi', 'stesse', 'stessimo', 'stessero', 'stando', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '_'];

  // tell the world about the noise words.
  stopwords_it.words = words;
  return stopwords_it;
}

/*
Copyright (c) 2011, Chris Umbel,David Przybilla

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/
var aggressive_tokenizer_it;
var hasRequiredAggressive_tokenizer_it;
function requireAggressive_tokenizer_it() {
  if (hasRequiredAggressive_tokenizer_it) return aggressive_tokenizer_it;
  hasRequiredAggressive_tokenizer_it = 1;
  const Tokenizer = requireTokenizer();
  class AggressiveTokenizer extends Tokenizer {
    tokenize(text) {
      // break a string up into an array of tokens by anything non-word
      return this.trim(text.split(/\W+/));
    }
  }
  aggressive_tokenizer_it = AggressiveTokenizer;
  return aggressive_tokenizer_it;
}

/*
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/
var stemmer_it;
var hasRequiredStemmer_it;
function requireStemmer_it() {
  if (hasRequiredStemmer_it) return stemmer_it;
  hasRequiredStemmer_it = 1;
  const stopwords = requireStopwords_it();
  const Tokenizer = requireAggressive_tokenizer_it();
  stemmer_it = function () {
    const stemmer = this;
    stemmer.stem = function (token) {
      return token;
    };
    stemmer.tokenizeAndStem = function (text, keepStops) {
      const stemmedTokens = [];
      new Tokenizer().tokenize(text).forEach(function (token) {
        if (keepStops || stopwords.words.indexOf(token) === -1) {
          let resultToken = token.toLowerCase();
          if (resultToken.match(/[a-zàèìòù0-9]/gi)) {
            resultToken = stemmer.stem(resultToken);
          }
          stemmedTokens.push(resultToken);
        }
      });
      return stemmedTokens;
    };

    /*
    stemmer.attach = function () {
      String.prototype.stem = function () {
        return stemmer.stem(this)
      }
        String.prototype.tokenizeAndStem = function (keepStops) {
        return stemmer.tokenizeAndStem(this, keepStops)
      }
    }
    */
  };
  return stemmer_it;
}

/*
Copyright (c) 2012, Leonardo Fenu, Chris Umbel

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/
var porter_stemmer_it;
var hasRequiredPorter_stemmer_it;
function requirePorter_stemmer_it() {
  if (hasRequiredPorter_stemmer_it) return porter_stemmer_it;
  hasRequiredPorter_stemmer_it = 1;
  const Stemmer = requireStemmer_it();
  const PorterStemmer = new Stemmer();
  porter_stemmer_it = PorterStemmer;
  function isVowel(letter) {
    return letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u' || letter === 'à' || letter === 'è' || letter === 'ì' || letter === 'ò' || letter === 'ù';
  }
  function getNextVowelPos(token, start) {
    start = start + 1;
    const length = token.length;
    for (let i = start; i < length; i++) {
      if (isVowel(token[i])) {
        return i;
      }
    }
    return length;
  }
  function getNextConsonantPos(token, start) {
    const length = token.length;
    for (let i = start; i < length; i++) {
      if (!isVowel(token[i])) return i;
    }
    return length;
  }
  function endsin(token, suffix) {
    if (token.length < suffix.length) return false;
    return token.slice(-suffix.length) === suffix;
  }
  function endsinArr(token, suffixes) {
    for (let i = 0; i < suffixes.length; i++) {
      if (endsin(token, suffixes[i])) return suffixes[i];
    }
    return '';
  }
  function replaceAcute(token) {
    let str = token.replace(/á/gi, 'à');
    str = str.replace(/é/gi, 'è');
    str = str.replace(/í/gi, 'ì');
    str = str.replace(/ó/gi, 'ò');
    str = str.replace(/ú/gi, 'ù');
    return str;
  }
  function vowelMarking(token) {
    function replacer(match, p1, p2, p3) {
      return p1 + p2.toUpperCase() + p3;
    }
    const str = token.replace(/([aeiou])(i|u)([aeiou])/g, replacer);
    return str;
  }

  // perform full stemming algorithm on a single word
  PorterStemmer.stem = function (token) {
    token = token.toLowerCase();
    token = replaceAcute(token);
    token = token.replace(/qu/g, 'qU');
    token = vowelMarking(token);
    if (token.length < 3) {
      return token;
    }
    let r1 = token.length;
    let r2 = token.length;
    let rv = token.length;
    const len = token.length;
    // R1 is the region after the first non-vowel following a vowel,
    for (let i = 0; i < token.length - 1 && r1 === len; i++) {
      if (isVowel(token[i]) && !isVowel(token[i + 1])) {
        r1 = i + 2;
      }
    }
    // Or is the null region at the end of the word if there is no such non-vowel.

    // R2 is the region after the first non-vowel following a vowel in R1
    for (let i = r1; i < token.length - 1 && r2 === len; i++) {
      if (isVowel(token[i]) && !isVowel(token[i + 1])) {
        r2 = i + 2;
      }
    }

    // Or is the null region at the end of the word if there is no such non-vowel.

    // If the second letter is a consonant, RV is the region after the next following vowel,

    // RV as follow

    if (len > 3) {
      if (!isVowel(token[1])) {
        // If the second letter is a consonant, RV is the region after the next following vowel
        rv = getNextVowelPos(token, 1) + 1;
      } else if (isVowel(token[0]) && isVowel(token[1])) {
        // or if the first two letters are vowels, RV is the region after the next consonant
        rv = getNextConsonantPos(token, 2) + 1;
      } else {
        // otherwise (consonant-vowel case) RV is the region after the third letter. But RV is the end of the word if these positions cannot be found.
        rv = 3;
      }
    }
    let r1txt = token.substring(r1);
    let r2txt = token.substring(r2);
    let rvtxt = token.substring(rv);
    const tokenOrig = token;

    // Step 0: Attached pronoun

    const pronounSuf = ['glieli', 'glielo', 'gliene', 'gliela', 'gliele', 'sene', 'tene', 'cela', 'cele', 'celi', 'celo', 'cene', 'vela', 'vele', 'veli', 'velo', 'vene', 'mela', 'mele', 'meli', 'melo', 'mene', 'tela', 'tele', 'teli', 'telo', 'gli', 'ci', 'la', 'le', 'li', 'lo', 'mi', 'ne', 'si', 'ti', 'vi'];
    const pronounSufPre1 = ['ando', 'endo'];
    const pronounSufPre2 = ['ar', 'er', 'ir'];
    let suf = endsinArr(token, pronounSuf);
    if (suf !== '') {
      const preSuff1 = endsinArr(rvtxt.slice(0, -suf.length), pronounSufPre1);
      const preSuff2 = endsinArr(rvtxt.slice(0, -suf.length), pronounSufPre2);
      if (preSuff1 !== '') {
        token = token.slice(0, -suf.length);
      }
      if (preSuff2 !== '') {
        token = token.slice(0, -suf.length) + 'e';
      }
    }
    if (token !== tokenOrig) {
      r1txt = token.substring(r1);
      r2txt = token.substring(r2);
      rvtxt = token.substring(rv);
    }
    const tokenAfter0 = token;

    // Step 1:  Standard suffix removal

    if ((suf = endsinArr(r2txt, ['ativamente', 'abilamente', 'ivamente', 'osamente', 'icamente'])) !== '') {
      token = token.slice(0, -suf.length); // delete
    } else if ((suf = endsinArr(r2txt, ['icazione', 'icazioni', 'icatore', 'icatori', 'azione', 'azioni', 'atore', 'atori'])) !== '') {
      token = token.slice(0, -suf.length); // delete
    } else if ((suf = endsinArr(r2txt, ['logia', 'logie'])) !== '') {
      token = token.slice(0, -suf.length) + 'log'; // replace with log
    } else if ((suf = endsinArr(r2txt, ['uzione', 'uzioni', 'usione', 'usioni'])) !== '') {
      token = token.slice(0, -suf.length) + 'u'; // replace with u
    } else if ((suf = endsinArr(r2txt, ['enza', 'enze'])) !== '') {
      token = token.slice(0, -suf.length) + 'ente'; // replace with ente
    } else if ((suf = endsinArr(rvtxt, ['amento', 'amenti', 'imento', 'imenti'])) !== '') {
      token = token.slice(0, -suf.length); // delete
    } else if ((suf = endsinArr(r1txt, ['amente'])) !== '') {
      token = token.slice(0, -suf.length); // delete
    } else if ((suf = endsinArr(r2txt, ['atrice', 'atrici', 'abile', 'abili', 'ibile', 'ibili', 'mente', 'ante', 'anti', 'anza', 'anze', 'iche', 'ichi', 'ismo', 'ismi', 'ista', 'iste', 'isti', 'istà', 'istè', 'istì', 'ico', 'ici', 'ica', 'ice', 'oso', 'osi', 'osa', 'ose'])) !== '') {
      token = token.slice(0, -suf.length); // delete
    } else if ((suf = endsinArr(r2txt, ['abilità', 'icità', 'ività', 'ità'])) !== '') {
      token = token.slice(0, -suf.length); // delete
    } else if ((suf = endsinArr(r2txt, ['icativa', 'icativo', 'icativi', 'icative', 'ativa', 'ativo', 'ativi', 'ative', 'iva', 'ivo', 'ivi', 'ive'])) !== '') {
      token = token.slice(0, -suf.length);
    }
    if (token !== tokenAfter0) {
      r1txt = token.substring(r1);
      r2txt = token.substring(r2);
      rvtxt = token.substring(rv);
    }
    const tokenAfter1 = token;

    // Step 2:  Verb suffixes

    if (tokenAfter0 === tokenAfter1) {
      if ((suf = endsinArr(rvtxt, ['erebbero', 'irebbero', 'assero', 'assimo', 'eranno', 'erebbe', 'eremmo', 'ereste', 'eresti', 'essero', 'iranno', 'irebbe', 'iremmo', 'ireste', 'iresti', 'iscano', 'iscono', 'issero', 'arono', 'avamo', 'avano', 'avate', 'eremo', 'erete', 'erono', 'evamo', 'evano', 'evate', 'iremo', 'irete', 'irono', 'ivamo', 'ivano', 'ivate', 'ammo', 'ando', 'asse', 'assi', 'emmo', 'enda', 'ende', 'endi', 'endo', 'erai', 'Yamo', 'iamo', 'immo', 'irai', 'irei', 'isca', 'isce', 'isci', 'isco', 'erei', 'uti', 'uto', 'ita', 'ite', 'iti', 'ito', 'iva', 'ivi', 'ivo', 'ono', 'uta', 'ute', 'ano', 'are', 'ata', 'ate', 'ati', 'ato', 'ava', 'avi', 'avo', 'erà', 'ere', 'erò', 'ete', 'eva', 'evi', 'evo', 'irà', 'ire', 'irò', 'ar', 'ir'])) !== '') {
        token = token.slice(0, -suf.length);
      }
    }
    r1txt = token.substring(r1);
    r2txt = token.substring(r2);
    rvtxt = token.substring(rv);

    // Always do step 3.

    if ((suf = endsinArr(rvtxt, ['ia', 'ie', 'ii', 'io', 'ià', 'iè', 'iì', 'iò', 'a', 'e', 'i', 'o', 'à', 'è', 'ì', 'ò'])) !== '') {
      token = token.slice(0, -suf.length);
    }
    r1txt = token.substring(r1);
    r2txt = token.substring(r2);
    rvtxt = token.substring(rv);
    if ((suf = endsinArr(rvtxt, ['ch'])) !== '') {
      token = token.slice(0, -suf.length) + 'c'; // replace with c
    } else if ((suf = endsinArr(rvtxt, ['gh'])) !== '') {
      token = token.slice(0, -suf.length) + 'g'; // replace with g
    }
    r1txt = token.substring(r1);
    r2txt = token.substring(r2);
    rvtxt = token.substring(rv);
    return token.toLowerCase();
  };
  return porter_stemmer_it;
}

var stopwords_no = {};

/*
Copyright (c) 2014, Kristoffer Brabrand

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/
var hasRequiredStopwords_no;
function requireStopwords_no() {
  if (hasRequiredStopwords_no) return stopwords_no;
  hasRequiredStopwords_no = 1;

  // a list of commonly used words that have little meaning and can be excluded
  // from analysis.
  const words = ['og', 'i', 'jeg', 'det', 'at', 'en', 'et', 'den', 'til', 'er', 'som', 'på', 'de', 'med', 'han', 'av', 'ikke', 'der', 'så', 'var', 'meg', 'seg', 'men', 'ett', 'har', 'om', 'vi', 'min', 'mitt', 'ha', 'hadde', 'hun', 'nå', 'over', 'da', 'ved', 'fra', 'du', 'ut', 'sin', 'dem', 'oss', 'opp', 'man', 'kan', 'hans', 'hvor', 'eller', 'hva', 'skal', 'selv', 'sjøl', 'her', 'alle', 'vil', 'bli', 'ble', 'blitt', 'kunne', 'inn', 'når', 'være', 'kom', 'noen', 'noe', 'ville', 'dere', 'som', 'deres', 'kun', 'ja', 'etter', 'ned', 'skulle', 'denne', 'for', 'deg', 'si', 'sine', 'sitt', 'mot', 'å', 'meget', 'hvorfor', 'dette', 'disse', 'uten', 'hvordan', 'ingen', 'din', 'ditt', 'blir', 'samme', 'hvilken', 'hvilke', 'sånn', 'inni', 'mellom', 'vår', 'hver', 'hvem', 'vors', 'hvis', 'både', 'bare', 'enn', 'fordi', 'før', 'mange', 'også', 'slik', 'vært', 'være', 'begge', 'siden', 'henne', 'hennar', 'hennes', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '_'];

  // tell the world about the noise words.
  stopwords_no.words = words;
  return stopwords_no;
}

var normalizer_no = {};

/*
 Copyright (c) 2014, Kristoffer Brabrand

 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights
 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions:

 The above copyright notice and this permission notice shall be included in
 all copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 THE SOFTWARE.
 */
var hasRequiredNormalizer_no;
function requireNormalizer_no() {
  if (hasRequiredNormalizer_no) return normalizer_no;
  hasRequiredNormalizer_no = 1;

  /**
   * Remove commonly used diacritic marks from a string as these
   * are not used in a consistent manner. Leave only ä, ö, ü.
   */
  const removeDiacritics = function (text) {
    text = text.replace('à', 'a');
    text = text.replace('À', 'A');
    text = text.replace('á', 'a');
    text = text.replace('Á', 'A');
    text = text.replace('â', 'a');
    text = text.replace('Â', 'A');
    text = text.replace('ç', 'c');
    text = text.replace('Ç', 'C');
    text = text.replace('è', 'e');
    text = text.replace('È', 'E');
    text = text.replace('é', 'e');
    text = text.replace('É', 'E');
    text = text.replace('ê', 'e');
    text = text.replace('Ê', 'E');
    text = text.replace('î', 'i');
    text = text.replace('Î', 'I');
    text = text.replace('ñ', 'n');
    text = text.replace('Ñ', 'N');
    text = text.replace('ó', 'o');
    text = text.replace('Ó', 'O');
    text = text.replace('ô', 'o');
    text = text.replace('Ô', 'O');
    text = text.replace('û', 'u');
    text = text.replace('Û', 'U');
    text = text.replace('š', 's');
    text = text.replace('Š', 'S');
    return text;
  };

  // export the relevant stuff.
  normalizer_no.removeDiacritics = removeDiacritics;
  return normalizer_no;
}

/*
Copyright (c) 2014, Kristoffer Brabrand

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/
var aggressive_tokenizer_no;
var hasRequiredAggressive_tokenizer_no;
function requireAggressive_tokenizer_no() {
  if (hasRequiredAggressive_tokenizer_no) return aggressive_tokenizer_no;
  hasRequiredAggressive_tokenizer_no = 1;
  const Tokenizer = requireTokenizer();
  const normalizer = requireNormalizer_no();
  class AggressiveTokenizer extends Tokenizer {
    tokenize(text) {
      text = normalizer.removeDiacritics(text);

      // break a string up into an array of tokens by anything non-word
      return this.trim(text.split(/[^A-Za-z0-9_æøåÆØÅäÄöÖüÜ]+/));
    }
  }
  aggressive_tokenizer_no = AggressiveTokenizer;
  return aggressive_tokenizer_no;
}

/*
Copyright (c) 2014, Kristoffer Brabrand

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/
var stemmer_no;
var hasRequiredStemmer_no;
function requireStemmer_no() {
  if (hasRequiredStemmer_no) return stemmer_no;
  hasRequiredStemmer_no = 1;
  const stopwords = requireStopwords_no();
  const Tokenizer = requireAggressive_tokenizer_no();
  stemmer_no = function () {
    const stemmer = this;
    stemmer.stem = function (token) {
      return token;
    };
    stemmer.addStopWord = function (stopWord) {
      stopwords.words.push(stopWord);
    };
    stemmer.addStopWords = function (moreStopWords) {
      stopwords.words = stopwords.words.concat(moreStopWords);
    };
    stemmer.tokenizeAndStem = function (text, keepStops) {
      const stemmedTokens = [];
      new Tokenizer().tokenize(text).forEach(function (token) {
        if (keepStops || stopwords.words.indexOf(token.toLowerCase()) === -1) {
          stemmedTokens.push(stemmer.stem(token));
        }
      });
      return stemmedTokens;
    };

    /*
    stemmer.attach = function () {
      String.prototype.stem = function () {
        return stemmer.stem(this)
      }
       String.prototype.tokenizeAndStem = function (keepStops) {
        return stemmer.tokenizeAndStem(this, keepStops)
      }
    }
    */
  };
  return stemmer_no;
}

/*
Copyright (c) 2014, Kristoffer Brabrand

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/
var porter_stemmer_no;
var hasRequiredPorter_stemmer_no;
function requirePorter_stemmer_no() {
  if (hasRequiredPorter_stemmer_no) return porter_stemmer_no;
  hasRequiredPorter_stemmer_no = 1;
  const Stemmer = requireStemmer_no();

  // Get the part of the token after the first non-vowel following a vowel
  function getR1(token) {
    const match = token.match(/[aeiouyæåø]{1}[^aeiouyæåø]([A-Za-z0-9_æøåÆØÅäÄöÖüÜ]+)/);
    if (match) {
      const preR1Length = match.index + 2;
      if (preR1Length < 3 && preR1Length > 0) {
        return token.slice(3);
      } else if (preR1Length >= 3) {
        return match[1];
      } else {
        return token;
      }
    }
    return null;
  }
  function step1(token) {
    // Perform step 1a-c
    const step1aResult = step1a(token);
    const step1bResult = step1b(token);
    const step1cResult = step1c(token);

    // Returne the shortest result string (from 1a, 1b and 1c)
    if (step1aResult.length < step1bResult.length) {
      return step1aResult.length < step1cResult.length ? step1aResult : step1cResult;
    } else {
      return step1bResult.length < step1cResult.length ? step1bResult : step1cResult;
    }
  }

  // step 1a as defined for the porter stemmer algorithm.
  function step1a(token) {
    const r1 = getR1(token);
    if (!r1) {
      return token;
    }
    const r1Match = r1.match(/(a|e|ede|ande|ende|ane|ene|hetene|en|heten|ar|er|heter|as|es|edes|endes|enes|hetenes|ens|hetens|ers|ets|et|het|ast)$/);
    if (r1Match) {
      return token.replace(new RegExp(r1Match[1] + '$'), '');
    }
    return token;
  }

  // step 1b as defined for the porter stemmer algorithm.
  function step1b(token) {
    const r1 = getR1(token);
    if (!r1) {
      return token;
    }
    if (token.match(/(b|c|d|f|g|h|j|l|m|n|o|p|r|t|v|y|z)s$/)) {
      return token.slice(0, -1);
    }
    if (token.match(/([^aeiouyæåø]k)s$/)) {
      return token.slice(0, -1);
    }
    return token;
  }

  // step 1c as defined for the porter stemmer algorithm.
  function step1c(token) {
    const r1 = getR1(token);
    if (!r1) {
      return token;
    }
    if (r1.match(/(erte|ert)$/)) {
      return token.replace(/(erte|ert)$/, 'er');
    }
    return token;
  }

  // step 2 as defined for the porter stemmer algorithm.
  function step2(token) {
    const r1 = getR1(token);
    if (!r1) {
      return token;
    }
    if (r1.match(/(d|v)t$/)) {
      return token.slice(0, -1);
    }
    return token;
  }

  // step 3 as defined for the porter stemmer algorithm.
  function step3(token) {
    const r1 = getR1(token);
    if (!r1) {
      return token;
    }
    const r1Match = r1.match(/(leg|eleg|ig|eig|lig|elig|els|lov|elov|slov|hetslov)$/);
    if (r1Match) {
      return token.replace(new RegExp(r1Match[1] + '$'), '');
    }
    return token;
  }
  const PorterStemmer = new Stemmer();
  porter_stemmer_no = PorterStemmer;

  // perform full stemming algorithm on a single word
  PorterStemmer.stem = function (token) {
    return step3(step2(step1(token.toLowerCase()))).toString();
  };

  // exports for tests
  PorterStemmer.getR1 = getR1;
  PorterStemmer.step1 = step1;
  PorterStemmer.step1a = step1a;
  PorterStemmer.step1b = step1b;
  PorterStemmer.step1c = step1c;
  PorterStemmer.step2 = step2;
  PorterStemmer.step3 = step3;
  return porter_stemmer_no;
}

var stopwords_sv = {};

/*
Copyright (c) 2017, Dogan Yazar

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/
var hasRequiredStopwords_sv;
function requireStopwords_sv() {
  if (hasRequiredStopwords_sv) return stopwords_sv;
  hasRequiredStopwords_sv = 1;

  // a list of commonly used words that have little meaning and can be excluded
  // from analysis.
  const words = ['aderton', 'adertonde', 'adjö', 'aldrig', 'alla', 'allas', 'allt', 'alltid', 'alltså', 'andra', 'andras', 'annan', 'annat', 'artonde', 'artonn', 'att', 'av', 'bakom', 'bara', 'behöva', 'behövas', 'behövde', 'behövt', 'beslut', 'beslutat', 'beslutit', 'bland', 'blev', 'bli', 'blir', 'blivit', 'bort', 'borta', 'bra', 'bäst', 'bättre', 'båda', 'bådas', 'dag', 'dagar', 'dagarna', 'dagen', 'de', 'del', 'delen', 'dem', 'den', 'denna', 'deras', 'dess', 'dessa', 'det', 'detta', 'dig', 'din', 'dina', 'dit', 'ditt', 'dock', 'dom', 'du', 'där', 'därför', 'då', 'e', 'efter', 'eftersom', 'ej', 'elfte', 'eller', 'elva', 'emot', 'en', 'enkel', 'enkelt', 'enkla', 'enligt', 'ens', 'er', 'era', 'ers', 'ert', 'ett', 'ettusen', 'fanns', 'fem', 'femte', 'femtio', 'femtionde', 'femton', 'femtonde', 'fick', 'fin', 'finnas', 'finns', 'fjorton', 'fjortonde', 'fjärde', 'fler', 'flera', 'flesta', 'fram', 'framför', 'från', 'fyra', 'fyrtio', 'fyrtionde', 'få', 'får', 'fått', 'följande', 'för', 'före', 'förlåt', 'förra', 'första', 'genast', 'genom', 'gick', 'gjorde', 'gjort', 'god', 'goda', 'godare', 'godast', 'gott', 'gälla', 'gäller', 'gällt', 'gärna', 'gå', 'går', 'gått', 'gör', 'göra', 'ha', 'hade', 'haft', 'han', 'hans', 'har', 'heller', 'hellre', 'helst', 'helt', 'henne', 'hennes', 'hit', 'hon', 'honom', 'hundra', 'hundraen', 'hundraett', 'hur', 'här', 'hög', 'höger', 'högre', 'högst', 'i', 'ibland', 'icke', 'idag', 'igen', 'igår', 'imorgon', 'in', 'inför', 'inga', 'ingen', 'ingenting', 'inget', 'innan', 'inne', 'inom', 'inte', 'inuti', 'ja', 'jag', 'jo', 'ju', 'just', 'jämfört', 'kan', 'kanske', 'knappast', 'kom', 'komma', 'kommer', 'kommit', 'kr', 'kunde', 'kunna', 'kunnat', 'kvar', 'legat', 'ligga', 'ligger', 'lika', 'likställd', 'likställda', 'lilla', 'lite', 'liten', 'litet', 'länge', 'längre', 'längst', 'lätt', 'lättare', 'lättast', 'långsam', 'långsammare', 'långsammast', 'långsamt', 'långt', 'låt', 'man', 'med', 'mej', 'mellan', 'men', 'mer', 'mera', 'mest', 'mig', 'min', 'mina', 'mindre', 'minst', 'mitt', 'mittemot', 'mot', 'mycket', 'många', 'måste', 'möjlig', 'möjligen', 'möjligt', 'möjligtvis', 'ned', 'nederst', 'nedersta', 'nedre', 'nej', 'ner', 'ni', 'nio', 'nionde', 'nittio', 'nittionde', 'nitton', 'nittonde', 'nog', 'noll', 'nr', 'nu', 'nummer', 'när', 'nästa', 'någon', 'någonting', 'något', 'några', 'nån', 'nånting', 'nåt', 'nödvändig', 'nödvändiga', 'nödvändigt', 'nödvändigtvis', 'och', 'också', 'ofta', 'oftast', 'olika', 'olikt', 'om', 'oss', 'på', 'rakt', 'redan', 'rätt', 'sa', 'sade', 'sagt', 'samma', 'sedan', 'senare', 'senast', 'sent', 'sex', 'sextio', 'sextionde', 'sexton', 'sextonde', 'sig', 'sin', 'sina', 'sist', 'sista', 'siste', 'sitt', 'sitta', 'sju', 'sjunde', 'sjuttio', 'sjuttionde', 'sjutton', 'sjuttonde', 'själv', 'sjätte', 'ska', 'skall', 'skulle', 'slutligen', 'små', 'smått', 'snart', 'som', 'stor', 'stora', 'stort', 'större', 'störst', 'säga', 'säger', 'sämre', 'sämst', 'så', 'sådan', 'sådana', 'sådant', 'ta', 'tack', 'tar', 'tidig', 'tidigare', 'tidigast', 'tidigt', 'till', 'tills', 'tillsammans', 'tio', 'tionde', 'tjugo', 'tjugoen', 'tjugoett', 'tjugonde', 'tjugotre', 'tjugotvå', 'tjungo', 'tolfte', 'tolv', 'tre', 'tredje', 'trettio', 'trettionde', 'tretton', 'trettonde', 'två', 'tvåhundra', 'under', 'upp', 'ur', 'ursäkt', 'ut', 'utan', 'utanför', 'ute', 'va', 'vad', 'var', 'vara', 'varför', 'varifrån', 'varit', 'varje', 'varken', 'vars', 'varsågod', 'vart', 'vem', 'vems', 'verkligen', 'vi', 'vid', 'vidare', 'viktig', 'viktigare', 'viktigast', 'viktigt', 'vilka', 'vilkas', 'vilken', 'vilket', 'vill', 'väl', 'vänster', 'vänstra', 'värre', 'vår', 'våra', 'vårt', 'än', 'ännu', 'är', 'även', 'åt', 'åtminstone', 'åtta', 'åttio', 'åttionde', 'åttonde', 'över', 'övermorgon', 'överst', 'övre', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0'];

  // tell the world about the noise words.
  stopwords_sv.words = words;
  return stopwords_sv;
}

var normalizer_sv = {};

/*
 Copyright (c) 2017, Dogan Yazar

 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights
 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions:

 The above copyright notice and this permission notice shall be included in
 all copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 THE SOFTWARE.
 */
var hasRequiredNormalizer_sv;
function requireNormalizer_sv() {
  if (hasRequiredNormalizer_sv) return normalizer_sv;
  hasRequiredNormalizer_sv = 1;

  /**
   * Remove commonly used diacritic marks from a string as these
   * are not used in a consistent manner. Leave only ä, ö, å.
   */
  const removeDiacritics = function (text) {
    text = text.replace('à', 'a');
    text = text.replace('À', 'A');
    text = text.replace('á', 'a');
    text = text.replace('Á', 'A');
    text = text.replace('è', 'e');
    text = text.replace('È', 'E');
    text = text.replace('é', 'e');
    text = text.replace('É', 'E');
    return text;
  };

  // export the relevant stuff.
  normalizer_sv.removeDiacritics = removeDiacritics;
  return normalizer_sv;
}

/*
Copyright (c) 2017, Dogan Yazar

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/
var aggressive_tokenizer_sv;
var hasRequiredAggressive_tokenizer_sv;
function requireAggressive_tokenizer_sv() {
  if (hasRequiredAggressive_tokenizer_sv) return aggressive_tokenizer_sv;
  hasRequiredAggressive_tokenizer_sv = 1;
  const Tokenizer = requireTokenizer();
  const normalizer = requireNormalizer_sv();
  class AggressiveTokenizer extends Tokenizer {
    tokenize(text) {
      text = normalizer.removeDiacritics(text);

      // break a string up into an array of tokens by anything non-word
      // Ü is not part of swedish alphabet but there are words using it like müsli and München
      return this.trim(text.split(/[^A-Za-z0-9_åÅäÄöÖüÜ-]+/));
    }
  }
  aggressive_tokenizer_sv = AggressiveTokenizer;
  return aggressive_tokenizer_sv;
}

/*
Copyright (c) 2017, Dogan Yazar

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/
var stemmer_sv;
var hasRequiredStemmer_sv;
function requireStemmer_sv() {
  if (hasRequiredStemmer_sv) return stemmer_sv;
  hasRequiredStemmer_sv = 1;
  const stopwords = requireStopwords_sv();
  const Tokenizer = requireAggressive_tokenizer_sv();
  stemmer_sv = function () {
    const stemmer = this;
    stemmer.stem = function (token) {
      return token;
    };
    stemmer.addStopWord = function (stopWord) {
      stopwords.words.push(stopWord);
    };
    stemmer.addStopWords = function (moreStopWords) {
      stopwords.words = stopwords.words.concat(moreStopWords);
    };
    stemmer.tokenizeAndStem = function (text, keepStops) {
      const stemmedTokens = [];
      new Tokenizer().tokenize(text).forEach(function (token) {
        if (keepStops || stopwords.words.indexOf(token.toLowerCase()) === -1) {
          stemmedTokens.push(stemmer.stem(token));
        }
      });
      return stemmedTokens;
    };

    /*
    stemmer.attach = function () {
      String.prototype.stem = function () {
        return stemmer.stem(this)
      }
       String.prototype.tokenizeAndStem = function (keepStops) {
        return stemmer.tokenizeAndStem(this, keepStops)
      }
    }
    */
  };
  return stemmer_sv;
}

/*
Copyright (c) 2017, Dogan Yazar

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/
var porter_stemmer_sv;
var hasRequiredPorter_stemmer_sv;
function requirePorter_stemmer_sv() {
  if (hasRequiredPorter_stemmer_sv) return porter_stemmer_sv;
  hasRequiredPorter_stemmer_sv = 1;
  const Stemmer = requireStemmer_sv();

  // Get R1 region
  function getRegions(str) {
    const match = str.match(/[aeiouyäåö][^aeiouyäåö]([a-zåäö]+)/);
    let r1 = '';
    if (match && match[1]) {
      r1 = match[1];
      if (match.index + 2 < 3) {
        // Not clear why we need this! Algorithm does not describe this part!
        r1 = str.slice(3);
      }
    }
    return {
      r1,
      rest: str.slice(0, str.length - r1.length)
    };
  }
  function step1a(str, regions = getRegions(str)) {
    const r1 = regions.r1;
    if (!r1) {
      return str;
    }
    const regEx = /(heterna|hetens|anden|andes|andet|arens|arnas|ernas|heten|heter|ornas|ande|ades|aren|arna|arne|aste|erna|erns|orna|ade|are|ast|ens|ern|het|ad|ar|as|at|en|er|es|or|a|e)$/;
    const match = r1.match(regEx);
    return match ? regions.rest + r1.slice(0, match.index) : str;
  }
  function step1b(str, regions = getRegions(str)) {
    if (regions.r1 && str.match(/(b|c|d|f|g|h|j|k|l|m|n|o|p|r|t|v|y)s$/)) {
      return str.slice(0, -1);
    }
    return str;
  }
  function step1(str) {
    const regions = getRegions(str);
    const resA = step1a(str, regions);
    const resB = step1b(str, regions);
    return resA.length < resB.length ? resA : resB;
  }
  function step2(str, regions = getRegions(str)) {
    const r1 = regions.r1;
    if (r1 && r1.match(/(dd|gd|nn|dt|gt|kt|tt)$/)) {
      return str.slice(0, -1);
    }
    return str;
  }
  function step3(str, regions = getRegions(str)) {
    const r1 = regions.r1;
    if (r1) {
      if (r1.match(/(lös|full)t$/)) {
        return str.slice(0, -1);
      }
      const match = r1.match(/(lig|ig|els)$/);
      return match ? regions.rest + r1.slice(0, match.index) : str;
    }
    return str;
  }
  function stem(_str) {
    const str = _str.toLowerCase();
    return step3(step2(step1(str)));
  }
  const PorterStemmer = new Stemmer();
  porter_stemmer_sv = PorterStemmer;

  // perform full stemming algorithm on a single word
  PorterStemmer.stem = stem;
  return porter_stemmer_sv;
}

var stopwords_pt = {};

/*
Copyright (c) 2011, Luís Rodrigues

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/
var hasRequiredStopwords_pt;
function requireStopwords_pt() {
  if (hasRequiredStopwords_pt) return stopwords_pt;
  hasRequiredStopwords_pt = 1;

  // a list of commonly used words that have little meaning and can be excluded
  // from analysis.
  const words = ['a', 'à', 'ao', 'aos', 'aquela', 'aquelas', 'aquele', 'aqueles', 'aquilo', 'as', 'às', 'até', 'com', 'como', 'da', 'das', 'de', 'dela', 'delas', 'dele', 'deles', 'depois', 'do', 'dos', 'e', 'ela', 'elas', 'ele', 'eles', 'em', 'entre', 'essa', 'essas', 'esse', 'esses', 'esta', 'estas', 'este', 'estes', 'eu', 'isso', 'isto', 'já', 'lhe', 'lhes', 'mais', 'mas', 'me', 'mesmo', 'meu', 'meus', 'minha', 'minhas', 'muito', 'muitos', 'na', 'não', 'nas', 'nem', 'no', 'nos', 'nós', 'nossa', 'nossas', 'nosso', 'nossos', 'num', 'nuns', 'numa', 'numas', 'o', 'os', 'ou', 'para', 'pela', 'pelas', 'pelo', 'pelos', 'por', 'quais', 'qual', 'quando', 'que', 'quem', 'se', 'sem', 'seu', 'seus', 'só', 'sua', 'suas', 'também', 'te', 'teu', 'teus', 'tu', 'tua', 'tuas', 'um', 'uma', 'umas', 'você', 'vocês', 'vos', 'vosso', 'vossos', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '_'];

  // tell the world about the noise words.
  stopwords_pt.words = words;
  return stopwords_pt;
}

/*
Copyright (c) 2011, Chris Umbel,David Przybilla

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/
var aggressive_tokenizer_pt;
var hasRequiredAggressive_tokenizer_pt;
function requireAggressive_tokenizer_pt() {
  if (hasRequiredAggressive_tokenizer_pt) return aggressive_tokenizer_pt;
  hasRequiredAggressive_tokenizer_pt = 1;
  const Tokenizer = requireTokenizer();
  class AggressiveTokenizer extends Tokenizer {
    withoutEmpty(array) {
      return array.filter(function (a) {
        return a;
      });
    }
    tokenize(text) {
      // break a string up into an array of tokens by anything non-word
      return this.withoutEmpty(this.trim(text.split(/[^a-zA-Zà-úÀ-Ú]/)));
    }
  }
  aggressive_tokenizer_pt = AggressiveTokenizer;
  return aggressive_tokenizer_pt;
}

/*
Copyright (c) 2014, Ismaël Héry

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/
var stemmer_pt;
var hasRequiredStemmer_pt;
function requireStemmer_pt() {
  if (hasRequiredStemmer_pt) return stemmer_pt;
  hasRequiredStemmer_pt = 1;
  stemmer_pt = function () {
    const Stemmer = this;
    const stopwords = requireStopwords_pt();
    const Tokenizer = requireAggressive_tokenizer_pt();
    Stemmer.stem = function (token) {
      return token;
    };
    Stemmer.addStopWords = function (word) {
      stopwords.words.push(word);
    };
    Stemmer.addStopWords = function (words) {
      stopwords.words = stopwords.words.concat(words);
    };
    Stemmer.tokenizeAndStem = function (text, keepStops) {
      const stemmedTokens = [];
      const tokenStemmer = function (token) {
        if (keepStops || stopwords.words.indexOf(token.toLowerCase()) === -1) {
          stemmedTokens.push(Stemmer.stem(token));
        }
      };
      new Tokenizer().tokenize(text).forEach(tokenStemmer);
      return stemmedTokens;
    };

    /*
    Stemmer.attach = function () {
      String.prototype.stem = function () {
        return Stemmer.stem(this)
      }
       String.prototype.tokenizeAndStem = function (keepStops) {
        return Stemmer.tokenizeAndStem(this, keepStops)
      }
    }
    */
  };
  return stemmer_pt;
}

/*
Copyright (c) 2015, Luís Rodrigues

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/
var token;
var hasRequiredToken;
function requireToken() {
  if (hasRequiredToken) return token;
  hasRequiredToken = 1;

  /**
   * Stemmer token constructor.
   *
   * @param {String} string Token string.
   */
  function Token(string) {
    this.vowels = '';
    this.regions = {};
    this.string = string;
    this.original = string;
  }

  /**
   * Set vowels.
   *
   * @param  {String|Array} vowels List of vowels.
   * @return {Token}               Token instance.
   */
  Token.prototype.usingVowels = function (vowels) {
    this.vowels = vowels;
    return this;
  };

  /**
   * Marks a region by defining its starting index or providing a callback
   * function that does.
   *
   * @param  {String}       region   Region name.
   * @param  {Array|Number} args     Callback arguments or region start index.
   * @param  {Function}     callback Function that determines the start index (optional).
   * @param  {Object}       context  Callback context (optional, defaults to this).
   * @return {Token}                 Token instance.
   */
  Token.prototype.markRegion = function (region, args, callback, context) {
    if (typeof callback === 'function') {
      // this.regions[region] = callback.apply(context || this, [].concat(args))
      this.regions[region] = callback.apply(context || this, [].concat(args));
    } else if (!isNaN(args)) {
      this.regions[region] = args;
    }
    return this;
  };

  /**
   * Replaces all instances of a string with another.
   *
   * @param  {String} find    String to be replaced.
   * @param  {String} replace Replacement string.
   * @return {Token}          Token instance.
   */
  Token.prototype.replaceAll = function (find, replace) {
    this.string = this.string.split(find).join(replace);
    return this;
  };

  /**
   * Replaces the token suffix if in a region.
   *
   * @param  {String} suffix  Suffix to replace.
   * @param  {String} replace Replacement string.
   * @param  {String} region  Region name.
   * @return {Token}          Token instance.
   */
  Token.prototype.replaceSuffixInRegion = function (suffix, replace, region) {
    const suffixes = [].concat(suffix);
    for (let i = 0; i < suffixes.length; i++) {
      if (this.hasSuffixInRegion(suffixes[i], region)) {
        this.string = this.string.slice(0, -suffixes[i].length) + replace;
        return this;
      }
    }
    return this;
  };

  /**
   * Determines whether the token has a vowel at the provided index.
   *
   * @param  {Integer} index Character index.
   * @return {Boolean}       Whether the token has a vowel at the provided index.
   */
  Token.prototype.hasVowelAtIndex = function (index) {
    return this.vowels.indexOf(this.string[index]) !== -1;
  };

  /**
   * Finds the next vowel in the token.
   *
   * @param  {Integer} start Starting index offset.
   * @return {Integer}       Vowel index, or the end of the string.
   */
  Token.prototype.nextVowelIndex = function (start) {
    let index = start >= 0 && start < this.string.length ? start : this.string.length;
    while (index < this.string.length && !this.hasVowelAtIndex(index)) {
      index++;
    }
    return index;
  };

  /**
   * Finds the next consonant in the token.
   *
   * @param  {Integer} start Starting index offset.
   * @return {Integer}       Consonant index, or the end of the string.
   */
  Token.prototype.nextConsonantIndex = function (start) {
    let index = start >= 0 && start < this.string.length ? start : this.string.length;
    while (index < this.string.length && this.hasVowelAtIndex(index)) {
      index++;
    }
    return index;
  };

  /**
   * Determines whether the token has the provided suffix.
   * @param  {String}  suffix Suffix to match.
   * @return {Boolean}        Whether the token string ends in suffix.
   */
  Token.prototype.hasSuffix = function (suffix) {
    return this.string.slice(-suffix.length) === suffix;
  };

  /**
   * Determines whether the token has the provided suffix within the specified
   * region.
   *
   * @param {String} suffix Suffix to match.
   * @param {String} region Region name.
   * @return {Boolean} Whether the token string ends in suffix.
   */
  Token.prototype.hasSuffixInRegion = function (suffix, region) {
    const regionStart = this.regions[region] || 0;
    const suffixStart = this.string.length - suffix.length;
    return this.hasSuffix(suffix) && suffixStart >= regionStart;
  };
  token = Token;
  return token;
}

/*
Copyright (c) 2015, Luís Rodrigues

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/
var porter_stemmer_pt;
var hasRequiredPorter_stemmer_pt;
function requirePorter_stemmer_pt() {
  if (hasRequiredPorter_stemmer_pt) return porter_stemmer_pt;
  hasRequiredPorter_stemmer_pt = 1;
  porter_stemmer_pt = function () {
    const Stemmer = requireStemmer_pt();
    const Token = requireToken();
    const PorterStemmer = new Stemmer();

    /**
     * Marks a region after the first non-vowel following a vowel, or the
     * null region at the end of the word if there is no such non-vowel.
     *
     * @param {Object} token Token to stem.
     * @param {Number} start Start index (defaults to 0).
     * @param {Number}       Region start index.
     */
    const markRegionN = function (start) {
      let index = start || 0;
      const length = this.string.length;
      let region = length;
      while (index < length - 1 && region === length) {
        if (this.hasVowelAtIndex(index) && !this.hasVowelAtIndex(index + 1)) {
          region = index + 2;
        }
        index++;
      }
      return region;
    };

    /**
     * Mark RV.
     *
     * @param  {Object} token Token to stem.
     * @return {Number}       Region start index.
     */
    const markRegionV = function () {
      let rv = this.string.length;
      if (rv > 3) {
        if (!this.hasVowelAtIndex(1)) {
          rv = this.nextVowelIndex(2) + 1;
        } else if (this.hasVowelAtIndex(0) && this.hasVowelAtIndex(1)) {
          rv = this.nextConsonantIndex(2) + 1;
        } else {
          rv = 3;
        }
      }
      return rv;
    };

    /**
     * Prelude.
     *
     * Nasalised vowel forms should be treated as a vowel followed by a consonant.
     *
     * @param  {String} token Word to stem.
     * @return {String}       Stemmed token.
     */
    function prelude(token) {
      return token.replaceAll('ã', 'a~').replaceAll('õ', 'o~');
    }

    /**
     * Step 1: Standard suffix removal.
     *
     * This step should always be performed.
     *
     * @param  {Token} token Word to stem.
     * @return {Token}       Stemmed token.
     */
    function standardSuffix(token) {
      token.replaceSuffixInRegion(['amentos', 'imentos', 'aço~es', 'adoras', 'adores', 'amento', 'imento', 'aça~o', 'adora', 'ância', 'antes', 'ismos', 'istas', 'ador', 'ante', 'ável', 'ezas', 'icas', 'icos', 'ismo', 'ista', 'ível', 'osas', 'osos', 'eza', 'ica', 'ico', 'osa', 'oso'], '', 'r2');
      token.replaceSuffixInRegion(['logias', 'logia'], 'log', 'r2');

      // token.replaceSuffixInRegion(['uço~es', 'uça~o'], 'u', 'r1');

      token.replaceSuffixInRegion(['ências', 'ência'], 'ente', 'r2');
      token.replaceSuffixInRegion(['ativamente', 'icamente', 'ivamente', 'osamente', 'adamente'], '', 'r2');
      token.replaceSuffixInRegion('amente', '', 'r1');
      token.replaceSuffixInRegion(['antemente', 'avelmente', 'ivelmente', 'mente'], '', 'r2');
      token.replaceSuffixInRegion(['abilidades', 'abilidade', 'icidades', 'icidade', 'ividades', 'ividade', 'idades', 'idade'], '', 'r2');
      token.replaceSuffixInRegion(['ativas', 'ativos', 'ativa', 'ativo', 'ivas', 'ivos', 'iva', 'ivo'], '', 'r2');
      if (token.hasSuffix('eiras') || token.hasSuffix('eira')) {
        token.replaceSuffixInRegion(['iras', 'ira'], 'ir', 'rv');
      }
      return token;
    }

    /**
     * Step 2: Verb suffix removal.
     *
     * Perform this step if no ending was removed in step 1.
     *
     * @param  {Token} token   Token to stem.
     * @return {Token}         Stemmed token.
     */
    function verbSuffix(token) {
      token.replaceSuffixInRegion(['aríamos', 'ássemos', 'eríamos', 'êssemos', 'iríamos', 'íssemos', 'áramos', 'aremos', 'aríeis', 'ásseis', 'ávamos', 'éramos', 'eremos', 'eríeis', 'ésseis', 'íramos', 'iremos', 'iríeis', 'ísseis', 'ara~o', 'ardes', 'areis', 'áreis', 'ariam', 'arias', 'armos', 'assem', 'asses', 'astes', 'áveis', 'era~o', 'erdes', 'ereis', 'éreis', 'eriam', 'erias', 'ermos', 'essem', 'esses', 'estes', 'íamos', 'ira~o', 'irdes', 'ireis', 'íreis', 'iriam', 'irias', 'irmos', 'issem', 'isses', 'istes', 'adas', 'ados', 'amos', 'ámos', 'ando', 'aram', 'aras', 'arás', 'arei', 'arem', 'ares', 'aria', 'asse', 'aste', 'avam', 'avas', 'emos', 'endo', 'eram', 'eras', 'erás', 'erei', 'erem', 'eres', 'eria', 'esse', 'este', 'idas', 'idos', 'íeis', 'imos', 'indo', 'iram', 'iras', 'irás', 'irei', 'irem', 'ires', 'iria', 'isse', 'iste', 'ada', 'ado', 'ais', 'ara', 'ará', 'ava', 'eis', 'era', 'erá', 'iam', 'ias', 'ida', 'ido', 'ira', 'irá', 'am', 'ar', 'as', 'ei', 'em', 'er', 'es', 'eu', 'ia', 'ir', 'is', 'iu', 'ou'], '', 'rv');
      return token;
    }

    /**
     * Step 3: Delete suffix i.
     *
     * Perform this step if the word was changed, in RV and preceded by c.
     *
     * @param  {Token} token   Token to stem.
     * @return {Token}         Stemmed token.
     */
    function iPrecededByCSuffix(token) {
      if (token.hasSuffix('ci')) {
        token.replaceSuffixInRegion('i', '', 'rv');
      }
      return token;
    }

    /**
     * Step 4: Residual suffix.
     *
     * Perform this step if steps 1 and 2 did not alter the word.
     *
     * @param  {Token} token Token to stem.
     * @return {Token}       Stemmed token.
     */
    function residualSuffix(token) {
      token.replaceSuffixInRegion(['os', 'a', 'i', 'o', 'á', 'í', 'ó'], '', 'rv');
      return token;
    }

    /**
     * Step 5: Residual form.
     *
     * This step should always be performed.
     *
     * @param  {Token} token Token to stem.
     * @return {Token}       Stemmed token.
     */
    function residualForm(token) {
      const tokenString = token.string;
      if (token.hasSuffix('gue') || token.hasSuffix('gué') || token.hasSuffix('guê')) {
        token.replaceSuffixInRegion(['ue', 'ué', 'uê'], '', 'rv');
      }
      if (token.hasSuffix('cie') || token.hasSuffix('cié') || token.hasSuffix('ciê')) {
        token.replaceSuffixInRegion(['ie', 'ié', 'iê'], '', 'rv');
      }
      if (tokenString === token.string) {
        token.replaceSuffixInRegion(['e', 'é', 'ê'], '', 'rv');
      }
      token.replaceSuffixInRegion('ç', 'c', 'all');
      return token;
    }

    /**
     * Postlude.
     *
     * Turns a~, o~ back into ã, õ.
     *
     * @param  {String} token Word to stem.
     * @return {String}       Stemmed token.
     */
    function postlude(token) {
      return token.replaceAll('a~', 'ã').replaceAll('o~', 'õ');
    }

    /**
     * Stems a word using a Porter stemmer algorithm.
     *
     * @param  {String} word Word to stem.
     * @return {String}      Stemmed token.
     */
    PorterStemmer.stem = function (word) {
      let token = new Token(word.toLowerCase());
      token = prelude(token);
      token.usingVowels('aeiouáéíóúâêôàãõ').markRegion('all', 0).markRegion('r1', null, markRegionN).markRegion('r2', token.regions.r1, markRegionN).markRegion('rv', null, markRegionV);
      const original = token.string;

      // Always do step 1.
      token = standardSuffix(token);

      // Do step 2 if no ending was removed by step 1.
      if (token.string === original) {
        token = verbSuffix(token);
      }

      // If the last step to be obeyed — either step 1 or 2 — altered the word,
      // do step 3. Alternatively, if neither steps 1 nor 2 altered the word, do
      // step 4.
      token = token.string !== original ? iPrecededByCSuffix(token) : residualSuffix(token);

      // Always do step 5.
      token = residualForm(token);
      token = postlude(token);
      return token.string;
    };
    return PorterStemmer;
  }();
  return porter_stemmer_pt;
}

var stopwords_nl = {};

/*
Copyright (c) 2011, Chris Umbel, Martijn de Boer, Damien van Holten

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/
var hasRequiredStopwords_nl;
function requireStopwords_nl() {
  if (hasRequiredStopwords_nl) return stopwords_nl;
  hasRequiredStopwords_nl = 1;

  // a list of commonly used words that have little meaning and can be excluded
  // from analysis.
  // This dutch wordlist has been parsed from a list created by Damien van Holten
  // source: http://www.damienvanholten.com/blog/dutch-stop-words/
  const words = ['aan', 'af', 'al', 'alles', 'als', 'altijd', 'andere', 'ben', 'bij', 'daar', 'dan', 'dat', 'de', 'der', 'deze', 'die', 'dit', 'doch', 'doen', 'door', 'dus', 'een', 'eens', 'en', 'er', 'ge', 'geen', 'geweest', 'haar', 'had', 'heb', 'hebben', 'heeft', 'hem', 'het', 'hier', 'hij', 'hoe', 'hun', 'iemand', 'iets', 'ik', 'in', 'is', 'ja', 'je ', 'kan', 'kon', 'kunnen', 'maar', 'me', 'meer', 'men', 'met', 'mij', 'mijn', 'moet', 'na', 'naar', 'niet', 'niets', 'nog', 'nu', 'of', 'om', 'omdat', 'ons', 'ook', 'op', 'over', 'reeds', 'te', 'tegen', 'toch', 'toen', 'tot', 'u', 'uit', 'uw', 'van', 'veel', 'voor', 'want', 'waren', 'was', 'wat', 'we', 'wel', 'werd', 'wezen', 'wie', 'wij', 'wil', 'worden', 'zal', 'ze', 'zei', 'zelf', 'zich', 'zij', 'zijn', 'zo', 'zonder', 'zou', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '$', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '_', '-'];

  // tell the world about the noise words.
  stopwords_nl.words = words;
  return stopwords_nl;
}

/*
Copyright (c) 2011, Chris Umbel, Martijn de Boer

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/
var aggressive_tokenizer_nl;
var hasRequiredAggressive_tokenizer_nl;
function requireAggressive_tokenizer_nl() {
  if (hasRequiredAggressive_tokenizer_nl) return aggressive_tokenizer_nl;
  hasRequiredAggressive_tokenizer_nl = 1;
  const Tokenizer = requireTokenizer();
  class AggressiveTokenizer extends Tokenizer {
    tokenize(text) {
      // break a string up into an array of tokens by anything non-word
      return this.trim(text.split(/[^a-zA-Z0-9_'-]+/));
    }
  }
  aggressive_tokenizer_nl = AggressiveTokenizer;
  return aggressive_tokenizer_nl;
}

/*
Copyright (c) 2018 Hugo W.L. ter Doest

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/
var stemmer_nl;
var hasRequiredStemmer_nl;
function requireStemmer_nl() {
  if (hasRequiredStemmer_nl) return stemmer_nl;
  hasRequiredStemmer_nl = 1;
  const stopwords = requireStopwords_nl();
  const Tokenizer = requireAggressive_tokenizer_nl();
  class Stemmer {
    stem(token) {
      return token;
    }
    tokenizeAndStem(text, keepStops) {
      const stemmedTokens = [];
      const that = this;
      new Tokenizer().tokenize(text).forEach(function (token) {
        if (keepStops || stopwords.words.indexOf(token) === -1) {
          let resultToken = token.toLowerCase();
          // if (resultToken.match(new RegExp('[a-zäëïöüáéíóúè0-9]+', 'gi'))) {
          if (resultToken.match(/[a-zäëïöüáéíóúè0-9]+/gi)) {
            resultToken = that.stem(resultToken);
          }
          stemmedTokens.push(resultToken);
        }
      });
      return stemmedTokens;
    }
  } /*
    attach () {
      const that = this
      String.prototype.stem = function () {
        return that.stem(this)
      }
       String.prototype.tokenizeAndStem = function (keepStops) {
        return that.tokenizeAndStem(this, keepStops)
      }
    }
    */
  stemmer_nl = Stemmer;
  return stemmer_nl;
}

/*
Copyright (c) 2018, Hugo W.L. ter Doest

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/
var porter_stemmer_nl;
var hasRequiredPorter_stemmer_nl;
function requirePorter_stemmer_nl() {
  if (hasRequiredPorter_stemmer_nl) return porter_stemmer_nl;
  hasRequiredPorter_stemmer_nl = 1;
  const Stemmer = requireStemmer_nl();
  const vowels = 'aeiouèy';
  function isVowel(x) {
    return vowels.indexOf(x) > -1;
  }

  // * Return longest matching suffixes for a token or '' if no suffix match
  function endsinArr(str, suffixes) {
    let i;
    let longest = '';
    for (i = 0; i < suffixes.length; i++) {
      if (endsin(str, suffixes[i]) && suffixes[i].length > longest.length) {
        longest = suffixes[i];
      }
    }
    return longest;
  }

  // Returns true if token has suffix
  function endsin(str, suffix) {
    if (str.length < suffix.length) return false;
    return str.slice(-suffix.length) === suffix;
  }

  // Removes a suffix of len characters and returns the string
  function removeSuffix(str, len) {
    return str.substr(0, str.length - len);
  }

  // Define undoubling the ending as removing the last letter if the word ends kk, dd or tt.
  function undoubleEnding(str) {
    if (str.substr(-2) === 'kk' || str.substr(-2) === 'tt' || str.substr(-2) === 'dd') {
      return str.substr(0, str.length - 1);
    } else {
      return str;
    }
  }
  class PorterStemmer extends Stemmer {
    replaceAccentedCharacters(word) {
      const accentedCharactersMapping = {
        ä: 'a',
        ë: 'e',
        ï: 'i',
        ö: 'o',
        ü: 'u',
        á: 'a',
        é: 'e',
        í: 'i',
        ó: 'o',
        ú: 'u'
      };
      let result = word;
      for (const x in accentedCharactersMapping) {
        result = result.replace(new RegExp(x, 'g'), accentedCharactersMapping[x]);
      }
      return result;
    }

    // Put initial y, y after a vowel, and i between vowels into upper case.
    handleYI(word) {
      // Initial y
      let result = word.replace(/^y/, 'Y');
      // y after vowel
      result = result.replace(/([aeioué])y/g, '$1Y');
      // i between vowels
      result = result.replace(/([aeioué])i([aeioué])/g, '$1I$2');
      return result;
    }

    // Determines R1 and R2; adapted from the French Porter Stemmer
    markRegions(token) {
      let r1, r2, len;
      r1 = r2 = len = token.length;

      // R1 is the region after the first non-vowel following a vowel,
      for (let i = 0; i < len - 1 && r1 === len; i++) {
        if (isVowel(token[i]) && !isVowel(token[i + 1])) {
          r1 = i + 2;
        }
      }
      // Or is the null region at the end of the word if there is no such non-vowel.

      // R1 is adjusted such that the region before it contains at least 3 characters
      if (r1 !== len) {
        // R1 is not null
        if (r1 < 3) {
          // Region before does not contain at least 3 characters
          if (len > 3) {
            r1 = 3;
            // Now R1 contains at least 3 characters
          } else {
            // It is not possible to make the region before long enough
            r1 = len;
          }
        }
      }

      // R2 is the region after the first non-vowel following a vowel in R1
      for (let i = r1; i < len - 1 && r2 === len; i++) {
        if (isVowel(token[i]) && !isVowel(token[i + 1])) {
          r2 = i + 2;
        }
      }
      this.r1 = r1;
      this.r2 = r2;
    }
    prelude(word) {
      let result = this.replaceAccentedCharacters(word);
      result = this.handleYI(result);
      this.markRegions(result);
      return result;
    }

    // (1b) en   ene => delete if in R1 and preceded by a valid en-ending, and then undouble the ending
    // Define a valid en-ending as a non-vowel, and not gem.
    // Define undoubling the ending as removing the last letter if the word ends kk, dd or tt.
    step1b(word, suffixes) {
      let result = word;
      const match = endsinArr(result, suffixes);
      if (match !== '') {
        const pos = result.length - match.length;
        if (pos >= this.r1) {
          // check the character before the matched en/ene AND check for gem
          if (!isVowel(result[pos - 1]) && result.substr(pos - 3, 3) !== 'gem') {
            // delete
            result = removeSuffix(result, match.length);
            // Undouble the ending
            result = undoubleEnding(result);
          }
        }
      }
      return result;
    }
    step1(word) {
      let result = word;
      // (1a) heden => replace with heid if in R1
      if (endsin(result, 'heden') && result.length - 5 >= this.r1) {
        result = removeSuffix(result, 5);
        result += 'heid';
      }
      result = this.step1b(result, ['en', 'ene']);

      // (1c) s   se => delete if in R1 and preceded by a valid s-ending
      // Define a valid s-ending as a non-vowel other than j.
      const match = endsinArr(result, ['se', 's']);
      if (match !== '') {
        const pos = result.length - match.length;
        if (pos >= this.r1) {
          // check the character before the matched s/se
          // HtD: if there is a s before the s/se the suffix should stay
          // if (!isVowel(result[pos - 1]) && result[pos - 1] != "j") {
          if (!isVowel(result[pos - 1]) && !result.match(/[js]se?$/)) {
            result = removeSuffix(result, match.length);
          }
        }
      }
      return result;
    }

    // Delete suffix e if in R1 and preceded by a non-vowel, and then undouble the ending
    step2(word) {
      let result = word;
      if (endsin(result, 'e') && this.r1 < result.length) {
        if (result.length > 1 && !isVowel(result[result.length - 2])) {
          // Delete
          result = removeSuffix(result, 1);
          this.suffixeRemoved = true;
          // Undouble the ending
          result = undoubleEnding(result);
        }
      }
      return result;
    }

    // Step 3a: heid => delete heid if in R2 and not preceded by c, and treat a preceding en as in step 1(b)
    step3a(word) {
      let result = word;
      if (endsin(result, 'heid') && result.length - 4 >= this.r2 && result[result.length - 5] !== 'c') {
        // Delete
        result = removeSuffix(result, 4);
        // Treat a preceding en as in step 1b
        result = this.step1b(result, ['en']);
      }
      return result;
    }

    // d suffixes: Search for the longest among the following suffixes, and perform the action indicated.
    step3b(word) {
      let result = word;

      // end   ing => delete if in R2; if preceded by ig, delete if in R2 and not preceded by e, otherwise undouble the ending
      const suf = endsinArr(result, ['end', 'ing']);
      if (suf) {
        if (result.length - 3 >= this.r2) {
          // Delete suffix
          result = removeSuffix(result, 3);
          // this.regions(result);
          if (endsin(result, 'ig') && result.length - 2 >= this.r2 && result[result.length - 3] !== 'e') {
            // Delete suffix
            result = removeSuffix(result, 2);
          } else {
            result = undoubleEnding(result);
          }
        }
      }

      // ig => delete if in R2 and not preceded by e
      if (endsin(result, 'ig') && this.r2 <= result.length - 2 && result[result.length - 3] !== 'e') {
        result = removeSuffix(result, 2);
      }

      // lijk => delete if in R2, and then repeat step 2
      if (endsin(result, 'lijk') && this.r2 <= result.length - 4) {
        result = removeSuffix(result, 4);
        // repeat step 2
        result = this.step2(result);
      }

      // baar => delete if in R2
      if (endsin(result, 'baar') && this.r2 <= result.length - 4) {
        result = removeSuffix(result, 4);
      }

      // bar => delete if in R2 and if step 2 actually removed an e
      if (endsin(result, 'bar') && this.r2 <= result.length - 3 && this.suffixeRemoved) {
        result = removeSuffix(result, 3);
      }
      return result;
    }

    // undouble vowel => If the words ends CVD, where C is a non-vowel,
    // D is a non-vowel other than I, and V is double a, e, o or u,
    // remove one of the vowels from V (for example, maan -> man, brood -> brod)
    step4(word) {
      let result = word;
      if (result.match(/[bcdfghjklmnpqrstvwxz](aa|ee|oo|uu)[bcdfghjklmnpqrstvwxz]$/)) {
        result = result.substr(0, result.length - 2) + result[result.length - 1];
      }
      return result;
    }

    // Turn I and Y back into lower case.
    postlude(word) {
      return word.toLowerCase();
    }
    stem(word) {
      return this.postlude(this.step4(this.step3b(this.step3a(this.step2(this.step1(this.prelude(word)))))));
    }
  }
  porter_stemmer_nl = new PorterStemmer();
  return porter_stemmer_nl;
}

var lancaster_rules = {};

/*
Copyright (c) 2011, Chris Umbel

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/
var hasRequiredLancaster_rules;
function requireLancaster_rules() {
  if (hasRequiredLancaster_rules) return lancaster_rules;
  hasRequiredLancaster_rules = 1;
  lancaster_rules.rules = {
    a: [{
      continuation: false,
      intact: true,
      pattern: 'ia',
      size: '2'
    }, {
      continuation: false,
      intact: true,
      pattern: 'a',
      size: '1'
    }],
    b: [{
      continuation: false,
      intact: false,
      pattern: 'bb',
      size: '1'
    }],
    c: [{
      appendage: 's',
      continuation: false,
      intact: false,
      pattern: 'ytic',
      size: '3'
    }, {
      continuation: true,
      intact: false,
      pattern: 'ic',
      size: '2'
    }, {
      appendage: 't',
      continuation: true,
      intact: false,
      pattern: 'nc',
      size: '1'
    }],
    d: [{
      continuation: false,
      intact: false,
      pattern: 'dd',
      size: '1'
    }, {
      appendage: 'y',
      continuation: true,
      intact: false,
      pattern: 'ied',
      size: '3'
    }, {
      appendage: 'ss',
      continuation: false,
      intact: false,
      pattern: 'ceed',
      size: '2'
    }, {
      continuation: false,
      intact: false,
      pattern: 'eed',
      size: '1'
    }, {
      continuation: true,
      intact: false,
      pattern: 'ed',
      size: '2'
    }, {
      continuation: true,
      intact: false,
      pattern: 'hood',
      size: '4'
    }],
    e: [{
      continuation: true,
      intact: false,
      pattern: 'e',
      size: '1'
    }],
    f: [{
      appendage: 'v',
      continuation: false,
      intact: false,
      pattern: 'lief',
      size: '1'
    }, {
      continuation: true,
      intact: false,
      pattern: 'if',
      size: '2'
    }],
    g: [{
      continuation: true,
      intact: false,
      pattern: 'ing',
      size: '3'
    }, {
      appendage: 'y',
      continuation: false,
      intact: false,
      pattern: 'iag',
      size: '3'
    }, {
      continuation: true,
      intact: false,
      pattern: 'ag',
      size: '2'
    }, {
      continuation: false,
      intact: false,
      pattern: 'gg',
      size: '1'
    }],
    h: [{
      continuation: false,
      intact: true,
      pattern: 'th',
      size: '2'
    }, {
      appendage: 'ct',
      continuation: false,
      intact: false,
      pattern: 'guish',
      size: '5'
    }, {
      continuation: true,
      intact: false,
      pattern: 'ish',
      size: '3'
    }],
    i: [{
      continuation: false,
      intact: true,
      pattern: 'i',
      size: '1'
    }, {
      appendage: 'y',
      continuation: true,
      intact: false,
      pattern: 'i',
      size: '1'
    }],
    j: [{
      appendage: 'd',
      continuation: false,
      intact: false,
      pattern: 'ij',
      size: '1'
    }, {
      appendage: 's',
      continuation: false,
      intact: false,
      pattern: 'fuj',
      size: '1'
    }, {
      appendage: 'd',
      continuation: false,
      intact: false,
      pattern: 'uj',
      size: '1'
    }, {
      appendage: 'd',
      continuation: false,
      intact: false,
      pattern: 'oj',
      size: '1'
    }, {
      appendage: 'r',
      continuation: false,
      intact: false,
      pattern: 'hej',
      size: '1'
    }, {
      appendage: 't',
      continuation: false,
      intact: false,
      pattern: 'verj',
      size: '1'
    }, {
      appendage: 't',
      continuation: false,
      intact: false,
      pattern: 'misj',
      size: '2'
    }, {
      appendage: 'd',
      continuation: false,
      intact: false,
      pattern: 'nj',
      size: '1'
    }, {
      appendage: 's',
      continuation: false,
      intact: false,
      pattern: 'j',
      size: '1'
    }],
    l: [{
      continuation: false,
      intact: false,
      pattern: 'ifiabl',
      size: '6'
    }, {
      appendage: 'y',
      continuation: false,
      intact: false,
      pattern: 'iabl',
      size: '4'
    }, {
      continuation: true,
      intact: false,
      pattern: 'abl',
      size: '3'
    }, {
      continuation: false,
      intact: false,
      pattern: 'ibl',
      size: '3'
    }, {
      appendage: 'l',
      continuation: true,
      intact: false,
      pattern: 'bil',
      size: '2'
    }, {
      continuation: false,
      intact: false,
      pattern: 'cl',
      size: '1'
    }, {
      appendage: 'y',
      continuation: false,
      intact: false,
      pattern: 'iful',
      size: '4'
    }, {
      continuation: true,
      intact: false,
      pattern: 'ful',
      size: '3'
    }, {
      continuation: false,
      intact: false,
      pattern: 'ul',
      size: '2'
    }, {
      continuation: true,
      intact: false,
      pattern: 'ial',
      size: '3'
    }, {
      continuation: true,
      intact: false,
      pattern: 'ual',
      size: '3'
    }, {
      continuation: true,
      intact: false,
      pattern: 'al',
      size: '2'
    }, {
      continuation: false,
      intact: false,
      pattern: 'll',
      size: '1'
    }],
    m: [{
      continuation: false,
      intact: false,
      pattern: 'ium',
      size: '3'
    }, {
      continuation: false,
      intact: true,
      pattern: 'um',
      size: '2'
    }, {
      continuation: true,
      intact: false,
      pattern: 'ism',
      size: '3'
    }, {
      continuation: false,
      intact: false,
      pattern: 'mm',
      size: '1'
    }],
    n: [{
      appendage: 'j',
      continuation: true,
      intact: false,
      pattern: 'sion',
      size: '4'
    }, {
      appendage: 'ct',
      continuation: false,
      intact: false,
      pattern: 'xion',
      size: '4'
    }, {
      continuation: true,
      intact: false,
      pattern: 'ion',
      size: '3'
    }, {
      continuation: true,
      intact: false,
      pattern: 'ian',
      size: '3'
    }, {
      continuation: true,
      intact: false,
      pattern: 'an',
      size: '2'
    }, {
      continuation: false,
      intact: false,
      pattern: 'een',
      size: '0'
    }, {
      continuation: true,
      intact: false,
      pattern: 'en',
      size: '2'
    }, {
      continuation: false,
      intact: false,
      pattern: 'nn',
      size: '1'
    }],
    p: [{
      continuation: true,
      intact: false,
      pattern: 'ship',
      size: '4'
    }, {
      continuation: false,
      intact: false,
      pattern: 'pp',
      size: '1'
    }],
    r: [{
      continuation: true,
      intact: false,
      pattern: 'er',
      size: '2'
    }, {
      continuation: false,
      intact: false,
      pattern: 'ear',
      size: '0'
    }, {
      continuation: false,
      intact: false,
      pattern: 'ar',
      size: '2'
    }, {
      continuation: true,
      intact: false,
      pattern: 'or',
      size: '2'
    }, {
      continuation: true,
      intact: false,
      pattern: 'ur',
      size: '2'
    }, {
      continuation: false,
      intact: false,
      pattern: 'rr',
      size: '1'
    }, {
      continuation: true,
      intact: false,
      pattern: 'tr',
      size: '1'
    }, {
      appendage: 'y',
      continuation: true,
      intact: false,
      pattern: 'ier',
      size: '3'
    }],
    s: [{
      appendage: 'y',
      continuation: true,
      intact: false,
      pattern: 'ies',
      size: '3'
    }, {
      continuation: false,
      intact: false,
      pattern: 'sis',
      size: '2'
    }, {
      continuation: true,
      intact: false,
      pattern: 'is',
      size: '2'
    }, {
      continuation: true,
      intact: false,
      pattern: 'ness',
      size: '4'
    }, {
      continuation: false,
      intact: false,
      pattern: 'ss',
      size: '0'
    }, {
      continuation: true,
      intact: false,
      pattern: 'ous',
      size: '3'
    }, {
      continuation: false,
      intact: true,
      pattern: 'us',
      size: '2'
    }, {
      continuation: true,
      intact: true,
      pattern: 's',
      size: '1'
    }, {
      continuation: false,
      intact: false,
      pattern: 's',
      size: '0'
    }],
    t: [{
      appendage: 'y',
      continuation: false,
      intact: false,
      pattern: 'plicat',
      size: '4'
    }, {
      continuation: true,
      intact: false,
      pattern: 'at',
      size: '2'
    }, {
      continuation: true,
      intact: false,
      pattern: 'ment',
      size: '4'
    }, {
      continuation: true,
      intact: false,
      pattern: 'ent',
      size: '3'
    }, {
      continuation: true,
      intact: false,
      pattern: 'ant',
      size: '3'
    }, {
      appendage: 'b',
      continuation: false,
      intact: false,
      pattern: 'ript',
      size: '2'
    }, {
      appendage: 'b',
      continuation: false,
      intact: false,
      pattern: 'orpt',
      size: '2'
    }, {
      continuation: false,
      intact: false,
      pattern: 'duct',
      size: '1'
    }, {
      continuation: false,
      intact: false,
      pattern: 'sumpt',
      size: '2'
    }, {
      appendage: 'iv',
      continuation: false,
      intact: false,
      pattern: 'cept',
      size: '2'
    }, {
      appendage: 'v',
      continuation: false,
      intact: false,
      pattern: 'olut',
      size: '2'
    }, {
      continuation: false,
      intact: false,
      pattern: 'sist',
      size: '0'
    }, {
      continuation: true,
      intact: false,
      pattern: 'ist',
      size: '3'
    }, {
      continuation: false,
      intact: false,
      pattern: 'tt',
      size: '1'
    }],
    u: [{
      continuation: false,
      intact: false,
      pattern: 'iqu',
      size: '3'
    }, {
      continuation: false,
      intact: false,
      pattern: 'ogu',
      size: '1'
    }],
    v: [{
      appendage: 'j',
      continuation: true,
      intact: false,
      pattern: 'siv',
      size: '3'
    }, {
      continuation: false,
      intact: false,
      pattern: 'eiv',
      size: '0'
    }, {
      continuation: true,
      intact: false,
      pattern: 'iv',
      size: '2'
    }],
    y: [{
      continuation: true,
      intact: false,
      pattern: 'bly',
      size: '1'
    }, {
      appendage: 'y',
      continuation: true,
      intact: false,
      pattern: 'ily',
      size: '3'
    }, {
      continuation: false,
      intact: false,
      pattern: 'ply',
      size: '0'
    }, {
      continuation: true,
      intact: false,
      pattern: 'ly',
      size: '2'
    }, {
      continuation: false,
      intact: false,
      pattern: 'ogy',
      size: '1'
    }, {
      continuation: false,
      intact: false,
      pattern: 'phy',
      size: '1'
    }, {
      continuation: false,
      intact: false,
      pattern: 'omy',
      size: '1'
    }, {
      continuation: false,
      intact: false,
      pattern: 'opy',
      size: '1'
    }, {
      continuation: true,
      intact: false,
      pattern: 'ity',
      size: '3'
    }, {
      continuation: true,
      intact: false,
      pattern: 'ety',
      size: '3'
    }, {
      continuation: false,
      intact: false,
      pattern: 'lty',
      size: '2'
    }, {
      continuation: false,
      intact: false,
      pattern: 'istry',
      size: '5'
    }, {
      continuation: true,
      intact: false,
      pattern: 'ary',
      size: '3'
    }, {
      continuation: true,
      intact: false,
      pattern: 'ory',
      size: '3'
    }, {
      continuation: false,
      intact: false,
      pattern: 'ify',
      size: '3'
    }, {
      appendage: 't',
      continuation: true,
      intact: false,
      pattern: 'ncy',
      size: '2'
    }, {
      continuation: true,
      intact: false,
      pattern: 'acy',
      size: '3'
    }],
    z: [{
      continuation: true,
      intact: false,
      pattern: 'iz',
      size: '2'
    }, {
      appendage: 's',
      continuation: false,
      intact: false,
      pattern: 'yz',
      size: '1'
    }]
  };
  return lancaster_rules;
}

/*
Copyright (c) 2011, Chris Umbel

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/
var lancaster_stemmer;
var hasRequiredLancaster_stemmer;
function requireLancaster_stemmer() {
  if (hasRequiredLancaster_stemmer) return lancaster_stemmer;
  hasRequiredLancaster_stemmer = 1;
  const Stemmer = requireStemmer();
  const ruleTable = requireLancaster_rules().rules;
  function acceptable(candidate) {
    if (candidate.match(/^[aeiou]/)) {
      return candidate.length > 1;
    } else {
      return candidate.length > 2 && candidate.match(/[aeiouy]/);
    }
  }

  // take a token, look up the applicatble rule section and attempt some stemming!
  function applyRuleSection(token, intact) {
    const section = token.substr(-1);
    const rules = ruleTable[section];
    if (rules) {
      for (let i = 0; i < rules.length; i++) {
        if ((intact || !rules[i].intact) &&
        // only apply intact rules to intact tokens
        token.substr(0 - rules[i].pattern.length) === rules[i].pattern) {
          // hack off only as much as the rule indicates
          let result = token.substr(0, token.length - rules[i].size);

          // if the rules wants us to apply an appendage do so
          if (rules[i].appendage) {
            result += rules[i].appendage;
          }
          if (acceptable(result)) {
            token = result;

            // see what the rules wants to do next
            if (rules[i].continuation) {
              // this rule thinks there still might be stem left. keep at it.
              // since we've applied a change we'll pass false in for intact
              return applyRuleSection(result, false);
            } else {
              // the rule thinks we're done stemming. drop out.
              return result;
            }
          }
        }
      }
    }
    return token;
  }
  const LancasterStemmer = new Stemmer();
  lancaster_stemmer = LancasterStemmer;
  LancasterStemmer.stem = function (token) {
    return applyRuleSection(token.toLowerCase(), true);
  };
  return lancaster_stemmer;
}

var normalizer_ja = {};

var utils$2 = {};

/*
Copyright (c) 2012, Guillaume Marty

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
 */
var hasRequiredUtils;
function requireUtils() {
  if (hasRequiredUtils) return utils$2;
  hasRequiredUtils = 1;

  /**
   * Generate a replacing function given a table of patterns. Inspired by:
   * http://code.google.com/p/jslibs/wiki/JavascriptTips#String_converter
   * The order of elements is significant. Longer elements should be listed first.
   * @see Speed test http://jsperf.com/build-a-regexp-table
   *
   * @param {Object.<string, string>} translationTable The translation table of key value.
   * @return {function(string): string} A translating function.
   */
  function replacer(translationTable) {
    /**
     * An array of translationTable keys.
     * @type {Array.<string>}
     */
    const pattern = [];

    /**
     * Used to iterate over translationTable.
     * @type {string}
     */
    let key;
    for (key in translationTable) {
      // Escaping regexp special chars.
      // @see Speed test for type casting to string http://jsperf.com/string-type-casting/2
      // @see http://closure-library.googlecode.com/svn/docs/closure_goog_string_string.js.source.html#line956
      /* eslint-disable no-control-regex */
      const key1 = ('' + key).replace(/([-()[\]{}+?*.$^|,:#<!\\/])/g, '\\$1').replace(/\x08/g, '\\x08');
      pattern.push(key1);
    }

    /**
     * The regular expression doing the replacement job.
     * @type {RegExp}
     */
    const regExp = new RegExp(pattern.join('|'), 'g');

    /**
     * @param {string} str Input string.
     * @return {string} The string replaced.
     */
    return function (str) {
      return str.replace(regExp, function (str) {
        return translationTable[str];
      });
    };
  }

  /**
   * Exchanges all keys with their associated values in an object.
   *
   * @param {Object.<string, string>} obj An object of strings.
   * @return {Object.<string, string>} An object of strings.
   */
  function flip(obj) {
    const newObj = Object.create(null);
    let key;
    for (key in obj) {
      newObj[obj[key]] = key;
    }
    return newObj;
  }

  /**
   * Merge several objects. Properties from earlier objects are overwritten by
   * laters's in case of conflict.
   *
   * @param {...Object.<string, string>} var_args One or more objects of strings.
   * @return {!Object.<string, string>} An object of strings.
   */
  function merge(varArgs) {
    const args = [].slice.call(arguments);
    const newObj = Object.create(null);
    let id = 0;
    let key;
    while (args[id]) {
      for (key in args[id]) {
        newObj[key] = args[id][key];
      }
      id++;
    }
    return newObj;
  }
  utils$2.replacer = replacer;
  utils$2.flip = flip;
  utils$2.merge = merge;
  return utils$2;
}

/*
 Copyright (c) 2012, Guillaume Marty

 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights
 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions:

 The above copyright notice and this permission notice shall be included in
 all copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 THE SOFTWARE.
 */
var hasRequiredNormalizer_ja;
function requireNormalizer_ja() {
  if (hasRequiredNormalizer_ja) return normalizer_ja;
  hasRequiredNormalizer_ja = 1;

  /**
   * Normalize Japanese inputs and expose function to perform several conversions.
   *
   * Note: The space character is treated like a roman character as it usually
   *   has the same width as them in Japanese texts.
   *
   * \@todo Replace characters range from ㈠ to ㉃, ㊀ to ㊰ and ㇰ to ㇿ.
   * \@todo Lazy initializations of conversionTables and converters.
   * \@todo Would fixHalfwidthKana be useful?
   *
   * Descriptions of functions exposed:
   * normalizeJapanese 「全角」英字・数字を「半角」、「半角」記・カタカナを「全角」に変換
   * converters.fullwidthToHalfwidth.alphabet    「全角」英字を「半角」に変換
   * converters.halfwidthToFullwidth.alphabet    「半角」英字を「全角」に変換
   * converters.fullwidthToHalfwidth.numbers     「全角」数字を「半角」に変換
   * converters.halfwidthToFullwidth.numbers     「半角」数字を「全角」に変換 「全角」スペースを「半角」
   * converters.fullwidthToHalfwidth.punctuation 「全角」記号を「半角」に変換 「半角」スペースを「全角」
   * converters.halfwidthToFullwidth.punctuation 「半角」記号を「全角」に変換
   * converters.fullwidthToHalfwidth.katakana    「全角カタカナ」を「半角カタカナ」に変換
   * converters.halfwidthToFullwidth.katakana    「半角カタカナ」を「全角カタカナ」に変換
   * converters.hiraganaToKatakana               「カタカナ」を「ひらがな」に変換
   * converters.katakanaToHiragana               「ひらがな」を「カタカナ」に変換
   */

  const flip = requireUtils().flip;
  const merge = requireUtils().merge;
  const replacer = requireUtils().replacer;

  // From http://fernweh.jp/b/mb_convert_kana_js/
  const conversionTables = {
    fullwidthToHalfwidth: {
      alphabet: {
        ａ: 'a',
        ｂ: 'b',
        ｃ: 'c',
        ｄ: 'd',
        ｅ: 'e',
        ｆ: 'f',
        ｇ: 'g',
        ｈ: 'h',
        ｉ: 'i',
        ｊ: 'j',
        ｋ: 'k',
        ｌ: 'l',
        ｍ: 'm',
        ｎ: 'n',
        ｏ: 'o',
        ｐ: 'p',
        ｑ: 'q',
        ｒ: 'r',
        ｓ: 's',
        ｔ: 't',
        ｕ: 'u',
        ｖ: 'v',
        ｗ: 'w',
        ｘ: 'x',
        ｙ: 'y',
        ｚ: 'z',
        Ａ: 'A',
        Ｂ: 'B',
        Ｃ: 'C',
        Ｄ: 'D',
        Ｅ: 'E',
        Ｆ: 'F',
        Ｇ: 'G',
        Ｈ: 'H',
        Ｉ: 'I',
        Ｊ: 'J',
        Ｋ: 'K',
        Ｌ: 'L',
        Ｍ: 'M',
        Ｎ: 'N',
        Ｏ: 'O',
        Ｐ: 'P',
        Ｑ: 'Q',
        Ｒ: 'R',
        Ｓ: 'S',
        Ｔ: 'T',
        Ｕ: 'U',
        Ｖ: 'V',
        Ｗ: 'W',
        Ｘ: 'X',
        Ｙ: 'Y',
        Ｚ: 'Z',
        '　': ' ' // Fullwidth space
      },
      numbers: {
        '０': '0',
        '１': '1',
        '２': '2',
        '３': '3',
        '４': '4',
        '５': '5',
        '６': '6',
        '７': '7',
        '８': '8',
        '９': '9'
      },
      symbol: {
        '＿': '_',
        '－': '-',
        '，': ',',
        '；': ';',
        '：': ':',
        '！': '!',
        '？': '?',
        '．': '.',
        '（': '(',
        '）': ')',
        '［': '[',
        '］': ']',
        '｛': '{',
        '｝': '}',
        '＠': '@',
        '＊': '*',
        '＼': '\\',
        '／': '/',
        '＆': '&',
        '＃': '#',
        '％': '%',
        '｀': '`',
        '＾': '^',
        '＋': '+',
        '＜': '<',
        '＝': '=',
        '＞': '>',
        '｜': '|',
        // Never converted: '～': '~',
        '≪': '«',
        '≫': '»',
        '─': '-',
        '＄': '$',
        '＂': '"'
      },
      purePunctuation: {
        '、': '､',
        '。': '｡',
        '・': '･',
        '「': '｢',
        '」': '｣'
      },
      punctuation: {},
      katakana: {
        ゛: 'ﾞ',
        ゜: 'ﾟ',
        ー: 'ｰ',
        ヴ: 'ｳﾞ',
        ガ: 'ｶﾞ',
        ギ: 'ｷﾞ',
        グ: 'ｸﾞ',
        ゲ: 'ｹﾞ',
        ゴ: 'ｺﾞ',
        ザ: 'ｻﾞ',
        ジ: 'ｼﾞ',
        ズ: 'ｽﾞ',
        ゼ: 'ｾﾞ',
        ゾ: 'ｿﾞ',
        ダ: 'ﾀﾞ',
        ヂ: 'ﾁﾞ',
        ヅ: 'ﾂﾞ',
        デ: 'ﾃﾞ',
        ド: 'ﾄﾞ',
        バ: 'ﾊﾞ',
        パ: 'ﾊﾟ',
        ビ: 'ﾋﾞ',
        ピ: 'ﾋﾟ',
        ブ: 'ﾌﾞ',
        プ: 'ﾌﾟ',
        ベ: 'ﾍﾞ',
        ペ: 'ﾍﾟ',
        ボ: 'ﾎﾞ',
        ポ: 'ﾎﾟ',
        ァ: 'ｧ',
        ア: 'ｱ',
        ィ: 'ｨ',
        イ: 'ｲ',
        ゥ: 'ｩ',
        ウ: 'ｳ',
        ェ: 'ｪ',
        エ: 'ｴ',
        ォ: 'ｫ',
        オ: 'ｵ',
        カ: 'ｶ',
        キ: 'ｷ',
        ク: 'ｸ',
        ケ: 'ｹ',
        コ: 'ｺ',
        サ: 'ｻ',
        シ: 'ｼ',
        ス: 'ｽ',
        セ: 'ｾ',
        ソ: 'ｿ',
        タ: 'ﾀ',
        チ: 'ﾁ',
        ッ: 'ｯ',
        ツ: 'ﾂ',
        テ: 'ﾃ',
        ト: 'ﾄ',
        ナ: 'ﾅ',
        ニ: 'ﾆ',
        ヌ: 'ﾇ',
        ネ: 'ﾈ',
        ノ: 'ﾉ',
        ハ: 'ﾊ',
        ヒ: 'ﾋ',
        フ: 'ﾌ',
        ヘ: 'ﾍ',
        ホ: 'ﾎ',
        マ: 'ﾏ',
        ミ: 'ﾐ',
        ム: 'ﾑ',
        メ: 'ﾒ',
        モ: 'ﾓ',
        ャ: 'ｬ',
        ヤ: 'ﾔ',
        ュ: 'ｭ',
        ユ: 'ﾕ',
        ョ: 'ｮ',
        ヨ: 'ﾖ',
        ラ: 'ﾗ',
        リ: 'ﾘ',
        ル: 'ﾙ',
        レ: 'ﾚ',
        ロ: 'ﾛ',
        ワ: 'ﾜ',
        ヲ: 'ｦ',
        ン: 'ﾝ'
      }
    },
    halfwidthToFullwidth: {}
  };
  const fixFullwidthKana = {
    ゝ゛: 'ゞ',
    ヽ゛: 'ヾ',
    う゛: 'ゔ',
    か゛: 'が',
    き゛: 'ぎ',
    く゛: 'ぐ',
    け゛: 'げ',
    こ゛: 'ご',
    さ゛: 'ざ',
    し゛: 'じ',
    す゛: 'ず',
    せ゛: 'ぜ',
    そ゛: 'ぞ',
    た゛: 'だ',
    ち゛: 'ぢ',
    つ゛: 'づ',
    て゛: 'で',
    と゛: 'ど',
    は゛: 'ば',
    は゜: 'ぱ',
    ひ゛: 'び',
    ひ゜: 'ぴ',
    ふ゛: 'ぶ',
    ふ゜: 'ぷ',
    へ゛: 'べ',
    へ゜: 'ぺ',
    ほ゛: 'ぼ',
    ほ゜: 'ぽ',
    っな: 'んな',
    っに: 'んに',
    っぬ: 'んぬ',
    っね: 'んね',
    っの: 'んの',
    ウ゛: 'ヴ',
    カ゛: 'ガ',
    キ゛: 'ギ',
    ク゛: 'グ',
    ケ゛: 'ゲ',
    コ゛: 'ゴ',
    サ゛: 'ザ',
    シ゛: 'ジ',
    ス゛: 'ズ',
    セ゛: 'ゼ',
    ソ゛: 'ゾ',
    タ゛: 'ダ',
    チ゛: 'ヂ',
    ツ゛: 'ヅ',
    テ゛: 'デ',
    ト゛: 'ド',
    ハ゛: 'バ',
    ハ゜: 'パ',
    ヒ゛: 'ビ',
    ヒ゜: 'ピ',
    フ゛: 'ブ',
    フ゜: 'プ',
    ヘ゛: 'ベ',
    ヘ゜: 'ペ',
    ホ゛: 'ボ',
    ホ゜: 'ポ',
    ッナ: 'ンナ',
    ッニ: 'ンニ',
    ッヌ: 'ンヌ',
    ッネ: 'ンネ',
    ッノ: 'ンノ'
  };
  const fixCompositeSymbolsTable = {
    '㋀': '1月',
    '㋁': '2月',
    '㋂': '3月',
    '㋃': '4月',
    '㋄': '5月',
    '㋅': '6月',
    '㋆': '7月',
    '㋇': '8月',
    '㋈': '9月',
    '㋉': '10月',
    '㋊': '11月',
    '㋋': '12月',
    '㏠': '1日',
    '㏡': '2日',
    '㏢': '3日',
    '㏣': '4日',
    '㏤': '5日',
    '㏥': '6日',
    '㏦': '7日',
    '㏧': '8日',
    '㏨': '9日',
    '㏩': '10日',
    '㏪': '11日',
    '㏫': '12日',
    '㏬': '13日',
    '㏭': '14日',
    '㏮': '15日',
    '㏯': '16日',
    '㏰': '17日',
    '㏱': '18日',
    '㏲': '19日',
    '㏳': '20日',
    '㏴': '21日',
    '㏵': '22日',
    '㏶': '23日',
    '㏷': '24日',
    '㏸': '25日',
    '㏹': '26日',
    '㏺': '27日',
    '㏻': '28日',
    '㏼': '29日',
    '㏽': '30日',
    '㏾': '31日',
    '㍘': '0点',
    '㍙': '1点',
    '㍚': '2点',
    '㍛': '3点',
    '㍜': '4点',
    '㍝': '5点',
    '㍞': '6点',
    '㍟': '7点',
    '㍠': '8点',
    '㍡': '9点',
    '㍢': '10点',
    '㍣': '11点',
    '㍤': '12点',
    '㍥': '13点',
    '㍦': '14点',
    '㍧': '15点',
    '㍨': '16点',
    '㍩': '17点',
    '㍪': '18点',
    '㍫': '19点',
    '㍬': '20点',
    '㍭': '21点',
    '㍮': '22点',
    '㍯': '23点',
    '㍰': '24点',
    '㍻': '平成',
    '㍼': '昭和',
    '㍽': '大正',
    '㍾': '明治',
    '㍿': '株式会社',
    '㌀': 'アパート',
    '㌁': 'アルファ',
    '㌂': 'アンペア',
    '㌃': 'アール',
    '㌄': 'イニング',
    '㌅': 'インチ',
    '㌆': 'ウオン',
    '㌇': 'エスクード',
    '㌈': 'エーカー',
    '㌉': 'オンス',
    '㌊': 'オーム',
    '㌋': 'カイリ',
    // 海里
    '㌌': 'カラット',
    '㌍': 'カロリー',
    '㌎': 'ガロン',
    '㌏': 'ガンマ',
    '㌐': 'ギガ',
    '㌑': 'ギニー',
    '㌒': 'キュリー',
    '㌓': 'ギルダー',
    '㌔': 'キロ',
    '㌕': 'キログラム',
    '㌖': 'キロメートル',
    '㌗': 'キロワット',
    '㌘': 'グラム',
    '㌙': 'グラムトン',
    '㌚': 'クルゼイロ',
    '㌛': 'クローネ',
    '㌜': 'ケース',
    '㌝': 'コルナ',
    '㌞': 'コーポ',
    '㌟': 'サイクル',
    '㌠': 'サンチーム',
    '㌡': 'シリング',
    '㌢': 'センチ',
    '㌣': 'セント',
    '㌤': 'ダース',
    '㌥': 'デシ',
    '㌦': 'ドル',
    '㌧': 'トン',
    '㌨': 'ナノ',
    '㌩': 'ノット',
    '㌪': 'ハイツ',
    '㌫': 'パーセント',
    '㌬': 'パーツ',
    '㌭': 'バーレル',
    '㌮': 'ピアストル',
    '㌯': 'ピクル',
    '㌰': 'ピコ',
    '㌱': 'ビル',
    '㌲': 'ファラッド',
    '㌳': 'フィート',
    '㌴': 'ブッシェル',
    '㌵': 'フラン',
    '㌶': 'ヘクタール',
    '㌷': 'ペソ',
    '㌸': 'ペニヒ',
    '㌹': 'ヘルツ',
    '㌺': 'ペンス',
    '㌻': 'ページ',
    '㌼': 'ベータ',
    '㌽': 'ポイント',
    '㌾': 'ボルト',
    '㌿': 'ホン',
    '㍀': 'ポンド',
    '㍁': 'ホール',
    '㍂': 'ホーン',
    '㍃': 'マイクロ',
    '㍄': 'マイル',
    '㍅': 'マッハ',
    '㍆': 'マルク',
    '㍇': 'マンション',
    '㍈': 'ミクロン',
    '㍉': 'ミリ',
    '㍊': 'ミリバール',
    '㍋': 'メガ',
    '㍌': 'メガトン',
    '㍍': 'メートル',
    '㍎': 'ヤード',
    '㍏': 'ヤール',
    '㍐': 'ユアン',
    '㍑': 'リットル',
    '㍒': 'リラ',
    '㍓': 'ルピー',
    '㍔': 'ルーブル',
    '㍕': 'レム',
    '㍖': 'レントゲン',
    '㍗': 'ワット'
  };

  // punctuation is pure_punctuation
  conversionTables.fullwidthToHalfwidth.punctuation = merge(conversionTables.fullwidthToHalfwidth.symbol, conversionTables.fullwidthToHalfwidth.purePunctuation);

  // Fill in the conversion tables with the flipped tables.
  conversionTables.halfwidthToFullwidth.alphabet = flip(conversionTables.fullwidthToHalfwidth.alphabet);
  conversionTables.halfwidthToFullwidth.numbers = flip(conversionTables.fullwidthToHalfwidth.numbers);
  conversionTables.halfwidthToFullwidth.symbol = flip(conversionTables.fullwidthToHalfwidth.symbol);
  conversionTables.halfwidthToFullwidth.purePunctuation = flip(conversionTables.fullwidthToHalfwidth.purePunctuation);
  conversionTables.halfwidthToFullwidth.punctuation = flip(conversionTables.fullwidthToHalfwidth.punctuation);
  conversionTables.halfwidthToFullwidth.katakana = flip(conversionTables.fullwidthToHalfwidth.katakana);

  // Build the normalization table.
  conversionTables.normalize = merge(conversionTables.fullwidthToHalfwidth.alphabet, conversionTables.fullwidthToHalfwidth.numbers, conversionTables.fullwidthToHalfwidth.symbol, conversionTables.halfwidthToFullwidth.purePunctuation, conversionTables.halfwidthToFullwidth.katakana);
  class Converters {
    alphabetFH(str) {
      return replacer(conversionTables.fullwidthToHalfwidth.alphabet)(str);
    }
    numbersFH(str) {
      return replacer(conversionTables.fullwidthToHalfwidth.numbers)(str);
    }
    symbolFH(str) {
      return replacer(conversionTables.fullwidthToHalfwidth.symbol)(str);
    }
    purePunctuationFH(str) {
      return replacer(conversionTables.fullwidthToHalfwidth.purePunctuation)(str);
    }
    punctuationFH(str) {
      return replacer(conversionTables.fullwidthToHalfwidth.punctuation)(str);
    }
    katakanaFH(str) {
      return replacer(conversionTables.fullwidthToHalfwidth.katakana)(str);
    }
    static fixFullwidthKana(str) {
      return replacer(fixFullwidthKana)(str);
    }
    static normalize(str) {
      return replacer(conversionTables.normalize)(str);
    }
    alphabetHF(str) {
      return replacer(conversionTables.halfwidthToFullwidth.alphabet)(str);
    }
    numbersHF(str) {
      return replacer(conversionTables.halfwidthToFullwidth.numbers)(str);
    }
    symbolHF(str) {
      return replacer(conversionTables.halfwidthToFullwidth.symbol)(str);
    }
    purePunctuationHF(str) {
      return replacer(conversionTables.halfwidthToFullwidth.purePunctuation)(str);
    }
    punctuationHF(str) {
      return replacer(conversionTables.halfwidthToFullwidth.punctuation)(str);
    }
    katakanaHF(str) {
      return replacer(conversionTables.halfwidthToFullwidth.katakana)(str);
    }
    static fixCompositeSymbols(str) {
      return replacer(fixCompositeSymbolsTable)(str);
    }

    /**
     * Convert hiragana to fullwidth katakana.
     * According to http://jsperf.com/converting-japanese, these implementations are
     * faster than using lookup tables.
     *
     * @param {string} str A string.
     * @return {string} A string not containing hiragana.
     */
    hiraganaToKatakana(str) {
      str = this.katakanaHF(str);
      str = Converters.fixFullwidthKana(str);
      str = str.replace(/ゝ/g, 'ヽ');
      str = str.replace(/ゞ/g, 'ヾ');
      // str = str.replace(/?/g, '𛀀'); // Letter archaic E

      str = str.replace(/[ぁ-ゖ]/g, function (str) {
        return String.fromCharCode(str.charCodeAt(0) + 96);
      });
      return str;
    }

    /**
     * Convert katakana to hiragana.
     *
     * @param {string} str A string.
     * @return {string} A string not containing katakana.
     */
    katakanaToHiragana(str) {
      str = this.katakanaHF(str);
      str = Converters.fixFullwidthKana(str);
      str = str.replace(/ヽ/g, 'ゝ');
      str = str.replace(/ヾ/g, 'ゞ');
      // str = str.replace(/?/g, '𛀁'); // Letter archaic E

      str = str.replace(/[ァ-ヶ]/g, function (str) {
        return String.fromCharCode(str.charCodeAt(0) - 96);
      });
      return str;
    }
  }

  /**
   * Fix kana and apply the following processes;
   * * Replace repeat characters
   * * Alphabet to halfwidth
   * * Numbers to halfwidth
   * * Punctuation to fullwidth
   * * Katakana to fullwidth
   * * Fix fullwidth kana
   * * Replace composite symbols
   *
   * @param {string} str
   * @return {string}
   */
  const normalizeJa = function (str) {
    // Replace repeat characters.
    str = str.replace(/(..)々々/g, '$1$1').replace(/(.)々/g, '$1$1');
    str = Converters.normalize(str);
    str = Converters.fixFullwidthKana(str);

    // Replace composite symbols.
    str = Converters.fixCompositeSymbols(str);
    return str;
  };
  normalizer_ja.normalizeJa = normalizeJa;
  normalizer_ja.Converters = Converters;
  return normalizer_ja;
}

var tokenizer_ja;
var hasRequiredTokenizer_ja;
function requireTokenizer_ja() {
  if (hasRequiredTokenizer_ja) return tokenizer_ja;
  hasRequiredTokenizer_ja = 1;
  const Tokenizer = requireTokenizer();
  const normalize = requireNormalizer_ja().normalizeJa;
  const util = require$$1;

  /**
   * @constructor
   */
  const TokenizerJa = function () {
    this.chartype_ = [[/[〇一二三四五六七八九十百千万億兆]/, 'M'], [/[一-鿌〆]/, 'H'], [/[ぁ-ゟ]/, 'I'], [/[゠-ヿ]/, 'K'], [/[a-zA-Z]/, 'A'], [/[0-9]/, 'N']];
    this.BIAS__ = -332;
    this.BC1__ = {
      HH: 6,
      II: 2461,
      KH: 406,
      OH: -1378
    };
    this.BC2__ = {
      AA: -3267,
      AI: 2744,
      AN: -878,
      HH: -4070,
      HM: -1711,
      HN: 4012,
      HO: 3761,
      IA: 1327,
      IH: -1184,
      II: -1332,
      IK: 1721,
      IO: 5492,
      KI: 3831,
      KK: -8741,
      MH: -3132,
      MK: 3334,
      OO: -2920
    };
    this.BC3__ = {
      HH: 996,
      HI: 626,
      HK: -721,
      HN: -1307,
      HO: -836,
      IH: -301,
      KK: 2762,
      MK: 1079,
      MM: 4034,
      OA: -1652,
      OH: 266
    };
    this.BP1__ = {
      BB: 295,
      OB: 304,
      OO: -125,
      UB: 352
    };
    this.BP2__ = {
      BO: 60,
      OO: -1762
    };
    this.BQ1__ = {
      BHH: 1150,
      BHM: 1521,
      BII: -1158,
      BIM: 886,
      BMH: 1208,
      BNH: 449,
      BOH: -91,
      BOO: -2597,
      OHI: 451,
      OIH: -296,
      OKA: 1851,
      OKH: -1020,
      OKK: 904,
      OOO: 2965
    };
    this.BQ2__ = {
      BHH: 118,
      BHI: -1159,
      BHM: 466,
      BIH: -919,
      BKK: -1720,
      BKO: 864,
      OHH: -1139,
      OHM: -181,
      OIH: 153,
      UHI: -1146
    };
    this.BQ3__ = {
      BHH: -792,
      BHI: 2664,
      BII: -299,
      BKI: 419,
      BMH: 937,
      BMM: 8335,
      BNN: 998,
      BOH: 775,
      OHH: 2174,
      OHM: 439,
      OII: 280,
      OKH: 1798,
      OKI: -793,
      OKO: -2242,
      OMH: -2402,
      OOO: 11699
    };
    this.BQ4__ = {
      BHH: -3895,
      BIH: 3761,
      BII: -4654,
      BIK: 1348,
      BKK: -1806,
      BMI: -3385,
      BOO: -12396,
      OAH: 926,
      OHH: 266,
      OHK: -2036,
      ONN: -973
    };
    this.BW1__ = {
      '，と': 660,
      '，同': 727,
      B1あ: 1404,
      B1同: 542,
      '、と': 660,
      '、同': 727,
      '｣と': 1682,
      あっ: 1505,
      いう: 1743,
      いっ: -2055,
      いる: 672,
      うし: -4817,
      うん: 665,
      から: 3472,
      がら: 600,
      こう: -790,
      こと: 2083,
      こん: -1262,
      さら: -4143,
      さん: 4573,
      した: 2641,
      して: 1104,
      すで: -3399,
      そこ: 1977,
      それ: -871,
      たち: 1122,
      ため: 601,
      った: 3463,
      つい: -802,
      てい: 805,
      てき: 1249,
      でき: 1127,
      です: 3445,
      では: 844,
      とい: -4915,
      とみ: 1922,
      どこ: 3887,
      ない: 5713,
      なっ: 3015,
      など: 7379,
      なん: -1113,
      にし: 2468,
      には: 1498,
      にも: 1671,
      に対: -912,
      の一: -501,
      の中: 741,
      ませ: 2448,
      まで: 1711,
      まま: 2600,
      まる: -2155,
      やむ: -1947,
      よっ: -2565,
      れた: 2369,
      れで: -913,
      をし: 1860,
      を見: 731,
      亡く: -1886,
      京都: 2558,
      取り: -2784,
      大き: -2604,
      大阪: 1497,
      平方: -2314,
      引き: -1336,
      日本: -195,
      本当: -2423,
      毎日: -2113,
      目指: -724
    };
    this.BW2__ = {
      11: -669,
      '．．': -11822,
      '――': -5730,
      '−−': -13175,
      いう: -1609,
      うか: 2490,
      かし: -1350,
      かも: -602,
      から: -7194,
      かれ: 4612,
      がい: 853,
      がら: -3198,
      きた: 1941,
      くな: -1597,
      こと: -8392,
      この: -4193,
      させ: 4533,
      され: 13168,
      さん: -3977,
      しい: -1819,
      しか: -545,
      した: 5078,
      して: 972,
      しな: 939,
      その: -3744,
      たい: -1253,
      たた: -662,
      ただ: -3857,
      たち: -786,
      たと: 1224,
      たは: -939,
      った: 4589,
      って: 1647,
      っと: -2094,
      てい: 6144,
      てき: 3640,
      てく: 2551,
      ては: -3110,
      ても: -3065,
      でい: 2666,
      でき: -1528,
      でし: -3828,
      です: -4761,
      でも: -4203,
      とい: 1890,
      とこ: -1746,
      とと: -2279,
      との: 720,
      とみ: 5168,
      とも: -3941,
      ない: -2488,
      なが: -1313,
      など: -6509,
      なの: 2614,
      なん: 3099,
      にお: -1615,
      にし: 2748,
      にな: 2454,
      によ: -7236,
      に対: -14943,
      に従: -4688,
      に関: -11388,
      のか: 2093,
      ので: -7059,
      のに: -6041,
      のの: -6125,
      はい: 1073,
      はが: -1033,
      はず: -2532,
      ばれ: 1813,
      まし: -1316,
      まで: -6621,
      まれ: 5409,
      めて: -3153,
      もい: 2230,
      もの: -10713,
      らか: -944,
      らし: -1611,
      らに: -1897,
      りし: 651,
      りま: 1620,
      れた: 4270,
      れて: 849,
      れば: 4114,
      ろう: 6067,
      われ: 7901,
      を通: -11877,
      んだ: 728,
      んな: -4115,
      一人: 602,
      一方: -1375,
      一日: 970,
      一部: -1051,
      上が: -4479,
      会社: -1116,
      出て: 2163,
      分の: -7758,
      同党: 970,
      同日: -913,
      大阪: -2471,
      委員: -1250,
      少な: -1050,
      年度: -8669,
      年間: -1626,
      府県: -2363,
      手権: -1982,
      新聞: -4066,
      日新: -722,
      日本: -7068,
      日米: 3372,
      曜日: -601,
      朝鮮: -2355,
      本人: -2697,
      東京: -1543,
      然と: -1384,
      社会: -1276,
      立て: -990,
      第に: -1612,
      米国: -4268
    };
    this.BW3__ = {
      あた: -2194,
      あり: 719,
      ある: 3846,
      'い．': -1185,
      'い。': -1185,
      いい: 5308,
      いえ: 2079,
      いく: 3029,
      いた: 2056,
      いっ: 1883,
      いる: 5600,
      いわ: 1527,
      うち: 1117,
      うと: 4798,
      えと: 1454,
      'か．': 2857,
      'か。': 2857,
      かけ: -743,
      かっ: -4098,
      かに: -669,
      から: 6520,
      かり: -2670,
      'が，': 1816,
      'が、': 1816,
      がき: -4855,
      がけ: -1127,
      がっ: -913,
      がら: -4977,
      がり: -2064,
      きた: 1645,
      けど: 1374,
      こと: 7397,
      この: 1542,
      ころ: -2757,
      さい: -714,
      さを: 976,
      'し，': 1557,
      'し、': 1557,
      しい: -3714,
      した: 3562,
      して: 1449,
      しな: 2608,
      しま: 1200,
      'す．': -1310,
      'す。': -1310,
      する: 6521,
      'ず，': 3426,
      'ず、': 3426,
      ずに: 841,
      そう: 428,
      'た．': 8875,
      'た。': 8875,
      たい: -594,
      たの: 812,
      たり: -1183,
      たる: -853,
      'だ．': 4098,
      'だ。': 4098,
      だっ: 1004,
      った: -4748,
      って: 300,
      てい: 6240,
      てお: 855,
      ても: 302,
      です: 1437,
      でに: -1482,
      では: 2295,
      とう: -1387,
      とし: 2266,
      との: 541,
      とも: -3543,
      どう: 4664,
      ない: 1796,
      なく: -903,
      など: 2135,
      'に，': -1021,
      'に、': -1021,
      にし: 1771,
      にな: 1906,
      には: 2644,
      'の，': -724,
      'の、': -724,
      の子: -1e3,
      'は，': 1337,
      'は、': 1337,
      べき: 2181,
      まし: 1113,
      ます: 6943,
      まっ: -1549,
      まで: 6154,
      まれ: -793,
      らし: 1479,
      られ: 6820,
      るる: 3818,
      'れ，': 854,
      'れ、': 854,
      れた: 1850,
      れて: 1375,
      れば: -3246,
      れる: 1091,
      われ: -605,
      んだ: 606,
      んで: 798,
      カ月: 990,
      会議: 860,
      入り: 1232,
      大会: 2217,
      始め: 1681,
      市: 965,
      新聞: -5055,
      '日，': 974,
      '日、': 974,
      社会: 2024
    };
    this.TC1__ = {
      AAA: 1093,
      HHH: 1029,
      HHM: 580,
      HII: 998,
      HOH: -390,
      HOM: -331,
      IHI: 1169,
      IOH: -142,
      IOI: -1015,
      IOM: 467,
      MMH: 187,
      OOI: -1832
    };
    this.TC2__ = {
      HHO: 2088,
      HII: -1023,
      HMM: -1154,
      IHI: -1965,
      KKH: 703,
      OII: -2649
    };
    this.TC3__ = {
      AAA: -294,
      HHH: 346,
      HHI: -341,
      HII: -1088,
      HIK: 731,
      HOH: -1486,
      IHH: 128,
      IHI: -3041,
      IHO: -1935,
      IIH: -825,
      IIM: -1035,
      IOI: -542,
      KHH: -1216,
      KKA: 491,
      KKH: -1217,
      KOK: -1009,
      MHH: -2694,
      MHM: -457,
      MHO: 123,
      MMH: -471,
      NNH: -1689,
      NNO: 662,
      OHO: -3393
    };
    this.TC4__ = {
      HHH: -203,
      HHI: 1344,
      HHK: 365,
      HHM: -122,
      HHN: 182,
      HHO: 669,
      HIH: 804,
      HII: 679,
      HOH: 446,
      IHH: 695,
      IHO: -2324,
      IIH: 321,
      III: 1497,
      IIO: 656,
      IOO: 54,
      KAK: 4845,
      KKA: 3386,
      KKK: 3065,
      MHH: -405,
      MHI: 201,
      MMH: -241,
      MMM: 661,
      MOM: 841
    };
    this.TQ1__ = {
      BHHH: -227,
      BHHI: 316,
      BHIH: -132,
      BIHH: 60,
      BIII: 1595,
      BNHH: -744,
      BOHH: 225,
      BOOO: -908,
      OAKK: 482,
      OHHH: 281,
      OHIH: 249,
      OIHI: 200,
      OIIH: -68
    };
    this.TQ2__ = {
      BIHH: -1401,
      BIII: -1033,
      BKAK: -543,
      BOOO: -5591
    };
    this.TQ3__ = {
      BHHH: 478,
      BHHM: -1073,
      BHIH: 222,
      BHII: -504,
      BIIH: -116,
      BIII: -105,
      BMHI: -863,
      BMHM: -464,
      BOMH: 620,
      OHHH: 346,
      OHHI: 1729,
      OHII: 997,
      OHMH: 481,
      OIHH: 623,
      OIIH: 1344,
      OKAK: 2792,
      OKHH: 587,
      OKKA: 679,
      OOHH: 110,
      OOII: -685
    };
    this.TQ4__ = {
      BHHH: -721,
      BHHM: -3604,
      BHII: -966,
      BIIH: -607,
      BIII: -2181,
      OAAA: -2763,
      OAKK: 180,
      OHHH: -294,
      OHHI: 2446,
      OHHO: 480,
      OHIH: -1573,
      OIHH: 1935,
      OIHI: -493,
      OIIH: 626,
      OIII: -4007,
      OKAK: -8156
    };
    this.TW1__ = {
      につい: -4681,
      東京都: 2026
    };
    this.TW2__ = {
      ある程: -2049,
      いった: -1256,
      ころが: -2434,
      しょう: 3873,
      その後: -4430,
      だって: -1049,
      ていた: 1833,
      として: -4657,
      ともに: -4517,
      もので: 1882,
      一気に: -792,
      初めて: -1512,
      同時に: -8097,
      大きな: -1255,
      対して: -2721,
      社会党: -3216
    };
    this.TW3__ = {
      いただ: -1734,
      してい: 1314,
      として: -4314,
      につい: -5483,
      にとっ: -5989,
      に当た: -6247,
      'ので，': -727,
      'ので、': -727,
      のもの: -600,
      れから: -3752,
      十二月: -2287
    };
    this.TW4__ = {
      'いう．': 8576,
      'いう。': 8576,
      からな: -2348,
      してい: 2958,
      'たが，': 1516,
      'たが、': 1516,
      ている: 1538,
      という: 1349,
      ました: 5543,
      ません: 1097,
      ようと: -4258,
      よると: 5865
    };
    this.UC1__ = {
      A: 484,
      K: 93,
      M: 645,
      O: -505
    };
    this.UC2__ = {
      A: 819,
      H: 1059,
      I: 409,
      M: 3987,
      N: 5775,
      O: 646
    };
    this.UC3__ = {
      A: -1370,
      I: 2311
    };
    this.UC4__ = {
      A: -2643,
      H: 1809,
      I: -1032,
      K: -3450,
      M: 3565,
      N: 3876,
      O: 6646
    };
    this.UC5__ = {
      H: 313,
      I: -1238,
      K: -799,
      M: 539,
      O: -831
    };
    this.UC6__ = {
      H: -506,
      I: -253,
      K: 87,
      M: 247,
      O: -387
    };
    this.UP1__ = {
      O: -214
    };
    this.UP2__ = {
      B: 69,
      O: 935
    };
    this.UP3__ = {
      B: 189
    };
    this.UQ1__ = {
      BH: 21,
      BI: -12,
      BK: -99,
      BN: 142,
      BO: -56,
      OH: -95,
      OI: 477,
      OK: 410,
      OO: -2422
    };
    this.UQ2__ = {
      BH: 216,
      BI: 113,
      OK: 1759
    };
    this.UQ3__ = {
      BA: -479,
      BH: 42,
      BI: 1913,
      BK: -7198,
      BM: 3160,
      BN: 6427,
      BO: 14761,
      OI: -827,
      ON: -3212
    };
    this.UW1__ = {
      '，': 156,
      '、': 156,
      '｢': -463,
      あ: -941,
      う: -127,
      が: -553,
      き: 121,
      こ: 505,
      で: -201,
      と: -547,
      ど: -123,
      に: -789,
      の: -185,
      は: -847,
      も: -466,
      や: -470,
      よ: 182,
      ら: -292,
      り: 208,
      れ: 169,
      を: -446,
      ん: -137,
      '・': -135,
      主: -402,
      京: -268,
      区: -912,
      午: 871,
      国: -460,
      大: 561,
      委: 729,
      市: -411,
      日: -141,
      理: 361,
      生: -408,
      県: -386,
      都: -718
    };
    this.UW2__ = {
      '，': -829,
      '、': -829,
      〇: 892,
      '｢': -645,
      '｣': 3145,
      あ: -538,
      い: 505,
      う: 134,
      お: -502,
      か: 1454,
      が: -856,
      く: -412,
      こ: 1141,
      さ: 878,
      ざ: 540,
      し: 1529,
      す: -675,
      せ: 300,
      そ: -1011,
      た: 188,
      だ: 1837,
      つ: -949,
      て: -291,
      で: -268,
      と: -981,
      ど: 1273,
      な: 1063,
      に: -1764,
      の: 130,
      は: -409,
      ひ: -1273,
      べ: 1261,
      ま: 600,
      も: -1263,
      や: -402,
      よ: 1639,
      り: -579,
      る: -694,
      れ: 571,
      を: -2516,
      ん: 2095,
      ア: -587,
      カ: 306,
      キ: 568,
      ッ: 831,
      三: -758,
      不: -2150,
      世: -302,
      中: -968,
      主: -861,
      事: 492,
      人: -123,
      会: 978,
      保: 362,
      入: 548,
      初: -3025,
      副: -1566,
      北: -3414,
      区: -422,
      大: -1769,
      天: -865,
      太: -483,
      子: -1519,
      学: 760,
      実: 1023,
      小: -2009,
      市: -813,
      年: -1060,
      強: 1067,
      手: -1519,
      揺: -1033,
      政: 1522,
      文: -1355,
      新: -1682,
      日: -1815,
      明: -1462,
      最: -630,
      朝: -1843,
      本: -1650,
      東: -931,
      果: -665,
      次: -2378,
      民: -180,
      気: -1740,
      理: 752,
      発: 529,
      目: -1584,
      相: -242,
      県: -1165,
      立: -763,
      第: 810,
      米: 509,
      自: -1353,
      行: 838,
      西: -744,
      見: -3874,
      調: 1010,
      議: 1198,
      込: 3041,
      開: 1758,
      間: -1257
    };
    this.UW3__ = {
      1: -800,
      '，': 4889,
      '−': -1723,
      '、': 4889,
      々: -2311,
      〇: 5827,
      '｣': 2670,
      '〓': -3573,
      あ: -2696,
      い: 1006,
      う: 2342,
      え: 1983,
      お: -4864,
      か: -1163,
      が: 3271,
      く: 1004,
      け: 388,
      げ: 401,
      こ: -3552,
      ご: -3116,
      さ: -1058,
      し: -395,
      す: 584,
      せ: 3685,
      そ: -5228,
      た: 842,
      ち: -521,
      っ: -1444,
      つ: -1081,
      て: 6167,
      で: 2318,
      と: 1691,
      ど: -899,
      な: -2788,
      に: 2745,
      の: 4056,
      は: 4555,
      ひ: -2171,
      ふ: -1798,
      へ: 1199,
      ほ: -5516,
      ま: -4384,
      み: -120,
      め: 1205,
      も: 2323,
      や: -788,
      よ: -202,
      ら: 727,
      り: 649,
      る: 5905,
      れ: 2773,
      わ: -1207,
      を: 6620,
      ん: -518,
      ア: 551,
      グ: 1319,
      ス: 874,
      ッ: -1350,
      ト: 521,
      ム: 1109,
      ル: 1591,
      ロ: 2201,
      ン: 278,
      '・': -3794,
      一: -1619,
      下: -1759,
      世: -2087,
      両: 3815,
      中: 653,
      主: -758,
      予: -1193,
      二: 974,
      人: 2742,
      今: 792,
      他: 1889,
      以: -1368,
      低: 811,
      何: 4265,
      作: -361,
      保: -2439,
      元: 4858,
      党: 3593,
      全: 1574,
      公: -3030,
      六: 755,
      共: -1880,
      円: 5807,
      再: 3095,
      分: 457,
      初: 2475,
      別: 1129,
      前: 2286,
      副: 4437,
      力: 365,
      動: -949,
      務: -1872,
      化: 1327,
      北: -1038,
      区: 4646,
      千: -2309,
      午: -783,
      協: -1006,
      口: 483,
      右: 1233,
      各: 3588,
      合: -241,
      同: 3906,
      和: -837,
      員: 4513,
      国: 642,
      型: 1389,
      場: 1219,
      外: -241,
      妻: 2016,
      学: -1356,
      安: -423,
      実: -1008,
      家: 1078,
      小: -513,
      少: -3102,
      州: 1155,
      市: 3197,
      平: -1804,
      年: 2416,
      広: -1030,
      府: 1605,
      度: 1452,
      建: -2352,
      当: -3885,
      得: 1905,
      思: -1291,
      性: 1822,
      戸: -488,
      指: -3973,
      政: -2013,
      教: -1479,
      数: 3222,
      文: -1489,
      新: 1764,
      日: 2099,
      旧: 5792,
      昨: -661,
      時: -1248,
      曜: -951,
      最: -937,
      月: 4125,
      期: 360,
      李: 3094,
      村: 364,
      東: -805,
      核: 5156,
      森: 2438,
      業: 484,
      氏: 2613,
      民: -1694,
      決: -1073,
      法: 1868,
      海: -495,
      無: 979,
      物: 461,
      特: -3850,
      生: -273,
      用: 914,
      町: 1215,
      的: 7313,
      直: -1835,
      省: 792,
      県: 6293,
      知: -1528,
      私: 4231,
      税: 401,
      立: -960,
      第: 1201,
      米: 7767,
      系: 3066,
      約: 3663,
      級: 1384,
      統: -4229,
      総: 1163,
      線: 1255,
      者: 6457,
      能: 725,
      自: -2869,
      英: 785,
      見: 1044,
      調: -562,
      財: -733,
      費: 1777,
      車: 1835,
      軍: 1375,
      込: -1504,
      通: -1136,
      選: -681,
      郎: 1026,
      郡: 4404,
      部: 1200,
      金: 2163,
      長: 421,
      開: -1432,
      間: 1302,
      関: -1282,
      雨: 2009,
      電: -1045,
      非: 2066,
      駅: 1620
    };
    this.UW4__ = {
      '，': 3930,
      '．': 3508,
      '―': -4841,
      '、': 3930,
      '。': 3508,
      〇: 4999,
      '｢': 1895,
      '｣': 3798,
      '〓': -5156,
      あ: 4752,
      い: -3435,
      う: -640,
      え: -2514,
      お: 2405,
      か: 530,
      が: 6006,
      き: -4482,
      ぎ: -3821,
      く: -3788,
      け: -4376,
      げ: -4734,
      こ: 2255,
      ご: 1979,
      さ: 2864,
      し: -843,
      じ: -2506,
      す: -731,
      ず: 1251,
      せ: 181,
      そ: 4091,
      た: 5034,
      だ: 5408,
      ち: -3654,
      っ: -5882,
      つ: -1659,
      て: 3994,
      で: 7410,
      と: 4547,
      な: 5433,
      に: 6499,
      ぬ: 1853,
      ね: 1413,
      の: 7396,
      は: 8578,
      ば: 1940,
      ひ: 4249,
      び: -4134,
      ふ: 1345,
      へ: 6665,
      べ: -744,
      ほ: 1464,
      ま: 1051,
      み: -2082,
      む: -882,
      め: -5046,
      も: 4169,
      ゃ: -2666,
      や: 2795,
      ょ: -1544,
      よ: 3351,
      ら: -2922,
      り: -9726,
      る: -14896,
      れ: -2613,
      ろ: -4570,
      わ: -1783,
      を: 13150,
      ん: -2352,
      カ: 2145,
      コ: 1789,
      セ: 1287,
      ッ: -724,
      ト: -403,
      メ: -1635,
      ラ: -881,
      リ: -541,
      ル: -856,
      ン: -3637,
      '・': -4371,
      ー: -11870,
      一: -2069,
      中: 2210,
      予: 782,
      事: -190,
      井: -1768,
      人: 1036,
      以: 544,
      会: 950,
      体: -1286,
      作: 530,
      側: 4292,
      先: 601,
      党: -2006,
      共: -1212,
      内: 584,
      円: 788,
      初: 1347,
      前: 1623,
      副: 3879,
      力: -302,
      動: -740,
      務: -2715,
      化: 776,
      区: 4517,
      協: 1013,
      参: 1555,
      合: -1834,
      和: -681,
      員: -910,
      器: -851,
      回: 1500,
      国: -619,
      園: -1200,
      地: 866,
      場: -1410,
      塁: -2094,
      士: -1413,
      多: 1067,
      大: 571,
      子: -4802,
      学: -1397,
      定: -1057,
      寺: -809,
      小: 1910,
      屋: -1328,
      山: -1500,
      島: -2056,
      川: -2667,
      市: 2771,
      年: 374,
      庁: -4556,
      後: 456,
      性: 553,
      感: 916,
      所: -1566,
      支: 856,
      改: 787,
      政: 2182,
      教: 704,
      文: 522,
      方: -856,
      日: 1798,
      時: 1829,
      最: 845,
      月: -9066,
      木: -485,
      来: -442,
      校: -360,
      業: -1043,
      氏: 5388,
      民: -2716,
      気: -910,
      沢: -939,
      済: -543,
      物: -735,
      率: 672,
      球: -1267,
      生: -1286,
      産: -1101,
      田: -2900,
      町: 1826,
      的: 2586,
      目: 922,
      省: -3485,
      県: 2997,
      空: -867,
      立: -2112,
      第: 788,
      米: 2937,
      系: 786,
      約: 2171,
      経: 1146,
      統: -1169,
      総: 940,
      線: -994,
      署: 749,
      者: 2145,
      能: -730,
      般: -852,
      行: -792,
      規: 792,
      警: -1184,
      議: -244,
      谷: -1e3,
      賞: 730,
      車: -1481,
      軍: 1158,
      輪: -1433,
      込: -3370,
      近: 929,
      道: -1291,
      選: 2596,
      郎: -4866,
      都: 1192,
      野: -1100,
      銀: -2213,
      長: 357,
      間: -2344,
      院: -2297,
      際: -2604,
      電: -878,
      領: -1659,
      題: -792,
      館: -1984,
      首: 1749,
      高: 2120
    };
    this.UW5__ = {
      1: -514,
      '，': 465,
      '．': -299,
      E2: -32768,
      '］': -2762,
      '、': 465,
      '。': -299,
      '｢': 363,
      あ: 1655,
      い: 331,
      う: -503,
      え: 1199,
      お: 527,
      か: 647,
      が: -421,
      き: 1624,
      ぎ: 1971,
      く: 312,
      げ: -983,
      さ: -1537,
      し: -1371,
      す: -852,
      だ: -1186,
      ち: 1093,
      っ: 52,
      つ: 921,
      て: -18,
      で: -850,
      と: -127,
      ど: 1682,
      な: -787,
      に: -1224,
      の: -635,
      は: -578,
      べ: 1001,
      み: 502,
      め: 865,
      ゃ: 3350,
      ょ: 854,
      り: -208,
      る: 429,
      れ: 504,
      わ: 419,
      を: -1264,
      ん: 327,
      イ: 241,
      ル: 451,
      ン: -343,
      中: -871,
      京: 722,
      会: -1153,
      党: -654,
      務: 3519,
      区: -901,
      告: 848,
      員: 2104,
      大: -1296,
      学: -548,
      定: 1785,
      嵐: -1304,
      市: -2991,
      席: 921,
      年: 1763,
      思: 872,
      所: -814,
      挙: 1618,
      新: -1682,
      日: 218,
      月: -4353,
      査: 932,
      格: 1356,
      機: -1508,
      氏: -1347,
      田: 240,
      町: -3912,
      的: -3149,
      相: 1319,
      省: -1052,
      県: -4003,
      研: -997,
      社: -278,
      空: -813,
      統: 1955,
      者: -2233,
      表: 663,
      語: -1073,
      議: 1219,
      選: -1018,
      郎: -368,
      長: 786,
      間: 1191,
      題: 2368,
      館: -689
    };
    this.UW6__ = {
      1: -270,
      '，': 227,
      '．': 808,
      E1: 306,
      '、': 227,
      '。': 808,
      あ: -307,
      う: 189,
      か: 241,
      が: -73,
      く: -121,
      こ: -200,
      じ: 1782,
      す: 383,
      た: -428,
      っ: 573,
      て: -1014,
      で: 101,
      と: -105,
      な: -253,
      に: -149,
      の: -417,
      は: -236,
      も: -206,
      り: 187,
      る: -135,
      を: 195,
      ル: -673,
      ン: -496,
      一: -277,
      中: 201,
      件: -800,
      会: 624,
      前: 302,
      区: 1792,
      員: -1212,
      委: 798,
      学: -960,
      市: 887,
      広: -695,
      後: 535,
      業: -697,
      相: 753,
      社: -507,
      福: 974,
      空: -822,
      者: 1811,
      連: 463,
      郎: 1082
    };
    return this;
  };
  util.inherits(TokenizerJa, Tokenizer);

  /**
   * @param {string} str
   * @return {string}
   * @private
   */
  TokenizerJa.prototype.ctype_ = function (str) {
    for (let i = 0, length = this.chartype_.length; i < length; i++) {
      if (str.match(this.chartype_[i][0])) {
        return this.chartype_[i][1];
      }
    }
    return 'O';
  };

  /**
   * @param {string} v
   * @return {number}
   * @private
   */
  TokenizerJa.prototype.ts_ = function (v) {
    if (v) {
      return v;
    }
    return 0;
  };

  /**
   * Remove punctuations signs from tokens.
   *
   * @param {Array.<string>} tokens An array of tokens.
   * @return {Array.<string>} An array of tokens.
   * @private
   */
  TokenizerJa.prototype.removePuncTokens = function (tokens) {
    return tokens.map(function (token) {
      return token.replace(/[＿－・，、；：！？．。（）［］｛｝｢｣＠＊＼／＆＃％｀＾＋＜＝＞｜～≪≫─＄＂_\-･,､;:!?.｡()[\]{}「」@*/&#%`^+<=>|~«»$"\s]+/g, '');
    }).filter(function (token) {
      return token !== '';
    });
  };

  /**
   * @param {string} text
   * @return {Array.<string>}
   */
  TokenizerJa.prototype.tokenize = function (text) {
    if (text === null || text === undefined || text === '') {
      return [];
    }
    text = normalize(text);
    let result = [];
    const seg = ['B3', 'B2', 'B1'];
    const ctype = ['O', 'O', 'O'];
    const o = text.split('');
    let i;
    let length;
    for (i = 0, length = o.length; i < length; ++i) {
      seg.push(o[i]);
      ctype.push(this.ctype_(o[i]));
    }
    seg.push('E1');
    seg.push('E2');
    seg.push('E3');
    ctype.push('O');
    ctype.push('O');
    ctype.push('O');
    let word = seg[3];
    let p1 = 'U';
    let p2 = 'U';
    let p3 = 'U';
    for (i = 4, length = seg.length - 3; i < length; ++i) {
      let score = this.BIAS__;
      const w1 = seg[i - 3];
      const w2 = seg[i - 2];
      const w3 = seg[i - 1];
      const w4 = seg[i];
      const w5 = seg[i + 1];
      const w6 = seg[i + 2];
      const c1 = ctype[i - 3];
      const c2 = ctype[i - 2];
      const c3 = ctype[i - 1];
      const c4 = ctype[i];
      const c5 = ctype[i + 1];
      const c6 = ctype[i + 2];
      score += this.ts_(this.UP1__[p1]);
      score += this.ts_(this.UP2__[p2]);
      score += this.ts_(this.UP3__[p3]);
      score += this.ts_(this.BP1__[p1 + p2]);
      score += this.ts_(this.BP2__[p2 + p3]);
      score += this.ts_(this.UW1__[w1]);
      score += this.ts_(this.UW2__[w2]);
      score += this.ts_(this.UW3__[w3]);
      score += this.ts_(this.UW4__[w4]);
      score += this.ts_(this.UW5__[w5]);
      score += this.ts_(this.UW6__[w6]);
      score += this.ts_(this.BW1__[w2 + w3]);
      score += this.ts_(this.BW2__[w3 + w4]);
      score += this.ts_(this.BW3__[w4 + w5]);
      score += this.ts_(this.TW1__[w1 + w2 + w3]);
      score += this.ts_(this.TW2__[w2 + w3 + w4]);
      score += this.ts_(this.TW3__[w3 + w4 + w5]);
      score += this.ts_(this.TW4__[w4 + w5 + w6]);
      score += this.ts_(this.UC1__[c1]);
      score += this.ts_(this.UC2__[c2]);
      score += this.ts_(this.UC3__[c3]);
      score += this.ts_(this.UC4__[c4]);
      score += this.ts_(this.UC5__[c5]);
      score += this.ts_(this.UC6__[c6]);
      score += this.ts_(this.BC1__[c2 + c3]);
      score += this.ts_(this.BC2__[c3 + c4]);
      score += this.ts_(this.BC3__[c4 + c5]);
      score += this.ts_(this.TC1__[c1 + c2 + c3]);
      score += this.ts_(this.TC2__[c2 + c3 + c4]);
      score += this.ts_(this.TC3__[c3 + c4 + c5]);
      score += this.ts_(this.TC4__[c4 + c5 + c6]);
      // score += this.ts_(this.TC5__[c4 + c5 + c6]);
      score += this.ts_(this.UQ1__[p1 + c1]);
      score += this.ts_(this.UQ2__[p2 + c2]);
      score += this.ts_(this.UQ3__[p3 + c3]);
      score += this.ts_(this.BQ1__[p2 + c2 + c3]);
      score += this.ts_(this.BQ2__[p2 + c3 + c4]);
      score += this.ts_(this.BQ3__[p3 + c2 + c3]);
      score += this.ts_(this.BQ4__[p3 + c3 + c4]);
      score += this.ts_(this.TQ1__[p2 + c1 + c2 + c3]);
      score += this.ts_(this.TQ2__[p2 + c2 + c3 + c4]);
      score += this.ts_(this.TQ3__[p3 + c1 + c2 + c3]);
      score += this.ts_(this.TQ4__[p3 + c2 + c3 + c4]);
      let p = 'O';
      if (score > 0) {
        result.push(word);
        word = '';
        p = 'B';
      }
      p1 = p2;
      p2 = p3;
      p3 = p;
      word += seg[i];
    }
    result.push(word);
    result = this.removePuncTokens(result);
    return result;
  };
  tokenizer_ja = TokenizerJa;
  return tokenizer_ja;
}

var stopwords_ja = {};

var hasRequiredStopwords_ja;
function requireStopwords_ja() {
  if (hasRequiredStopwords_ja) return stopwords_ja;
  hasRequiredStopwords_ja = 1;

  // a list of commonly used words that have little meaning and can be excluded
  // from analysis.
  // Original location:
  // http://svn.apache.org/repos/asf/lucene/dev/trunk/lucene/analysis/kuromoji/src/resources/org/apache/lucene/analysis/ja/stopwords.txt
  const words = ['の', 'に', 'は', 'を', 'た', 'が', 'で', 'て', 'と', 'し', 'れ', 'さ', 'ある', 'いる', 'も', 'する', 'から', 'な', 'こと', 'として', 'い', 'や', 'れる', 'など', 'なっ', 'ない', 'この', 'ため', 'その', 'あっ', 'よう', 'また', 'もの', 'という', 'あり', 'まで', 'られ', 'なる', 'へ', 'か', 'だ', 'これ', 'によって', 'により', 'おり', 'より', 'による', 'ず', 'なり', 'られる', 'において', 'ば', 'なかっ', 'なく', 'しかし', 'について', 'せ', 'だっ', 'その後', 'できる', 'それ', 'う', 'ので', 'なお', 'のみ', 'でき', 'き', 'つ', 'における', 'および', 'いう', 'さらに', 'でも', 'ら', 'たり', 'その他', 'に関する', 'たち', 'ます', 'ん', 'なら', 'に対して', '特に', 'せる', '及び', 'これら', 'とき', 'では', 'にて', 'ほか', 'ながら', 'うち', 'そして', 'とともに', 'ただし', 'かつて', 'それぞれ', 'または', 'お', 'ほど', 'ものの', 'に対する', 'ほとんど', 'と共に', 'といった', 'です', 'とも', 'ところ', 'ここ'];

  // tell the world about the noise words.
  stopwords_ja.words = words;
  return stopwords_ja;
}

/*
 Copyright (c) 2012, Guillaume Marty

 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights
 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions:

 The above copyright notice and this permission notice shall be included in
 all copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 THE SOFTWARE.
 */
var stemmer_ja;
var hasRequiredStemmer_ja;
function requireStemmer_ja() {
  if (hasRequiredStemmer_ja) return stemmer_ja;
  hasRequiredStemmer_ja = 1;

  /**
   * A very basic stemmer that performs the following steps:
   * * Stem katakana.
   * Inspired by:
   * http://svn.apache.org/repos/asf/lucene/dev/trunk/lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/JapaneseKatakanaStemFilter.java
   *
   * This script assumes input is normalized using normalizer_ja().
   *
   * \@todo Use .bind() in StemmerJa.prototype.attach().
   */

  const Tokenizer = requireTokenizer_ja();
  const stopwords = requireStopwords_ja().words;

  /**
   * @constructor
   */
  const StemmerJa = function () {};

  /**
   * Tokenize and stem a text.
   * Stop words are excluded except if the second argument is true.
   *
   * @param {string} text
   * @param {boolean} keepStops Whether to keep stop words from the output or not.
   * @return {Array.<string>}
   */
  StemmerJa.prototype.tokenizeAndStem = function (text, keepStops) {
    const self = this;
    const stemmedTokens = [];
    const tokens = new Tokenizer().tokenize(text);

    // This is probably faster than an if at each iteration.
    if (keepStops) {
      tokens.forEach(function (token) {
        let resultToken = token.toLowerCase();
        resultToken = self.stem(resultToken);
        stemmedTokens.push(resultToken);
      });
    } else {
      tokens.forEach(function (token) {
        if (stopwords.indexOf(token) === -1) {
          let resultToken = token.toLowerCase();
          resultToken = self.stem(resultToken);
          stemmedTokens.push(resultToken);
        }
      });
    }
    return stemmedTokens;
  };

  /**
   * Stem a term.
   *
   * @param {string} token
   * @return {string}
   */
  StemmerJa.prototype.stem = function (token) {
    token = this.stemKatakana(token);
    return token;
  };

  /**
   * Remove the final prolonged sound mark on katakana if length is superior to
   * a threshold.
   *
   * @param {string} token A katakana string to stem.
   * @return {string} A katakana string stemmed.
   */
  StemmerJa.prototype.stemKatakana = function (token) {
    const HIRAGANA_KATAKANA_PROLONGED_SOUND_MARK = 'ー';
    const DEFAULT_MINIMUM_LENGTH = 4;
    if (token.length >= DEFAULT_MINIMUM_LENGTH && token.slice(-1) === HIRAGANA_KATAKANA_PROLONGED_SOUND_MARK && this.isKatakana(token)) {
      token = token.slice(0, token.length - 1);
    }
    return token;
  };

  /**
   * Is a string made of fullwidth katakana only?
   * This implementation is the fastest I know:
   * http://jsperf.com/string-contain-katakana-only/2
   *
   * @param {string} str A string.
   * @return {boolean} True if the string has katakana only.
   */
  StemmerJa.prototype.isKatakana = function (str) {
    return !!str.match(/^[゠-ヿ]+$/);
  };

  /*
  // Expose an attach function that will patch String with new methods.
  StemmerJa.prototype.attach = function () {
    const self = this
  	  String.prototype.stem = function () {
      return self.stem(this)
    }
  	  String.prototype.tokenizeAndStem = function (keepStops) {
      return self.tokenizeAndStem(this, keepStops)
    }
  }
  */

  stemmer_ja = new StemmerJa();
  return stemmer_ja;
}

var stopwords_id = {};

/*
Copyright (c) 2017, Alif Bhaskoro, Andy Librian, R. Kukuh (Reimplemented from https://github.com/sastrawi/sastrawi)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/
var hasRequiredStopwords_id;
function requireStopwords_id() {
  if (hasRequiredStopwords_id) return stopwords_id;
  hasRequiredStopwords_id = 1;
  const words = ['a', 'ada', 'adalah', 'adanya', 'adapun', 'agak', 'agaknya', 'agar', 'akan', 'akankah', 'akhir', 'akhiri', 'akhirnya', 'aku', 'akulah', 'amat', 'amatlah', 'anda', 'andalah', 'antar', 'antara', 'antaranya', 'apa', 'apaan', 'apabila', 'apakah', 'apalagi', 'apatah', 'arti', 'artinya', 'asal', 'asalkan', 'atas', 'atau', 'ataukah', 'ataupun', 'awal', 'awalnya', 'b', 'bagai', 'bagaikan', 'bagaimana', 'bagaimanakah', 'bagaimanapun', 'bagainamakah', 'bagi', 'bagian', 'bahkan', 'bahwa', 'bahwasannya', 'bahwasanya', 'baik', 'baiklah', 'bakal', 'bakalan', 'balik', 'banyak', 'bapak', 'baru', 'bawah', 'beberapa', 'begini', 'beginian', 'beginikah', 'beginilah', 'begitu', 'begitukah', 'begitulah', 'begitupun', 'bekerja', 'belakang', 'belakangan', 'belum', 'belumlah', 'benar', 'benarkah', 'benarlah', 'berada', 'berakhir', 'berakhirlah', 'berakhirnya', 'berapa', 'berapakah', 'berapalah', 'berapapun', 'berarti', 'berawal', 'berbagai', 'berdatangan', 'beri', 'berikan', 'berikut', 'berikutnya', 'berjumlah', 'berkali-kali', 'berkata', 'berkehendak', 'berkeinginan', 'berkenaan', 'berlainan', 'berlalu', 'berlangsung', 'berlebihan', 'bermacam', 'bermacam-macam', 'bermaksud', 'bermula', 'bersama', 'bersama-sama', 'bersiap', 'bersiap-siap', 'bertanya', 'bertanya-tanya', 'berturut', 'berturut-turut', 'bertutur', 'berujar', 'berupa', 'besar', 'betul', 'betulkah', 'biasa', 'biasanya', 'bila', 'bilakah', 'bisa', 'bisakah', 'boleh', 'bolehkah', 'bolehlah', 'buat', 'bukan', 'bukankah', 'bukanlah', 'bukannya', 'bulan', 'bung', 'c', 'cara', 'caranya', 'cukup', 'cukupkah', 'cukuplah', 'cuma', 'd', 'dahulu', 'dalam', 'dan', 'dapat', 'dari', 'daripada', 'datang', 'dekat', 'demi', 'demikian', 'demikianlah', 'dengan', 'depan', 'di', 'dia', 'diakhiri', 'diakhirinya', 'dialah', 'diantara', 'diantaranya', 'diberi', 'diberikan', 'diberikannya', 'dibuat', 'dibuatnya', 'didapat', 'didatangkan', 'digunakan', 'diibaratkan', 'diibaratkannya', 'diingat', 'diingatkan', 'diinginkan', 'dijawab', 'dijelaskan', 'dijelaskannya', 'dikarenakan', 'dikatakan', 'dikatakannya', 'dikerjakan', 'diketahui', 'diketahuinya', 'dikira', 'dilakukan', 'dilalui', 'dilihat', 'dimaksud', 'dimaksudkan', 'dimaksudkannya', 'dimaksudnya', 'diminta', 'dimintai', 'dimisalkan', 'dimulai', 'dimulailah', 'dimulainya', 'dimungkinkan', 'dini', 'dipastikan', 'diperbuat', 'diperbuatnya', 'dipergunakan', 'diperkirakan', 'diperlihatkan', 'diperlukan', 'diperlukannya', 'dipersoalkan', 'dipertanyakan', 'dipunyai', 'diri', 'dirinya', 'disampaikan', 'disebut', 'disebutkan', 'disebutkannya', 'disini', 'disinilah', 'ditambahkan', 'ditandaskan', 'ditanya', 'ditanyai', 'ditanyakan', 'ditegaskan', 'ditujukan', 'ditunjuk', 'ditunjuki', 'ditunjukkan', 'ditunjukkannya', 'ditunjuknya', 'dituturkan', 'dituturkannya', 'diucapkan', 'diucapkannya', 'diungkapkan', 'dong', 'dua', 'dulu', 'e', 'empat', 'enak', 'enggak', 'enggaknya', 'entah', 'entahlah', 'f', 'g', 'guna', 'gunakan', 'h', 'hadap', 'hai', 'hal', 'halo', 'hallo', 'hampir', 'hanya', 'hanyalah', 'hari', 'harus', 'haruslah', 'harusnya', 'helo', 'hello', 'hendak', 'hendaklah', 'hendaknya', 'hingga', 'i', 'ia', 'ialah', 'ibarat', 'ibaratkan', 'ibaratnya', 'ibu', 'ikut', 'ingat', 'ingat-ingat', 'ingin', 'inginkah', 'inginkan', 'ini', 'inikah', 'inilah', 'itu', 'itukah', 'itulah', 'j', 'jadi', 'jadilah', 'jadinya', 'jangan', 'jangankan', 'janganlah', 'jauh', 'jawab', 'jawaban', 'jawabnya', 'jelas', 'jelaskan', 'jelaslah', 'jelasnya', 'jika', 'jikalau', 'juga', 'jumlah', 'jumlahnya', 'justru', 'k', 'kadar', 'kala', 'kalau', 'kalaulah', 'kalaupun', 'kali', 'kalian', 'kami', 'kamilah', 'kamu', 'kamulah', 'kan', 'kapan', 'kapankah', 'kapanpun', 'karena', 'karenanya', 'kasus', 'kata', 'katakan', 'katakanlah', 'katanya', 'ke', 'keadaan', 'kebetulan', 'kecil', 'kedua', 'keduanya', 'keinginan', 'kelamaan', 'kelihatan', 'kelihatannya', 'kelima', 'keluar', 'kembali', 'kemudian', 'kemungkinan', 'kemungkinannya', 'kena', 'kenapa', 'kepada', 'kepadanya', 'kerja', 'kesampaian', 'keseluruhan', 'keseluruhannya', 'keterlaluan', 'ketika', 'khusus', 'khususnya', 'kini', 'kinilah', 'kira', 'kira-kira', 'kiranya', 'kita', 'kitalah', 'kok', 'kurang', 'l', 'lagi', 'lagian', 'lah', 'lain', 'lainnya', 'laku', 'lalu', 'lama', 'lamanya', 'langsung', 'lanjut', 'lanjutnya', 'lebih', 'lewat', 'lihat', 'lima', 'luar', 'm', 'macam', 'maka', 'makanya', 'makin', 'maksud', 'malah', 'malahan', 'mampu', 'mampukah', 'mana', 'manakala', 'manalagi', 'masa', 'masalah', 'masalahnya', 'masih', 'masihkah', 'masing', 'masing-masing', 'masuk', 'mata', 'mau', 'maupun', 'melainkan', 'melakukan', 'melalui', 'melihat', 'melihatnya', 'memang', 'memastikan', 'memberi', 'memberikan', 'membuat', 'memerlukan', 'memihak', 'meminta', 'memintakan', 'memisalkan', 'memperbuat', 'mempergunakan', 'memperkirakan', 'memperlihatkan', 'mempersiapkan', 'mempersoalkan', 'mempertanyakan', 'mempunyai', 'memulai', 'memungkinkan', 'menaiki', 'menambahkan', 'menandaskan', 'menanti', 'menanti-nanti', 'menantikan', 'menanya', 'menanyai', 'menanyakan', 'mendapat', 'mendapatkan', 'mendatang', 'mendatangi', 'mendatangkan', 'menegaskan', 'mengakhiri', 'mengapa', 'mengatakan', 'mengatakannya', 'mengenai', 'mengerjakan', 'mengetahui', 'menggunakan', 'menghendaki', 'mengibaratkan', 'mengibaratkannya', 'mengingat', 'mengingatkan', 'menginginkan', 'mengira', 'mengucapkan', 'mengucapkannya', 'mengungkapkan', 'menjadi', 'menjawab', 'menjelaskan', 'menuju', 'menunjuk', 'menunjuki', 'menunjukkan', 'menunjuknya', 'menurut', 'menuturkan', 'menyampaikan', 'menyangkut', 'menyatakan', 'menyebutkan', 'menyeluruh', 'menyiapkan', 'merasa', 'mereka', 'merekalah', 'merupakan', 'meski', 'meskipun', 'meyakini', 'meyakinkan', 'minta', 'mirip', 'misal', 'misalkan', 'misalnya', 'mohon', 'mula', 'mulai', 'mulailah', 'mulanya', 'mungkin', 'mungkinkah', 'n', 'nah', 'naik', 'namun', 'nanti', 'nantinya', 'nya', 'nyaris', 'nyata', 'nyatanya', 'o', 'oleh', 'olehnya', 'orang', 'p', 'pada', 'padahal', 'padanya', 'pak', 'paling', 'panjang', 'pantas', 'para', 'pasti', 'pastilah', 'penting', 'pentingnya', 'per', 'percuma', 'perlu', 'perlukah', 'perlunya', 'pernah', 'persoalan', 'pertama', 'pertama-tama', 'pertanyaan', 'pertanyakan', 'pihak', 'pihaknya', 'pukul', 'pula', 'pun', 'punya', 'q', 'r', 'rasa', 'rasanya', 'rupa', 'rupanya', 's', 'saat', 'saatnya', 'saja', 'sajalah', 'salam', 'saling', 'sama', 'sama-sama', 'sambil', 'sampai', 'sampai-sampai', 'sampaikan', 'sana', 'sangat', 'sangatlah', 'sangkut', 'satu', 'saya', 'sayalah', 'se', 'sebab', 'sebabnya', 'sebagai', 'sebagaimana', 'sebagainya', 'sebagian', 'sebaik', 'sebaik-baiknya', 'sebaiknya', 'sebaliknya', 'sebanyak', 'sebegini', 'sebegitu', 'sebelum', 'sebelumnya', 'sebenarnya', 'seberapa', 'sebesar', 'sebetulnya', 'sebisanya', 'sebuah', 'sebut', 'sebutlah', 'sebutnya', 'secara', 'secukupnya', 'sedang', 'sedangkan', 'sedemikian', 'sedikit', 'sedikitnya', 'seenaknya', 'segala', 'segalanya', 'segera', 'seharusnya', 'sehingga', 'seingat', 'sejak', 'sejauh', 'sejenak', 'sejumlah', 'sekadar', 'sekadarnya', 'sekali', 'sekali-kali', 'sekalian', 'sekaligus', 'sekalipun', 'sekarang', 'sekaranglah', 'sekecil', 'seketika', 'sekiranya', 'sekitar', 'sekitarnya', 'sekurang-kurangnya', 'sekurangnya', 'sela', 'selain', 'selaku', 'selalu', 'selama', 'selama-lamanya', 'selamanya', 'selanjutnya', 'seluruh', 'seluruhnya', 'semacam', 'semakin', 'semampu', 'semampunya', 'semasa', 'semasih', 'semata', 'semata-mata', 'semaunya', 'sementara', 'semisal', 'semisalnya', 'sempat', 'semua', 'semuanya', 'semula', 'sendiri', 'sendirian', 'sendirinya', 'seolah', 'seolah-olah', 'seorang', 'sepanjang', 'sepantasnya', 'sepantasnyalah', 'seperlunya', 'seperti', 'sepertinya', 'sepihak', 'sering', 'seringnya', 'serta', 'serupa', 'sesaat', 'sesama', 'sesampai', 'sesegera', 'sesekali', 'seseorang', 'sesuatu', 'sesuatunya', 'sesudah', 'sesudahnya', 'setelah', 'setempat', 'setengah', 'seterusnya', 'setiap', 'setiba', 'setibanya', 'setidak-tidaknya', 'setidaknya', 'setinggi', 'seusai', 'sewaktu', 'siap', 'siapa', 'siapakah', 'siapapun', 'sini', 'sinilah', 'soal', 'soalnya', 'suatu', 'sudah', 'sudahkah', 'sudahlah', 'supaya', 't', 'tadi', 'tadinya', 'tahu', 'tak', 'tambah', 'tambahnya', 'tampak', 'tampaknya', 'tandas', 'tandasnya', 'tanpa', 'tanya', 'tanyakan', 'tanyanya', 'tapi', 'tegas', 'tegasnya', 'telah', 'tempat', 'tentang', 'tentu', 'tentulah', 'tentunya', 'tepat', 'terakhir', 'terasa', 'terbanyak', 'terdahulu', 'terdapat', 'terdiri', 'terhadap', 'terhadapnya', 'teringat', 'teringat-ingat', 'terjadi', 'terjadilah', 'terjadinya', 'terkira', 'terlalu', 'terlebih', 'terlihat', 'termasuk', 'ternyata', 'tersampaikan', 'tersebut', 'tersebutlah', 'tertentu', 'tertuju', 'terus', 'terutama', 'tetap', 'tetapi', 'tiap', 'tiba', 'tiba-tiba', 'tidak', 'tidakkah', 'tidaklah', 'tiga', 'toh', 'tuju', 'tunjuk', 'turut', 'tutur', 'tuturnya', 'u', 'ucap', 'ucapnya', 'ujar', 'ujarnya', 'umumnya', 'ungkap', 'ungkapnya', 'untuk', 'usah', 'usai', 'v', 'w', 'waduh', 'wah', 'wahai', 'waktunya', 'walau', 'walaupun', 'wong', 'x', 'y', 'ya', 'yaitu', 'yakin', 'yakni', 'yang', 'z'];

  // tell the world about the noise words.
  stopwords_id.words = words;
  return stopwords_id;
}

/*
Copyright (c) 2017, Alif Bhaskoro, Andy Librian, R. Kukuh (Reimplemented from https://github.com/sastrawi/sastrawi)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/
var aggressive_tokenizer_id;
var hasRequiredAggressive_tokenizer_id;
function requireAggressive_tokenizer_id() {
  if (hasRequiredAggressive_tokenizer_id) return aggressive_tokenizer_id;
  hasRequiredAggressive_tokenizer_id = 1;
  const Tokenizer = requireTokenizer();
  class AggressiveTokenizer extends Tokenizer {
    // Remove all non alphanumeric characters except '-'
    // Replace more than one space character to ' '
    normalizeText(text) {
      const result = text.replace(/[^a-z0-9 -]/g, ' ').replace(/( +)/g, ' ');
      return result;
    }
    tokenize(text) {
      // break a string up into an array of tokens by space
      text = this.normalizeText(text);
      return this.trim(text.split(' '));
    }
  }
  aggressive_tokenizer_id = AggressiveTokenizer;
  return aggressive_tokenizer_id;
}

/*
Copyright (c) 2017, Alif Bhaskoro, Andy Librian, R. Kukuh (Reimplemented from https://github.com/sastrawi/sastrawi)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/
var base_stemmer_id;
var hasRequiredBase_stemmer_id;
function requireBase_stemmer_id() {
  if (hasRequiredBase_stemmer_id) return base_stemmer_id;
  hasRequiredBase_stemmer_id = 1;
  const stopwords = requireStopwords_id();
  const Tokenizer = requireAggressive_tokenizer_id();
  base_stemmer_id = function () {
    const stemmer = this;
    stemmer.stem = function (token) {
      return token;
    };
    stemmer.addStopWord = function (stopWord) {
      stopwords.words.push(stopWord);
    };
    stemmer.addStopWords = function (moreStopWords) {
      stopwords.words = stopwords.words.concat(moreStopWords);
    };
    stemmer.removeStopWord = function (stopWord) {
      this.removeStopWords([stopWord]);
    };
    stemmer.removeStopWords = function (moreStopWords) {
      moreStopWords.forEach(function (stopWord) {
        const idx = stopwords.words.indexOf(stopWord);
        if (idx >= 0) {
          stopwords.words.splice(idx, 1);
        }
      });
    };
    stemmer.tokenizeAndStem = function (text, keepStops) {
      const stemmedTokens = [];
      const lowercaseText = text.toLowerCase();
      const tokens = new Tokenizer().tokenize(lowercaseText);
      if (keepStops) {
        tokens.forEach(function (token) {
          stemmedTokens.push(stemmer.stem(token));
        });
      } else {
        tokens.forEach(function (token) {
          if (stopwords.words.indexOf(token) === -1) {
            stemmedTokens.push(stemmer.stem(token));
          }
        });
      }
      return stemmedTokens;
    };

    /*
    stemmer.attach = function () {
      String.prototype.stem = function () {
        return stemmer.stem(this)
      }
       String.prototype.tokenizeAndStem = function (keepStops) {
        return stemmer.tokenizeAndStem(this, keepStops)
      }
    }
    */
  };
  return base_stemmer_id;
}

/*
Copyright (c) 2017, Alif Bhaskoro, Andy Librian, R. Kukuh (Reimplemented from https://github.com/sastrawi/sastrawi)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/
var removal;
var hasRequiredRemoval;
function requireRemoval() {
  if (hasRequiredRemoval) return removal;
  hasRequiredRemoval = 1;
  // a list of commonly used words that have little meaning and can be excluded
  // from analysis.

  function Removal(originalWord, result, removedPart, affixType) {
    this.originalWord = originalWord;
    this.result = result;
    this.removedPart = removedPart;
    this.affixType = affixType;
  }
  Removal.prototype.getOriginalWord = function () {
    return this.originalWord;
  };
  Removal.prototype.getResult = function () {
    return this.result;
  };
  Removal.prototype.getRemovedPart = function () {
    return this.removedPart;
  };
  Removal.prototype.getAffixType = function () {
    return this.affixType;
  };
  removal = Removal;
  return removal;
}

/*
Copyright (c) 2017, Alif Bhaskoro, Andy Librian, R. Kukuh (Reimplemented from https://github.com/sastrawi/sastrawi)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/
var suffix_rules;
var hasRequiredSuffix_rules;
function requireSuffix_rules() {
  if (hasRequiredSuffix_rules) return suffix_rules;
  hasRequiredSuffix_rules = 1;
  // a list of commonly used words that have little meaning and can be excluded
  // from analysis.

  const Removal = requireRemoval();
  function SuffixRules() {
    const SuffixRules = this;
    this.removal = undefined;
    this.currentWord = undefined;
    function createResultObject(result, word, type) {
      if (result !== word) {
        const removedPart = word.replace(result, '');
        const removal = new Removal(word, result, removedPart, type);
        this.removal = removal;
      } else {
        this.removal = undefined;
      }
      this.currentWord = result;
      return this;
    }
    SuffixRules.RemoveInflectionalParticle = function (word) {
      const result = word.replace(/-*(lah|kah|tah|pun)$/, '');
      return createResultObject(result, word, 'P');
    };
    SuffixRules.RemoveInflectionalPossessivePronoun = function (word) {
      const result = word.replace(/-*(ku|mu|nya)$/, '');
      return createResultObject(result, word, 'PP');
    };
    SuffixRules.RemoveDerivationalSuffix = function (word) {
      const result = word.replace(/(is|isme|isasi|i|kan|an)$/, '');
      return createResultObject(result, word, 'DS');
    };
  }
  suffix_rules = SuffixRules;

  // Initalize suffix rules array
  const rules = [];
  const sr = new SuffixRules();
  rules.push(sr.RemoveInflectionalParticle);
  rules.push(sr.RemoveInflectionalPossessivePronoun);
  rules.push(sr.RemoveDerivationalSuffix);
  SuffixRules.rules = rules;
  return suffix_rules;
}

var require$$3 = [
	"aba",
	"abad",
	"abadi",
	"abadiah",
	"abah",
	"abai",
	"abaimana",
	"abaka",
	"abaktinal",
	"abakus",
	"abal-abal",
	"aban",
	"abang",
	"abangan",
	"abangga",
	"abar",
	"abatoar",
	"abau",
	"abdas",
	"abdi",
	"abdikasi",
	"abdomen",
	"abdominal",
	"abdu",
	"abduksi",
	"abduktor",
	"abece",
	"aben",
	"aberasi",
	"abet",
	"abian",
	"abid",
	"abidin",
	"abilah",
	"abing",
	"abiogenesis",
	"abiosfer",
	"abiotik",
	"abis",
	"abisal",
	"abiseka",
	"abiturien",
	"abjad",
	"abjadiah",
	"ablasi",
	"ablaut",
	"ablepsia",
	"abnormal",
	"abnormalitas",
	"abnus",
	"aboi",
	"abolisi",
	"abon",
	"abonemen",
	"abong-abong",
	"aborsi",
	"abortif",
	"abortiva",
	"abortus",
	"abrak",
	"abrakadabra",
	"abrar",
	"abras",
	"abrasi",
	"abreaksi",
	"abrek",
	"abreviasi",
	"abrikos",
	"abrit-abrit",
	"abrosfer",
	"absah",
	"absen",
	"absensi",
	"absensia",
	"absente",
	"absenteisme",
	"abses",
	"absis",
	"absolusi",
	"absolut",
	"absolutisme",
	"absonan",
	"absorb",
	"absorben",
	"absorbir",
	"absorpsi",
	"absorpsiometer",
	"absorptif",
	"abstain",
	"abstinensi",
	"abstrak",
	"abstraksi",
	"absurd",
	"absurdisme",
	"abtar",
	"abu",
	"abuan",
	"abuh",
	"abuk",
	"abulhayat",
	"abulia",
	"abun-abun",
	"abur",
	"abus",
	"abyad",
	"acah",
	"acak",
	"acala",
	"acan",
	"acang",
	"acap",
	"acar",
	"acara",
	"acaram",
	"acat",
	"acau",
	"acawi",
	"acerang",
	"aci",
	"acik",
	"aco",
	"acu",
	"acuh",
	"acum",
	"acung",
	"ada",
	"adab",
	"adad",
	"adagio",
	"adagium",
	"adakala",
	"adakalanya",
	"adakan",
	"adaks",
	"adaktil",
	"adalah",
	"adalat",
	"adam",
	"adan",
	"adang",
	"adap",
	"adaptabel",
	"adaptabilitas",
	"adaptasi",
	"adaptif",
	"adaptometer",
	"adaptor",
	"adapun",
	"adar",
	"adas",
	"adat",
	"adati",
	"adegan",
	"adeh",
	"adekuat",
	"adem",
	"adempauze",
	"adendum",
	"adenoid",
	"adenoma",
	"adenosis",
	"adhesi",
	"adhesif",
	"adi",
	"adiabatik",
	"adiabatis",
	"adiaktinik",
	"adib",
	"adibangkit",
	"adibintang",
	"adiboga",
	"adibusana",
	"adicita",
	"adidaya",
	"adigang",
	"adiguna",
	"adigung",
	"adik",
	"adika",
	"adikara",
	"adikarya",
	"adikodrati",
	"adikong",
	"adiksi",
	"adiktif",
	"adikuasa",
	"adil",
	"adiluhung",
	"adimarga",
	"adinda",
	"ading",
	"adipati",
	"adipenghantar",
	"adiposa",
	"adipositas",
	"adipura",
	"adiraja",
	"adiratna",
	"adisi",
	"adisional",
	"adisiswa",
	"aditif",
	"aditokoh",
	"adiwangsa",
	"adiwarna",
	"adiwidia",
	"adjektif",
	"adjektiva",
	"adjektival",
	"adjuvan",
	"administrasi",
	"administratif",
	"administrator",
	"admiral",
	"admisi",
	"admitans",
	"adnan",
	"adolesens",
	"adon",
	"adopsi",
	"adoptif",
	"adpertensi",
	"adrenal",
	"adrenalin",
	"adrenergik",
	"adres",
	"adsorben",
	"adsorpi",
	"adsorpsi",
	"adstringen",
	"adu",
	"aduh",
	"aduhai",
	"aduk",
	"aduksi",
	"aduktor",
	"adun",
	"adveksi",
	"adven",
	"adventisia",
	"adventisius",
	"adverbia",
	"adverbial",
	"advertensi",
	"advis",
	"advokad",
	"advokasi",
	"advokat",
	"aerasi",
	"aerator",
	"aerob",
	"aerobatik",
	"aerobik",
	"aerobika",
	"aerodinamik",
	"aerodinamika",
	"aerofisika",
	"aerofisiologi",
	"aerofon",
	"aerogram",
	"aerolit",
	"aerologi",
	"aerometer",
	"aeromovel",
	"aeronautika",
	"aeroplangton",
	"aeroplankton",
	"aeroskop",
	"aerosol",
	"aerostat",
	"aerostatika",
	"aestetika",
	"afair",
	"afal",
	"afasia",
	"afdal",
	"afdeling",
	"afdruk",
	"afek",
	"afeksi",
	"afektif",
	"aferesis",
	"afiat",
	"afidavit",
	"afiks",
	"afiksasi",
	"afiliasi",
	"afinitas",
	"afirmasi",
	"afirmatif",
	"afonia",
	"aforisme",
	"afotik",
	"afrasia",
	"afrikat",
	"afrit",
	"afrodisiak",
	"afsun",
	"afwah",
	"aga",
	"agah",
	"agak",
	"agak-agih",
	"agal",
	"agalaksia",
	"agam",
	"agama",
	"agamais",
	"agamawi",
	"agamen",
	"agamet",
	"agami",
	"agamogenesis",
	"agan",
	"agape",
	"agar",
	"agas",
	"agen",
	"agenda",
	"agens",
	"agentif",
	"agih",
	"agil",
	"agio",
	"agiria",
	"agitasi",
	"agitatif",
	"agitator",
	"aglikon",
	"aglomerasi",
	"aglomerat",
	"aglutinasi",
	"aglutinat",
	"aglutinatif",
	"aglutinin",
	"agnosia",
	"agnostik",
	"agnostisisme",
	"agogo",
	"agometer",
	"agon",
	"agonia",
	"agonis",
	"agonistik",
	"agorafobia",
	"agradasi",
	"agrafia",
	"agraria",
	"agraris",
	"agregasi",
	"agregat",
	"agregatif",
	"agresi",
	"agresif",
	"agresivitas",
	"agresor",
	"agriologi",
	"agripnia",
	"agrisilvikultur",
	"agrobis",
	"agrobisnis",
	"agroekonomi",
	"agroekosistem",
	"agrogeologi",
	"agroikos",
	"agroindustri",
	"agrokimia",
	"agronom",
	"agronomi",
	"agrostologi",
	"agrowisata",
	"aguk",
	"agul",
	"agun",
	"agung",
	"agus",
	"agustus",
	"agut",
	"ahad",
	"ahadiat",
	"ahimsa",
	"ahistoris",
	"ahkam",
	"ahlan",
	"ahli",
	"ahlulbait",
	"ahlulkitab",
	"ahlulkubur",
	"ahlunujum",
	"ahlusuluk",
	"ahlusunah",
	"ahmak",
	"ahmar",
	"aho",
	"ahsan",
	"ahwal",
	"aib",
	"ain",
	"ainulbanat",
	"ainulyakin",
	"ainunjariah",
	"air",
	"aja",
	"ajab",
	"ajaib",
	"ajaibkhanah",
	"ajak",
	"ajal",
	"ajang",
	"ajar",
	"ajek",
	"ajektifa",
	"ajektiva",
	"ajengan",
	"aji",
	"ajigineng",
	"ajimumpung",
	"ajir",
	"ajisaka",
	"ajnabi",
	"ajnas",
	"ajojing",
	"ajre",
	"aju",
	"ajudan",
	"ajufan",
	"ajujah",
	"ajuk",
	"ajun",
	"ajung",
	"ajur",
	"ajuster",
	"akad",
	"akademi",
	"akademik",
	"akademikus",
	"akademis",
	"akademisi",
	"akaid",
	"akak",
	"akal",
	"akan",
	"akang",
	"akapela",
	"akar",
	"akas",
	"akasia",
	"akatalepsia",
	"akbar",
	"akene",
	"akeo",
	"akh",
	"akhbar",
	"akhir",
	"akhirat",
	"akhirulkalam",
	"akhlak",
	"akhlaki",
	"akhwan",
	"aki",
	"akibat",
	"akidah",
	"akik",
	"akikah",
	"akil",
	"aklamasi",
	"aklasia",
	"akli",
	"akliah",
	"aklimasi",
	"aklimatisasi",
	"akmal",
	"akolade",
	"akomodasi",
	"akomodatif",
	"akor",
	"akordeon",
	"akrab",
	"akrawati",
	"akreditasi",
	"akriflavina",
	"akrilat",
	"akrilik",
	"akrobat",
	"akrobatik",
	"akrofobia",
	"akromegali",
	"akrometer",
	"akromion",
	"akronim",
	"aksa",
	"aksara",
	"akseleran",
	"akselerasi",
	"akselerator",
	"akselerometer",
	"aksen",
	"aksentologi",
	"aksentuasi",
	"aksep",
	"akseptabel",
	"akseptabilitas",
	"akseptasi",
	"akseptor",
	"akses",
	"aksesibilitas",
	"aksesori",
	"aksi",
	"aksidental",
	"aksila",
	"aksiologi",
	"aksioma",
	"aksiomatis",
	"aksis",
	"akson",
	"aksostil",
	"akta",
	"aktentas",
	"aktif",
	"akting",
	"aktinida",
	"aktinik",
	"aktinisme",
	"aktinium",
	"aktinokimia",
	"aktinolit",
	"aktinometer",
	"aktiva",
	"aktivis",
	"aktivisme",
	"aktivitas",
	"aktor",
	"aktris",
	"aktual",
	"aktualisasi",
	"aktuaria",
	"aktuaris",
	"aku",
	"akua",
	"akuades",
	"akuaduk",
	"akuakultur",
	"akualung",
	"akuamarin",
	"akuan",
	"akuarel",
	"akuaris",
	"akuarium",
	"akuarius",
	"akuatik",
	"akuifer",
	"akuisisi",
	"akuk",
	"akulturasi",
	"akumulasi",
	"akumulatif",
	"akumulator",
	"akun",
	"akuntabel",
	"akuntabilitas",
	"akuntan",
	"akuntansi",
	"akupungtur",
	"akupungturis",
	"akupunktur",
	"akur",
	"akurasi",
	"akurat",
	"akusatif",
	"akustik",
	"akustika",
	"akut",
	"akwal",
	"ala",
	"alabangka",
	"alabio",
	"alaf",
	"alai",
	"alai-belai",
	"alaihisalam",
	"alaika",
	"alaikum",
	"alak",
	"alalia",
	"alam",
	"alamah",
	"alamak",
	"alamanda",
	"alamas",
	"alamat",
	"alamatulhayat",
	"alami",
	"alamiah",
	"alamin",
	"alan-alan",
	"alang",
	"alangkah",
	"alantois",
	"alap",
	"alarm",
	"alas",
	"alat",
	"alau",
	"alawar",
	"alazon",
	"albanat",
	"albas",
	"albatros",
	"albedo",
	"albedometer",
	"albinisme",
	"albino",
	"albinoid",
	"albit",
	"albuginea",
	"album",
	"albumen",
	"albumin",
	"albuminoit",
	"albuminometer",
	"albuminuria",
	"aldehida",
	"alegori",
	"alegoris",
	"aleksandrit",
	"aleksia",
	"aleksin",
	"alel",
	"alem",
	"alergen",
	"alergi",
	"alergis",
	"alf",
	"alfa",
	"alfabet",
	"alfabetis",
	"alfaktorius",
	"alfanumerik",
	"alferes",
	"alga",
	"algilik",
	"algoid",
	"algojo",
	"algologi",
	"algometer",
	"algoritme",
	"algrafi",
	"alhamdulillah",
	"alhasil",
	"ali",
	"aliansi",
	"alias",
	"aliase",
	"alibi",
	"alienasi",
	"alif",
	"alifatik",
	"alifbata",
	"alih",
	"alihragam",
	"alik",
	"alikuot",
	"alim",
	"alimbubu",
	"alimentasi",
	"alimenter",
	"alimiah",
	"alimiat",
	"alimun",
	"alin",
	"alinea",
	"aling",
	"alip",
	"alir",
	"alis",
	"alisiklik",
	"alit",
	"aliterasi",
	"alizarin",
	"aljabar",
	"aljalil",
	"alkabir",
	"alkadim",
	"alkadir",
	"alkah",
	"alkali",
	"alkalinitas",
	"alkalis",
	"alkaloid",
	"alkalometri",
	"alkamar",
	"alkana",
	"alkari",
	"alkasyaf",
	"alkausar",
	"alkena",
	"alkil",
	"alkimia",
	"alkisah",
	"alkitab",
	"alkohol",
	"alkoholis",
	"alkoholisasi",
	"alkoholisme",
	"alkoholometer",
	"alku",
	"alkuna",
	"alkus",
	"allah",
	"allahu",
	"allahuma",
	"almaktub",
	"almalik",
	"almalun",
	"almamater",
	"almanak",
	"almandin",
	"almandina",
	"almandit",
	"almarhum",
	"almarhumah",
	"almasih",
	"almuazam",
	"almukhlis",
	"alobar",
	"alofon",
	"alograf",
	"aloi",
	"alokasi",
	"alokron",
	"aloleks",
	"alomerisme",
	"alomorf",
	"alon",
	"alonim",
	"alopati",
	"alopesia",
	"alot",
	"alotropi",
	"alpa",
	"alpaka",
	"alperes",
	"alpukah",
	"alquran",
	"altar",
	"alter",
	"alteratif",
	"alternasi",
	"alternatif",
	"alternator",
	"altimeter",
	"alto",
	"altokumulus",
	"altostratus",
	"altruis",
	"altruisme",
	"altruistis",
	"alu",
	"alufiru",
	"alum",
	"alumina",
	"aluminium",
	"alumni",
	"alumnus",
	"alun",
	"alung",
	"alup",
	"alur",
	"alusi",
	"aluvial",
	"aluvium",
	"alveolar",
	"alveolum",
	"alveolus",
	"alwah",
	"alwasi",
	"alwasia",
	"ama",
	"amabakdu",
	"amah",
	"amai-amai",
	"amal",
	"amalgam",
	"amalgamasi",
	"amalgamator",
	"amaliah",
	"aman",
	"amanah",
	"amanat",
	"amandel",
	"amandemen",
	"amang",
	"amanitin",
	"amar",
	"amarilis",
	"amat",
	"amatir",
	"amatirisme",
	"amatol",
	"ambah",
	"ambah-ambah",
	"ambai",
	"ambai-ambai",
	"ambak",
	"ambal",
	"ambalang",
	"ambalela",
	"ambang",
	"ambar",
	"ambarau",
	"ambasade",
	"ambasador",
	"ambau",
	"ambeien",
	"ambek",
	"amben",
	"amberal",
	"ambergris",
	"amberit",
	"ambet",
	"ambi",
	"ambigu",
	"ambiguitas",
	"ambil",
	"ambilingual",
	"ambin",
	"ambing",
	"ambisi",
	"ambisius",
	"ambivalen",
	"ambivalensi",
	"amblas",
	"amblek",
	"ambles",
	"ambliobia",
	"amboi",
	"ambreng-ambrengan",
	"ambring",
	"ambrol",
	"ambruk",
	"ambu-ambu",
	"ambuh",
	"ambul",
	"ambulakral",
	"ambulans",
	"ambulatori",
	"ambung",
	"ambur",
	"amburadul",
	"ambyar",
	"ameba",
	"amebiasis",
	"ameboid",
	"amebosit",
	"ameliorasi",
	"amelioratif",
	"amen",
	"amendemen",
	"amenorea",
	"amensalisme",
	"amenta",
	"amerisium",
	"amerospora",
	"amerta",
	"ametabola",
	"ametis",
	"ametobola",
	"amfetamin",
	"amfiartrosis",
	"amfibi",
	"amfibol",
	"amfibolisme",
	"amfiston",
	"amfiteater",
	"amfoterik",
	"ami",
	"amigdalin",
	"amikal",
	"amil",
	"amilase",
	"amilopektin",
	"amin",
	"amina",
	"aminisasi",
	"amino",
	"amir",
	"amirulbahar",
	"amirulhaj",
	"amirulmukminin",
	"amis",
	"amit",
	"amitosir",
	"amko",
	"ammeter",
	"amnesia",
	"amnesti",
	"amnion",
	"amniotik",
	"amoi",
	"amonia",
	"amonifikasi",
	"amonit",
	"amonium",
	"amor",
	"amoral",
	"amorf",
	"amortisasi",
	"ampai",
	"ampang",
	"ampas",
	"ampat",
	"ampe",
	"ampean",
	"ampek",
	"ampel",
	"ampela",
	"ampelam",
	"ampelas",
	"ampere",
	"amperemeter",
	"amperometri",
	"ampisilin",
	"amplas",
	"amplifikasi",
	"amplitudo",
	"amplop",
	"ampo",
	"amprok",
	"amprung",
	"ampu",
	"ampuh",
	"ampuk",
	"ampul",
	"ampula",
	"ampun",
	"amput",
	"amputasi",
	"amra",
	"amril",
	"amsal",
	"amtenar",
	"amuba",
	"amuh",
	"amuk",
	"amulet",
	"amung",
	"amunisi",
	"ana",
	"anabasis",
	"anabiosis",
	"anabolisme",
	"anadrom",
	"anaerob",
	"anaerobik",
	"anafilaksis",
	"anafora",
	"anaforis",
	"anafrodisiak",
	"anaglif",
	"anai-anai",
	"anak",
	"anakoluton",
	"anakronisme",
	"anakronistis",
	"anakrus",
	"anal",
	"analekta",
	"analeptik",
	"analgesik",
	"analis",
	"analisis",
	"analitis",
	"analog",
	"analogi",
	"analseks",
	"analsit",
	"anamel",
	"anamnesis",
	"anamorfosis",
	"ananda",
	"anang",
	"anani",
	"anapes",
	"anaptiksis",
	"anarki",
	"anarkis",
	"anarkisme",
	"anarkistis",
	"anasional",
	"anasir",
	"anastomosis",
	"anatase",
	"anatomi",
	"anatomis",
	"anbia",
	"anca",
	"ancai",
	"ancak",
	"ancala",
	"ancam",
	"ancang",
	"ancar-ancar",
	"ancoa",
	"ancol",
	"ancuk",
	"anda",
	"andai",
	"andak",
	"andaka",
	"andal",
	"andalas",
	"andalusit",
	"andam",
	"andan",
	"andang",
	"andapita",
	"andar",
	"andarah",
	"andeng-andeng",
	"anderak",
	"andesit",
	"andewi",
	"andika",
	"andiko",
	"andil",
	"andilau",
	"andok",
	"andong",
	"andragogi",
	"andrawina",
	"androgen",
	"androgini",
	"androgogi",
	"androlog",
	"andrologi",
	"anduh",
	"andur",
	"aneh",
	"aneka",
	"anekdot",
	"aneksasi",
	"anemer",
	"anemia",
	"anemofili",
	"anemograf",
	"anemogram",
	"anemometer",
	"aneroid",
	"anestesi",
	"anestesia",
	"anestesiolog",
	"anestetis",
	"aneuploid",
	"aneurisme",
	"anfas",
	"angah",
	"angan",
	"angel",
	"angga",
	"anggai",
	"anggak",
	"anggal",
	"anggan",
	"anggap",
	"anggar",
	"anggara",
	"anggau",
	"anggerka",
	"anggit",
	"angglap",
	"anggorokasih",
	"anggota",
	"anggrek",
	"angguh",
	"angguk",
	"anggul",
	"anggun",
	"anggung",
	"anggung-anggip",
	"anggur",
	"anggut",
	"anghun",
	"angin",
	"angina",
	"angiogenesis",
	"angiologi",
	"angiosperma",
	"angit",
	"angka",
	"angkak",
	"angkal-angkal",
	"angkara",
	"angkasa",
	"angkat",
	"angkel",
	"angker",
	"angket",
	"angkin",
	"angkit",
	"angklung",
	"angkong",
	"angkring",
	"angku",
	"angkuh",
	"angkuk",
	"angkul-angkul",
	"angkup",
	"angkur",
	"angkus",
	"angkusa",
	"angkut",
	"angler",
	"anglo",
	"anglong",
	"anglung",
	"angon",
	"angop",
	"angot",
	"angpau",
	"angsa",
	"angsana",
	"angsoka",
	"angsu",
	"angsur",
	"angus",
	"angut",
	"anhidrosis",
	"ani",
	"aniaya",
	"anil",
	"anilina",
	"animasi",
	"animis",
	"animisme",
	"animo",
	"aning-aning",
	"anion",
	"aniridia",
	"anis",
	"anisogamet",
	"anisogami",
	"anisokoria",
	"anisotropis",
	"anja",
	"anjak",
	"anjal",
	"anjang",
	"anjangkarya",
	"anjangsana",
	"anjar",
	"anjiman",
	"anjing",
	"anjir",
	"anjlok",
	"anju",
	"anjung",
	"anjur",
	"ankilosis",
	"anoa",
	"anode",
	"anodin",
	"anofeles",
	"anoksemia",
	"anoksik",
	"anom",
	"anomali",
	"anomi",
	"anonim",
	"anonimitas",
	"anoreksia",
	"anorganik",
	"anorgastik",
	"anortopia",
	"anosmia",
	"anotasi",
	"ansa",
	"ansambel",
	"ansar",
	"ansari",
	"anta",
	"antagonis",
	"antagonisme",
	"antagonistis",
	"antah",
	"antah-berantah",
	"antakesuma",
	"antalas",
	"antalkali",
	"antamir",
	"antan",
	"antap",
	"antar",
	"antara",
	"antarbangsa",
	"antarbenua",
	"antardaerah",
	"antari",
	"antariksa",
	"antarkelompok",
	"antarlingkungan",
	"antarmaster",
	"antarmolekul",
	"antarmuka",
	"antarnegara",
	"antarplanet",
	"antarpribadi",
	"antarpulau",
	"antarras",
	"antarruang",
	"antarsel",
	"antarsuku",
	"antartika",
	"antarwilayah",
	"antasid",
	"antasida",
	"antawacana",
	"ante",
	"antedilivium",
	"antediluvium",
	"antefiks",
	"antek",
	"anteken",
	"antelas",
	"anteliks",
	"antelmintik",
	"antelop",
	"antem",
	"antemeridiem",
	"antena",
	"antenatal",
	"anteng",
	"antenul",
	"antep",
	"anter",
	"antera",
	"anteridium",
	"anterior",
	"antero",
	"anteseden",
	"anti",
	"antianemia",
	"antiartritik",
	"antibarion",
	"antibeku",
	"antibiosis",
	"antibiotik",
	"antibodi",
	"antidepresan",
	"antidioksida",
	"antidiuretik",
	"antidot",
	"antienzim",
	"antiflogistik",
	"antigen",
	"antigravitasi",
	"antih",
	"antihistamin",
	"antijasad",
	"antik",
	"antikarat",
	"antikatalis",
	"antiklimaks",
	"antiklin",
	"antiklinal",
	"antiklor",
	"antikonsepsi",
	"antikristus",
	"antikuari",
	"antikuariat",
	"antimateri",
	"antimetari",
	"antimonium",
	"antimuntah",
	"anting",
	"antinomi",
	"antinovel",
	"antipartikel",
	"antipati",
	"antipenawar",
	"antipiretik",
	"antipode",
	"antiproton",
	"antipruritik",
	"antisemitisme",
	"antisepsis",
	"antiseptik",
	"antisiklogenesis",
	"antisiklon",
	"antisiklonal",
	"antisiklonis",
	"antisimpul",
	"antisipasi",
	"antisipatif",
	"antitank",
	"antitesis",
	"antitoksin",
	"antitragus",
	"antiwirawan",
	"antizarah",
	"antoi",
	"antologi",
	"antonim",
	"antonimi",
	"antop",
	"antosian",
	"antraknosa",
	"antraks",
	"antrasena",
	"antrasian",
	"antrasit",
	"antre",
	"antri",
	"antromometer",
	"antromorfis",
	"antropobiologi",
	"antropoda",
	"antropofagi",
	"antropogeografi",
	"antropoid",
	"antropolog",
	"antropologi",
	"antropometer",
	"antropomorfisme",
	"antroponimi",
	"antroposentris",
	"antroposentrisme",
	"antroposofi",
	"antuk",
	"antul",
	"antun",
	"antung-antung",
	"antup",
	"anturium",
	"antusias",
	"antusiasme",
	"anu",
	"anual",
	"anugerah",
	"anuitas",
	"anulir",
	"anulus",
	"anumerta",
	"anunasika",
	"anuresis",
	"anuria",
	"anus",
	"anuswara",
	"anut",
	"anyak",
	"anyam",
	"anyang",
	"anyar",
	"anyel",
	"anyelir",
	"anyep",
	"anyes",
	"anyik",
	"anyir",
	"aorta",
	"apa",
	"apabila",
	"apak",
	"apakah",
	"apakala",
	"apalagi",
	"apam",
	"apanase",
	"apar",
	"aparat",
	"aparatur",
	"aparatus",
	"apartemen",
	"apartemenisasi",
	"apartheid",
	"apartotel",
	"apas",
	"apatah",
	"apati",
	"apatis",
	"apatride",
	"ape",
	"apek",
	"apel",
	"apelativa",
	"apendektomi",
	"apendiks",
	"apendisitis",
	"apepsi",
	"apersepsi",
	"apes",
	"aphelion",
	"apheliotropisme",
	"api",
	"apik",
	"apikal",
	"apikultur",
	"apilan",
	"aping",
	"apion",
	"apit",
	"apium",
	"apkir",
	"aplasi",
	"aplaus",
	"aplikasi",
	"aplikatif",
	"aplus",
	"apnea",
	"apo",
	"apodal",
	"apoenzim",
	"apogami",
	"apoge",
	"apograf",
	"apok",
	"apokalips",
	"apokaliptik",
	"apokope",
	"apokrifa",
	"apokrin",
	"apokromatik",
	"apolitis",
	"apologetika",
	"apologetis",
	"apologi",
	"apologia",
	"apomiksis",
	"apomorfin",
	"apopleksi",
	"aposematik",
	"aposiopesis",
	"aposisi",
	"aposisional",
	"apositif",
	"apostasi",
	"apostel",
	"aposteriori",
	"apostolik",
	"apostrof",
	"apotek",
	"apoteker",
	"apotik",
	"apraksi",
	"apraksia",
	"apresiasi",
	"apresiatif",
	"apresorium",
	"april",
	"apriori",
	"aprit",
	"apron",
	"apsara",
	"apsari",
	"aptasi",
	"aptiklus",
	"apu",
	"apuh",
	"apung",
	"apuran",
	"ara",
	"arab",
	"arababu",
	"arabahu",
	"arabes",
	"arabesk",
	"arabika",
	"aragonit",
	"arah",
	"arai",
	"arak",
	"araknitis",
	"araknoid",
	"aral",
	"aram",
	"aramba",
	"arang",
	"aransemen",
	"ararut",
	"aras",
	"arasy",
	"arau",
	"arbaa",
	"arbab",
	"arbei",
	"arbiter",
	"arbitrase",
	"arbitrer",
	"arboreal",
	"arboretum",
	"arborikultur",
	"arca",
	"arcas",
	"ardi",
	"are",
	"area",
	"areal",
	"arek",
	"arem-arem",
	"aren",
	"arena",
	"areografi",
	"areola",
	"areometer",
	"arerut",
	"ares",
	"arestasi",
	"areta",
	"argari",
	"argentit",
	"argentum",
	"argirodit",
	"argol",
	"argometer",
	"argon",
	"argot",
	"argumen",
	"argumentasi",
	"argumentatif",
	"ari",
	"aria",
	"aries",
	"arif",
	"arifin",
	"arih",
	"arik",
	"aril",
	"aring",
	"ariningsun",
	"arip",
	"aris",
	"arisan",
	"aristokrasi",
	"aristokrat",
	"aristokratis",
	"aristotipe",
	"arit",
	"aritenoid",
	"aritmetika",
	"arja",
	"arkade",
	"arkais",
	"arkaisme",
	"arkan",
	"arkati",
	"arkegonium",
	"arkeolog",
	"arkeologi",
	"arkeologis",
	"arkeozoikum",
	"arketipe",
	"arkian",
	"arkifonem",
	"arkileksem",
	"arkitraf",
	"arktika",
	"arku",
	"arloji",
	"armada",
	"arnal",
	"arogan",
	"arogansi",
	"aroma",
	"aromatik",
	"arombai",
	"aron",
	"arpus",
	"arsenal",
	"arsenik",
	"arsenikum",
	"arsip",
	"arsipelago",
	"arsir",
	"arsis",
	"arsitek",
	"arsitektur",
	"arta",
	"artefak",
	"arteri",
	"arteriografi",
	"arteriola",
	"arteriosklerosis",
	"artesis",
	"artetis",
	"arti",
	"articok",
	"artifak",
	"artifisial",
	"artik",
	"artikel",
	"artikulasi",
	"artikulator",
	"artileri",
	"artiodaktil",
	"artis",
	"artisan",
	"artistik",
	"artisyok",
	"artona",
	"artotek",
	"artrobrankium",
	"artropoda",
	"aru",
	"aruan",
	"aruda",
	"aruk",
	"arumba",
	"arun",
	"arung",
	"arus",
	"arwah",
	"arwana",
	"arya",
	"aryaduta",
	"arzak",
	"asa",
	"asabat",
	"asabiah",
	"asabiyah",
	"asad",
	"asah",
	"asai",
	"asak",
	"asal",
	"asali",
	"asam",
	"asan",
	"asana",
	"asap",
	"asar",
	"asas",
	"asasi",
	"asbak",
	"asbes",
	"asbut",
	"aseksual",
	"asemble",
	"asembling",
	"asepsis",
	"aseptik",
	"aseran",
	"asese",
	"aset",
	"asetabulum",
	"asetat",
	"asetilena",
	"asetimeter",
	"aseton",
	"asfal",
	"asfar",
	"asfiksia",
	"asi",
	"asibilan",
	"asibilasi",
	"asid",
	"asidimeter",
	"asidosis",
	"asih",
	"asiklik",
	"asil",
	"asilabis",
	"asimetris",
	"asimilasi",
	"asimilatif",
	"asimtot",
	"asimus",
	"asin",
	"asindeton",
	"asing",
	"asinyor",
	"asiri",
	"asisten",
	"asistensi",
	"askar",
	"askariasis",
	"askarid",
	"askese",
	"asket",
	"asketisisme",
	"askon",
	"askriptif",
	"asli",
	"asma",
	"asmara",
	"asmaradanta",
	"asmaragama",
	"asmaraloka",
	"asmarandana",
	"asnad",
	"aso",
	"asoi",
	"asonansi",
	"asong",
	"asor",
	"asortimen",
	"asosial",
	"asosiasi",
	"asosiatif",
	"aspal",
	"asparaga",
	"asparagus",
	"aspartame",
	"aspek",
	"asperses",
	"aspiran",
	"aspirasi",
	"aspirasional",
	"aspirat",
	"aspiratif",
	"aspirator",
	"aspirin",
	"asprak",
	"asrama",
	"asrar",
	"asri",
	"assalamualaikum",
	"asta",
	"astadikpala",
	"astaga",
	"astagfirullah",
	"astaka",
	"astakona",
	"astana",
	"astasia",
	"astatik",
	"astatin",
	"astenia",
	"astenik",
	"astenopia",
	"asteositoma",
	"aster",
	"asteroid",
	"astigmatis",
	"astra",
	"astral",
	"astringen",
	"astrofisika",
	"astrolab",
	"astrolog",
	"astrologi",
	"astronaut",
	"astronautika",
	"astronom",
	"astronomi",
	"astronomis",
	"astrosit",
	"asu",
	"asuh",
	"asumsi",
	"asumtif",
	"asung",
	"asurador",
	"asuransi",
	"asusila",
	"aswa",
	"aswad",
	"aswasada",
	"asyera",
	"asyik",
	"asytoret",
	"asyura",
	"atak",
	"ataksia",
	"atap",
	"atar",
	"atas",
	"atase",
	"atau",
	"atavisme",
	"atebrin",
	"ateis",
	"ateisme",
	"ateistis",
	"atelir",
	"atensi",
	"atenuasi",
	"ateret",
	"atfal",
	"ati",
	"atlas",
	"atlet",
	"atletik",
	"atma",
	"atman",
	"atmolisis",
	"atmologi",
	"atmometer",
	"atmosfer",
	"atmosferis",
	"ato",
	"atok",
	"atol",
	"atom",
	"atomisasi",
	"atomistis",
	"atop",
	"atos",
	"atowa",
	"atraksi",
	"atraktan",
	"atraktif",
	"atresia",
	"atret",
	"atribut",
	"atributif",
	"atrisi",
	"atrium",
	"atrofi",
	"atropin",
	"atung",
	"atur",
	"atus",
	"aubade",
	"audiensi",
	"audio",
	"audiofil",
	"audiofon",
	"audiograf",
	"audiogram",
	"audiolingual",
	"audiologi",
	"audiometer",
	"audiovisual",
	"audit",
	"auditor",
	"auditorium",
	"augmentatif",
	"auk",
	"auksanometer",
	"auksi",
	"auksin",
	"aula",
	"aulia",
	"aum",
	"aung",
	"aur",
	"aura",
	"aural",
	"aurat",
	"aurikularia",
	"aurora",
	"aurum",
	"aus",
	"auskultasi",
	"autad",
	"autarki",
	"autarkis",
	"autentik",
	"autentikasi",
	"autentisitas",
	"autisme",
	"autistik",
	"auto",
	"autobiograf",
	"autobiografi",
	"autodidak",
	"autodidaktik",
	"autodin",
	"autofon",
	"autogami",
	"autogen",
	"autograf",
	"autografi",
	"autogram",
	"autoklaf",
	"autoklastik",
	"autokrasi",
	"autokrat",
	"autokton",
	"autoktonos",
	"autolisis",
	"autolitograf",
	"autologi",
	"automaton",
	"automobil",
	"automotif",
	"autopsi",
	"autoskop",
	"autosom",
	"autotoksin",
	"autotrof",
	"autotrofik",
	"autotrop",
	"autotropik",
	"auzubillah",
	"avalans",
	"aven",
	"aversi",
	"avertebrata",
	"avesta",
	"avgas",
	"aviari",
	"aviasi",
	"aviator",
	"avifauna",
	"avikultur",
	"avirulen",
	"avitaminosis",
	"avokad",
	"avontur",
	"avonturir",
	"avtur",
	"avunkulokal",
	"awa",
	"awaair",
	"awaarang",
	"awabau",
	"awabeku",
	"awabulu",
	"awabusa",
	"awadara",
	"awah",
	"awahama",
	"awai",
	"awak",
	"awal",
	"awalengas",
	"awam",
	"awamineral",
	"awan",
	"awanama",
	"awang",
	"awar",
	"awaracun",
	"awas",
	"awasenjata",
	"awat",
	"awawarna",
	"awet",
	"awewe",
	"awi",
	"awik-awik",
	"awin",
	"awur",
	"awut",
	"ayah",
	"ayahan",
	"ayahanda",
	"ayak",
	"ayal",
	"ayam",
	"ayan",
	"ayanda",
	"ayang-ayang",
	"ayap",
	"ayar",
	"ayat",
	"ayatullah",
	"ayem",
	"ayeng",
	"ayid",
	"ayit",
	"ayo",
	"ayom",
	"ayu",
	"ayuk",
	"ayum",
	"ayun",
	"ayunda",
	"ayut",
	"azab",
	"azal",
	"azali",
	"azam",
	"azan",
	"azeotrop",
	"azimat",
	"azimut",
	"aziz",
	"azmat",
	"azoikum",
	"azospermi",
	"azurit",
	"bab",
	"baba",
	"babad",
	"babah",
	"babak",
	"babakan",
	"babal",
	"baban",
	"babang",
	"babar",
	"babaring",
	"babas",
	"babat",
	"babatan",
	"babe",
	"babesiasis",
	"babet",
	"babi",
	"babil",
	"babit",
	"bablas",
	"babon",
	"babu",
	"babun",
	"babur",
	"babut",
	"baca",
	"bacah",
	"bacak",
	"bacang",
	"bacar",
	"bacek",
	"bacem",
	"bacik",
	"bacin",
	"baco",
	"bacok",
	"bacot",
	"bacul",
	"bacut",
	"bad",
	"bada",
	"badai",
	"badak",
	"badal",
	"badam",
	"badan",
	"badang",
	"badani",
	"badar",
	"badari",
	"badasi",
	"badau",
	"bade",
	"badi",
	"badik",
	"badminton",
	"badong",
	"badui",
	"baduk",
	"badung",
	"badur",
	"badut",
	"baduyut",
	"bafta",
	"bagai",
	"bagaimana",
	"bagak",
	"bagal",
	"bagan",
	"bagang",
	"bagar",
	"bagas",
	"bagasi",
	"bagat",
	"bagau",
	"bagea",
	"bagi",
	"baginda",
	"bagong",
	"bagor",
	"baguk",
	"bagul",
	"bagur",
	"bagus",
	"bah",
	"bahadur",
	"bahaduri",
	"bahagia",
	"bahak",
	"bahala",
	"bahalan",
	"baham",
	"bahan",
	"bahana",
	"bahang",
	"bahar",
	"bahara",
	"bahari",
	"baharu",
	"bahas",
	"bahasa",
	"bahaya",
	"bahenol",
	"baheula",
	"bahimiah",
	"bahkan",
	"bahri",
	"bahrulhayat",
	"bahtera",
	"bahu",
	"bahuku",
	"bahwa",
	"bahwasanya",
	"baiat",
	"baid",
	"baiduri",
	"baik",
	"bain",
	"bainah",
	"bais",
	"bait",
	"baitulharam",
	"baitullah",
	"baitulmakdis",
	"baitulmakmur",
	"baitulmal",
	"baitulmukadas",
	"baitulmukadis",
	"baja",
	"bajaj",
	"bajak",
	"bajan",
	"bajang",
	"bajar",
	"bajau",
	"bajetah",
	"baji",
	"bajigur",
	"bajik",
	"bajing",
	"baju",
	"bajul",
	"bak",
	"baka",
	"bakak",
	"bakal",
	"bakalaureat",
	"bakam",
	"bakap",
	"bakar",
	"bakarat",
	"bakas",
	"bakat",
	"bakau",
	"bakda",
	"bakdahu",
	"bakdu",
	"bakdul",
	"bakelit",
	"bakero",
	"bakh",
	"bakhil",
	"baki",
	"bakiak",
	"bakik",
	"bakir",
	"bakmi",
	"bako",
	"bakpao",
	"bakpia",
	"baksi",
	"baksis",
	"bakso",
	"baktau",
	"bakteremia",
	"bakteri",
	"bakterin",
	"bakteriofag",
	"bakteriolisis",
	"bakteriolog",
	"bakteriologi",
	"bakteriostatik",
	"bakterisida",
	"bakti",
	"baku",
	"bakul",
	"bakung",
	"bakup",
	"bakut",
	"bakwan",
	"bal",
	"bala",
	"balabad",
	"balad",
	"balada",
	"balah",
	"balai",
	"balairung",
	"balak",
	"balalaika",
	"balam",
	"balan",
	"balang",
	"balangkep",
	"balans",
	"balap",
	"balar",
	"balas",
	"balau",
	"balela",
	"balen",
	"balerina",
	"balerong",
	"balet",
	"balgam",
	"balian",
	"balig",
	"baliho",
	"balik",
	"baling",
	"balistik",
	"balistika",
	"baliu",
	"balkas",
	"balkon",
	"balneologi",
	"balneoterapi",
	"balok",
	"balon",
	"balong",
	"balot",
	"balsam",
	"balseros",
	"balu",
	"baluarti",
	"baluh",
	"balui",
	"baluk",
	"balun",
	"balung",
	"balur",
	"balut",
	"bam",
	"bambam",
	"bambang",
	"bambu",
	"bambung",
	"ban",
	"bana",
	"banal",
	"banang",
	"banar",
	"banat",
	"bancak",
	"bancang",
	"bancar",
	"bancet",
	"banci",
	"bancik",
	"bancuh",
	"bancut",
	"banda",
	"bandan",
	"bandang",
	"bandar",
	"bandara",
	"bandarsah",
	"bandasrayan",
	"bandea",
	"bandel",
	"bandela",
	"bandeng",
	"bandering",
	"banderol",
	"banding",
	"bandit",
	"banditisme",
	"bando",
	"bandongan",
	"bandos",
	"bandot",
	"bandrek",
	"bandu",
	"bandul",
	"bandung",
	"bandusa",
	"bandut",
	"bang",
	"bangai",
	"bangan",
	"bangang",
	"bangar",
	"bangas",
	"bangat",
	"bangau",
	"bangbung",
	"banget",
	"bangga",
	"banggan",
	"bangir",
	"bangka",
	"bangkah",
	"bangkai",
	"bangkal",
	"bangkang",
	"bangkar",
	"bangkas",
	"bangkasan",
	"bangkeh",
	"bangket",
	"bangking",
	"bangkir",
	"bangkis",
	"bangkit",
	"bangkong",
	"bangkot",
	"bangkrut",
	"bangku",
	"bangkut",
	"banglas",
	"bangle",
	"banglo",
	"bango",
	"bangor",
	"bangpak",
	"bangsa",
	"bangsai",
	"bangsal",
	"bangsat",
	"bangsi",
	"bangun",
	"bangus",
	"bani",
	"banian",
	"baning",
	"banir",
	"banjang",
	"banjar",
	"banjaran",
	"banji",
	"banjir",
	"banjur",
	"bank",
	"bankir",
	"bantah",
	"bantai",
	"bantal",
	"bantam",
	"bantar",
	"bantaran",
	"bantat",
	"bantau",
	"banteng",
	"banter",
	"banting",
	"bantu",
	"bantun",
	"bantut",
	"banua",
	"banyak",
	"banyo",
	"banyol",
	"banyu",
	"banyun",
	"banzai",
	"bao",
	"bap",
	"bapa",
	"bapak",
	"bapakisme",
	"bapanda",
	"bapang",
	"bapet",
	"baplang",
	"baptis",
	"bar",
	"bara",
	"baraat",
	"baragajul",
	"barah",
	"barai",
	"barak",
	"barakat",
	"barakatuh",
	"baran",
	"barang",
	"barangan",
	"barangkali",
	"barap",
	"baras",
	"barat",
	"barau-barau",
	"barbar",
	"barbarisme",
	"barbel",
	"barber",
	"barbital",
	"barbiton",
	"barbiturat",
	"barbur",
	"bardi",
	"bare-bare",
	"barel",
	"bareng",
	"barep",
	"baret",
	"barga",
	"bari",
	"barid",
	"barier",
	"barik",
	"barikade",
	"baring",
	"baringan",
	"barion",
	"baris",
	"barisfer",
	"barit",
	"barita",
	"bariton",
	"barium",
	"barjad",
	"barkas",
	"barkometer",
	"barli",
	"barograf",
	"barogram",
	"barok",
	"barologi",
	"barometer",
	"barometri",
	"baron",
	"barong",
	"barongan",
	"barongsai",
	"baroskop",
	"barotermograf",
	"barso",
	"barter",
	"baru",
	"barua",
	"baruh",
	"baruje",
	"baruna",
	"barung-barung",
	"barusan",
	"barut",
	"barzakh",
	"barzanji",
	"bas",
	"basa",
	"basa-basi",
	"basah",
	"basal",
	"basalioma",
	"basanit",
	"basat",
	"basau",
	"basi",
	"basil",
	"basilari",
	"basilika",
	"basilus",
	"basin",
	"basir",
	"basirah",
	"basis",
	"basit",
	"baskara",
	"baskat",
	"basket",
	"baskom",
	"basmi",
	"bastar",
	"basuh",
	"basung",
	"basut",
	"bata",
	"batagor",
	"batai",
	"batak",
	"batako",
	"batal",
	"batalion",
	"batalyon",
	"batang",
	"batara",
	"batari",
	"batas",
	"batekeng",
	"batel",
	"batela",
	"baterai",
	"bati",
	"batih",
	"batik",
	"batil",
	"batila",
	"batimetri",
	"batin",
	"batiplankton",
	"batir-batir",
	"batis",
	"batisfer",
	"batok",
	"batolit",
	"baton",
	"batu",
	"batuk",
	"batun",
	"batung",
	"bau",
	"baud",
	"bauk",
	"bauksit",
	"baun",
	"baung",
	"baur",
	"baureksa",
	"bausastra",
	"bausuku",
	"baut",
	"bawa",
	"bawab",
	"bawah",
	"bawak",
	"bawal",
	"bawang",
	"bawasir",
	"bawat",
	"bawel",
	"bawon",
	"baya",
	"bayak",
	"bayam",
	"bayan",
	"bayang",
	"bayangkara",
	"bayangkari",
	"bayar",
	"bayas",
	"bayat",
	"bayata",
	"bayati",
	"bayem",
	"bayi",
	"bayonet",
	"bayong",
	"bayu",
	"bayuh",
	"bayun",
	"bayung",
	"bayur",
	"bazar",
	"bazoka",
	"bea",
	"beasiswa",
	"beatifikasi",
	"bebal",
	"beban",
	"bebandos",
	"bebang",
	"bebar",
	"bebaru",
	"bebas",
	"bebat",
	"bebe",
	"bebek",
	"bebekel",
	"bebekisme",
	"bebel",
	"bebenah",
	"beber",
	"beberapa",
	"beberas",
	"bebesaran",
	"bebi",
	"bebodoran",
	"bebotoh",
	"bebrek",
	"bebuyutan",
	"becak",
	"becek",
	"beceng",
	"becokok",
	"becuk",
	"becus",
	"beda",
	"bedah",
	"bedak",
	"bedal",
	"bedama",
	"bedan",
	"bedar",
	"bedaru",
	"bedawi",
	"bedaya",
	"bedebah",
	"bedegap",
	"bedegong",
	"bedel",
	"bedeng",
	"bedil",
	"bedinde",
	"bedo",
	"bedol",
	"bedudak",
	"beduk",
	"bedukang",
	"bedung",
	"beeng",
	"bega",
	"begadang",
	"begah",
	"begal",
	"begana",
	"begana-begini",
	"begandering",
	"begandring",
	"begap",
	"begar",
	"begawan",
	"begini",
	"begitu",
	"bego",
	"begonia",
	"begroting",
	"begu",
	"beguk",
	"begundal",
	"beha",
	"behandel",
	"behena",
	"bejana",
	"bejat",
	"bek",
	"beka",
	"bekah",
	"bekakak",
	"bekakas",
	"bekal",
	"bekam",
	"bekantan",
	"bekap",
	"bekas",
	"bekat",
	"bekatul",
	"bekel",
	"beken",
	"beker",
	"bekerma",
	"bekicot",
	"bekil",
	"beking",
	"bekisar",
	"bekleding",
	"bekles",
	"beklit",
	"beksan",
	"beku",
	"bekuk",
	"bekuku",
	"bekukung",
	"bel",
	"bela",
	"belabas",
	"belacak",
	"belacan",
	"belacu",
	"belada",
	"beladau",
	"beladu",
	"belah",
	"belahak",
	"belahong",
	"belai",
	"belak",
	"belaka",
	"belakang",
	"belako",
	"belalah",
	"belalai",
	"belalak",
	"belalang",
	"belam",
	"belambang",
	"belan",
	"belanak",
	"belanda",
	"belandang",
	"belandar",
	"belandong",
	"belandung",
	"belang",
	"belanga",
	"belangah",
	"belangir",
	"belangkas",
	"belangkin",
	"belangkon",
	"belanja",
	"belantai",
	"belantan",
	"belantara",
	"belantik",
	"belantika",
	"belantuk",
	"belar",
	"belarak",
	"belas",
	"belasah",
	"belasting",
	"belasungkawa",
	"belasut",
	"belat",
	"belat-belit",
	"belata",
	"belater",
	"belati",
	"belatik",
	"belatuk",
	"belatung",
	"belau",
	"belawan",
	"beldu",
	"belebas",
	"belebat",
	"belecak",
	"beleda",
	"beledang",
	"beledi",
	"beledu",
	"beleid",
	"belek",
	"belekek",
	"belekok",
	"belel",
	"belelang",
	"belembang",
	"belencong",
	"belendong",
	"belendung",
	"beleng",
	"belenggu",
	"belengket",
	"belengkok",
	"belengkong",
	"belengset",
	"belenting",
	"belentung",
	"belepas",
	"belera",
	"belerang",
	"belerong",
	"beleter",
	"beli",
	"belia",
	"beliak",
	"belian",
	"beliau",
	"belibas",
	"belibat",
	"belibis",
	"belida",
	"beligat",
	"beligo",
	"belik",
	"belikan",
	"belikat",
	"beliku",
	"belimbing",
	"belincong",
	"beling",
	"belingkang",
	"belingsat",
	"belingut",
	"belinjo",
	"belintang",
	"belis",
	"belit",
	"belitung",
	"beliung",
	"beliut",
	"beloan",
	"belobor",
	"belodok",
	"beloh",
	"belok",
	"belokok",
	"belolang",
	"belolok",
	"belolong",
	"belon",
	"belonggok",
	"belongkang",
	"belongkeng",
	"belongkot",
	"belongkotan",
	"belongsong",
	"belontang",
	"beloon",
	"belot",
	"belotong",
	"belu",
	"belu-belai",
	"beluam",
	"beluas",
	"belubu",
	"belubur",
	"beludak",
	"beludar",
	"beludru",
	"beluhan",
	"beluk",
	"belukap",
	"belukar",
	"beluku",
	"belukut",
	"belulang",
	"beluluk",
	"belulung",
	"belum",
	"belumpai",
	"belungkang",
	"belungkur",
	"belungsing",
	"belunjur",
	"beluntas",
	"beluru",
	"belus",
	"belusuk",
	"belut",
	"beluwek",
	"bembam",
	"bemban",
	"bembar",
	"bembarap",
	"bembet",
	"bemo",
	"bemper",
	"bena",
	"benah",
	"benak",
	"benalu",
	"benam",
	"benang",
	"benar",
	"benara",
	"benatu",
	"bencah",
	"bencana",
	"bencat",
	"benci",
	"bencol",
	"bencong",
	"benda",
	"bendahara",
	"bendahari",
	"bendala",
	"bendalu",
	"bendang",
	"bendar",
	"bendara",
	"bendari",
	"bendawat",
	"bendawi",
	"bende",
	"bendel",
	"bendela",
	"bendera",
	"benderang",
	"benderung",
	"bendesa",
	"bendi",
	"bendir",
	"bendo",
	"bendoro",
	"bendu",
	"benduan",
	"bendul",
	"bendung",
	"benefaktif",
	"bengah",
	"bengal",
	"bengang",
	"bengang-bengut",
	"bengap",
	"bengawan",
	"bengek",
	"bengep",
	"benggal",
	"benggala",
	"benggang",
	"benggil",
	"benggol",
	"bengis",
	"bengkah",
	"bengkak",
	"bengkal",
	"bengkal-bengkil",
	"bengkalai",
	"bengkang-bengkok",
	"bengkang-bengkong",
	"bengkang-bengkung",
	"bengkar",
	"bengkarak",
	"bengkarap",
	"bengkaras",
	"bengkarung",
	"bengkatak",
	"bengkawan",
	"bengkawang",
	"bengkayang",
	"bengkel",
	"bengkelai",
	"bengkeng",
	"bengker",
	"bengkerap",
	"bengkil",
	"bengkok",
	"bengkol",
	"bengkong",
	"bengkos",
	"bengku",
	"bengkuang",
	"bengkudu",
	"bengkunang",
	"bengkung",
	"bengoh",
	"bengok",
	"bengong",
	"bengot",
	"bengu",
	"benguk",
	"bengul",
	"bengung",
	"beni",
	"benian",
	"benih",
	"bening",
	"benitan",
	"benjol",
	"benjut",
	"benkap",
	"bensin",
	"benta",
	"bentak",
	"bentala",
	"bentan",
	"bentang",
	"bentangkan",
	"bentangur",
	"bentar",
	"bentara",
	"bentaus",
	"benteh",
	"benteng",
	"bentes",
	"bentet",
	"bentik",
	"bentoh",
	"bentok",
	"bentol",
	"bentong",
	"bentonit",
	"bentos",
	"bentrok",
	"bentuk",
	"bentul",
	"bentulu",
	"bentur",
	"benturung",
	"bentus",
	"benua",
	"benuang",
	"benuaron",
	"benulung",
	"benum",
	"benur",
	"benyai",
	"benyek",
	"benyoh",
	"benyot",
	"benzedrin",
	"benzena",
	"benzil",
	"benzoat",
	"benzoil",
	"benzoin",
	"benzol",
	"beo",
	"beol",
	"bera",
	"berabe",
	"beragan",
	"berahi",
	"berai",
	"beraja",
	"berak",
	"berakah",
	"beraksa",
	"beram",
	"berambang",
	"beramin",
	"beranang",
	"beranda",
	"berandal",
	"berandang",
	"berang",
	"berangai",
	"berangan",
	"berangas",
	"berangasan",
	"berangga",
	"berangkal",
	"berangkat",
	"berangsang",
	"berangta",
	"berangus",
	"berani",
	"beranta",
	"berantak",
	"berantas",
	"berapa",
	"beras",
	"berat",
	"bercak",
	"berdikari",
	"berdus",
	"berebes",
	"beredel",
	"berek-berek",
	"beremban",
	"berembang",
	"berendeng",
	"bereng-bereng",
	"berengau",
	"berenggil",
	"berengos",
	"berengsek",
	"berengut",
	"berentang",
	"bereo",
	"bererot",
	"beres",
	"beresok",
	"beret",
	"berewok",
	"bergajul",
	"bergas",
	"berguk",
	"berhala",
	"beri",
	"beriang",
	"beriani",
	"berida",
	"berik",
	"beril",
	"berilium",
	"berinda",
	"bering-bering",
	"beringas",
	"beringin",
	"beringsang",
	"berisik",
	"berita",
	"berkah",
	"berkas",
	"berkat",
	"berkelium",
	"berkik",
	"berkil",
	"berko",
	"berkung",
	"berlau",
	"berlian",
	"berma",
	"bermat",
	"bermi",
	"bernas",
	"bernga",
	"beroci",
	"beroga",
	"berok",
	"berokat",
	"beron",
	"beronang",
	"berondok",
	"berondong",
	"berong",
	"berongkos",
	"berongsang",
	"berongsong",
	"beronjong",
	"beronok",
	"beronsang",
	"berontak",
	"berosot",
	"beroti",
	"beroya",
	"bersat",
	"bersih",
	"bersil",
	"bersin",
	"bersit",
	"bersut",
	"bertam",
	"bertih",
	"beru",
	"beruang",
	"beruas",
	"berubuh",
	"berudu",
	"berui",
	"beruju",
	"berujul",
	"beruk",
	"berumbun",
	"berumbung",
	"berunai",
	"berunang",
	"berungut",
	"beruntus",
	"beruri",
	"berus",
	"berwari",
	"berzanji",
	"besalen",
	"besan",
	"besar",
	"besek",
	"besel",
	"besengek",
	"beser",
	"besero",
	"beset",
	"besi",
	"besikal",
	"besing",
	"besit",
	"beskal",
	"beskap",
	"beskat",
	"beslah",
	"beslit",
	"besok",
	"besot",
	"bestari",
	"bestek",
	"bestel",
	"bestialitas",
	"bestik",
	"bestir",
	"bestral",
	"besuk",
	"besusu",
	"besut",
	"besuta",
	"bet",
	"beta",
	"betah",
	"betahak",
	"betak-betak",
	"betang",
	"betapa",
	"betara",
	"betari",
	"betas",
	"betatas",
	"betatron",
	"betau",
	"betet",
	"beti",
	"betik",
	"betina",
	"beting",
	"betinga",
	"betis",
	"betok",
	"beton",
	"betonisasi",
	"betot",
	"betul",
	"betung",
	"betutu",
	"bewok",
	"bhayangkara",
	"biadab",
	"biadat",
	"biadi",
	"biah",
	"biak",
	"biang",
	"bianglala",
	"biaperi",
	"biar",
	"biara",
	"biarpet",
	"biarpun",
	"bias",
	"biasa",
	"biat",
	"biau",
	"biawak",
	"biawan",
	"biawas",
	"biaya",
	"bibel",
	"bibi",
	"bibinda",
	"bibir",
	"bibit",
	"biblio",
	"bibliografi",
	"bibliomania",
	"bibliotek",
	"bicana",
	"bicara",
	"bicokok",
	"bicu",
	"bida",
	"bidadari",
	"bidah",
	"bidai",
	"bidak",
	"bidal",
	"bidan",
	"bidang",
	"bidar",
	"bidara",
	"bidari",
	"bidas",
	"bidet",
	"bidik",
	"bido",
	"biduan",
	"biduanda",
	"biduanita",
	"biduk",
	"bidur",
	"biduri",
	"bienial",
	"biennale",
	"bifasial",
	"bifida",
	"bigair",
	"bigami",
	"bigamis",
	"bihi",
	"bihun",
	"bijak",
	"bijaksana",
	"bijan",
	"bijana",
	"biji",
	"bijih",
	"bik",
	"bikameral",
	"bikang",
	"bikarbonat",
	"bikin",
	"bikini",
	"bikir",
	"bikonkaf",
	"bikonveks",
	"bikromat",
	"biksah",
	"biksu",
	"biksuni",
	"biku",
	"bila",
	"bilabial",
	"bilah",
	"bilai",
	"bilakmata",
	"bilal",
	"bilamana",
	"bilamasa",
	"bilang",
	"bilas",
	"bilateral",
	"bilateralisme",
	"bilga",
	"bilhak",
	"biliar",
	"bilik",
	"bilineal",
	"bilingual",
	"bilingualisme",
	"bilis",
	"biliun",
	"billahi",
	"bilokal",
	"bilur",
	"bilyet",
	"bimasakti",
	"bimbang",
	"bimbing",
	"bimbit",
	"bimetal",
	"bin",
	"bina",
	"binal",
	"binar",
	"binara",
	"binaraga",
	"binasa",
	"binatak",
	"binatang",
	"binatu",
	"binawah",
	"binayah",
	"bincacak",
	"bincang",
	"bincang-bincut",
	"bincu",
	"bincul",
	"bincut",
	"bindam",
	"bindeng",
	"binder",
	"bindu",
	"bineka",
	"binen",
	"biner",
	"bingas",
	"bingit",
	"bingka",
	"bingkah",
	"bingkai",
	"bingkas",
	"bingkatak",
	"bingkis",
	"bingung",
	"bini",
	"binjai",
	"binjat",
	"binokular",
	"binomial",
	"bintak",
	"bintal",
	"bintalak",
	"bintan",
	"bintang",
	"bintara",
	"binti",
	"bintik",
	"bintil",
	"bintit",
	"bintul",
	"bintulbahar",
	"bintur",
	"binturung",
	"biodata",
	"biodin",
	"biofera",
	"biofilm",
	"biofilter",
	"biofisik",
	"biofisika",
	"biogas",
	"biogenesis",
	"biogenik",
	"biogeografi",
	"biografi",
	"biokimia",
	"bioklimatologi",
	"biola",
	"biolinguistik",
	"biolit",
	"biolog",
	"biologi",
	"biologis",
	"bioluminesensi",
	"biomassa",
	"biomekani",
	"biometeorologi",
	"biometri",
	"biometrika",
	"bionomika",
	"biopendar",
	"bioplasma",
	"biopsi",
	"bioritme",
	"bioritmik",
	"biosekuen",
	"biosfer",
	"biosida",
	"bioskop",
	"biostatika",
	"biota",
	"biotek",
	"bioteknologi",
	"biotik",
	"biotin",
	"biotoksin",
	"biotron",
	"bipatride",
	"bipolar",
	"bipolaritas",
	"bipolisentrisme",
	"biprisma",
	"bir",
	"birah",
	"birai",
	"biram",
	"birama",
	"birang",
	"biras",
	"birat",
	"biri-biri",
	"biring",
	"birit",
	"biro",
	"birofaks",
	"birokrasi",
	"birokrat",
	"birokratis",
	"birokratisasi",
	"birokratisme",
	"birsam",
	"biru",
	"bis",
	"bisa",
	"bisai",
	"bisan",
	"bisawab",
	"bisbol",
	"biseksual",
	"bisektris",
	"biseps",
	"bisik",
	"bising",
	"bisinosis",
	"biskuit",
	"bismillah",
	"bismut",
	"bisnis",
	"bison",
	"bissu",
	"bistik",
	"bisu",
	"bisul",
	"bit",
	"biti",
	"biting",
	"bitisik",
	"bitumen",
	"biuku",
	"biumbai",
	"bius",
	"biut",
	"bivak",
	"biverbal",
	"biyuh-biyuh",
	"bizurai",
	"blabar",
	"blabitisme",
	"blakblakan",
	"blangko",
	"blantik",
	"blantika",
	"blaster",
	"blastostil",
	"blazer",
	"blek",
	"blekek",
	"blekok",
	"blenda",
	"blender",
	"blepot",
	"blewah",
	"blirik",
	"blog",
	"bloger",
	"blok",
	"blokade",
	"blokir",
	"bloknot",
	"blong",
	"blower",
	"bludrek",
	"blues",
	"blus",
	"blustru",
	"bobato",
	"bobok",
	"bobol",
	"bobos",
	"bobot",
	"bobotok",
	"bobrok",
	"bocah",
	"bocok",
	"bocong",
	"bocor",
	"bodhi",
	"bodhisatwa",
	"bodi",
	"bodoh",
	"bodok",
	"bodong",
	"bodor",
	"boga",
	"bogam",
	"bogel",
	"bogem",
	"bogi",
	"bogol",
	"bogor",
	"bogot",
	"bohemian",
	"bohlam",
	"bohong",
	"bohorok",
	"bohsia",
	"boi",
	"boikot",
	"bois",
	"bokar",
	"bokca",
	"bokek",
	"boko",
	"bokoh",
	"bokong",
	"bokop",
	"bokor",
	"boks",
	"boksen",
	"bokser",
	"bokset",
	"boksu",
	"boku",
	"bol",
	"bola",
	"bolak",
	"bolak-balik",
	"bolang-baling",
	"boleh",
	"bolero",
	"bolide",
	"boling",
	"bolometer",
	"bolong",
	"bolos",
	"bolot",
	"bolotu",
	"bolpoin",
	"bolsak",
	"bolu",
	"bom",
	"bombai",
	"bombardemen",
	"bombardir",
	"bombas",
	"bombastis",
	"bomber",
	"bomoh",
	"bomseks",
	"bon",
	"bonafide",
	"bonafiditas",
	"bonang",
	"bonanza",
	"bonar",
	"bonbon",
	"boncel",
	"bonceng",
	"boncol",
	"boncong",
	"bondol",
	"bondong",
	"bondot",
	"boneka",
	"bonet",
	"bong",
	"bongak",
	"bonggol",
	"bongkah",
	"bongkak",
	"bongkar",
	"bongkar-bangkir",
	"bongkin",
	"bongko",
	"bongkol",
	"bongkong",
	"bongkor",
	"bongkot",
	"bongkrek",
	"bonglai",
	"bongmeh",
	"bongo",
	"bongok",
	"bongsang",
	"bongsor",
	"bonjol",
	"bonjor",
	"bonsai",
	"bontak",
	"bonto",
	"bontok",
	"bontot",
	"bonus",
	"bonyok",
	"bopeng",
	"boplang",
	"bopok",
	"bopong",
	"bor",
	"bora",
	"borak",
	"boraks",
	"borang",
	"borat",
	"borci",
	"border",
	"bordes",
	"bordil",
	"bordir",
	"bordu",
	"boreal",
	"boreh",
	"borek",
	"borgol",
	"borhan",
	"borjuasi",
	"borjuis",
	"borkol",
	"boro-boro",
	"borok",
	"boron",
	"borong",
	"boros",
	"bortel",
	"bos",
	"bosan",
	"boseta",
	"bosman",
	"boson",
	"bosor",
	"bosun",
	"bot",
	"bota",
	"botak",
	"botang",
	"botani",
	"botanikus",
	"botanis",
	"botelir",
	"botlir",
	"boto",
	"botoh",
	"botok",
	"botol",
	"botor",
	"botridium",
	"botulisme",
	"bowo",
	"boya",
	"boyak",
	"boyas",
	"boyo-boyo",
	"boyong",
	"boyongan",
	"bozah",
	"bradikardi",
	"brahma",
	"brahmana",
	"brahmani",
	"brahmi",
	"brahmin",
	"braille",
	"brakiasi",
	"brakilogi",
	"brakisefalik",
	"brakistokron",
	"brakiurus",
	"braktea",
	"bramacorah",
	"brambang",
	"brana",
	"brander",
	"brankar",
	"brankas",
	"branwir",
	"braseri",
	"brata",
	"bratawali",
	"bredel",
	"breksi",
	"breksia",
	"brem",
	"bren",
	"brendi",
	"brengsek",
	"bretel",
	"brevet",
	"brifing",
	"brigade",
	"brigadir",
	"brigidig",
	"briket",
	"brilian",
	"briofita",
	"briologi",
	"briozoa",
	"brisan",
	"broiler",
	"brokade",
	"brokat",
	"broker",
	"brokoli",
	"brom",
	"bromat",
	"bromida",
	"bromin",
	"bromisme",
	"brompit",
	"brongkos",
	"bronkioli",
	"bronkitis",
	"bronkodilator",
	"bronkotomi",
	"bronkus",
	"brontosaurus",
	"bros",
	"brosur",
	"browser",
	"bruder",
	"bruk",
	"brunai",
	"brutal",
	"brutalisme",
	"bruto",
	"bua",
	"buah",
	"buai",
	"buak",
	"bual",
	"buana",
	"buang",
	"buani",
	"buar",
	"buari",
	"buas",
	"buat",
	"buaya",
	"bubar",
	"bubo",
	"bubu",
	"bubuh",
	"bubuhan",
	"bubuk",
	"bubul",
	"bubun",
	"bubung",
	"bubur",
	"bubus",
	"bubut",
	"bucu",
	"budak",
	"budanco",
	"budaya",
	"buddha",
	"buddhis",
	"buddhisme",
	"bude",
	"budek",
	"budi",
	"budian",
	"budiman",
	"budu",
	"buduk",
	"budur",
	"bueng",
	"bufer",
	"bufet",
	"bugar",
	"bugenfil",
	"bugenvil",
	"bugi-bugi",
	"bugil",
	"buhuk",
	"buhul",
	"bui",
	"buih",
	"buil",
	"bujal",
	"bujam",
	"bujang",
	"bujangga",
	"bujet",
	"bujeter",
	"bujuk",
	"bujur",
	"bujut",
	"buk",
	"buka",
	"bukan",
	"bukankah",
	"bukantah",
	"bukat",
	"bukau",
	"buket",
	"bukit",
	"buklet",
	"bukti",
	"buku",
	"bukung",
	"bukur",
	"bukut",
	"bulai",
	"bulak",
	"bulan",
	"bulang",
	"bulang-baling",
	"bulangan",
	"bular",
	"bulat",
	"bulbul",
	"buldan",
	"buldog",
	"buldoser",
	"bule",
	"buleng",
	"buletin",
	"bulevar",
	"bulgur",
	"buli-buli",
	"bulian",
	"bulimia",
	"bulir",
	"bulsak",
	"bulu",
	"bulug",
	"buluh",
	"buluk",
	"bulur",
	"bulus",
	"bum",
	"bumantara",
	"bumban",
	"bumbu",
	"bumbun",
	"bumbung",
	"bumel",
	"bumerang",
	"bumi",
	"bumiah",
	"bumiputra",
	"bumper",
	"bumpet",
	"bumping",
	"bun",
	"buna",
	"bunbunan",
	"buncah",
	"buncak",
	"buncang",
	"buncis",
	"buncit",
	"bunda",
	"bundak",
	"bundar",
	"bundas",
	"bundel",
	"bunduk",
	"bundung",
	"bung",
	"bunga",
	"bungalo",
	"bungar",
	"bungkal",
	"bungkam",
	"bungkang",
	"bungkas",
	"bungker",
	"bungkil",
	"bungking",
	"bungkuk",
	"bungkul",
	"bungkus",
	"bunglai",
	"bunglon",
	"bungsil",
	"bungsu",
	"bungur",
	"buni",
	"bunian",
	"bunjai",
	"buntak",
	"buntal",
	"buntang",
	"buntar",
	"buntat",
	"buntek",
	"buntel",
	"buntet",
	"buntil",
	"bunting",
	"buntu",
	"buntung",
	"buntut",
	"bunuh",
	"bunut",
	"bunyi",
	"bupala",
	"bupati",
	"bupet",
	"bur",
	"bura",
	"burai",
	"burak",
	"burakah",
	"buraksa",
	"buram",
	"buras",
	"burat",
	"burayak",
	"burdah",
	"bureng",
	"buret",
	"burgundi",
	"burhan",
	"burik",
	"burit",
	"burjusumbulat",
	"burkak",
	"burnout",
	"buron",
	"bursa",
	"buru",
	"buruh",
	"buruj",
	"buruk",
	"burun",
	"burung",
	"burut",
	"bus",
	"busa",
	"busai",
	"busana",
	"busar",
	"buset",
	"bushido",
	"busi",
	"busik",
	"bustan",
	"buster",
	"busuk",
	"busung",
	"busur",
	"busut",
	"buta",
	"butadiena",
	"butala",
	"butana",
	"butang",
	"butarepan",
	"butbut",
	"butek",
	"butik",
	"butir",
	"butirat",
	"butongpai",
	"butuh",
	"butul",
	"butun",
	"butut",
	"buwuh",
	"buya",
	"buyar",
	"buyung",
	"buyur",
	"buyut",
	"byarpet",
	"caba",
	"cabai",
	"cabak",
	"cabang",
	"cabar",
	"cabau",
	"cabe",
	"cabik",
	"cabir",
	"cabo",
	"cabuh",
	"cabuk",
	"cabul",
	"cabur",
	"cabut",
	"caca",
	"cacah",
	"cacak",
	"cacap",
	"cacar",
	"cacat",
	"cacau",
	"caci",
	"cacibar",
	"cacil",
	"cacing",
	"cadai",
	"cadang",
	"cadar",
	"cadas",
	"cadel",
	"cadik",
	"cadok",
	"caduk",
	"cadung",
	"caem",
	"cagak",
	"cagar",
	"cagil",
	"cagu",
	"caguh",
	"cagun",
	"cagut",
	"cah",
	"cahang",
	"cahar",
	"cahari",
	"cahaya",
	"cahi",
	"cailah",
	"caima",
	"caing",
	"cair",
	"cais",
	"caisim",
	"cak",
	"cakah",
	"cakak",
	"cakalang",
	"cakalele",
	"cakap",
	"cakar",
	"cakawari",
	"cakela",
	"cakep",
	"caki",
	"cakiak",
	"cakil",
	"cakmar",
	"cako",
	"cakra",
	"cakrabirawa",
	"cakrabuana",
	"cakram",
	"cakrawala",
	"cakruk",
	"cakup",
	"cakur",
	"cakus",
	"cal",
	"calabikang",
	"caladi",
	"calak",
	"calang",
	"calar",
	"calecer",
	"calempong",
	"caling",
	"calir",
	"calit",
	"calo",
	"calon",
	"calui",
	"caluk",
	"calung",
	"calus",
	"cam",
	"camar",
	"camat",
	"camau",
	"cambahan",
	"cambang",
	"cambuk",
	"cambul",
	"cambung",
	"camca",
	"camil",
	"campa",
	"campah",
	"campak",
	"campang",
	"campin",
	"camping",
	"camplungan",
	"campuh",
	"campung",
	"campur",
	"camuk",
	"camur",
	"canai",
	"canak",
	"canang",
	"cancan",
	"cancang",
	"cancut",
	"canda",
	"candai",
	"candak",
	"candala",
	"candang",
	"candat",
	"candi",
	"candik",
	"candit",
	"candra",
	"candradimuka",
	"candramawa",
	"candrasa",
	"candrasengkala",
	"candu",
	"candung",
	"cang",
	"cangah",
	"cangak",
	"cangam",
	"cangap",
	"cangar",
	"cangcang",
	"cangga",
	"canggaan",
	"canggah",
	"canggai",
	"canggal",
	"cangget",
	"canggih",
	"canggu",
	"canggung",
	"cangkang",
	"cangkat",
	"cangkel",
	"cangkih",
	"cangking",
	"cangkir",
	"cangklong",
	"cangkok",
	"cangkol",
	"cangkrang",
	"cangkrim",
	"cangkriman",
	"cangkring",
	"cangkuk",
	"cangkul",
	"cangkulan",
	"cangkum",
	"cangkung",
	"cangkup",
	"canguk",
	"cangut",
	"cantas",
	"cante",
	"cantel",
	"canteng",
	"cantik",
	"canting",
	"cantol",
	"cantrik",
	"cantum",
	"caos",
	"cap",
	"capa",
	"capah",
	"capai",
	"capak",
	"capal",
	"capang",
	"capar",
	"capcai",
	"cape",
	"capek",
	"capelin",
	"capgome",
	"capik",
	"capil",
	"caping",
	"capit",
	"capjiki",
	"caplak",
	"caplok",
	"capuk",
	"capung",
	"cara",
	"carah",
	"carak",
	"caraka",
	"caram",
	"caran",
	"carang",
	"caren",
	"cari",
	"carik",
	"caring",
	"carter",
	"caruk",
	"carut",
	"cas",
	"casciscus",
	"cat",
	"catat",
	"catek",
	"catu",
	"catuk",
	"catur",
	"caturjalma",
	"caturlarik",
	"caturtunggal",
	"caturwangsa",
	"caturwarga",
	"caturwarna",
	"caturwulan",
	"catut",
	"caul",
	"caung",
	"cawai",
	"cawak",
	"cawan",
	"cawangan",
	"cawat",
	"cawe-cawe",
	"cawi",
	"cawis",
	"cebak",
	"ceban",
	"cebik",
	"cebikas",
	"cebil",
	"cebir",
	"cebis",
	"cebok",
	"cebol",
	"cebong",
	"cebur",
	"cecah",
	"cecak",
	"cecap",
	"cecar",
	"cecawi",
	"cece",
	"ceceh",
	"ceceng",
	"cecengklok",
	"cecer",
	"cecere",
	"cecok",
	"cecongor",
	"cecunguk",
	"cedal",
	"cedayam",
	"cedera",
	"ceding",
	"cedok",
	"cedong",
	"ceduk",
	"cegah",
	"cegak",
	"cegar",
	"cegat",
	"ceguk",
	"cek",
	"cekah",
	"cekak",
	"cekakak",
	"cekakan",
	"cekal",
	"cekam",
	"cekang",
	"cekarau",
	"cekat",
	"cekau",
	"cekcekcek",
	"cekcok",
	"cekdam",
	"cekdel",
	"cekek",
	"cekel",
	"ceker",
	"cekeram",
	"ceki",
	"cekibar",
	"cekih",
	"cekik",
	"cekikik",
	"ceking",
	"cekit",
	"ceklek",
	"cekluk",
	"cekok",
	"cekrem",
	"cekres",
	"ceku",
	"cekuh",
	"cekuk",
	"cekung",
	"cekup",
	"cekur",
	"cekut",
	"cela",
	"celaga",
	"celah",
	"celak",
	"celaka",
	"celampak",
	"celana",
	"celang",
	"celangak",
	"celangak-celinguk",
	"celangap",
	"celapak",
	"celar",
	"celari",
	"celas",
	"celas-celus",
	"celat",
	"celatuk",
	"cele",
	"celebuk",
	"celedang-celedok",
	"celek",
	"celekeh",
	"celemek",
	"celemotan",
	"celempong",
	"celempung",
	"celeng",
	"celengan",
	"celengkak-celengkok",
	"celengkang",
	"celentang",
	"celep",
	"celepik",
	"celepuk",
	"celetuk",
	"celi",
	"celih",
	"celik",
	"celinguk",
	"celingus",
	"celis",
	"celok",
	"celomes",
	"celomok",
	"celonok",
	"celopar",
	"celorot",
	"celoteh",
	"celsius",
	"celuk",
	"celum",
	"celung",
	"celup",
	"celupak",
	"celur",
	"celuring",
	"celurit",
	"celurut",
	"celus",
	"celutak",
	"celutuk",
	"cema",
	"cemani",
	"cemar",
	"cemara",
	"cemas",
	"cemat",
	"cembeng",
	"cemberut",
	"cembul",
	"cembung",
	"cemburu",
	"cemeeh",
	"cemeh",
	"cemek",
	"cemekian",
	"cemengkian",
	"cemer",
	"cemerlang",
	"cemeti",
	"cemetuk",
	"cemomot",
	"cemong",
	"cemooh",
	"cempa",
	"cempaka",
	"cempal",
	"cempala",
	"cempana",
	"cempe",
	"cempedak",
	"cempek",
	"cempelik",
	"cempelung",
	"cempeng",
	"cempera",
	"cemperai",
	"cemperling",
	"cempiang",
	"cempil",
	"cempin",
	"cemping",
	"cemplang",
	"cemplung",
	"cempor",
	"cempreng",
	"cempres",
	"cempuling",
	"cempung",
	"cempurit",
	"cemuas",
	"cemuk",
	"cena",
	"cenak",
	"cenal-cenil",
	"cenangau",
	"cenangga",
	"cenangkas",
	"cenayang",
	"cencala",
	"cencaluk",
	"cencang",
	"cencaru",
	"cencawan",
	"cencawi",
	"cendala",
	"cendana",
	"cendang",
	"cendawan",
	"cendekia",
	"cendera",
	"cenderai",
	"cenderasa",
	"cenderawasih",
	"cenderung",
	"cendok",
	"cendol",
	"cenduai",
	"cenela",
	"ceng",
	"cengal",
	"cengam",
	"cengang",
	"cengap",
	"cengar-cengir",
	"cengbeng",
	"cengeh",
	"cengek",
	"cengeng",
	"cengengesan",
	"cenggek",
	"cengger",
	"cenggeret",
	"cengi",
	"cengir-cengir",
	"cengis",
	"cengkal",
	"cengkam",
	"cengkar",
	"cengkaruk",
	"cengkau",
	"cengkedi",
	"cengkeh",
	"cengkek",
	"cengkelong",
	"cengkeram",
	"cengkerama",
	"cengkerawak",
	"cengkerik",
	"cengkering",
	"cengkerung",
	"cengki",
	"cengkiak",
	"cengkih",
	"cengking",
	"cengkir",
	"cengkiwing",
	"cengkok",
	"cengkol",
	"cengkong",
	"cengkung",
	"cengkurai",
	"cengli",
	"cengung",
	"cengut",
	"centang",
	"centangan",
	"centeng",
	"centet",
	"centil",
	"centong",
	"centung",
	"cenung",
	"cepak",
	"cepal",
	"cepat",
	"cepek",
	"cepeng",
	"cepengan",
	"ceper",
	"cepiau",
	"ceplas-ceplos",
	"ceples",
	"ceplok",
	"ceplos",
	"cepo",
	"cepol",
	"cepu",
	"cepuk",
	"cerabah",
	"cerabih",
	"cerabut",
	"ceracak",
	"ceracam",
	"ceracap",
	"ceracau",
	"cerah",
	"cerai",
	"cerai-berai",
	"cerak",
	"ceraka",
	"cerakin",
	"ceramah",
	"cerana",
	"cerancang",
	"cerang",
	"ceranggah",
	"cerangka",
	"cerap",
	"cerat",
	"ceratai",
	"ceratuk",
	"cerau",
	"cerawat",
	"cerbak",
	"cerca",
	"cercah",
	"cercak",
	"cercap",
	"cerdas",
	"cerdik",
	"cere",
	"cerecek",
	"cerek",
	"ceremai",
	"cerempung",
	"cerepu",
	"ceret",
	"cerewet",
	"cergas",
	"ceri",
	"ceria",
	"cericap",
	"cericau",
	"cericip",
	"ceriga",
	"cerih",
	"cerita",
	"ceriwis",
	"cerkam",
	"cerkau",
	"cerlang",
	"cerlih",
	"cerling",
	"cermai",
	"cermat",
	"cermin",
	"cerna",
	"ceroboh",
	"cerobong",
	"cerocok",
	"cerocos",
	"cerompong",
	"ceronggah",
	"ceropong",
	"ceroteh",
	"cerowok",
	"cerpelai",
	"cerpen",
	"cerpenis",
	"cerpu",
	"cerucuh",
	"cerucup",
	"ceruh",
	"ceruk",
	"cerun",
	"cerup",
	"cerut",
	"cerutu",
	"cespleng",
	"cetai",
	"cetak",
	"cetar",
	"cetek",
	"ceteng",
	"ceter",
	"cetera",
	"ceteri",
	"ceteria",
	"ceti",
	"cetok",
	"cetus",
	"ceuki",
	"cewang",
	"cewek",
	"ciak",
	"cialat",
	"ciap",
	"ciar",
	"cibir",
	"cibit",
	"ciblon",
	"cibuk",
	"cicik",
	"cicil",
	"cicinda",
	"cicip",
	"cicit",
	"cidomo",
	"ciduk",
	"cigak",
	"cih",
	"cihui",
	"cik",
	"cika",
	"cikadas",
	"cikal",
	"cikar",
	"cikok",
	"cikrak",
	"ciku",
	"cikun",
	"cikut",
	"cilap",
	"cilawagi",
	"cili",
	"cilik",
	"ciling",
	"cilok",
	"ciluk",
	"cilukba",
	"cimplong",
	"cina",
	"cincang",
	"cincau",
	"cincin",
	"cincong",
	"cincu",
	"cinda",
	"cindai",
	"cindaku",
	"cinde",
	"cindil",
	"cindur",
	"cing",
	"cingak",
	"cingam",
	"cingangah",
	"cingge",
	"cingkat",
	"cingkeh",
	"cingkrang",
	"cingur",
	"cinta",
	"cintamani",
	"cinteng",
	"cintrong",
	"cip",
	"cipai",
	"cipan",
	"ciplak",
	"cipok",
	"ciprat",
	"cipta",
	"cir",
	"circir",
	"ciri",
	"cirit",
	"ciriwangi",
	"cis",
	"cit",
	"cita",
	"citra",
	"citraleka",
	"ciu",
	"cium",
	"ciut",
	"coak",
	"coang",
	"coba",
	"coban",
	"cobar-cabir",
	"cobek",
	"coblos",
	"cocok",
	"cocol",
	"cocor",
	"codak",
	"codet",
	"codot",
	"cogah",
	"cogan",
	"cogok",
	"cok",
	"cokar",
	"cokek",
	"cokelat",
	"coket",
	"coklat",
	"cokmar",
	"coko",
	"cokok",
	"cokol",
	"cokor",
	"cokorda",
	"cola-cala",
	"colak",
	"colak-caling",
	"colang-caling",
	"colek",
	"coleng",
	"colet",
	"coli",
	"colok",
	"colong",
	"colot",
	"comat-comot",
	"comberan",
	"comblang",
	"combong",
	"comek",
	"comel",
	"comor",
	"comot",
	"compang-camping",
	"compeng",
	"compes",
	"compoh",
	"compreng",
	"comro",
	"concong",
	"condong",
	"conet",
	"congak",
	"congeh",
	"congek",
	"conggah-canggih",
	"congget",
	"conggok",
	"congkah-cangkih",
	"congkah-mangkih",
	"congkak",
	"congkel",
	"congki",
	"congklak",
	"congklang",
	"congkok",
	"congkong",
	"congo",
	"congok",
	"congol",
	"congor",
	"congsam",
	"contek",
	"conteng",
	"contoh",
	"contong",
	"cop",
	"copak-capik",
	"copet",
	"coplok",
	"copot",
	"cor",
	"corak",
	"corat-coret",
	"corek",
	"coreng",
	"coret",
	"coro",
	"corob",
	"corong",
	"corot",
	"cotet",
	"cotok",
	"cowok",
	"cowokan",
	"crat-crit",
	"criping",
	"cua",
	"cuaca",
	"cuai",
	"cuak",
	"cual",
	"cuang",
	"cuar",
	"cuat",
	"cubit",
	"cublik",
	"cubung",
	"cuca",
	"cucakrawa",
	"cuci",
	"cucu",
	"cucuh",
	"cucuk",
	"cucun",
	"cucunda",
	"cucung",
	"cucup",
	"cucur",
	"cucurut",
	"cucut",
	"cudang",
	"cuek",
	"cugat",
	"cuh",
	"cuik",
	"cuil",
	"cuit",
	"cuk",
	"cuka",
	"cukai",
	"cuki",
	"cukil",
	"cukimai",
	"cukin",
	"cukit",
	"cukong",
	"cuku",
	"cukup",
	"cukur",
	"cula",
	"culak",
	"culan",
	"culas",
	"culi",
	"culiah",
	"culik",
	"culika",
	"culim",
	"culun",
	"cuma",
	"cuman",
	"cumbu",
	"cumengkling",
	"cumepak",
	"cumi-cumi",
	"cumil",
	"cuming",
	"cun",
	"cunam",
	"cundang",
	"cundrik",
	"cunduk",
	"cung",
	"cungap",
	"cungkil",
	"cungkup",
	"cungo",
	"cungul",
	"cungur",
	"cunia",
	"cup",
	"cupai",
	"cupak",
	"cupang",
	"cupar",
	"cupet",
	"cuping",
	"cuplik",
	"cupu",
	"cupul",
	"cur",
	"cura",
	"curah",
	"curai",
	"curam",
	"curang",
	"curat",
	"cureng",
	"curi",
	"curiah",
	"curiga",
	"curik",
	"curna",
	"curu",
	"cus",
	"cut",
	"cutak",
	"cutbrai",
	"cutel",
	"cuti",
	"cuwil",
	"daayah",
	"dab",
	"daba",
	"dabak",
	"dabal",
	"dabat",
	"dabih",
	"dabik",
	"dabing",
	"dabir",
	"dabit",
	"dablek",
	"dabol",
	"dabung",
	"dabus",
	"dacin",
	"dad",
	"dada",
	"dadah",
	"dadaisme",
	"dadak",
	"dadal",
	"dadali",
	"dadap",
	"dadar",
	"dadek",
	"dadi",
	"dadih",
	"dading",
	"dadu",
	"daduh",
	"daduk",
	"dadung",
	"daeng",
	"daerah",
	"daerahisme",
	"dafnah",
	"daftar",
	"daga",
	"dagang",
	"dage",
	"dagel",
	"dagi",
	"daging",
	"dagu",
	"dah",
	"dahaga",
	"dahagi",
	"dahak",
	"daham",
	"dahan",
	"dahanam",
	"dahar",
	"dahi",
	"dahiat",
	"dahina",
	"dahlia",
	"dahriah",
	"dahsyat",
	"dahulu",
	"dai",
	"daidan",
	"daidanco",
	"daif",
	"daim",
	"daiman",
	"daing",
	"daitia",
	"dajal",
	"daka",
	"dakah",
	"dakaik",
	"dakar",
	"dakhil",
	"daki",
	"dakik",
	"dakocan",
	"dakon",
	"dakron",
	"daksa",
	"daksina",
	"daktil",
	"daktilitis",
	"daktilologi",
	"daktiloskopi",
	"daku",
	"dakwa",
	"dakwah",
	"dal",
	"dalal",
	"dalalah",
	"dalalat",
	"dalam",
	"dalang",
	"daldaru",
	"dalem",
	"dalfin",
	"dali-dali",
	"dalih",
	"dalil",
	"daltonisme",
	"dalu",
	"daluang",
	"dalung",
	"dam",
	"damah",
	"damai",
	"damak",
	"damal",
	"daman",
	"damar",
	"damaru",
	"damas",
	"damat",
	"damba",
	"dambin",
	"dambir",
	"dame",
	"damen",
	"dami",
	"damik",
	"damotin",
	"dampak",
	"dampal",
	"dampan",
	"dampar",
	"dampeng",
	"dampil",
	"damping",
	"dampit",
	"damprat",
	"dampung",
	"dan",
	"dana",
	"danau",
	"danawa",
	"danda",
	"dandan",
	"dandang",
	"dandanggula",
	"dandapati",
	"dandi",
	"dang",
	"dangai",
	"dangar",
	"dangau",
	"dangdut",
	"dange",
	"danghyang",
	"dangir",
	"dangka",
	"dangkal",
	"dangkap",
	"dangkar",
	"dangkung",
	"danguk",
	"dansa",
	"dansanak",
	"danta",
	"danuh",
	"danur",
	"danyang",
	"dap",
	"dapa",
	"dapar",
	"dapat",
	"dapra",
	"dapur",
	"dar",
	"dara",
	"darab",
	"darah",
	"daras",
	"darat",
	"darau",
	"dargah",
	"dari",
	"daripada",
	"darji",
	"darma",
	"darmabakti",
	"darmakelana",
	"darmasiswa",
	"darmatirta",
	"darmawisata",
	"daro",
	"darpana",
	"daru-daru",
	"darulaitam",
	"darulakhirat",
	"darulbaka",
	"darulfana",
	"daruljalal",
	"darun",
	"darunu",
	"darurat",
	"darusalam",
	"darwis",
	"das",
	"dasa",
	"dasalomba",
	"dasar",
	"dasarian",
	"dasasila",
	"dasatitah",
	"dasawarsa",
	"dasbor",
	"dasi",
	"dasin",
	"daster",
	"dasun",
	"data",
	"datang",
	"datar",
	"datatamak",
	"dati",
	"datif",
	"datu",
	"datuk",
	"datum",
	"datung",
	"dauk",
	"daulat",
	"daun",
	"daur",
	"dawai",
	"dawan",
	"dawat",
	"dawet",
	"daya",
	"dayah",
	"dayang",
	"dayu",
	"dayuh",
	"dayuk",
	"dayung",
	"dayus",
	"dealat",
	"deaneksasi",
	"debah",
	"debak",
	"debam",
	"debap",
	"debar",
	"debarkasi",
	"debas",
	"debat",
	"debet",
	"debik",
	"debil",
	"debing",
	"debirokratisasi",
	"debit",
	"debitase",
	"debitor",
	"debitur",
	"debris",
	"debu",
	"debug",
	"debuk",
	"debum",
	"debun",
	"debung",
	"debup",
	"debur",
	"debus",
	"debut",
	"decak",
	"decap",
	"deceh",
	"decing",
	"decit",
	"decup",
	"decur",
	"decut",
	"dedah",
	"dedai",
	"dedak",
	"dedal",
	"dedalu",
	"dedap",
	"dedar",
	"dedara",
	"dedare",
	"dedas",
	"dedau",
	"dedek",
	"dedel",
	"dedemit",
	"dedengkot",
	"deder",
	"dederuk",
	"dedes",
	"dedikasi",
	"dedikatif",
	"deduksi",
	"deduktif",
	"dedulang",
	"deeskalasi",
	"defaitisme",
	"defekasi",
	"defender",
	"defensi",
	"defensif",
	"deferens",
	"defile",
	"definisi",
	"definit",
	"definitif",
	"defisien",
	"defisit",
	"deflagrasi",
	"deflagrator",
	"deflasi",
	"defleksi",
	"deflorasi",
	"defoliasi",
	"defolisasi",
	"defonologisasi",
	"deforestasi",
	"deformasi",
	"deformatif",
	"deg",
	"degam",
	"degan",
	"degap",
	"degar",
	"degen",
	"degenerasi",
	"degeneratif",
	"degil",
	"deging",
	"degradasi",
	"degresi",
	"deguk",
	"degum",
	"degung",
	"degup",
	"deh",
	"deham",
	"dehem",
	"dehidrasi",
	"dehidrat",
	"dehidrogenasi",
	"dehumanisasi",
	"deideologisasi",
	"deifikasi",
	"deiksis",
	"deiktis",
	"deislamisasi",
	"deisme",
	"dek",
	"dekade",
	"dekaden",
	"dekadensi",
	"dekagram",
	"dekah",
	"dekak",
	"dekaliter",
	"dekam",
	"dekameter",
	"dekan",
	"dekanal",
	"dekantasi",
	"dekap",
	"dekapoda",
	"dekar",
	"dekare",
	"dekat",
	"dekik",
	"dekil",
	"deking",
	"deklamasi",
	"deklamator",
	"deklarasi",
	"deklaratif",
	"deklasifikasi",
	"deklerer",
	"deklinasi",
	"deklinometer",
	"dekode",
	"dekoder",
	"dekolonisasi",
	"dekomposer",
	"dekomposisi",
	"dekompresi",
	"dekongestan",
	"dekonsentrasi",
	"dekontekstualisasi",
	"dekor",
	"dekorasi",
	"dekoratif",
	"dekorator",
	"dekosistem",
	"dekremeter",
	"dekreolisasi",
	"dekret",
	"dekriminalisasi",
	"deksa",
	"dekstrin",
	"dekstrosa",
	"deksura",
	"deku",
	"dekunci",
	"dekung",
	"dekus",
	"dekut",
	"delabialisasi",
	"delah",
	"delamak",
	"delan",
	"delap",
	"delapan",
	"delas",
	"delat",
	"delegasi",
	"delegat",
	"delegitimasi",
	"delepak",
	"deler",
	"delik",
	"delikan",
	"delikat",
	"delikates",
	"delima",
	"delineasi",
	"delinkuen",
	"delinkuensi",
	"delirium",
	"delman",
	"delong",
	"delongop",
	"delta",
	"deltoid",
	"delu",
	"delusi",
	"delusif",
	"demabrasi",
	"demagog",
	"demagogi",
	"demagogis",
	"demah",
	"demam",
	"demang",
	"demap",
	"demarkasi",
	"dembai",
	"dembam",
	"dembun",
	"demek",
	"demen",
	"demes",
	"demi",
	"demik",
	"demikian",
	"demiliterisasi",
	"demineralisasi",
	"demisioner",
	"demo",
	"demobilisan",
	"demobilisasi",
	"demograf",
	"demografi",
	"demografis",
	"demokrasi",
	"demokrat",
	"demokratis",
	"demokratisasi",
	"demon",
	"demoniak",
	"demonopolisasi",
	"demonstran",
	"demonstrasi",
	"demonstratif",
	"demonstrativa",
	"demoralisasi",
	"demosi",
	"dempak",
	"dempam",
	"dempang",
	"demper",
	"dempet",
	"dempir",
	"demplon",
	"dempok",
	"dempuk",
	"dempul",
	"dempung",
	"demung",
	"den",
	"dena",
	"denah",
	"denai",
	"denak",
	"denasalisasi",
	"denasionalisasi",
	"denawa",
	"dencang",
	"dencing",
	"denda",
	"dendam",
	"dendang",
	"dendeng",
	"dendi",
	"dendrokronologi",
	"dendrologi",
	"denervasi",
	"dengak",
	"dengan",
	"dengap",
	"dengar",
	"dengih",
	"denging",
	"dengkang",
	"dengkel",
	"dengki",
	"dengkik",
	"dengking",
	"dengkol",
	"dengkul",
	"dengkung",
	"dengkur",
	"dengkus",
	"dengu",
	"dengue",
	"denguk",
	"dengung",
	"dengus",
	"dengut",
	"denim",
	"denok",
	"denominal",
	"denominasi",
	"denotasi",
	"denotatif",
	"densimeter",
	"densitas",
	"densitometer",
	"densitometri",
	"densometer",
	"dental",
	"dentam",
	"dentang",
	"dentat",
	"dentin",
	"denting",
	"dentum",
	"dentung",
	"dentur",
	"denudasi",
	"denuklirisasi",
	"denyar",
	"denyit",
	"denyut",
	"deodoran",
	"deoknumisasi",
	"deontologi",
	"depa",
	"depak",
	"depalatalisasi",
	"depan",
	"depang",
	"depap",
	"deparpolisasi",
	"departemen",
	"departemental",
	"departementalisasi",
	"dependen",
	"dependensi",
	"depersonalisasi",
	"depersonifikasi",
	"depigmentasi",
	"depilasi",
	"deplesi",
	"depo",
	"depolarisasi",
	"depolitisasi",
	"deponir",
	"depopulasi",
	"deportasi",
	"deposan",
	"deposit",
	"deposito",
	"depot",
	"depresi",
	"depresiasi",
	"depresor",
	"deprok",
	"deprotonasi",
	"depun",
	"depus",
	"deputasi",
	"deputi",
	"dera",
	"deragem",
	"derai",
	"derajah",
	"derajang",
	"derajat",
	"derak",
	"deram",
	"deran",
	"derana",
	"derang",
	"derap",
	"deras",
	"derau",
	"derawa",
	"derebar",
	"deregulasi",
	"derek",
	"derel",
	"derep",
	"deres",
	"deresi",
	"deret",
	"dergama",
	"derik",
	"dering",
	"deringo",
	"deris",
	"derit",
	"derita",
	"deritaan",
	"derivasi",
	"derivat",
	"derivatif",
	"derji",
	"derma",
	"dermaga",
	"derman",
	"dermatitis",
	"dermatofitosis",
	"dermatolog",
	"dermatologi",
	"dermatom",
	"dermis",
	"dermoid",
	"dersana",
	"dersik",
	"deru",
	"deruji",
	"deruk",
	"derum",
	"derun",
	"derung",
	"derup",
	"derus",
	"derut",
	"desa",
	"desah",
	"desain",
	"desainer",
	"desak",
	"desakralisasi",
	"desalinasi",
	"desaneksasi",
	"desar",
	"desas-desus",
	"desau",
	"desegregasi",
	"deselerasi",
	"desember",
	"desensitisasi",
	"desentralisasi",
	"deserebrasi",
	"desersi",
	"desertir",
	"desibel",
	"desidua",
	"desigram",
	"desih",
	"desik",
	"desikan",
	"desikator",
	"desil",
	"desiliter",
	"desiliun",
	"desimal",
	"desimeter",
	"desinens",
	"desinfeksi",
	"desinfektan",
	"desing",
	"desintegrasi",
	"desir",
	"desis",
	"desit",
	"deskripsi",
	"deskriptif",
	"deskuamasi",
	"desmonem",
	"desmoplasia",
	"desmosom",
	"desorientasi",
	"desorpsi",
	"despot",
	"despotik",
	"despotisme",
	"destabilisasi",
	"destar",
	"destinasi",
	"destroyer",
	"destruksi",
	"destruktif",
	"destruktor",
	"desuk",
	"desulfurisasi",
	"desup",
	"desur",
	"desus",
	"desut",
	"detail",
	"detak",
	"detap",
	"detar",
	"detas",
	"detasemen",
	"detasering",
	"detasir",
	"deteksi",
	"detektif",
	"detektofon",
	"detektor",
	"detenidos",
	"detensi",
	"detente",
	"detergen",
	"deteriorasi",
	"determinan",
	"determinasi",
	"determinatif",
	"determinator",
	"determinis",
	"determinisme",
	"detik",
	"deting",
	"detoksifikasi",
	"detonasi",
	"detonator",
	"detritus",
	"detrusor",
	"detup",
	"detus",
	"deuterium",
	"deuterokanonika",
	"deuteron",
	"deutranomalopia",
	"deutranopia",
	"devaluasi",
	"developer",
	"deverbal",
	"deviasi",
	"devisa",
	"devosi",
	"dewa",
	"dewadaru",
	"dewala",
	"dewan",
	"dewana",
	"dewanagari",
	"dewangga",
	"dewasa",
	"dewata",
	"dewe",
	"dewi",
	"dia",
	"diabetes",
	"diad",
	"diadem",
	"diafon",
	"diaforetik",
	"diafragma",
	"diagenesis",
	"diagnosis",
	"diagnostik",
	"diagometer",
	"diagonal",
	"diagram",
	"diaken",
	"diakon",
	"diakones",
	"diakonia",
	"diakritik",
	"diakronis",
	"dialek",
	"dialektal",
	"dialektik",
	"dialektika",
	"dialektis",
	"dialektologi",
	"dialinguistik",
	"dialisis",
	"dialog",
	"dialogis",
	"diam",
	"diamagnetisme",
	"diameter",
	"diametral",
	"diamorf",
	"dian",
	"diang",
	"diaper",
	"diapositif",
	"diar",
	"diare",
	"dias",
	"diasistem",
	"diaspora",
	"diastase",
	"diastole",
	"diat",
	"diaterman",
	"diatermi",
	"diatermik",
	"diatesis",
	"diatipe",
	"diatom",
	"diatomit",
	"diatonik",
	"diatopik",
	"diayah",
	"dibasa",
	"didaktik",
	"didaktikus",
	"didaktis",
	"didih",
	"didik",
	"didis",
	"didong",
	"dielektrik",
	"diensefalon",
	"dies",
	"diesel",
	"diet",
	"dietetika",
	"difabel",
	"diferensial",
	"diferensiasi",
	"difluens",
	"difluensi",
	"difraksi",
	"difteri",
	"diftong",
	"difusi",
	"digdaya",
	"digenesis",
	"digestif",
	"digit",
	"digital",
	"digitalin",
	"digitalis",
	"digitalisasi",
	"diglosia",
	"digraf",
	"digresi",
	"digul",
	"dihedral",
	"dihidroksil",
	"dik",
	"dikara",
	"dikau",
	"dikit",
	"diklorida",
	"dikotil",
	"dikotomi",
	"dikroisme",
	"dikromat",
	"dikromatik",
	"diksa",
	"diksi",
	"diktat",
	"diktator",
	"diktatorial",
	"diktatoris",
	"dikte",
	"diktum",
	"dil",
	"dila",
	"dilak",
	"dilam",
	"dilasi",
	"dilatasi",
	"dilatometer",
	"dilema",
	"dilematik",
	"diler",
	"diletan",
	"diluvium",
	"dim",
	"dimensi",
	"dimer",
	"diminutif",
	"dimorfik",
	"dimorfisme",
	"din",
	"dina",
	"dinamik",
	"dinamika",
	"dinamis",
	"dinamisator",
	"dinamisme",
	"dinamit",
	"dinamo",
	"dinamometer",
	"dinar",
	"dinas",
	"dinasti",
	"dinding",
	"dingin",
	"dingkis",
	"dingkit",
	"dingklang",
	"dingklik",
	"dingo",
	"dini",
	"diniah",
	"diniyah",
	"dinosaurus",
	"dinul-islam",
	"diode",
	"dioesis",
	"dioksida",
	"dioksin",
	"diopsida",
	"dioptase",
	"dioptri",
	"diorama",
	"diorit",
	"dioses",
	"dipan",
	"diplo",
	"diploid",
	"diploma",
	"diplomasi",
	"diplomat",
	"diplomatik",
	"diplomatis",
	"dipsomania",
	"diptera",
	"diptotos",
	"dirah",
	"diraja",
	"direk",
	"direksi",
	"direktorat",
	"direktorium",
	"direktris",
	"direktur",
	"dirgahayu",
	"dirgantara",
	"dirham",
	"diri",
	"dirigen",
	"diris",
	"dirus",
	"disagio",
	"disain",
	"disainer",
	"disakarida",
	"disastria",
	"disbursemen",
	"disdrometer",
	"disekuilibrium",
	"disel",
	"disensus",
	"disentri",
	"disertasi",
	"disfonia",
	"disfungsi",
	"disharmoni",
	"disiden",
	"disilabik",
	"disimilasi",
	"disinfektan",
	"disinformasi",
	"disinsentif",
	"disintegrasi",
	"disiplin",
	"disjoki",
	"disjungsi",
	"disjungtif",
	"diska",
	"disket",
	"diskiasis",
	"disklimaks",
	"disko",
	"diskoid",
	"diskon",
	"diskontinu",
	"diskontinuitas",
	"diskonto",
	"diskordans",
	"diskorobik",
	"diskotek",
	"diskredit",
	"diskrepansi",
	"diskresi",
	"diskriminasi",
	"diskriminatif",
	"diskriminator",
	"diskualifikasi",
	"diskulpasi",
	"diskursif",
	"diskus",
	"diskusi",
	"dislalia",
	"disleksia",
	"dislokasi",
	"dismembrasio",
	"dismenorea",
	"dismutasi",
	"disolventia",
	"disonansi",
	"disoperasi",
	"disorder",
	"disorganisasi",
	"disorientasi",
	"disosiasi",
	"dispareunia",
	"disparitas",
	"dispensasi",
	"dispenser",
	"dispepsia",
	"dispersal",
	"dispersi",
	"disposisi",
	"disposotio",
	"disprosium",
	"disrupsi",
	"distabilitas",
	"distal",
	"distansi",
	"distikiasis",
	"distikon",
	"distilasi",
	"distilator",
	"distingsi",
	"distingtif",
	"distoma",
	"distorsi",
	"distosia",
	"distribusi",
	"distributor",
	"distrik",
	"disuasi",
	"disuria",
	"dito",
	"ditransitif",
	"diuresis",
	"diuretik",
	"diurnal",
	"divergen",
	"divergensi",
	"diversifikasi",
	"diversitas",
	"divestasi",
	"dividen",
	"divisi",
	"diwala",
	"doa",
	"doang",
	"dobel",
	"dobi",
	"doblangan",
	"doble",
	"dobol",
	"dobolo",
	"dobrak",
	"dodekagon",
	"dodekahedron",
	"dodet",
	"dodok",
	"dodol",
	"dodong",
	"dodor",
	"dodos",
	"dodot",
	"doeloe",
	"dog",
	"dogel",
	"dogeng",
	"doger",
	"dogma",
	"dogmatik",
	"dogmatis",
	"dogmatisme",
	"dogol",
	"dohok",
	"dohyo",
	"doi",
	"dok",
	"dokar",
	"doko",
	"dokoh",
	"dokok-dokok",
	"doksologi",
	"dokter",
	"doktor",
	"doktoranda",
	"doktorandus",
	"doktrin",
	"doku",
	"dokumen",
	"dokumentasi",
	"dokumenter",
	"dol",
	"dolak-dalik",
	"dolan",
	"dolar",
	"doldrum",
	"dolfin",
	"dolikosepalik",
	"dolmen",
	"dolok",
	"dolomit",
	"dom",
	"domain",
	"domba",
	"domblong",
	"domein",
	"domestik",
	"domestikasi",
	"dominan",
	"dominansi",
	"dominasi",
	"domine",
	"dominggo",
	"dominion",
	"domino",
	"domisili",
	"domot",
	"dompak",
	"dompet",
	"domplang",
	"dompleng",
	"dompol",
	"don",
	"donasi",
	"donat",
	"donatur",
	"doncang",
	"dondang",
	"donder",
	"dondon",
	"dong",
	"dongak",
	"dongan",
	"dongbret",
	"dongeng",
	"dongkak",
	"dongkel",
	"dongkok",
	"dongkol",
	"dongkrak",
	"dongkrok",
	"dongok",
	"dongpan",
	"dongsok",
	"doni",
	"donor",
	"donto",
	"dop",
	"doping",
	"dopis",
	"dor",
	"dorang",
	"dorbi",
	"dorbia",
	"dorman",
	"dormansi",
	"dorna",
	"dorong",
	"dorsal",
	"dorslah",
	"dorsopalatal",
	"dorsovelar",
	"dorsum",
	"dortrap",
	"dos",
	"dosa",
	"dosen",
	"dosin",
	"dosir",
	"dosis",
	"dot",
	"dowel",
	"dower",
	"doyak",
	"doyan",
	"doyang",
	"doyo",
	"doyong",
	"draf",
	"dragon",
	"drai",
	"drainase",
	"drakula",
	"dram",
	"drama",
	"dramatik",
	"dramatikus",
	"dramatis",
	"dramatisasi",
	"dramaturg",
	"dramaturgi",
	"draperi",
	"drastis",
	"drat",
	"drel",
	"dresoar",
	"dresur",
	"dribel",
	"drif",
	"dril",
	"drip",
	"drop",
	"droping",
	"dropsi",
	"drum",
	"drumben",
	"drumer",
	"druwe",
	"dua",
	"duafa",
	"duai",
	"duaja",
	"dualis",
	"dualisme",
	"dualistis",
	"duane",
	"duang",
	"duangsom",
	"dub",
	"dubalang",
	"dubelir",
	"dubes",
	"dubila",
	"dubing",
	"dubius",
	"duble",
	"dublir",
	"dubuk",
	"dubur",
	"duda",
	"duduk",
	"dudur",
	"dudus",
	"duel",
	"duet",
	"duga",
	"dugal",
	"dugang",
	"dugas",
	"dugdeng",
	"dugder",
	"duh",
	"duha",
	"duhai",
	"duhe",
	"duhu",
	"duilah",
	"duit",
	"duk",
	"duka",
	"dukacarita",
	"dukacita",
	"dukan",
	"dukana",
	"dukat",
	"dukaten",
	"duktulus",
	"duktus",
	"duku",
	"dukuh",
	"dukun",
	"dukung",
	"dula",
	"dulag",
	"dulang",
	"dulang-dulang",
	"duli",
	"dulur",
	"dum",
	"dumdum",
	"dumi",
	"dumping",
	"dumung",
	"dunah",
	"dunak",
	"dung",
	"dungas",
	"dungkelan",
	"dungkul",
	"dungu",
	"dungun",
	"dunia",
	"duniawi",
	"duodenum",
	"duodesimal",
	"duodrama",
	"duopoli",
	"dup",
	"dupa",
	"dupak",
	"dupleks",
	"duplik",
	"duplikasi",
	"duplikat",
	"duplikator",
	"duplisitas",
	"duplo",
	"dur",
	"dura",
	"duralumin",
	"duramater",
	"durasi",
	"durat",
	"duratif",
	"duren",
	"dureng",
	"durhaka",
	"duri",
	"durian",
	"durias",
	"duriat",
	"durja",
	"durjana",
	"durjasa",
	"durkarsa",
	"durma",
	"durna",
	"durno",
	"durnois",
	"durnoisme",
	"durometer",
	"dursila",
	"duru",
	"duruwiksa",
	"dus",
	"dusin",
	"dusta",
	"dustur",
	"dusun",
	"duta",
	"duwegan",
	"duwet",
	"duyun",
	"duyung",
	"dwiarti",
	"dwibahasa",
	"dwidarma",
	"dwidasawarsa",
	"dwifungsi",
	"dwiganda",
	"dwiguna",
	"dwilingga",
	"dwimatra",
	"dwiminggu",
	"dwimuka",
	"dwiperan",
	"dwipurwa",
	"dwisegi",
	"dwitarung",
	"dwitunggal",
	"dwiwarna",
	"dzal",
	"ebam",
	"eban",
	"ebek",
	"ebi",
	"eboni",
	"ebonit",
	"ebro",
	"eburina",
	"ecek",
	"eceng",
	"ecer",
	"eco",
	"edafik",
	"edafit",
	"edafologi",
	"edafon",
	"edan",
	"edar",
	"edema",
	"edentat",
	"edisi",
	"edit",
	"editor",
	"editorial",
	"edukasi",
	"edukatif",
	"efedrina",
	"efek",
	"efektif",
	"efektivitas",
	"efektor",
	"efelis",
	"efendi",
	"efisien",
	"efisiensi",
	"efloresensi",
	"eforus",
	"efusi",
	"egah",
	"egalisasi",
	"egalitarian",
	"egalitarianisme",
	"egalitarisme",
	"egaliter",
	"egat",
	"ego",
	"egois",
	"egoisme",
	"egoistis",
	"egol",
	"egomania",
	"egos",
	"egosentris",
	"egosentrisitas",
	"egosentrisme",
	"egrang",
	"egresif",
	"ehe",
	"eidetik",
	"eigendom",
	"eikosan",
	"einsteinium",
	"eja",
	"ejakulasi",
	"ejan",
	"ejawantah",
	"ejek",
	"ejektif",
	"ejektor",
	"ekabahasa",
	"ekad",
	"ekajati",
	"ekakarsa",
	"ekamatra",
	"ekang",
	"ekaristi",
	"ekatantri",
	"ekbalium",
	"ekdemik",
	"ekderon",
	"ekdisis",
	"ekeh",
	"ekimosis",
	"ekiofit",
	"eklektik",
	"eklektikus",
	"eklektis",
	"eklektisisme",
	"eklektisme",
	"eklips",
	"ekliptika",
	"ekliptis",
	"eklosi",
	"ekofisiologi",
	"ekofraksia",
	"ekofrasia",
	"ekografi",
	"ekogrup",
	"ekoklimat",
	"ekoklimatologi",
	"ekokronologi",
	"ekolabel",
	"ekolalia",
	"ekologi",
	"ekologis",
	"ekon",
	"ekonom",
	"ekonometri",
	"ekonomi",
	"ekonomis",
	"ekopolitik",
	"ekopraksia",
	"ekor",
	"ekornia",
	"ekosfer",
	"ekosistem",
	"ekosistematika",
	"ekospesies",
	"ekostratigrafi",
	"ekotipe",
	"ekotipifikasi",
	"ekoturisme",
	"ekozona",
	"ekrin",
	"ekrinologi",
	"eks",
	"eksak",
	"eksakta",
	"eksaltasi",
	"eksamen",
	"eksaminasi",
	"eksaminator",
	"eksantem",
	"eksantropus",
	"eksarasi",
	"eksegesis",
	"ekseget",
	"eksekusi",
	"eksekutif",
	"eksekutor",
	"eksem",
	"eksemplar",
	"eksenterasi",
	"eksentrik",
	"eksepsi",
	"ekseptor",
	"ekses",
	"eksesif",
	"eksfoliasi",
	"ekshalasi",
	"ekshibisi",
	"ekshibisionis",
	"ekshibisionisme",
	"ekshibitum",
	"eksikator",
	"eksin",
	"eksipien",
	"eksisi",
	"eksistensi",
	"eksistensialis",
	"eksistensialisme",
	"eksit",
	"eksitasi",
	"eksitus",
	"ekskavasi",
	"ekskavator",
	"eksklave",
	"eksklusif",
	"eksklusivisme",
	"ekskomunikasi",
	"ekskresi",
	"ekskreta",
	"ekskursi",
	"ekskursif",
	"eksobiologi",
	"eksobiotik",
	"eksodermis",
	"eksodos",
	"eksodus",
	"eksoenzim",
	"eksoergik",
	"eksofasia",
	"eksofora",
	"eksoftalmia",
	"eksoftalmos",
	"eksoftalmus",
	"eksogam",
	"eksogami",
	"eksogen",
	"eksogin",
	"eksoisogami",
	"eksordium",
	"eksorsis",
	"eksosfer",
	"eksospora",
	"eksostosis",
	"eksoterik",
	"eksotermik",
	"eksotik",
	"eksotis",
	"eksotisme",
	"ekspansi",
	"ekspansif",
	"ekspansionis",
	"ekspansionisme",
	"ekspansionistis",
	"ekspatriasi",
	"ekspatriat",
	"ekspedisi",
	"ekspeditor",
	"ekspektoran",
	"eksper",
	"eksperimen",
	"eksperimental",
	"ekspirasi",
	"eksplan",
	"eksplikasi",
	"eksplisit",
	"eksploit",
	"eksploitasi",
	"eksploitir",
	"eksplorasi",
	"eksploratif",
	"eksplorator",
	"eksplosi",
	"eksplosif",
	"ekspo",
	"eksponen",
	"eksponensial",
	"ekspor",
	"eksportir",
	"ekspos",
	"ekspose",
	"eksposisi",
	"ekspres",
	"ekspresi",
	"ekspresif",
	"ekspresionisme",
	"ekspresionistik",
	"ekspresivitas",
	"ekstase",
	"ekstasi",
	"ekstensi",
	"ekstensif",
	"ekstensifikasi",
	"ekstensor",
	"eksterior",
	"eksteriorisasi",
	"eksteritorialitas",
	"ekstern",
	"eksternal",
	"ekstin",
	"ekstra",
	"ekstradisi",
	"ekstrak",
	"ekstrakardial",
	"ekstraksi",
	"ekstraktif",
	"ekstrakurikuler",
	"ekstralinguistis",
	"ekstramarital",
	"ekstranei",
	"ekstraparlementer",
	"ekstrapolasi",
	"ekstraseluler",
	"ekstraterestrial",
	"ekstrateritorialitas",
	"ekstrauterin",
	"ekstraversi",
	"ekstrem",
	"ekstremis",
	"ekstremitas",
	"ekstrinsik",
	"ekstrospeksi",
	"ekstrover",
	"ekstrusi",
	"eksudasi",
	"eksudat",
	"ektoblas",
	"ektoderm",
	"ektohormon",
	"ektoparasit",
	"ektoplasma",
	"ektoterm",
	"ektotermik",
	"ekualitas",
	"ekuatif",
	"ekuator",
	"ekuilibrium",
	"ekuinoks",
	"ekuitas",
	"ekuiti",
	"ekuivalen",
	"ekuivalensi",
	"ekuivokasi",
	"ekumene",
	"ekumenis",
	"ekumenisme",
	"ela",
	"elaborasi",
	"elak",
	"elan",
	"elang",
	"elastik",
	"elastin",
	"elastis",
	"elastisitas",
	"elastomer",
	"elatif",
	"elefantiasis",
	"elegan",
	"elegansi",
	"elegi",
	"elektif",
	"elektorat",
	"elektret",
	"elektrifikasi",
	"elektrik",
	"elektris",
	"elektro",
	"elektrode",
	"elektrodinamika",
	"elektroensefalogram",
	"elektroforesis",
	"elektrokardiogram",
	"elektrokimia",
	"elektrokoagulasi",
	"elektrokusi",
	"elektrolisi",
	"elektrolisis",
	"elektrolit",
	"elektromagnet",
	"elektromagnetik",
	"elektromagnetisme",
	"elektrometalurgi",
	"elektromiografi",
	"elektromotif",
	"elektron",
	"elektronegatif",
	"elektronik",
	"elektronika",
	"elektronis",
	"elektropatologi",
	"elektropositif",
	"elektroskop",
	"elektrostatika",
	"elektroteknik",
	"elektroterapeutika",
	"elektroterapi",
	"elektrotipe",
	"elektrum",
	"elemen",
	"elementer",
	"elemi",
	"eleng",
	"elevasi",
	"elevator",
	"eliksir",
	"eliminasi",
	"eliminir",
	"eling",
	"elips",
	"elipsis",
	"elipsoid",
	"elipsometer",
	"elipsometri",
	"eliptis",
	"elite",
	"elitis",
	"elitron",
	"elo",
	"elok",
	"elokuensi",
	"elon",
	"elongasi",
	"elpiji",
	"eltor",
	"elu",
	"eluat",
	"eluen",
	"elung",
	"elus",
	"elusi",
	"elusian",
	"elusif",
	"elutriasi",
	"eluvial",
	"eluviasi",
	"eluvium",
	"email",
	"emanasi",
	"emang",
	"emansipasi",
	"emas",
	"emaskulasi",
	"emat",
	"embacang",
	"embah",
	"embak",
	"embal",
	"embalase",
	"embalau",
	"emban",
	"embar",
	"embara",
	"embarau",
	"embargo",
	"embarkasi",
	"embaru",
	"embat",
	"embek",
	"embel",
	"ember",
	"embih",
	"embik",
	"emblem",
	"embok",
	"embol",
	"emboli",
	"embolisme",
	"embolus",
	"embosur",
	"embrat",
	"embrio",
	"embriogenesis",
	"embriologi",
	"embrionik",
	"embuai",
	"embuh",
	"embun",
	"embung",
	"embus",
	"embut",
	"emendasi",
	"emeraldin",
	"emeritus",
	"emetik",
	"emetina",
	"emfisema",
	"emigran",
	"emigrasi",
	"eminen",
	"eminensi",
	"emir",
	"emirat",
	"emis",
	"emisi",
	"emisivitas",
	"emitans",
	"emiten",
	"emoh",
	"emol",
	"emolumen",
	"emong",
	"emosi",
	"emosional",
	"emosionalisme",
	"emotif",
	"empal",
	"empang",
	"empap",
	"empar",
	"empas",
	"empat",
	"empati",
	"empedal",
	"empedu",
	"empek",
	"empela",
	"empelas",
	"empenak",
	"empeng",
	"emper",
	"empet",
	"empiema",
	"empik",
	"emping",
	"empiri",
	"empiris",
	"empirisme",
	"emplasemen",
	"emplek",
	"employe",
	"empo",
	"empoh",
	"empok",
	"emporium",
	"empos",
	"empot",
	"emprak",
	"empu",
	"empuan",
	"empuk",
	"empul",
	"empulur",
	"empunya",
	"emrat",
	"emulasi",
	"emulator",
	"emulsi",
	"emulsifikasi",
	"emut",
	"enak",
	"enam",
	"enamel",
	"enap",
	"enartrosis",
	"enas",
	"enau",
	"encal",
	"encang",
	"enceh",
	"encek",
	"encel",
	"encer",
	"encik",
	"encim",
	"encit",
	"encok",
	"encot",
	"endak",
	"endal",
	"endang",
	"endap",
	"endas",
	"endasan",
	"endemi",
	"endemis",
	"endilau",
	"endoderm",
	"endoderma",
	"endodermis",
	"endofit",
	"endogami",
	"endogen",
	"endokardia",
	"endokrin",
	"endokrinologi",
	"endolimfa",
	"endometriosis",
	"endometrium",
	"endomiksis",
	"endomiokarditis",
	"endomisium",
	"endon",
	"endong",
	"endoparasit",
	"endoplasma",
	"endorfin",
	"endosemen",
	"endosentris",
	"endoskeleton",
	"endoskop",
	"endoskopi",
	"endosmosis",
	"endosperma",
	"endotel",
	"endoterm",
	"endotermal",
	"endotermis",
	"endotoksin",
	"endrin",
	"enduk",
	"endul",
	"enduro",
	"endus",
	"endut",
	"enek",
	"eneng",
	"energetik",
	"energi",
	"energik",
	"enes",
	"enfitotik",
	"engah",
	"engap-engap",
	"engas",
	"enggak",
	"enggan",
	"enggang",
	"engget",
	"enggil",
	"enggok",
	"engkah",
	"engkak",
	"engkang",
	"engkau",
	"engket-engket",
	"engkoh",
	"engkol",
	"engkong",
	"engku",
	"engkuk",
	"engsel",
	"enigma",
	"enjak",
	"enjal",
	"enjambemen",
	"enjelai",
	"enjin",
	"enjut",
	"enkapsulasi",
	"enklave",
	"enklitik",
	"enkode",
	"enkripsi",
	"enkulturasi",
	"enologi",
	"enom",
	"ensambel",
	"ensefalitis",
	"ensefalitogen",
	"ensefalograf",
	"ensefalografi",
	"ensefalogram",
	"ensefalomielitis",
	"ensefalon",
	"ensiform",
	"ensiklik",
	"ensiklopedia",
	"ensiklopedis",
	"ensopor",
	"entah",
	"entak",
	"entalpi",
	"entar",
	"entas",
	"ente",
	"enten",
	"enteng",
	"entente",
	"enteritis",
	"enterograf",
	"enterologi",
	"enteron",
	"enteropati",
	"enterosel",
	"enterostomi",
	"enterotoksin",
	"enterovirus",
	"entit",
	"entitas",
	"entoderm",
	"entogenus",
	"entok",
	"entomofili",
	"entomolog",
	"entomologi",
	"entong",
	"entot",
	"entozoa",
	"entozoik",
	"entre",
	"entrepot",
	"entri",
	"entropi",
	"enukleasi",
	"enumerasi",
	"enuresis",
	"envoi",
	"enyah",
	"enyak",
	"enzim",
	"enzimolisis",
	"enzimologi",
	"enzootik",
	"eolit",
	"eon",
	"eosen",
	"eosin",
	"eozoikum",
	"epak",
	"epek",
	"epentesis",
	"epibentos",
	"epidemi",
	"epidemiologi",
	"epidermis",
	"epidiaskop",
	"epifaring",
	"epifil",
	"epifiotik",
	"epifisis",
	"epifit",
	"epifiton",
	"epifora",
	"epigastrium",
	"epigenesis",
	"epiglotis",
	"epigon",
	"epigraf",
	"epigrafi",
	"epigram",
	"epik",
	"epikotil",
	"epikuris",
	"epilepsi",
	"epileptik",
	"epilog",
	"epimisium",
	"epinasti",
	"epinefrina",
	"epinurim",
	"episentrum",
	"episiklik",
	"episiotomi",
	"episkopal",
	"episkopat",
	"episode",
	"episodik",
	"epispora",
	"epistaksis",
	"epistel",
	"epistemologi",
	"epistola",
	"epitaf",
	"epitaksi",
	"epitel",
	"epitelioma",
	"epitermal",
	"epitet",
	"epizoik",
	"epizootik",
	"epok",
	"epoksi",
	"epolet",
	"eponim",
	"epos",
	"epsilon",
	"era",
	"eradikasi",
	"eradiksi",
	"erak",
	"eram",
	"erang",
	"erat",
	"erata",
	"erbis",
	"erbium",
	"ercis",
	"ereh",
	"erek-erek",
	"ereksi",
	"erektor",
	"ereng",
	"erepsin",
	"eret",
	"erg",
	"ergasiofit",
	"ergonomi",
	"ergonomika",
	"ergonomis",
	"ergosterol",
	"ergot",
	"ergoterapi",
	"erik",
	"ering",
	"erisipelas",
	"eritema",
	"eritroblas",
	"eritrosit",
	"erong",
	"eror",
	"erosentrisme",
	"erosi",
	"erot",
	"erotik",
	"erotika",
	"erotis",
	"erotisisme",
	"erotisme",
	"erpah",
	"erpak",
	"erti",
	"eru",
	"erupsi",
	"es",
	"esa",
	"esai",
	"esais",
	"esak",
	"esek",
	"eselon",
	"esembling",
	"esens",
	"esensi",
	"esensial",
	"esensialitas",
	"eskader",
	"eskadron",
	"eskalasi",
	"eskalator",
	"eskapisme",
	"eskas",
	"eskatologi",
	"eskatologis",
	"esofagus",
	"esok",
	"esot",
	"esoteris",
	"estafet",
	"ester",
	"estesia",
	"estetik",
	"estetika",
	"estetikus",
	"estetis",
	"estimasi",
	"estriol",
	"estrogen",
	"estron",
	"estrus",
	"estuari",
	"estuarin",
	"eta",
	"etalase",
	"etana",
	"etanol",
	"etape",
	"etatisme",
	"etek",
	"eter",
	"eteris",
	"eternit",
	"etik",
	"etika",
	"etiket",
	"etil",
	"etilena",
	"etimologi",
	"etimologis",
	"etimon",
	"etiolin",
	"etiologi",
	"etis",
	"etmoid",
	"etnik",
	"etnis",
	"etnobotani",
	"etnograf",
	"etnografi",
	"etnografis",
	"etnolinguistik",
	"etnolog",
	"etnologi",
	"etnologis",
	"etnomusikolog",
	"etnomusikologi",
	"etnopolitik",
	"etnosentrisme",
	"etologi",
	"etos",
	"etsa",
	"eudaemonisme",
	"eufemisme",
	"eufemistis",
	"eufoni",
	"eufonium",
	"euforia",
	"euforian",
	"eugenetika",
	"eugenika",
	"eugenol",
	"eukaliptol",
	"eukaliptus",
	"eukarion",
	"eukariota",
	"eulogi",
	"euploid",
	"eurasia",
	"eurihalin",
	"europium",
	"eurosentris",
	"euseksual",
	"eusinantropus",
	"eutanasia",
	"eutektik",
	"eutenika",
	"eutrofikasi",
	"evakuasi",
	"evaluasi",
	"evaluatif",
	"evangeli",
	"evangelis",
	"evaporasi",
	"evaporator",
	"evaporimeter",
	"evapotranspirasi",
	"eversi",
	"eviden",
	"eviserasi",
	"evokasi",
	"evokatif",
	"evolusi",
	"evolusioner",
	"evolusionisme",
	"ewa",
	"eyang",
	"eyel",
	"faal",
	"faali",
	"fabel",
	"fabula",
	"faden",
	"fadihat",
	"fadil",
	"fadilat",
	"faedah",
	"fafa",
	"fagosit",
	"fagositosis",
	"fagot",
	"fahombe",
	"fahrenheit",
	"fahsya",
	"fail",
	"fajar",
	"fakih",
	"fakir",
	"faks",
	"faksi",
	"faksimile",
	"fakta",
	"faktif",
	"faktitius",
	"faktor",
	"faktual",
	"faktur",
	"fakultas",
	"fakultatif",
	"falah",
	"falaj",
	"falak",
	"falakiah",
	"falsafah",
	"falsafi",
	"fam",
	"famili",
	"familia",
	"familier",
	"familiisme",
	"familisme",
	"fana",
	"fanatik",
	"fanatisme",
	"fanfare",
	"fani",
	"fantasi",
	"fantastis",
	"fantom",
	"farad",
	"faraid",
	"faraj",
	"farak",
	"fardu",
	"farik",
	"faring",
	"faringal",
	"faringalisasi",
	"faringitis",
	"farisi",
	"farji",
	"farmakodinamika",
	"farmakokinetika",
	"farmakolog",
	"farmakologi",
	"farmakologis",
	"farmakope",
	"farmakoseutika",
	"farmasi",
	"farsakh",
	"fasad",
	"fasakh",
	"fase",
	"faset",
	"fasia",
	"fasid",
	"fasih",
	"fasihat",
	"fasik",
	"fasilitas",
	"fasilitator",
	"fasis",
	"fasisme",
	"fastabikhulkhairat",
	"fatah",
	"fatal",
	"fatala",
	"fatalis",
	"fatalisme",
	"fatalitas",
	"fatamorgana",
	"fatanah",
	"fatihah",
	"fatimah",
	"fatir",
	"fatom",
	"fatometer",
	"fatri",
	"fatsun",
	"fatur",
	"fatwa",
	"fauna",
	"faunistik",
	"favorit",
	"favoritisme",
	"febrin",
	"februari",
	"federal",
	"federalis",
	"federalisme",
	"federalistis",
	"federasi",
	"feko",
	"fekundasi",
	"fekunditas",
	"felon",
	"felspar",
	"feminin",
	"feminisme",
	"fenakit",
	"fengsui",
	"fenit",
	"fenol",
	"fenologi",
	"fenomena",
	"fenomenal",
	"fenomenalisme",
	"fenomenologi",
	"fenosis",
	"fenotipe",
	"feodal",
	"feodalisme",
	"feodalistis",
	"feral",
	"feri",
	"feritin",
	"fermen",
	"fermentasi",
	"fermion",
	"fermium",
	"feromagnetik",
	"feromagnetisme",
	"feromon",
	"feronikel",
	"fertil",
	"fertilasi",
	"fertilisasi",
	"fertilitas",
	"fertilizin",
	"ferum",
	"feses",
	"festival",
	"fetis",
	"fetor",
	"fetus",
	"fiasko",
	"fiat",
	"fiber",
	"fibrasi",
	"fibriblas",
	"fibril",
	"fibrilasi",
	"fibrin",
	"fibrinogen",
	"fibrokistik",
	"fidah",
	"fider",
	"fidiah",
	"fidusia",
	"fidyah",
	"figur",
	"figuran",
	"figuratif",
	"fiil",
	"fikih",
	"fikli",
	"fikologi",
	"fikrah",
	"fiksasi",
	"fiksi",
	"fiktif",
	"fikus",
	"filamen",
	"filantrop",
	"filantropi",
	"filantropis",
	"filaria",
	"filariasis",
	"filateli",
	"filatelik",
	"filatelis",
	"filharmoni",
	"filial",
	"filibuster",
	"film",
	"filmis",
	"filo",
	"filodendron",
	"filogenesis",
	"filogeni",
	"filolog",
	"filologi",
	"filologis",
	"filopur",
	"filosof",
	"filosofi",
	"filosofis",
	"filsafat",
	"filsuf",
	"filter",
	"filtrasi",
	"filtrat",
	"filum",
	"fimbria",
	"final",
	"finansial",
	"finir",
	"finis",
	"fiolaks",
	"firajullah",
	"firasat",
	"firauniah",
	"firdaus",
	"firdausi",
	"firjatullah",
	"firkah",
	"firma",
	"firman",
	"firn",
	"fisi",
	"fisibel",
	"fisibilitas",
	"fisik",
	"fisika",
	"fisiognomi",
	"fisiognomis",
	"fisiologi",
	"fisiologis",
	"fisioterapi",
	"fisis",
	"fiskal",
	"fit",
	"fiting",
	"fitnah",
	"fitofag",
	"fitofogus",
	"fitogeni",
	"fitogeografi",
	"fitokimia",
	"fitologi",
	"fitometer",
	"fiton",
	"fitopatologi",
	"fitosanitasi",
	"fitososiologi",
	"fitosterol",
	"fitostrot",
	"fitotoksin",
	"fitotoksoid",
	"fitotopografi",
	"fitotron",
	"fitrah",
	"fitri",
	"flakon",
	"flamboyan",
	"flamingo",
	"flanel",
	"flat",
	"flegma",
	"flegmatis",
	"fleksi",
	"fleksibel",
	"fleksibilitas",
	"fleksor",
	"flensa",
	"flip-plop",
	"flis",
	"floem",
	"flop",
	"flora",
	"floret",
	"flotasi",
	"flotet",
	"flu",
	"fluensi",
	"fluida",
	"fluks",
	"fluktuasi",
	"fluktuatif",
	"fluor",
	"fluoresen",
	"fluoresens",
	"fluorin",
	"fluorit",
	"fobia",
	"fokimeter",
	"fokstrot",
	"fokus",
	"folder",
	"foli",
	"folikel",
	"folio",
	"folklor",
	"folksong",
	"fon",
	"fonasi",
	"fondamen",
	"fondasi",
	"fonds",
	"fonem",
	"fonemik",
	"fonemis",
	"fonetik",
	"fonetis",
	"fonik",
	"fonis",
	"fonograf",
	"fonografi",
	"fonologi",
	"fonologis",
	"fonon",
	"fonotaktik",
	"fonotipi",
	"foramen",
	"foraminifera",
	"forensik",
	"forklif",
	"forma",
	"formal",
	"formalin",
	"formalistis",
	"formalitas",
	"forman",
	"formasi",
	"format",
	"formatif",
	"formatir",
	"formatur",
	"formika",
	"formula",
	"formulasi",
	"formulator",
	"formulir",
	"fornifikasi",
	"fornikasi",
	"forsep",
	"forsir",
	"forsit",
	"forte",
	"fortifikasi",
	"fortin",
	"forum",
	"fosfat",
	"fosfina",
	"fosfit",
	"fosfor",
	"fosforesens",
	"fosforilase",
	"fosforus",
	"fosgen",
	"fosil",
	"foto",
	"fotodiode",
	"fotoelektron",
	"fotoemisi",
	"fotogenik",
	"fotograf",
	"fotografer",
	"fotografi",
	"fotografis",
	"fotograver",
	"fotogravur",
	"fotokimia",
	"fotokonduksi",
	"fotokonduktivitas",
	"fotokonduktor",
	"fotokopi",
	"fotokromi",
	"fotokromik",
	"fotolisis",
	"fotolitografi",
	"fotometer",
	"fotometri",
	"fotomikrografi",
	"fotomodel",
	"foton",
	"fotoperiodisme",
	"fotosel",
	"fotosfer",
	"fotosintesis",
	"fotostat",
	"fototaksis",
	"fototropis",
	"fototustel",
	"fovea",
	"foya",
	"fragmen",
	"fragmentaris",
	"fragmentasi",
	"fraksi",
	"fraksinasi",
	"fraktur",
	"fraktus",
	"frambusia",
	"fransium",
	"frasa",
	"frase",
	"fraseologi",
	"frater",
	"fraternitas",
	"freatofit",
	"fregat",
	"frekuen",
	"frekuensi",
	"frekuentatif",
	"frenologi",
	"freon",
	"frib",
	"frigid",
	"frigorigraf",
	"frigorimeter",
	"frikatif",
	"friksi",
	"fron",
	"front",
	"frontal",
	"fruktosa",
	"frustrasi",
	"fuad",
	"fugasitas",
	"fujur",
	"fukaha",
	"fukara",
	"fuksina",
	"fulgurit",
	"fuli",
	"fulminat",
	"fulus",
	"fumarol",
	"fumigan",
	"fumigasi",
	"fumigator",
	"fundamen",
	"fundamental",
	"fundamentalis",
	"fundamentalisme",
	"fundamentalistis",
	"fungi",
	"fungibel",
	"fungisida",
	"fungistatik",
	"fungoid",
	"fungsi",
	"fungsional",
	"fungsionalisasi",
	"fungsionalisme",
	"fungsionalitas",
	"fungsionaris",
	"fungus",
	"furfural",
	"furkan",
	"furnitur",
	"furqan",
	"furuk",
	"fusi",
	"fusta",
	"fusuk",
	"futual",
	"futur",
	"futurisme",
	"futuristik",
	"futuristis",
	"futurolog",
	"futurologi",
	"futurologis",
	"fyord",
	"gaba-gaba",
	"gabah",
	"gabai",
	"gabak",
	"gabardin",
	"gabas",
	"gabir",
	"gableg",
	"gablek",
	"gabor",
	"gabro",
	"gabruk",
	"gabuk",
	"gabung",
	"gabus",
	"gaco",
	"gacok",
	"gacong",
	"gada",
	"gadai",
	"gadamala",
	"gadang",
	"gading",
	"gadis",
	"gado",
	"gadolinit",
	"gadolinium",
	"gadon",
	"gaduh",
	"gaduk",
	"gadung",
	"gadungan",
	"gaek",
	"gaet",
	"gafar",
	"gaflah",
	"gaflat",
	"gaftar",
	"gafur",
	"gaga",
	"gagah",
	"gagai",
	"gagak",
	"gagal",
	"gagang",
	"gagap",
	"gagas",
	"gagau",
	"gagu",
	"gaguk",
	"gah",
	"gaham",
	"gahar",
	"gahara",
	"gahari",
	"gaharu",
	"gai",
	"gaib",
	"gail",
	"gain",
	"gaing",
	"gairah",
	"gait",
	"gajah",
	"gajak",
	"gaji",
	"gajih",
	"gajul",
	"gajus",
	"gakang",
	"gakari",
	"gala",
	"galaba",
	"galaganjur",
	"galagasi",
	"galah",
	"galai",
	"galak",
	"galaksi",
	"galaktometer",
	"galaktorea",
	"galaktosa",
	"galaktosemia",
	"galaktosuria",
	"galan",
	"galang",
	"galanggasi",
	"galar",
	"galas",
	"galat",
	"galau",
	"galbani",
	"galeng",
	"galeri",
	"galgal",
	"gali",
	"galias",
	"galib",
	"galibut",
	"galih",
	"galiot",
	"galir",
	"galium",
	"galiung",
	"galon",
	"galu-galu",
	"galuh",
	"galung",
	"galungan",
	"galur",
	"galvanis",
	"galvanisasi",
	"galvanometer",
	"galvanometri",
	"galvanoskop",
	"galyas",
	"gam",
	"gama",
	"gamak",
	"gamal",
	"gamalisasi",
	"gamam",
	"gaman",
	"gamang",
	"gamat",
	"gambang",
	"gambar",
	"gambas",
	"gambir",
	"gamblang",
	"gambling",
	"gambuh",
	"gambus",
	"gambut",
	"gambyong",
	"gamelan",
	"gamet",
	"gametangium",
	"gametofit",
	"gametogenesis",
	"gametosit",
	"gamik",
	"gamis",
	"gamit",
	"gamma",
	"gamopetal",
	"gamosepal",
	"gampang",
	"gampar",
	"gamparan",
	"gamping",
	"gamuh",
	"gana",
	"gana-gini",
	"ganal",
	"ganang",
	"ganar",
	"ganas",
	"gancang",
	"gancar",
	"ganco",
	"gancu",
	"ganda",
	"gandal",
	"gandapura",
	"gandar",
	"gandaria",
	"gandarukem",
	"gandarusa",
	"gandarwa",
	"gandasturi",
	"gandasuli",
	"gandek",
	"gandem",
	"ganden",
	"gandeng",
	"gandes",
	"gandewa",
	"gandi",
	"gandik",
	"gandin",
	"ganding",
	"gandok",
	"gandola",
	"gandos",
	"gandringan",
	"gandrung",
	"gandu",
	"ganduh",
	"gandul",
	"gandum",
	"gandung",
	"gang",
	"ganggam",
	"ganggang",
	"ganggu",
	"ganggut",
	"ganglion",
	"gangsa",
	"gangsal",
	"gangsar",
	"gangsi",
	"gangsir",
	"gangster",
	"gani",
	"ganih",
	"ganimah",
	"ganja",
	"ganjak",
	"ganjal",
	"ganjar",
	"ganjat",
	"ganjen",
	"ganjil",
	"ganjing",
	"ganjling",
	"ganjur",
	"ganoid",
	"gantal",
	"gantang",
	"gantar",
	"gantel",
	"ganteng",
	"ganti",
	"gantih",
	"gantilan",
	"ganting",
	"gantol",
	"gantole",
	"gantung",
	"ganyah",
	"ganyang",
	"ganyar",
	"ganyong",
	"ganyut",
	"gaok",
	"gap",
	"gapah",
	"gapah-gopoh",
	"gapai",
	"gapil",
	"gapit",
	"gaple",
	"gaplek",
	"gaplok",
	"gapuk",
	"gapura",
	"gar",
	"gara-gara",
	"garah",
	"garai",
	"garam",
	"garan",
	"garang",
	"garangan",
	"garansi",
	"garap",
	"garasi",
	"garau",
	"garba",
	"garbarata",
	"garbis",
	"garda",
	"gardan",
	"gardu",
	"garebek",
	"gari",
	"garib",
	"garindin",
	"garing",
	"garis",
	"garit",
	"garizah",
	"garmen",
	"garnet",
	"garnis",
	"garnisun",
	"garong",
	"garpu",
	"garu",
	"garuda",
	"garuk",
	"garung",
	"garut",
	"garwa",
	"gas",
	"gasab",
	"gasak",
	"gasal",
	"gasang",
	"gasatrin",
	"gasifikasi",
	"gasing",
	"gasket",
	"gasolin",
	"gasometer",
	"gaster",
	"gastrektomi",
	"gastrin",
	"gastritis",
	"gastroenteritis",
	"gastroenterolog",
	"gastroenterologi",
	"gastrointestinal",
	"gastronomi",
	"gastrula",
	"gastrulasi",
	"gatal",
	"gatot",
	"gatra",
	"gatrik",
	"gatuk",
	"gauk",
	"gaukang",
	"gaul",
	"gaun",
	"gaung",
	"gaut",
	"gawai",
	"gawal",
	"gawan",
	"gawang",
	"gawar",
	"gawat",
	"gawir",
	"gaya",
	"gayal",
	"gayam",
	"gayang",
	"gayat",
	"gayau",
	"gayem",
	"gayeng",
	"gayuh",
	"gayuk",
	"gayun",
	"gayung",
	"gayut",
	"gaz",
	"gazal",
	"gebah",
	"gebang",
	"gebar",
	"gebeng",
	"geber",
	"geblak",
	"geblek",
	"geblok",
	"gebogan",
	"gebok",
	"gebos",
	"gebot",
	"gebrak",
	"gebu",
	"gebuk",
	"gebung",
	"gebyah-uyah",
	"gebyar",
	"gebyur",
	"gecar",
	"gecek",
	"gecer",
	"gecul",
	"gedabah",
	"gedana-gedini",
	"gedang",
	"gede",
	"gedebak-gedebuk",
	"gedebar-gedebur",
	"gedebeg",
	"gedebok",
	"gedebuk",
	"gedebung",
	"gedek",
	"gedembai",
	"gedembal",
	"gedempol",
	"gedeng",
	"gedi",
	"gedik",
	"gedok",
	"gedombak",
	"gedombrongan",
	"gedong",
	"gedor",
	"gedubang",
	"gedung",
	"geduyut",
	"gegabah",
	"gegadan",
	"gegai",
	"gegak",
	"gegala",
	"gegaman",
	"gegana",
	"gegaokan",
	"gegap",
	"gegar",
	"gegares",
	"gegas",
	"gegat",
	"gegau",
	"gegep",
	"geger",
	"gegetar",
	"gegetun",
	"gegisik",
	"gegua",
	"geiger",
	"geiser",
	"gejah",
	"gejala",
	"gejolak",
	"gejos",
	"gejuju",
	"gel",
	"gela",
	"gelabah",
	"gelabir",
	"gelabur",
	"geladak",
	"geladeri",
	"geladi",
	"geladir",
	"geladrah",
	"gelagah",
	"gelagap",
	"gelagar",
	"gelagat",
	"gelak",
	"gelakak",
	"gelalar",
	"gelam",
	"gelama",
	"gelamai",
	"gelambir",
	"gelandang",
	"gelandot",
	"gelang",
	"gelanggang",
	"gelangsar",
	"gelantang",
	"gelanting",
	"gelantung",
	"gelap",
	"gelapung",
	"gelar",
	"gelas",
	"gelasak",
	"gelasir",
	"gelatak",
	"gelatik",
	"gelatin",
	"gelatuk",
	"gelayangan",
	"gelayar",
	"gelayut",
	"gelebah",
	"gelebap",
	"gelebar",
	"geleber",
	"gelebuk",
	"geleca",
	"gelecik",
	"geledah",
	"geledang",
	"geledek",
	"geleding",
	"geledur",
	"gelegah",
	"gelegak",
	"gelegar",
	"gelegata",
	"gelek",
	"gelekak",
	"gelekek",
	"gelema",
	"gelemat",
	"gelemberan",
	"gelembong",
	"gelembung",
	"gelembur",
	"gelempang",
	"gelemprang",
	"gelenang",
	"gelendo",
	"gelendong",
	"gelendot",
	"geleng",
	"gelenggang",
	"gelentang",
	"gelenting",
	"gelenyar",
	"gelepai",
	"gelepar",
	"gelepek",
	"gelepot",
	"gelepung",
	"gelepur",
	"geler",
	"gelesek",
	"geleser",
	"gelesot",
	"geleta",
	"geletak",
	"geletar",
	"geletek",
	"geletik",
	"geleting",
	"geletis",
	"geletuk",
	"geli",
	"geliang",
	"geliat",
	"gelibir",
	"gelicik",
	"geliga",
	"geligi",
	"geligin",
	"geligis",
	"geligit",
	"gelignit",
	"gelimang",
	"gelimantang",
	"gelimbir",
	"gelimir",
	"gelimpang",
	"gelimun",
	"gelincir",
	"gelincuh",
	"gelinding",
	"gelinggam",
	"gelinggaman",
	"gelinggang",
	"gelingsir",
	"gelinjang",
	"gelintang",
	"gelintar",
	"gelintin",
	"gelinting",
	"gelintir",
	"gelipar",
	"gelisah",
	"gelita",
	"gelitar",
	"gelitik",
	"gelo",
	"gelobak",
	"gelobok",
	"gelocak",
	"gelodar",
	"gelodok",
	"gelogok",
	"gelohok",
	"gelojoh",
	"gelomang",
	"gelombang",
	"gelompar",
	"gelondong",
	"geloneng",
	"gelonggong",
	"gelongsor",
	"gelontor",
	"gelopak",
	"gelora",
	"gelosang",
	"geloso",
	"gelosok",
	"gelotak",
	"geluduk",
	"geluga",
	"gelugu",
	"gelugur",
	"gelugut",
	"geluh",
	"geluk",
	"gelulur",
	"gelumang",
	"gelumat",
	"geluncur",
	"gelundung",
	"gelung",
	"gelup",
	"gelupur",
	"gelut",
	"gema",
	"gemah",
	"gemak",
	"gemal",
	"geman",
	"gemang",
	"gemap",
	"gemar",
	"gemas",
	"gemaung",
	"gemawan",
	"gembak",
	"gembala",
	"gembar-gembor",
	"gembel",
	"gembeng",
	"gembil",
	"gembili",
	"gembira",
	"gemblak",
	"gembleng",
	"gemblong",
	"gemblung",
	"gembok",
	"gembol",
	"gembolo",
	"gembong",
	"gembor",
	"gembos",
	"gembreng",
	"gembrot",
	"gembul",
	"gembung",
	"gembur",
	"gembus",
	"gembut",
	"gemebyar",
	"gemelentam",
	"gemeletak",
	"gemeletap",
	"gemeletek",
	"gemeletuk",
	"gemelugut",
	"gementam",
	"gementar",
	"gemercak",
	"gemercik",
	"gemerencang",
	"gemerencik",
	"gemerencing",
	"gemerencung",
	"gemeresak",
	"gemeresik",
	"gemeretak",
	"gemeretuk",
	"gemeretup",
	"gemerlap",
	"gemertak",
	"gemertuk",
	"gemerusuk",
	"gemetar",
	"gemi",
	"gemik",
	"gemilang",
	"gemilap",
	"geming",
	"gemini",
	"gemintang",
	"geminte",
	"gemirang",
	"gempa",
	"gempal",
	"gempar",
	"gempil",
	"gempita",
	"gempol",
	"gempor",
	"gempul-gempul",
	"gempur",
	"gemrobyos",
	"gemuk",
	"gemul",
	"gemulai",
	"gemulung",
	"gemuntur",
	"gemuruh",
	"gen",
	"gena",
	"genah",
	"genahar",
	"genang",
	"genap",
	"gencar",
	"gencat",
	"gencel",
	"gencer",
	"gencet",
	"gencir",
	"gendak",
	"gendala",
	"gendam",
	"gendang",
	"gendar",
	"gendarmeri",
	"gendeng",
	"gender",
	"genderang",
	"genderuwo",
	"gendewa",
	"gending",
	"gendis",
	"gendon",
	"gendong",
	"genduk",
	"gendut",
	"genealogi",
	"genealogis",
	"genegin",
	"geneng",
	"generalis",
	"generalisasi",
	"generalisimo",
	"generasi",
	"generatif",
	"generator",
	"generik",
	"genesis",
	"genetika",
	"genetis",
	"geng",
	"genggam",
	"genggang",
	"genggong",
	"gengsah",
	"gengsi",
	"gengsot",
	"genial",
	"genialitas",
	"genikulum",
	"genis",
	"genit",
	"genital",
	"genitalia",
	"genitif",
	"genius",
	"genjah",
	"genjang",
	"genjang-genjot",
	"genjer",
	"genjik",
	"genjot",
	"genjrang",
	"genjring",
	"genjur",
	"genom",
	"genosida",
	"genotipe",
	"genre",
	"genta",
	"gentala",
	"gentar",
	"gentas",
	"gentat",
	"gentayang",
	"gentel",
	"genteng",
	"gentian",
	"genting",
	"gentong",
	"gentrifikasi",
	"gentur",
	"gentus",
	"genus",
	"genyot",
	"geobotani",
	"geodesi",
	"geofisika",
	"geofisis",
	"geofon",
	"geognosi",
	"geografi",
	"geografis",
	"geohidrologi",
	"geokimia",
	"geokronologi",
	"geolog",
	"geologi",
	"geologis",
	"geomansi",
	"geometri",
	"geometris",
	"geomorfologi",
	"geonomi",
	"geopolitik",
	"geosentris",
	"geosinkronis",
	"geostasioner",
	"geostatika",
	"geoteknik",
	"geoteknologi",
	"geotermal",
	"geotermi",
	"geotermometer",
	"gepeng",
	"gepit",
	"geplak",
	"gepok",
	"geprak",
	"gepuk",
	"gera",
	"gerabah",
	"gerabak",
	"gerabang",
	"geradi",
	"geragai",
	"geragap",
	"geragas",
	"geragau",
	"geragih",
	"geragot",
	"geraguk",
	"gerah",
	"geraham",
	"gerai",
	"gerak",
	"geram",
	"geraman",
	"geramang",
	"geramsut",
	"geramus",
	"gerang",
	"gerangan",
	"geranggang",
	"geranium",
	"gerantak",
	"gerantang",
	"geranyam",
	"gerapai",
	"gerapu",
	"gerat",
	"geratak",
	"geratih",
	"gerau",
	"gerawan",
	"gerawat",
	"gerayah",
	"gerayang",
	"gerbak",
	"gerbang",
	"gerbas-gerbus",
	"gerbera",
	"gerbong",
	"gerbus",
	"gerda",
	"gerdam",
	"gerdan",
	"gerdum",
	"gerebek",
	"gerecak",
	"gerecok",
	"gereget",
	"gereh",
	"gereja",
	"gerejani",
	"gerejawi",
	"gerek",
	"geremet",
	"gerempang",
	"gerencang",
	"gerendel",
	"gerendeng",
	"gerenek",
	"gereneng",
	"gereng-gereng",
	"gerengseng",
	"gerenik",
	"gerenjeng",
	"gerenjet",
	"gerentang",
	"gerenyau",
	"gerenyeng",
	"gerenyet",
	"gerenying",
	"gerenyit",
	"gerenyot",
	"gerepe",
	"gerepek",
	"gerepes",
	"geresek",
	"geret",
	"geretak",
	"geretang",
	"gergaji",
	"gergajul",
	"gergasi",
	"gergeran",
	"gerha",
	"gerhana",
	"geriak",
	"geriak-geriuk",
	"geriap",
	"geriatrik",
	"geribik",
	"gericau",
	"geridip",
	"geridit",
	"geriditpidit",
	"gerigi",
	"gerigik",
	"gerigis",
	"gerih",
	"gerik",
	"gerilya",
	"gerim",
	"gerimis",
	"gerincing",
	"gerinda",
	"gerindin",
	"gerinding",
	"gering",
	"geringging",
	"geringgingan",
	"geringsing",
	"gerinjal",
	"gerinjam",
	"gerinting",
	"gerinyau",
	"gerip",
	"geripir",
	"geripis",
	"gerisik",
	"gerising",
	"gerit",
	"geriuk",
	"gerlap",
	"gerlip",
	"germang",
	"germanium",
	"germinal",
	"germisida",
	"germo",
	"germut",
	"gero",
	"geroak",
	"gerobak",
	"gerobok",
	"gerobyak",
	"gerocok",
	"gerodak",
	"gerogol",
	"gerogot",
	"gerohok",
	"gerohong",
	"gerojok",
	"gerombol",
	"gerombong",
	"gerompok",
	"gerong",
	"geronggang",
	"geronium",
	"gerontokrasi",
	"gerontol",
	"gerontologi",
	"geronyot",
	"geropes",
	"geropyok",
	"geros",
	"gerosak",
	"gerot-gerot",
	"gerowong",
	"gerowot",
	"gerpol",
	"gersak",
	"gersang",
	"gersik",
	"gertak",
	"gertik",
	"gertuk",
	"geru",
	"gerugut",
	"geruh",
	"geruit",
	"gerumit",
	"gerumpung",
	"gerumuk",
	"gerumut",
	"gerun",
	"gerundang",
	"gerundel",
	"gerung",
	"gerunggung",
	"gerunyam",
	"gerup",
	"gerupis",
	"gerupuk",
	"gerus",
	"gerut",
	"gerutu",
	"gerutup",
	"gerutus",
	"gesa",
	"gesek",
	"gesel",
	"geser",
	"gesit",
	"gesper",
	"gestikulasi",
	"geta",
	"getah",
	"getak-getuk",
	"getang",
	"getap",
	"getar",
	"getas",
	"getek",
	"getem-getem",
	"geti-geti",
	"getik",
	"getil",
	"getir",
	"getis",
	"getok",
	"getol",
	"getu",
	"getuk",
	"getun",
	"geulis",
	"gewang",
	"gial",
	"giam",
	"giat",
	"gibah",
	"gibang",
	"gibas",
	"giblet",
	"gibtah",
	"gidik",
	"gigahertz",
	"gigantisme",
	"gigi",
	"gigih",
	"gigil",
	"gigir",
	"gigis",
	"gigit",
	"gigolo",
	"gila",
	"gilang",
	"gilap",
	"gilas",
	"gilbet",
	"gili",
	"gilik",
	"giling",
	"gilir",
	"gim",
	"gimbal",
	"gimnasium",
	"gimnastik",
	"gimpal",
	"gin",
	"ginang",
	"gincu",
	"ginding",
	"ginekolog",
	"ginekologi",
	"ginekomasti",
	"ginesium",
	"gingivitis",
	"ginglimus",
	"gingsir",
	"gingsul",
	"ginjal",
	"ginjean",
	"ginkang",
	"ginogenesis",
	"ginseng",
	"gips",
	"gipsi",
	"gir",
	"girah",
	"giral",
	"girang",
	"girap-girap",
	"giras",
	"girasol",
	"giri",
	"girik",
	"girikan",
	"giring",
	"giris",
	"giro",
	"giroskop",
	"girostat",
	"girostatika",
	"gisar",
	"gisik",
	"gisil",
	"gita",
	"gitapati",
	"gitar",
	"gitaris",
	"gites",
	"gitik",
	"gitok",
	"giuk",
	"giur",
	"giwang",
	"gizi",
	"glabela",
	"gladiator",
	"gladiol",
	"glamor",
	"glandula",
	"glans",
	"glasial",
	"glasir",
	"glasnos",
	"glaukoma",
	"glegek",
	"glenik",
	"glenoid",
	"gletser",
	"glidik",
	"glikogen",
	"glikogenesis",
	"glikogenolisis",
	"glikol",
	"glikolisis",
	"glikosid",
	"glikosida",
	"glikosidasa",
	"glikosidase",
	"glikosuria",
	"gliserida",
	"gliserol",
	"global",
	"globalisasi",
	"globalisme",
	"globe",
	"globulin",
	"globus",
	"glokidium",
	"glomerulus",
	"glomus",
	"glosarium",
	"glosem",
	"glosematik",
	"glositas",
	"glositis",
	"glotal",
	"glotalisasi",
	"glotis",
	"glukagon",
	"glukosa",
	"glukosan",
	"glukosida",
	"gluten",
	"gnomon",
	"goak",
	"gob",
	"goba",
	"gobak",
	"gobang",
	"gobar",
	"gobek",
	"gobet",
	"goblok",
	"gocap",
	"gocek",
	"gocoh",
	"goda",
	"godak",
	"godam",
	"godek",
	"godok",
	"godong",
	"godot",
	"goel",
	"gogoh",
	"gogok",
	"gogos",
	"gogrok",
	"gohok",
	"gohong",
	"gojek",
	"gojlok",
	"gokar",
	"gol",
	"golak",
	"golak-galik",
	"golbi",
	"golek",
	"goleng",
	"goler",
	"golf",
	"golok",
	"golong",
	"golput",
	"gom",
	"gombak",
	"gombal",
	"gombang",
	"gombeng",
	"gombrang",
	"gombroh",
	"gombyok",
	"gompal",
	"gompiok",
	"gonad",
	"gondang",
	"gondas-gandes",
	"gondok",
	"gondol",
	"gondola",
	"gondong",
	"gondorukem",
	"gondrong",
	"gong",
	"gonggo",
	"gonggok",
	"gonggong",
	"gongli",
	"gongseng",
	"gongyo",
	"goni",
	"gonidium",
	"goniometri",
	"gonjak",
	"gonjang",
	"gonjang-ganjing",
	"gonjing",
	"gonjlang",
	"gonjlang-ganjling",
	"gonjok",
	"gonjong",
	"gonokokus",
	"gonore",
	"gonrang",
	"gontaganti",
	"gontai",
	"gontok",
	"gonyak",
	"gonyeh",
	"gonyel",
	"gonyoh",
	"gopek",
	"gopoh",
	"gorap",
	"gorden",
	"gorek",
	"goreng",
	"gores",
	"gori",
	"gorila",
	"gorilya",
	"goroh",
	"gorok",
	"gorong-gorong",
	"gosan",
	"gosip",
	"gosok",
	"gosong",
	"gospel",
	"got",
	"gotes",
	"gotik",
	"gotong",
	"gotri",
	"gotrok",
	"gotun",
	"gowok",
	"goyah",
	"goyak",
	"goyang",
	"grabadan",
	"grad",
	"gradasi",
	"gradien",
	"gradual",
	"gradualisme",
	"graf",
	"grafem",
	"grafemik",
	"grafemis",
	"grafetik",
	"grafik",
	"grafika",
	"grafis",
	"grafit",
	"grafitasi",
	"grafolog",
	"grafologi",
	"graha",
	"grahita",
	"gram",
	"gramatika",
	"gramatikal",
	"grambyang",
	"gramofon",
	"granat",
	"granit",
	"granolitik",
	"granula",
	"granulasi",
	"granulosit",
	"grapyak",
	"grasi",
	"gratak",
	"gratifikasi",
	"gratis",
	"gravel",
	"graver",
	"gravimeter",
	"gravitas",
	"gravitasi",
	"grecok",
	"gregarius",
	"grehon",
	"grempel",
	"gres",
	"gresek-gresek",
	"gria",
	"grip",
	"griya",
	"grogi",
	"gronjong",
	"gros",
	"grosir",
	"grup",
	"gruwung",
	"gua",
	"gual",
	"guam",
	"guanidina",
	"guanin",
	"guanina",
	"guano",
	"guar",
	"gubah",
	"gubal",
	"gubang",
	"gubel",
	"gubernemen",
	"gubernur",
	"gubit",
	"gubris",
	"gubuk",
	"guci",
	"gudam",
	"gudang",
	"gudangan",
	"gude",
	"gudeg",
	"guderi",
	"gudi",
	"gudik",
	"gudu-gudu",
	"gue",
	"gugah",
	"gugat",
	"gugu",
	"guguh",
	"guguk",
	"gugup",
	"gugur",
	"gugus",
	"guit",
	"gujirak",
	"gujirat",
	"gukakas",
	"gul",
	"gula",
	"gulah",
	"gulai",
	"gulali",
	"gulam",
	"gulambai",
	"gulana",
	"gulang-gulang",
	"gulat",
	"guli",
	"guliga",
	"guling",
	"gulir",
	"gulita",
	"gulma",
	"gulud",
	"gulung",
	"gulut",
	"gum",
	"guma",
	"gumal",
	"gumam",
	"gumba",
	"gumbaan",
	"gumbang",
	"gumbar",
	"gumboro",
	"gumbuk",
	"gumebruk",
	"gumelaran",
	"gumpal",
	"gumpil",
	"gumuk",
	"gumul",
	"gumun",
	"gun",
	"guna",
	"gunawan",
	"guncang",
	"gunci",
	"gundah",
	"gundal",
	"gundala",
	"gundang",
	"gundar",
	"gundi",
	"gundik",
	"gundu",
	"gunduk",
	"gundul",
	"gung",
	"gunggung",
	"gunjai",
	"gunjing",
	"gunolugu",
	"gunrit",
	"gunseikan",
	"guntai",
	"guntak",
	"guntang",
	"guntil",
	"gunting",
	"guntung",
	"guntur",
	"gunung",
	"gunyam",
	"gup",
	"gurab",
	"gurah",
	"guram",
	"gurami",
	"gurat",
	"gurau",
	"gurdan",
	"gurdi",
	"guri",
	"gurih",
	"gurik",
	"gurindam",
	"guring",
	"gurit",
	"gurita",
	"gurnadur",
	"guru",
	"gurub",
	"guruh",
	"guruk",
	"gurun",
	"gurung",
	"gurur",
	"gus",
	"gusah",
	"gusar",
	"gusel",
	"gusi",
	"gusrek",
	"gusti",
	"gusul",
	"gusur",
	"gutasi",
	"gutik",
	"gutuk",
	"guyon",
	"guyub",
	"guyur",
	"habenula",
	"habib",
	"habibi",
	"habibulah",
	"habibullah",
	"habis",
	"habitat",
	"habituasi",
	"habitus",
	"habluk",
	"hablun",
	"hablur",
	"habsyi",
	"habuan",
	"habuk",
	"habung",
	"had",
	"hadanah",
	"hadap",
	"hadas",
	"hadat",
	"hadiah",
	"hadir",
	"hadirat",
	"hadirin",
	"hadis",
	"hadron",
	"hafal",
	"hafiz",
	"hafnium",
	"hagiografi",
	"hahnium",
	"hai",
	"haid",
	"haik",
	"haiking",
	"haiku",
	"hail",
	"hailai",
	"haj",
	"hajah",
	"hajar",
	"hajat",
	"haji",
	"hajib",
	"hajim",
	"hajis",
	"hak",
	"hakaik",
	"hakam",
	"hakikat",
	"hakiki",
	"hakim",
	"hakimah",
	"hakul",
	"hakulah",
	"hakulyakin",
	"hal",
	"hala",
	"halai-balai",
	"halaik",
	"halakah",
	"halal",
	"halalbihalal",
	"halaman",
	"halang",
	"halau",
	"halazon",
	"halba",
	"haleluya",
	"halia",
	"halilintar",
	"halim",
	"halimbubu",
	"halimun",
	"halimunan",
	"halipan",
	"halitosis",
	"halkah",
	"halma",
	"halo",
	"halobion",
	"halofili",
	"halofit",
	"halofita",
	"halofob",
	"halogen",
	"halogenasi",
	"halotan",
	"halsduk",
	"halte",
	"halter",
	"haluan",
	"halus",
	"halusinasi",
	"halusinogen",
	"halwa",
	"ham",
	"hama",
	"hamal",
	"hamatum",
	"hamba",
	"hambali",
	"hambar",
	"hambat",
	"hambur",
	"hamburger",
	"hamdalah",
	"hamdu",
	"hamik",
	"hamil",
	"haminte",
	"hampa",
	"hampang",
	"hampar",
	"hampir",
	"hamud",
	"hamulus",
	"hamun",
	"hamzah",
	"hana",
	"hanacaraka",
	"hanafi",
	"hancing",
	"hancur",
	"handai",
	"handam",
	"handaruan",
	"handasah",
	"handelar",
	"handuk",
	"hang",
	"hangar",
	"hangat",
	"hanger",
	"hanggar",
	"hangit",
	"hangus",
	"hanif",
	"hanjuang",
	"hansop",
	"hantai",
	"hantam",
	"hantap",
	"hantar",
	"hantir",
	"hantu",
	"hanya",
	"hanyut",
	"hap",
	"hapetan",
	"haplografi",
	"haploid",
	"haplologi",
	"hapus",
	"hara",
	"harak",
	"harakah",
	"harakat",
	"harakiri",
	"haram",
	"harap",
	"harawan",
	"harbi",
	"hardik",
	"harem",
	"harendong",
	"harfiah",
	"harga",
	"hari",
	"haribaan",
	"harimau",
	"haring",
	"harini",
	"haris",
	"harisah",
	"harit",
	"harkat",
	"harmoni",
	"harmonik",
	"harmonika",
	"harmonis",
	"harmonisasi",
	"harmonium",
	"harnet",
	"harpa",
	"harpis",
	"harpun",
	"hart",
	"harta",
	"hartal",
	"haru",
	"haruan",
	"harum",
	"harungguan",
	"harus",
	"has",
	"hasab",
	"hasad",
	"hasai",
	"hasan",
	"hasar",
	"hasib",
	"hasid",
	"hasil",
	"hasrat",
	"hasta",
	"hasta-wara",
	"hasud",
	"hasut",
	"hasyiah",
	"hasyis",
	"hati",
	"hatif",
	"hatta",
	"hatur",
	"haud",
	"haudah",
	"haukalah",
	"haul",
	"haur",
	"hauri",
	"haus",
	"haustorium",
	"haver",
	"hawa",
	"hawar",
	"hawari",
	"hawiah",
	"hayat",
	"hayati",
	"hayo",
	"heban",
	"hebat",
	"heboh",
	"hebras",
	"hebring",
	"hedonis",
	"hedonisme",
	"hegelianisme",
	"hegemoni",
	"hegemonik",
	"hegemonisme",
	"hegemonnisme",
	"heiho",
	"heksadesimal",
	"heksagon",
	"heksahedron",
	"heksaklorida",
	"heksameter",
	"heksana",
	"heksapoda",
	"hektar",
	"hektare",
	"hektograf",
	"hektogram",
	"hektoliter",
	"hektometer",
	"hela",
	"helah",
	"helai",
	"helat",
	"helicak",
	"helikopter",
	"heling",
	"heliofit",
	"heliofobi",
	"heliograf",
	"heliogram",
	"heliometer",
	"heliosentrik",
	"helioskop",
	"heliotaksis",
	"helioterapi",
	"heliotrop",
	"heliotropisme",
	"helipad",
	"helium",
	"helm",
	"helmintologi",
	"hem",
	"hemat",
	"hematit",
	"hematite",
	"hematofobia",
	"hematologi",
	"hematom",
	"hematometra",
	"hematuri",
	"hembak",
	"hembalang",
	"hembus",
	"hemeralopi",
	"hemikordat",
	"hemiplegia",
	"hemisfer",
	"hemodialisis",
	"hemofilia",
	"hemoglobin",
	"hemolisis",
	"hemopoiesis",
	"hemopteran",
	"hemoragi",
	"hemoroid",
	"hemosit",
	"hemositometer",
	"hemostasis",
	"hemostatik",
	"hempap",
	"hempas",
	"hendak",
	"hendam",
	"hendel",
	"heng",
	"hengit",
	"hengkang",
	"hening",
	"henoteisme",
	"henry",
	"hentar",
	"henti",
	"henyak",
	"hepar",
	"hepatitis",
	"heptagon",
	"heptahedron",
	"heptameter",
	"heptana",
	"heraldik",
	"heran",
	"herba",
	"herbarium",
	"herbisida",
	"herbivor",
	"herbivora",
	"herder",
	"hereditas",
	"herediter",
	"heregistrasi",
	"heresi",
	"hering",
	"hermafrodit",
	"hermafroditisme",
	"hermetis",
	"hernia",
	"hero",
	"heroik",
	"heroin",
	"heroisme",
	"herpes",
	"herpetolog",
	"herpetologi",
	"hertz",
	"hesperidin",
	"heterodin",
	"heterodoks",
	"heterofemi",
	"heterofil",
	"heterofit",
	"heterogamet",
	"heterogami",
	"heterogen",
	"heterogenitas",
	"heterograf",
	"heterografi",
	"heteroklitus",
	"heteronim",
	"heteronimi",
	"heteronomi",
	"heteroseksual",
	"heteroseksualitas",
	"heterosfer",
	"heterosiklis",
	"heterosis",
	"heterospora",
	"heterostili",
	"heterotrof",
	"heterozigot",
	"heuristis",
	"hewan",
	"hewani",
	"hia",
	"hialin",
	"hialit",
	"hias",
	"hiatus",
	"hibah",
	"hibal",
	"hibat",
	"hibernasi",
	"hibiskus",
	"hibob",
	"hibrida",
	"hibridis",
	"hibridisasi",
	"hibuk",
	"hibur",
	"hidang",
	"hidatod",
	"hidayah",
	"hidayat",
	"hidrasi",
	"hidrat",
	"hidraulik",
	"hidraulika",
	"hidraulis",
	"hidrida",
	"hidrodinamika",
	"hidrofili",
	"hidrofit",
	"hidrofobia",
	"hidrofoil",
	"hidrofon",
	"hidrogen",
	"hidrogenasi",
	"hidrogeologi",
	"hidrograf",
	"hidrografi",
	"hidrogram",
	"hidrokarbon",
	"hidroklorida",
	"hidrokori",
	"hidroksida",
	"hidroksil",
	"hidrolika",
	"hidrolisis",
	"hidrologi",
	"hidrometeorologi",
	"hidrometer",
	"hidrometri",
	"hidromini",
	"hidronan",
	"hidropati",
	"hidroperoksida",
	"hidroponik",
	"hidropsoma",
	"hidrosfer",
	"hidrosiklon",
	"hidroskop",
	"hidrostatika",
	"hidrostatis",
	"hidroterapi",
	"hidrotermal",
	"hidu",
	"hidung",
	"hidup",
	"hiena",
	"hierarki",
	"hierarkis",
	"hieroglif",
	"hifa",
	"higiene",
	"higienis",
	"higrograf",
	"higrogram",
	"higrometer",
	"higrometri",
	"higroskop",
	"higroskopis",
	"higrotermograf",
	"higrotermogram",
	"hijab",
	"hijaiah",
	"hijau",
	"hijrah",
	"hijriah",
	"hikayat",
	"hikmah",
	"hikmat",
	"hilal",
	"hilang",
	"hilap",
	"hilau",
	"hilir",
	"hilofagus",
	"himanga",
	"himar",
	"himen",
	"himenium",
	"himne",
	"himpun",
	"hina",
	"hinap",
	"hinayana",
	"hindar",
	"hindi",
	"hindu",
	"hinduisme",
	"hingga",
	"hinggap",
	"hinggut",
	"hio",
	"hiosiamina",
	"hiosin",
	"hip",
	"hipantium",
	"hiperaktif",
	"hiperamnesi",
	"hiperbarik",
	"hiperbol",
	"hiperbolis",
	"hiperemia",
	"hiperestesia",
	"hipergami",
	"hiperkelas",
	"hiperkinesis",
	"hiperklas",
	"hiperkorek",
	"hiperkritis",
	"hiperlipemia",
	"hipermetropia",
	"hiperon",
	"hiperopia",
	"hiperparasit",
	"hiperplasia",
	"hiperseks",
	"hiperseksual",
	"hipersensitif",
	"hipersonik",
	"hipersonika",
	"hipertensi",
	"hipertonik",
	"hipertradisional",
	"hipertrikosis",
	"hipertrofi",
	"hipervitaminosis",
	"hipnosis",
	"hipnoterapi",
	"hipnotis",
	"hipnotisme",
	"hipoblas",
	"hipodermis",
	"hipodermoklisis",
	"hipodrom",
	"hipofisis",
	"hipofremia",
	"hipogen",
	"hipoglikemia",
	"hipokondria",
	"hipokotil",
	"hipokrisi",
	"hipokrit",
	"hipokritis",
	"hipolimnion",
	"hipomastia",
	"hipomnesia",
	"hiponim",
	"hipopituitarisme",
	"hipoplankton",
	"hipoplasia",
	"hipopotamus",
	"hiposentrum",
	"hipotaksis",
	"hipotek",
	"hipotensi",
	"hipotenusa",
	"hipotermia",
	"hipotesis",
	"hipotetis",
	"hipotiroid",
	"hipotiroidisme",
	"hipotonik",
	"hipovitaminosis",
	"hipsometer",
	"hipui",
	"hirap",
	"hirau",
	"hirsutisme",
	"hiru-biru",
	"hiru-hara",
	"hirudin",
	"hiruk",
	"hirup",
	"his",
	"hisab",
	"histamina",
	"histerektomi",
	"histeria",
	"histeris",
	"histerisis",
	"histidina",
	"histogeni",
	"histokimia",
	"histologi",
	"histon",
	"histopatologi",
	"histori",
	"historikus",
	"historiografi",
	"historis",
	"historisisme",
	"historisitas",
	"hit",
	"hitam",
	"hitung",
	"hiu",
	"hiyayat",
	"hobat",
	"hobi",
	"hobo",
	"hodadoda",
	"hodah",
	"hodometer",
	"hoi",
	"hokah",
	"hoki",
	"hol",
	"holi",
	"holisme",
	"holistis",
	"holmium",
	"holobentos",
	"holoenzim",
	"holofit",
	"holofitik",
	"holofrasis",
	"hologamet",
	"hologami",
	"holograf",
	"holografis",
	"hologram",
	"holokrim",
	"holokrin",
	"holoplankton",
	"holosen",
	"holozoik",
	"homeostasis",
	"homili",
	"hominid",
	"hominoid",
	"homo",
	"homofon",
	"homofoni",
	"homogami",
	"homogen",
	"homogeni",
	"homogenitas",
	"homograf",
	"homografi",
	"homogram",
	"homoiotermal",
	"homolog",
	"homologi",
	"homonim",
	"homonimi",
	"homorgan",
	"homoseks",
	"homoseksual",
	"homoseksualisme",
	"homoseksualitas",
	"homosfer",
	"homospora",
	"homoterm",
	"homozigot",
	"honae",
	"honcoe",
	"honji",
	"honor",
	"honorarium",
	"honorer",
	"honorifik",
	"hop",
	"hopagen",
	"hopbiro",
	"hopkantor",
	"hopyes",
	"horak",
	"horas",
	"hore",
	"horizon",
	"horizontal",
	"hormat",
	"hormon",
	"hornblenda",
	"horor",
	"horoskop",
	"hortikultura",
	"hortikulturis",
	"hoskut",
	"hospital",
	"hostel",
	"hostes",
	"hosti",
	"hot",
	"hotel",
	"howitzer",
	"huakiau",
	"hubar",
	"hubaya-hubaya",
	"hububan",
	"hubulwatan",
	"hubung",
	"huda",
	"hudai",
	"hudhud",
	"hudud",
	"hufaz",
	"huh",
	"hujah",
	"hujaj",
	"hujan",
	"hujat",
	"huji",
	"hujin",
	"hujung",
	"hukah",
	"hukama",
	"hukum",
	"hula-hula",
	"hulam",
	"huler",
	"hulu",
	"hulubalang",
	"hulul",
	"hulur",
	"huma",
	"human",
	"humaniora",
	"humanis",
	"humanisasi",
	"humanisme",
	"humanistis",
	"humanitas",
	"humaniter",
	"humas",
	"humbalang",
	"humektan",
	"humerus",
	"humidifikasi",
	"humiditas",
	"humifikasi",
	"humin",
	"humor",
	"humoris",
	"humoristis",
	"humorolog",
	"humus",
	"hun",
	"huncue",
	"huni",
	"hunjam",
	"hunjuk",
	"hunkue",
	"hunus",
	"hura-hura",
	"hurah",
	"huria",
	"huriah",
	"hurikan",
	"huru-hara",
	"huruf",
	"hus",
	"husnulkhatimah",
	"hut",
	"hutan",
	"hutang",
	"huyung",
	"ialah",
	"iambus",
	"iatrogenik",
	"iba",
	"ibadah",
	"ibadat",
	"ibadurahman",
	"iban",
	"ibar-ibar",
	"ibarat",
	"ibayuh",
	"ibid",
	"ibidem",
	"ibing",
	"iblis",
	"ibni",
	"ibnu",
	"ibra",
	"ibrit",
	"ibtida",
	"ibtidaiah",
	"ibu",
	"ibul",
	"ibun",
	"ibunda",
	"ibung",
	"ibus",
	"icak-icak",
	"ida",
	"idafi",
	"idah",
	"idam",
	"idap",
	"idarah",
	"idas",
	"ide",
	"ideal",
	"idealis",
	"idealisasi",
	"idealisme",
	"idealistis",
	"idem",
	"identifikasi",
	"identik",
	"identitas",
	"ideofon",
	"ideograf",
	"ideografi",
	"ideografis",
	"ideogram",
	"ideologi",
	"ideologis",
	"ideosinkretik",
	"idep",
	"idiil",
	"idiolek",
	"idiom",
	"idiomatis",
	"idiomatologi",
	"idiosi",
	"idiosinkrasi",
	"idiosinkretik",
	"idiot",
	"idola",
	"idrak",
	"idu",
	"iduladha",
	"idulfitri",
	"ifah",
	"ifrit",
	"iftar",
	"iftitah",
	"iga",
	"igal",
	"igau",
	"iglo",
	"ihdad",
	"ihram",
	"ihsan",
	"ihsanat",
	"ihsas",
	"ihtifal",
	"ihtikar",
	"ihtilam",
	"ihtimal",
	"ihwal",
	"ijab",
	"ijabat",
	"ijajil",
	"ijarah",
	"ijas",
	"ijazah",
	"ijbar",
	"ijeman",
	"ijil",
	"ijmak",
	"ijmal",
	"ijon",
	"ijtihad",
	"ijtimaiah",
	"ijtimak",
	"ijuk",
	"ikab",
	"ikal",
	"ikamah",
	"ikan",
	"ikat",
	"ikebana",
	"ikhbar",
	"ikhlas",
	"ikhtiar",
	"ikhtiari",
	"ikhtilaf",
	"ikhtiogeografi",
	"ikhtiosarkotoksisme",
	"ikhtiotoksisme",
	"ikhtisar",
	"ikhwan",
	"iklan",
	"iklim",
	"ikon",
	"ikonis",
	"ikonograf",
	"ikonografi",
	"ikonoklasme",
	"ikonometer",
	"ikrab",
	"ikram",
	"ikrar",
	"iktibar",
	"iktidal",
	"iktikad",
	"iktikaf",
	"iktiografi",
	"iktiolit",
	"iktiologi",
	"iktiologis",
	"iktirad",
	"iktiraf",
	"iktisab",
	"ikuh",
	"ikut",
	"ilafi",
	"ilah",
	"ilahi",
	"ilahiah",
	"ilahiat",
	"ilai",
	"ilak",
	"ilam-ilam",
	"ilanun",
	"ilar",
	"ilas",
	"ilat",
	"ilegal",
	"iler",
	"iles",
	"ileum",
	"ilham",
	"ili",
	"ilian",
	"iling",
	"ilmiah",
	"ilmu",
	"ilu",
	"iluminasi",
	"ilusi",
	"ilusif",
	"ilusionis",
	"ilustrasi",
	"ilustratif",
	"ilustrator",
	"imago",
	"imaji",
	"imajinasi",
	"imajinatif",
	"imajiner",
	"imak",
	"imam",
	"imamah",
	"imamologi",
	"iman",
	"imanen",
	"imanensi",
	"imani",
	"imbak",
	"imbal",
	"imbang",
	"imbas",
	"imbau",
	"imbesil",
	"imbesilitas",
	"imbibisi",
	"imbit",
	"imbuh",
	"imigran",
	"imigrasi",
	"iming-iming",
	"imitasi",
	"imitatif",
	"imitator",
	"imkan",
	"imla",
	"imlek",
	"imobilisasi",
	"impak",
	"impas",
	"impase",
	"impedans",
	"impedansi",
	"impek",
	"imperatif",
	"imperfek",
	"imperfeksi",
	"imperial",
	"imperialis",
	"imperialisme",
	"imperium",
	"impersonal",
	"impersonalia",
	"impersonalitas",
	"impi",
	"impit",
	"implan",
	"implantasi",
	"implemen",
	"implementasi",
	"implikasi",
	"implisit",
	"implosif",
	"implosit",
	"impor",
	"importasi",
	"importir",
	"impoten",
	"impotensi",
	"impregnasi",
	"impresariat",
	"impresario",
	"impresi",
	"impresif",
	"impresionis",
	"impresionisme",
	"impresionistik",
	"imprimatur",
	"improvisasi",
	"impuls",
	"impulsif",
	"imsak",
	"imsakiah",
	"imtihan",
	"imun",
	"imunisasi",
	"imunitas",
	"imunokimia",
	"imunokompromi",
	"imunologi",
	"imunologis",
	"imunosupresi",
	"imunoterapi",
	"ina",
	"inadaptabilitas",
	"inai",
	"inang",
	"inangda",
	"inap",
	"inartikulat",
	"inas",
	"inaugurasi",
	"inayat",
	"inca",
	"incang-incut",
	"incar",
	"inci",
	"incit",
	"incling",
	"incrit",
	"incu",
	"incut",
	"indah",
	"indang",
	"indap",
	"indarus",
	"indayang",
	"indebitum",
	"indehoi",
	"indekos",
	"indeks",
	"inden",
	"independen",
	"inderawasih",
	"indeterminisme",
	"indigenos",
	"indigo",
	"indik",
	"indikan",
	"indikasi",
	"indikatif",
	"indikator",
	"inding",
	"indisipliner",
	"indium",
	"individu",
	"individual",
	"individualis",
	"individualisasi",
	"individualisme",
	"individualistis",
	"individualitas",
	"individuasi",
	"indoktrinasi",
	"indolen",
	"indolensi",
	"indologi",
	"indonesia",
	"indonesianisasi",
	"indra",
	"indraloka",
	"indranila",
	"indria",
	"indriawi",
	"indu",
	"induk",
	"induksi",
	"induktans",
	"induktansi",
	"induktif",
	"induktor",
	"indung",
	"indusemen",
	"industri",
	"inefisiensi",
	"inersia",
	"infak",
	"infanteri",
	"infantil",
	"infantilisasi",
	"infantilisme",
	"infarktus",
	"infeksi",
	"inferensi",
	"inferensial",
	"inferior",
	"inferioritas",
	"inferno",
	"infertil",
	"infertilitas",
	"infiks",
	"infiltrasi",
	"infiltrometer",
	"infinitif",
	"infiradi",
	"inflamasi",
	"inflasi",
	"inflatoar",
	"infleksi",
	"infleksibel",
	"infleksif",
	"infloresen",
	"infloresens",
	"influensa",
	"influenza",
	"info",
	"informal",
	"informan",
	"informasi",
	"informatif",
	"informatika",
	"inframerah",
	"infrasonik",
	"infrastruktur",
	"infus",
	"inga",
	"ingar",
	"ingat",
	"ingau",
	"inggang-inggung",
	"inggris",
	"inggu",
	"inggung",
	"ingin",
	"ingkah",
	"ingkar",
	"ingkir",
	"ingresif",
	"ingsar",
	"ingsun",
	"ingsut",
	"ingus",
	"inheren",
	"inhibisi",
	"inhibitor",
	"ini",
	"inisial",
	"inisiasi",
	"inisiatif",
	"inisiator",
	"injak",
	"injap",
	"injeksi",
	"injil",
	"injin",
	"inkarnasi",
	"inkarserasi",
	"inkarsunah",
	"inkaso",
	"inklaring",
	"inklinasi",
	"inklinometer",
	"inklusif",
	"inkognito",
	"inkompabilitas",
	"inkompatibilitas",
	"inkompeten",
	"inkomplet",
	"inkonfeso",
	"inkonsisten",
	"inkonsistensi",
	"inkonstitusional",
	"inkonvensional",
	"inkorporasi",
	"inkremental",
	"inkubasi",
	"inkubator",
	"inkulturasi",
	"inlander",
	"inohong",
	"inokulasi",
	"inovasi",
	"inovatif",
	"inovator",
	"insaf",
	"insan",
	"insanan",
	"insang",
	"insani",
	"insanulkamil",
	"insar",
	"insek",
	"insekta",
	"insektari",
	"insektisida",
	"insektivor",
	"insektivora",
	"insektologi",
	"inseminasi",
	"insentif",
	"insersi",
	"inses",
	"inset",
	"insiden",
	"insidental",
	"insinerator",
	"insinuasi",
	"insinuatif",
	"insinye",
	"insinyur",
	"inskripsi",
	"inslan",
	"insolven",
	"insomnia",
	"inspeksi",
	"inspektorat",
	"inspektur",
	"inspirasi",
	"instabilitas",
	"instalasi",
	"instalatur",
	"instan",
	"instansi",
	"insting",
	"instingtif",
	"institusi",
	"institusional",
	"institut",
	"instruksi",
	"instruksional",
	"instruktif",
	"instruktur",
	"instrumen",
	"instrumental",
	"instrumentalia",
	"instrumentalis",
	"instrumentasi",
	"insubordinasi",
	"insulator",
	"insuler",
	"insulin",
	"insulinde",
	"insya",
	"intai",
	"intan",
	"integral",
	"integralistik",
	"integrasi",
	"integrasionis",
	"integritas",
	"integumen",
	"intel",
	"intelek",
	"intelektual",
	"intelektualisasi",
	"intelektualisme",
	"inteligen",
	"inteligensi",
	"inteligensia",
	"intelijen",
	"intendans",
	"intens",
	"intensi",
	"intensif",
	"intensifikasi",
	"intensional",
	"intensitas",
	"interaksi",
	"interaksionistik",
	"interaktif",
	"interdepartemental",
	"interdependen",
	"interdiksi",
	"interdisipliner",
	"interegnum",
	"interelasi",
	"interen",
	"interes",
	"interesan",
	"interetnik",
	"interferens",
	"interferensi",
	"interferometer",
	"interferon",
	"interglasial",
	"interim",
	"interinsuler",
	"interior",
	"interjeksi",
	"interkom",
	"interkoneksi",
	"interkonsonantal",
	"interkontinental",
	"interlokal",
	"interlokutor",
	"interlud",
	"intermeso",
	"intermezo",
	"intermolekuler",
	"intern",
	"internal",
	"internalisasi",
	"internasional",
	"internasionalisasi",
	"internat",
	"internir",
	"internis",
	"internuntius",
	"interogasi",
	"interogatif",
	"interogator",
	"interpelan",
	"interpelasi",
	"interpelator",
	"interpiu",
	"interpolasi",
	"interpretasi",
	"interpretatif",
	"interpretator",
	"interpreter",
	"intersepsi",
	"intertestial",
	"intertidal",
	"interupsi",
	"interval",
	"intervensi",
	"intervensionisme",
	"interviu",
	"interzona",
	"inti",
	"intifadah",
	"intiha",
	"intikad",
	"intim",
	"intima",
	"intimasi",
	"intimidasi",
	"intip",
	"intipati",
	"intisari",
	"intoksikasi",
	"intoleran",
	"intonasi",
	"intradermal",
	"intrakalimat",
	"intrakurikuler",
	"intralinguistis",
	"intramembran",
	"intramolekul",
	"intramuskuler",
	"intransitif",
	"intraseluler",
	"intrauniversiter",
	"intravaskuler",
	"intravena",
	"intrik",
	"intrinsik",
	"intro",
	"introduksi",
	"introjeksi",
	"introspeksi",
	"introver",
	"intrusi",
	"intuisi",
	"intuitif",
	"intumesensi",
	"invaginasi",
	"invalid",
	"invasi",
	"invensi",
	"inventaris",
	"inventarisasi",
	"inventif",
	"inventor",
	"inventori",
	"inventoriminat",
	"inversi",
	"invertebrata",
	"investasi",
	"investigasi",
	"investigatif",
	"investor",
	"invitasi",
	"invois",
	"involusi",
	"inyik",
	"inzar",
	"inziaj",
	"iodin",
	"ion",
	"ionisasi",
	"ionosfer",
	"iota",
	"ipar",
	"ipis",
	"ipon",
	"iprit",
	"ipuh",
	"ipuk",
	"ipung",
	"iqamat",
	"iqra",
	"ira",
	"iradat",
	"iradiasi",
	"irafah",
	"irah-irahan",
	"iram",
	"irama",
	"iras",
	"irasional",
	"irasionalitas",
	"iri",
	"iridium",
	"irigasi",
	"irigator",
	"irik",
	"iring",
	"iris",
	"irit",
	"iritabilitas",
	"iritasi",
	"iritatif",
	"ironi",
	"ironis",
	"irsyad",
	"irung",
	"irus",
	"isa",
	"isak",
	"isalohipse",
	"isap",
	"isbat",
	"iseng",
	"isentropik",
	"isi",
	"isim",
	"isis",
	"isit",
	"iskemia",
	"islah",
	"islam",
	"islami",
	"islamiah",
	"islamis",
	"islamisasi",
	"islamisme",
	"islamologi",
	"isoaglutinin",
	"isobar",
	"isobarik",
	"isobat",
	"isobron",
	"isodin",
	"isodinamik",
	"isofase",
	"isofen",
	"isofet",
	"isoflor",
	"isofon",
	"isogamet",
	"isogami",
	"isoglos",
	"isogon",
	"isogram",
	"isohalin",
	"isohel",
	"isohiet",
	"isohips",
	"isokal",
	"isokalori",
	"isokemi",
	"isokeraunik",
	"isokor",
	"isokorik",
	"isokronisme",
	"isolasi",
	"isolasionisme",
	"isolatif",
	"isolator",
	"isoleks",
	"isolemen",
	"isolir",
	"isomer",
	"isometrik",
	"isomorf",
	"isomorfis",
	"isomorfisme",
	"isonefel",
	"isonomi",
	"isopal",
	"isopiestik",
	"isoplet",
	"isoriza",
	"isosilabisme",
	"isotah",
	"isoterm",
	"isotermal",
	"isotop",
	"isotrop",
	"isotropik",
	"isovolumik",
	"isra",
	"israf",
	"istal",
	"istan",
	"istana",
	"istanggi",
	"istaz",
	"istazah",
	"istiadat",
	"istianah",
	"istiazah",
	"istibdad",
	"istibra",
	"istidlal",
	"istidraj",
	"istifham",
	"istigasah",
	"istigfar",
	"istihadah",
	"istihsan",
	"istikamah",
	"istikharah",
	"istikhlaf",
	"istiklal",
	"istikmal",
	"istilah",
	"istima",
	"istimaiah",
	"istimewa",
	"istimna",
	"istimtak",
	"istinggar",
	"istinja",
	"istiqlal",
	"istirahat",
	"istislah",
	"istislam",
	"istisna",
	"istitaah",
	"istiwa",
	"istri",
	"isu",
	"isya",
	"isyarat",
	"isytiak",
	"isyu",
	"italik",
	"item",
	"iterasi",
	"iterbium",
	"itibak",
	"itibar",
	"itidal",
	"itifak",
	"itihad",
	"itik",
	"itikad",
	"itikaf",
	"itil",
	"itisal",
	"itlak",
	"itrium",
	"itu",
	"iudisasi",
	"iur",
	"iwad",
	"iya",
	"izah",
	"izin",
	"jaat",
	"jab",
	"jabal",
	"jabang",
	"jabar",
	"jabariah",
	"jabat",
	"jabir",
	"jables",
	"jabrik",
	"jabung",
	"jadah",
	"jadam",
	"jadayat",
	"jadi",
	"jaduk",
	"jadwal",
	"jaga",
	"jagabaya",
	"jagabela",
	"jagal",
	"jagang",
	"jagapati",
	"jagaraga",
	"jagat",
	"jagawana",
	"jago",
	"jagra",
	"jagrak",
	"jaguar",
	"jagung",
	"jagur",
	"jah",
	"jaha",
	"jahan",
	"jahanam",
	"jahar",
	"jaharu",
	"jahat",
	"jahe",
	"jahil",
	"jahiliah",
	"jahiriah",
	"jahit",
	"jahul",
	"jail",
	"jainisme",
	"jaipong",
	"jais",
	"jaiz",
	"jaja",
	"jajah",
	"jajak",
	"jajal",
	"jajan",
	"jajar",
	"jaka",
	"jakal",
	"jakas",
	"jaket",
	"jaksa",
	"jaksi",
	"jakun",
	"jala",
	"jalabria",
	"jalad",
	"jalak",
	"jalal",
	"jalan",
	"jalang",
	"jalangkote",
	"jalangkung",
	"jalar",
	"jali",
	"jalibut",
	"jalil",
	"jalin",
	"jalma",
	"jalu",
	"jalur",
	"jam",
	"jamaah",
	"jamadat",
	"jamah",
	"jamak",
	"jamal",
	"jaman",
	"jamang",
	"jambak",
	"jambal",
	"jamban",
	"jambang",
	"jambar",
	"jambat",
	"jambe",
	"jambiah",
	"jambian",
	"jamblang",
	"jambon",
	"jambore",
	"jambret",
	"jambu",
	"jambul",
	"jambulan",
	"jambur",
	"jamhur",
	"jamiah",
	"jamiatul",
	"jamik",
	"jamil",
	"jamin",
	"jamis",
	"jamiyah",
	"jamiyatul",
	"jampal",
	"jampen",
	"jampi",
	"jampuk",
	"jamrah",
	"jamrud",
	"jamu",
	"jamung",
	"jamur",
	"janabah",
	"janabijana",
	"janah",
	"janat",
	"janda",
	"jangak",
	"jangan",
	"jangar",
	"jangat",
	"janggal",
	"janggelan",
	"janggi",
	"janggolan",
	"janggung",
	"janggut",
	"jangka",
	"jangkah",
	"jangkang",
	"jangkap",
	"jangkar",
	"jangkat",
	"jangkau",
	"jangki",
	"jangkih",
	"jangkih-mangkih",
	"jangking",
	"jangkir",
	"jangkit",
	"jangkrik",
	"jangkung",
	"jangla",
	"jangol",
	"jani",
	"janik",
	"janin",
	"janjang",
	"janji",
	"jantan",
	"jantang",
	"jantina",
	"jantuk",
	"jantung",
	"jantur",
	"janturan",
	"januari",
	"janubi",
	"janur",
	"jap",
	"japan",
	"japin",
	"japu",
	"japuk",
	"jara",
	"jarab",
	"jarah",
	"jarak",
	"jaram",
	"jaran",
	"jaranan",
	"jarang",
	"jaras",
	"jarem",
	"jargon",
	"jari",
	"jariah",
	"jariji",
	"jarimah",
	"jaring",
	"jarit",
	"jarjau",
	"jaro",
	"jarotan",
	"jarum",
	"jarwa",
	"jas",
	"jasa",
	"jasad",
	"jasadi",
	"jasmani",
	"jasmaniah",
	"jasus",
	"jaswadi",
	"jatah",
	"jatayu",
	"jati",
	"jatilan",
	"jatmika",
	"jatuh",
	"jatukrama",
	"jauh",
	"jauhar",
	"jauhari",
	"jauza",
	"jawab",
	"jawang",
	"jawanisasi",
	"jawara",
	"jawat",
	"jawawut",
	"jawer",
	"jawi",
	"jawil",
	"jaya",
	"jayacihna",
	"jayapatra",
	"jayasong",
	"jayastamba",
	"jayeng",
	"jaz",
	"jazam",
	"jazirah",
	"jazirat",
	"jebab",
	"jebah",
	"jebai",
	"jebak",
	"jebang",
	"jebar",
	"jebat",
	"jeblok",
	"jeblos",
	"jebluk",
	"jebol",
	"jebor",
	"jebrol",
	"jebuh",
	"jebung",
	"jebur",
	"jeda",
	"jeding",
	"jedot",
	"jegal",
	"jegang",
	"jegil",
	"jegogan",
	"jegung",
	"jejabah",
	"jejak",
	"jejaka",
	"jejal",
	"jejap",
	"jejas",
	"jejengkok",
	"jejer",
	"jejunum",
	"jejuri",
	"jeket",
	"jeksi",
	"jel",
	"jela",
	"jelabak",
	"jelabir",
	"jeladan",
	"jeladren",
	"jeladri",
	"jelaga",
	"jelagra",
	"jelah",
	"jelai",
	"jelajah",
	"jelak",
	"jelalat",
	"jelamprang",
	"jelanak",
	"jelang",
	"jelangak",
	"jelangkung",
	"jelantah",
	"jelapak",
	"jelapang",
	"jelar",
	"jelarang",
	"jelas",
	"jelata",
	"jelatang",
	"jelau",
	"jelawat",
	"jelejeh",
	"jelek",
	"jelempah",
	"jelengar",
	"jelentik",
	"jelepak",
	"jelepok",
	"jeli",
	"jelih",
	"jelijih",
	"jelimet",
	"jelimpat",
	"jeling",
	"jelir",
	"jelit",
	"jelita",
	"jelma",
	"jelu",
	"jeluak",
	"jeluang",
	"jelujur",
	"jeluk",
	"jelum",
	"jelungkap",
	"jeluntung",
	"jelunut",
	"jelur-jelir",
	"jelus",
	"jelut",
	"jelutung",
	"jem",
	"jemaah",
	"jemaat",
	"jemah",
	"jemala",
	"jemang",
	"jemari",
	"jemaring",
	"jemawa",
	"jemba",
	"jembak",
	"jembalang",
	"jembar",
	"jembatan",
	"jembel",
	"jember",
	"jembiah",
	"jembrana",
	"jembut",
	"jemeki",
	"jemerlang",
	"jempalik",
	"jempalit",
	"jempana",
	"jemparing",
	"jempol",
	"jempul",
	"jemput",
	"jemu",
	"jemuas",
	"jemuju",
	"jemur",
	"jenahar",
	"jenak",
	"jenaka",
	"jenama",
	"jenang",
	"jenangau",
	"jenat",
	"jenawi",
	"jenayah",
	"jenazah",
	"jendal",
	"jendala",
	"jendel",
	"jendela",
	"jendera",
	"jenderal",
	"jendol",
	"jendul",
	"jenela",
	"jeneng",
	"jenewer",
	"jeng",
	"jengah",
	"jengang",
	"jengat",
	"jengek",
	"jenggala",
	"jenggar",
	"jengger",
	"jengget",
	"jengglong",
	"jenggot",
	"jengguk",
	"jenggul",
	"jenggut",
	"jengit",
	"jengkal",
	"jengkang",
	"jengkek",
	"jengkel",
	"jengkelit",
	"jengkeng",
	"jengker",
	"jengket",
	"jengki",
	"jengking",
	"jengkit",
	"jengkol",
	"jengkolet",
	"jengkot",
	"jenglong",
	"jenguh",
	"jenguk",
	"jengul",
	"jenis",
	"jenius",
	"jenjam",
	"jenjang",
	"jenjeng",
	"jentaka",
	"jentang",
	"jentayu",
	"jentelmen",
	"jentera",
	"jentik",
	"jentur",
	"jenu",
	"jenuh",
	"jepa",
	"jepet",
	"jepit",
	"jeprat",
	"jepret",
	"jepun",
	"jeput",
	"jera",
	"jerabai",
	"jeradik",
	"jeragih",
	"jerah",
	"jerahak",
	"jerahap",
	"jerait",
	"jeram",
	"jeramah",
	"jerambah",
	"jerambai",
	"jerambang",
	"jerambung",
	"jerami",
	"jeran",
	"jerang",
	"jerangan",
	"jerangau",
	"jerangkah",
	"jerangkak",
	"jerangkang",
	"jerangkong",
	"jerap",
	"jerapah",
	"jerat",
	"jerau",
	"jeraus",
	"jerawat",
	"jerba",
	"jerbak",
	"jereket",
	"jeremak",
	"jeremba",
	"jerembap",
	"jerembat",
	"jerembet",
	"jerembun",
	"jerempak",
	"jereng",
	"jerepet",
	"jeri",
	"jeriau",
	"jerigen",
	"jerih",
	"jeriji",
	"jeriken",
	"jering",
	"jeringing",
	"jerit",
	"jerjak",
	"jerkah",
	"jerkat",
	"jermal",
	"jermang",
	"jernang",
	"jernih",
	"jero",
	"jeroan",
	"jerohok",
	"jerojol",
	"jerongkang",
	"jerongkes",
	"jerongkok",
	"jerongkong",
	"jerubung",
	"jeruji",
	"jeruju",
	"jeruk",
	"jerukun",
	"jerukup",
	"jerum",
	"jerumat",
	"jerumbai",
	"jerumun",
	"jerumus",
	"jerun",
	"jerung",
	"jerungkau",
	"jerungkis",
	"jerungkung",
	"jerunuk",
	"jerupih",
	"jesben",
	"jet",
	"jetis",
	"jetsam",
	"jetset",
	"jewer",
	"jiawang",
	"jib",
	"jibaku",
	"jibilah",
	"jibrail",
	"jibril",
	"jibti",
	"jibun",
	"jicap",
	"jicapgo",
	"jicing",
	"jidal",
	"jidar",
	"jidat",
	"jidur",
	"jigong",
	"jigrah",
	"jih",
	"jihad",
	"jihat",
	"jijik",
	"jijit",
	"jijitsu",
	"jika",
	"jikalau",
	"jil",
	"jila",
	"jilah",
	"jilam",
	"jilat",
	"jilbab",
	"jilid",
	"jim",
	"jimahir",
	"jimak",
	"jimakir",
	"jimat",
	"jimawal",
	"jimbit",
	"jimpit",
	"jin",
	"jinak",
	"jinayah",
	"jindra",
	"jinem",
	"jineman",
	"jineng",
	"jingap",
	"jingau",
	"jingga",
	"jinggring",
	"jingkat",
	"jingkik",
	"jingkrak",
	"jingo",
	"jingoisme",
	"jingu",
	"jinjang",
	"jinjing",
	"jinjit",
	"jinsom",
	"jintan",
	"jip",
	"jipang",
	"jiplak",
	"jipro",
	"jir",
	"jirak",
	"jiran",
	"jirat",
	"jirian",
	"jirus",
	"jisim",
	"jitah",
	"jitak",
	"jitok",
	"jitu",
	"jiwa",
	"jiwat",
	"jiwatman",
	"jiwit",
	"jizyah",
	"jlegur",
	"joang",
	"jobak",
	"jobong",
	"jodang",
	"jodoh",
	"jodong",
	"jogan",
	"jogar",
	"joget",
	"joging",
	"joglo",
	"johan",
	"johar",
	"johari",
	"jojing",
	"jojol",
	"jok",
	"joki",
	"jolak",
	"jolek",
	"joli",
	"jolok",
	"jolong",
	"jolor",
	"jombang",
	"jomlo",
	"jompak",
	"jompo",
	"jongang",
	"jonget",
	"jongga",
	"jonggol",
	"jonggolan",
	"jongjorang",
	"jongkang",
	"jongkar-jangkir",
	"jongkat-jangkit",
	"jongki",
	"jongko",
	"jongkok",
	"jongkong",
	"jongos",
	"jonjot",
	"jontoh",
	"jontor",
	"jontrot",
	"joran",
	"joreng",
	"jori",
	"jorjoran",
	"jorok",
	"jorong",
	"josna",
	"jota",
	"jotang",
	"jotos",
	"joule",
	"jrambah",
	"jreng",
	"jua",
	"juadah",
	"juak",
	"jual",
	"juan",
	"juandang",
	"juang",
	"juar",
	"juara",
	"jubah",
	"jubel",
	"jubin",
	"jublag",
	"jublek",
	"judek",
	"judes",
	"judi",
	"judo",
	"judogi",
	"judoka",
	"judul",
	"juek",
	"juga",
	"juhi",
	"juhut",
	"juih",
	"juita",
	"juja",
	"jujah",
	"jujai",
	"jujitsu",
	"juju",
	"jujuh",
	"jujur",
	"jujuran",
	"jujut",
	"jukstaposisi",
	"jukut",
	"julab",
	"julai",
	"julang",
	"julat",
	"juli",
	"juling",
	"julir",
	"julo",
	"juluk",
	"julung",
	"julur",
	"jumadilakhir",
	"jumadilawal",
	"jumantan",
	"jumantara",
	"jumat",
	"jumbai",
	"jumbil",
	"jumbo",
	"jumbuh",
	"jumbul",
	"jumeneng",
	"jumhur",
	"jumjumah",
	"jumlah",
	"jumpa",
	"jumpalit",
	"jumpang",
	"jumpelang",
	"jumpul",
	"jumput",
	"jumrah",
	"jumud",
	"jun",
	"junam",
	"jundai",
	"jung",
	"jungat",
	"junggang",
	"jungkal",
	"jungkang",
	"jungkar",
	"jungkat",
	"jungkir",
	"jungkit",
	"jungkol",
	"jungur",
	"jungut",
	"juni",
	"junior",
	"junjung",
	"junta",
	"juntai",
	"juntrung",
	"junub",
	"junun",
	"jupang",
	"jura",
	"juragan",
	"jurai",
	"jurang",
	"juri",
	"jurik",
	"juring",
	"juris",
	"jurit",
	"jurnal",
	"jurnalis",
	"jurnalisme",
	"jurnalistik",
	"juru",
	"juruh",
	"jurung",
	"jurus",
	"jus",
	"justifikasi",
	"justru",
	"juta",
	"jute",
	"juvenil",
	"juz",
	"kaabah",
	"kaba",
	"kabah",
	"kabak",
	"kabang-kabang",
	"kabar",
	"kabaret",
	"kabat",
	"kabau",
	"kabel",
	"kabihat",
	"kabil",
	"kabilah",
	"kabin",
	"kabinet",
	"kabir",
	"kabisat",
	"kabit",
	"kaboi",
	"kabriolet",
	"kabruk",
	"kabu-kabu",
	"kabuki",
	"kabul",
	"kabumbu",
	"kabung",
	"kabupaten",
	"kabur",
	"kabus",
	"kabut",
	"kaca",
	"kacak",
	"kacam",
	"kacamata",
	"kacang",
	"kacapiring",
	"kacapuri",
	"kacar",
	"kacau",
	"kacau-balau",
	"kacauan",
	"kacek",
	"kacer",
	"kaci",
	"kacici",
	"kacip",
	"kacir",
	"kaco",
	"kacrek",
	"kacu",
	"kacuk",
	"kacukan",
	"kacung",
	"kad",
	"kada",
	"kadahajat",
	"kadal",
	"kadam",
	"kadang",
	"kadar",
	"kadariah",
	"kadas",
	"kadaster",
	"kadasteral",
	"kadastral",
	"kadaver",
	"kade",
	"kademat",
	"kadensa",
	"kader",
	"kadera",
	"kaderisasi",
	"kades",
	"kadet",
	"kadi",
	"kadim",
	"kadipaten",
	"kadir",
	"kadiriah",
	"kadmium",
	"kado",
	"kadofor",
	"kadok",
	"kadru",
	"kadung",
	"kadut",
	"kaedah",
	"kaf",
	"kafaah",
	"kafah",
	"kafan",
	"kafarat",
	"kafe",
	"kafeina",
	"kafetaria",
	"kafi",
	"kafil",
	"kafilah",
	"kafir",
	"kafiri",
	"kaftan",
	"kagak",
	"kaget",
	"kagok",
	"kagum",
	"kah",
	"kahaf",
	"kahak",
	"kahan",
	"kahang",
	"kahar",
	"kahat",
	"kahin",
	"kahrab",
	"kahwa",
	"kahwaji",
	"kahyangan",
	"kaidah",
	"kaifiah",
	"kaifiat",
	"kail",
	"kailalo",
	"kaimat",
	"kain",
	"kaing",
	"kainit",
	"kainofobia",
	"kais",
	"kaisar",
	"kait",
	"kajai",
	"kajang",
	"kajangan",
	"kajen",
	"kaji",
	"kak",
	"kakaban",
	"kakafoni",
	"kakagau",
	"kakah",
	"kakak",
	"kakaktua",
	"kakanda",
	"kakang",
	"kakao",
	"kakap",
	"kakas",
	"kakawin",
	"kakbah",
	"kakek",
	"kakerlak",
	"kaki",
	"kakodil",
	"kakofoni",
	"kakografi",
	"kakok",
	"kakologi",
	"kakostokrasi",
	"kakrupukan",
	"kaksa",
	"kaktus",
	"kaku",
	"kakuminal",
	"kakus",
	"kala",
	"kalah",
	"kalai",
	"kalajengking",
	"kalaka",
	"kalakanji",
	"kalakati",
	"kalakeran",
	"kalakian",
	"kalam",
	"kalamba",
	"kalamdan",
	"kalamin",
	"kalamisani",
	"kalamkari",
	"kalandar",
	"kalander",
	"kalang",
	"kalap",
	"kalar",
	"kalas",
	"kalat",
	"kalau",
	"kalaupun",
	"kalawija",
	"kalaza",
	"kalbi",
	"kalbu",
	"kaldera",
	"kaldron",
	"kaldu",
	"kalebas",
	"kaleidoskop",
	"kaleidoskopis",
	"kalem",
	"kalempagi",
	"kalender",
	"kaleng",
	"kali",
	"kalian",
	"kaliber",
	"kalibit",
	"kalibrasi",
	"kalibut",
	"kalicau",
	"kalifornium",
	"kaligraf",
	"kaligrafi",
	"kaligrafis",
	"kalih",
	"kalikausar",
	"kaliki",
	"kalimah",
	"kalimantang",
	"kalimat",
	"kalimatullah",
	"kalimatusyahadat",
	"kalimayah",
	"kalimpanang",
	"kalingan",
	"kalio",
	"kaliper",
	"kalipso",
	"kaliptra",
	"kalis",
	"kalistenik",
	"kalium",
	"kalk",
	"kalkalah",
	"kalkarium",
	"kalkasar",
	"kalkausar",
	"kalkopirit",
	"kalkosium",
	"kalkulasi",
	"kalkulator",
	"kalkulus",
	"kalkun",
	"kalo",
	"kalomel",
	"kalong",
	"kalongwese",
	"kalongwewe",
	"kalor",
	"kalori",
	"kalorimeter",
	"kalorimetri",
	"kalorisitas",
	"kalowatan",
	"kalpataru",
	"kalsedon",
	"kalsiferol",
	"kalsifikasi",
	"kalsinasi",
	"kalsit",
	"kalsium",
	"kalui",
	"kalumet",
	"kalung",
	"kalus",
	"kalut",
	"kam",
	"kama",
	"kamajaya",
	"kamal",
	"kamalir",
	"kamantuhu",
	"kamar",
	"kamarban",
	"kamariah",
	"kamas",
	"kamat",
	"kamba",
	"kamban",
	"kambang",
	"kambar",
	"kambeh",
	"kambeli",
	"kamber",
	"kambi",
	"kambing",
	"kambium",
	"kambrik",
	"kambrium",
	"kambuh",
	"kambus",
	"kambut",
	"kamelia",
	"kamera",
	"kamerad",
	"kamfana",
	"kamfer",
	"kamfor",
	"kamhar",
	"kami",
	"kamikaze",
	"kamil",
	"kamilmukamil",
	"kamir",
	"kamis",
	"kamisa",
	"kamisol",
	"kamisosolen",
	"kamit",
	"kamitua",
	"kamka",
	"kamkama",
	"kamomil",
	"kamp",
	"kampa",
	"kampai",
	"kampalogi",
	"kampanologi",
	"kampanye",
	"kampas",
	"kampemen",
	"kamper",
	"kampil",
	"kamping",
	"kampiun",
	"kampos",
	"kampret",
	"kampuh",
	"kampul",
	"kampung",
	"kampus",
	"kamrad",
	"kamsen",
	"kamsia",
	"kamu",
	"kamuflase",
	"kamus",
	"kan",
	"kana",
	"kanaah",
	"kanaat",
	"kanabis",
	"kanak-kanak",
	"kanal",
	"kanalisasi",
	"kanan",
	"kanang",
	"kancah",
	"kancap",
	"kanceh",
	"kancera",
	"kancil",
	"kancing",
	"kancung",
	"kancut",
	"kanda",
	"kandang",
	"kandar",
	"kandas",
	"kandel",
	"kandela",
	"kandi",
	"kandidat",
	"kandidiasis",
	"kandil",
	"kandis",
	"kandul",
	"kandung",
	"kandut",
	"kane",
	"kang",
	"kangar",
	"kangen",
	"kangka",
	"kangkang",
	"kangkung",
	"kangmas",
	"kangsa",
	"kangsar",
	"kangtau",
	"kanguru",
	"kanibal",
	"kanibalisasi",
	"kanibalisme",
	"kanigara",
	"kanilem",
	"kanina",
	"kanisah",
	"kanjal",
	"kanjang",
	"kanjar",
	"kanjeng",
	"kanji",
	"kanker",
	"kano",
	"kanoman",
	"kanon",
	"kanonir",
	"kanonis",
	"kanopi",
	"kans",
	"kansel",
	"kanselari",
	"kanselir",
	"kanser",
	"kanstof",
	"kanta",
	"kantan",
	"kantang",
	"kantar",
	"kantata",
	"kanti",
	"kantih",
	"kantil",
	"kantilever",
	"kantin",
	"kanto",
	"kantong",
	"kantor",
	"kantuk",
	"kantung",
	"kanun",
	"kanvas",
	"kanya",
	"kanyon",
	"kaok",
	"kaolin",
	"kaon",
	"kaos",
	"kaotis",
	"kap",
	"kapa",
	"kapabel",
	"kapah",
	"kapai",
	"kapak",
	"kapal",
	"kapan",
	"kapang",
	"kapar",
	"kaparinyo",
	"kapas",
	"kapasitans",
	"kapasitas",
	"kapasitor",
	"kapat",
	"kapel",
	"kapela",
	"kaper",
	"kapi",
	"kapilaritas",
	"kapiler",
	"kapiran",
	"kapis",
	"kapisa",
	"kapit",
	"kapita",
	"kapital",
	"kapitalis",
	"kapitalisme",
	"kapitalistis",
	"kapitan",
	"kapitol",
	"kapitulasi",
	"kapitulum",
	"kaplares",
	"kaplars",
	"kapling",
	"kaplok",
	"kapok",
	"kapon",
	"kaporit",
	"kappa",
	"kaprah",
	"kapri",
	"kaprikornus",
	"kapsalon",
	"kapsel",
	"kapstan",
	"kapster",
	"kapstok",
	"kapsul",
	"kapten",
	"kapu",
	"kapuk",
	"kapung",
	"kapur",
	"kapurancang",
	"kara",
	"karabin",
	"karaeng",
	"karaf",
	"karagen",
	"karah",
	"karahah",
	"karakter",
	"karakterisasi",
	"karakteristik",
	"karakterologi",
	"karam",
	"karamba",
	"karambol",
	"karamel",
	"karang",
	"karangkitri",
	"karangwulu",
	"karantina",
	"karaoke",
	"karap",
	"karapaks",
	"karapan",
	"karar",
	"karas",
	"karat",
	"karate",
	"karategi",
	"karateka",
	"karau",
	"karavan",
	"karawitan",
	"karbiah",
	"karbid",
	"karbida",
	"karbohidrase",
	"karbohidrat",
	"karboksil",
	"karbol",
	"karbolat",
	"karbolik",
	"karbon",
	"karbonado",
	"karbonan",
	"karbonat",
	"karbonil",
	"karbonisasi",
	"karborundum",
	"karburasi",
	"karburator",
	"karcis",
	"kardamunggu",
	"kardan",
	"kardia",
	"kardiak",
	"kardigan",
	"kardil",
	"kardinal",
	"kardiograf",
	"kardiografi",
	"kardiogram",
	"kardiolog",
	"kardiologi",
	"kardiovaskular",
	"karditis",
	"kardus",
	"karel",
	"karembong",
	"karena",
	"karengga",
	"kareseh-peseh",
	"karet",
	"kargo",
	"kari",
	"karib",
	"karibu",
	"karier",
	"karies",
	"karih",
	"karikatur",
	"karikatural",
	"karikaturis",
	"karil",
	"karim",
	"karimah",
	"karina",
	"karinasi",
	"karisma",
	"karismatik",
	"karismatis",
	"karitas",
	"karitatif",
	"karkas",
	"karkata",
	"karkum",
	"karkun",
	"karma",
	"karmina",
	"karminatif",
	"karnaval",
	"karnivor",
	"karosel",
	"karoseri",
	"karotena",
	"karotenoid",
	"karotis",
	"karpai",
	"karpel",
	"karper",
	"karpet",
	"karpopodil",
	"karsa",
	"karsinogen",
	"karsinogenik",
	"karsinologi",
	"karsinoma",
	"karst",
	"karteker",
	"kartel",
	"karti",
	"kartika",
	"kartilago",
	"kartografi",
	"kartogram",
	"karton",
	"kartonase",
	"kartotek",
	"kartu",
	"kartun",
	"kartunis",
	"karu",
	"karuan",
	"karuhun",
	"karun",
	"karung",
	"karunia",
	"karunkel",
	"karusi",
	"karut",
	"karya",
	"karyah",
	"karyasiswa",
	"karyat",
	"karyawisata",
	"kas",
	"kasa",
	"kasab",
	"kasabandiah",
	"kasad",
	"kasah",
	"kasai",
	"kasak-kusuk",
	"kasam",
	"kasang",
	"kasap",
	"kasar",
	"kasasi",
	"kasatmata",
	"kasau",
	"kasdu",
	"kasein",
	"kasemat",
	"kasemek",
	"kasep",
	"kaserin",
	"kaserol",
	"kaset",
	"kasi",
	"kasid",
	"kasidah",
	"kasih",
	"kasihan",
	"kasiku",
	"kasim",
	"kasima",
	"kasino",
	"kasintu",
	"kasip",
	"kasir",
	"kasiterit",
	"kaskade",
	"kaskaya",
	"kasmaran",
	"kasmir",
	"kasmutik",
	"kaspe",
	"kasrah",
	"kasregister",
	"kassia",
	"kasta",
	"kastal",
	"kastanyet",
	"kastel",
	"kasti",
	"kastrasi",
	"kastroli",
	"kasturi",
	"kasual",
	"kasualisme",
	"kasualitas",
	"kasuari",
	"kasuarina",
	"kasui",
	"kasuis",
	"kasuistik",
	"kasur",
	"kasus",
	"kasut",
	"kaswah",
	"kata",
	"katabalik",
	"katabatik",
	"katabolisme",
	"katadrom",
	"katafalk",
	"katafora",
	"katah",
	"katai",
	"katak",
	"kataka",
	"katakana",
	"kataklisme",
	"katakomba",
	"katalase",
	"katalepsi",
	"katalina",
	"katalis",
	"katalisasi",
	"katalisator",
	"katalisis",
	"katalisit",
	"katalog",
	"katalogisasi",
	"katalogus",
	"katamaran",
	"katang-katang",
	"katapel",
	"katar",
	"katarak",
	"katarsis",
	"katartik",
	"katastrofe",
	"katatoni",
	"katatonia",
	"katawi",
	"kate",
	"katebelece",
	"katedral",
	"kategori",
	"kategorial",
	"kategoris",
	"kategorisasi",
	"katek",
	"katekese",
	"katekis",
	"katekisasi",
	"katekismus",
	"katekumen",
	"katel",
	"katelum",
	"kater",
	"katering",
	"kates",
	"kateter",
	"katetometer",
	"kati",
	"katib",
	"katibin",
	"katifah",
	"katifan",
	"katik",
	"katil",
	"katimaha",
	"katimumul",
	"kation",
	"katir",
	"katirah",
	"katiti",
	"katode",
	"katok",
	"katolik",
	"katrol",
	"katuk",
	"katul",
	"katun",
	"katung",
	"katup",
	"katut",
	"katvanga",
	"katwal",
	"kau",
	"kaukab",
	"kaukasoid",
	"kaukus",
	"kaul",
	"kaula",
	"kauli",
	"kaum",
	"kaung",
	"kaupui",
	"kaus",
	"kausa",
	"kausal",
	"kausalitas",
	"kausatif",
	"kaustik",
	"kaustiksoda",
	"kaut",
	"kavaleri",
	"kaveling",
	"kaver",
	"kaviar",
	"kawa-kawa",
	"kawah",
	"kawak",
	"kawal",
	"kawan",
	"kawang",
	"kawanua",
	"kawasan",
	"kawat",
	"kawi",
	"kawih",
	"kawijayan",
	"kawin",
	"kawista",
	"kawruh",
	"kawuk",
	"kawula",
	"kawung",
	"kaya",
	"kayai",
	"kayak",
	"kayambang",
	"kayan",
	"kayang",
	"kayangan",
	"kayau",
	"kayu",
	"kayuh",
	"kayun",
	"kebab",
	"kebabal",
	"kebah",
	"kebaji",
	"kebal",
	"kebam",
	"kebas",
	"kebat",
	"kebaya",
	"kebayan",
	"kebel",
	"kebelet",
	"kebembem",
	"kebin",
	"kebiri",
	"keblangsak",
	"keblinger",
	"kebo",
	"kebon",
	"kebuk",
	"kebul",
	"kebuli",
	"kebun",
	"kebur",
	"keburu",
	"kebut",
	"kebyar",
	"kecai",
	"kecak",
	"kecalingan",
	"kecam",
	"kecambah",
	"kecamuk",
	"kecandan",
	"kecantol",
	"kecap",
	"kecapi",
	"kecar",
	"kece",
	"kecebong",
	"kecek",
	"kecele",
	"keceng",
	"kecepek",
	"kecer",
	"kecewa",
	"keci",
	"keciak",
	"kecibak",
	"kecibeling",
	"kecik",
	"kecil",
	"kecimik",
	"kecimpring",
	"kecimpung",
	"kecimus",
	"kecipak",
	"kecipir",
	"kecipuk",
	"kecit",
	"keciut",
	"kecoak",
	"kecoh",
	"kecombrang",
	"kecong",
	"kecrek",
	"kecu",
	"kecuali",
	"kecubung",
	"kecuh-kecah",
	"kecumik",
	"kecundang",
	"kecup",
	"kecut",
	"kedabu",
	"kedadak",
	"kedah",
	"kedai",
	"kedak",
	"kedal",
	"kedaluwarsa",
	"kedam",
	"kedang",
	"kedangkai",
	"kedangkan",
	"kedangsa",
	"kedap",
	"kedasih",
	"kedau",
	"kedaung",
	"kedayan",
	"kedebong",
	"kedek",
	"kedekai",
	"kedeki",
	"kedekik",
	"kedekut",
	"kedelai",
	"kedele",
	"kedemat",
	"kedemplung",
	"kedempung",
	"kedengkang",
	"kedengkik",
	"keder",
	"kedera",
	"kederang",
	"kedewaga",
	"kedi",
	"kedidi",
	"kedik",
	"kedikit",
	"kedip",
	"kedodoran",
	"kedok",
	"kedondong",
	"kedongdong",
	"kedongkok",
	"kedot",
	"keduduk",
	"keduk",
	"kedul",
	"kedumung",
	"kedung",
	"kedut",
	"keferdom",
	"kehel",
	"keibodan",
	"kejai",
	"kejam",
	"kejamas",
	"kejan",
	"kejang",
	"kejap",
	"kejar",
	"kejat",
	"kejawen",
	"kejen",
	"kejer",
	"keji",
	"kejibeling",
	"kejip",
	"kejolak",
	"kejora",
	"keju",
	"kejuju",
	"kejur",
	"kejut",
	"kek",
	"kekah",
	"kekal",
	"kekam",
	"kekandi",
	"kekang",
	"kekapas",
	"kekar",
	"kekara",
	"kekas",
	"kekat",
	"kekau",
	"kekawin",
	"kekeba",
	"kekebik",
	"kekeh",
	"kekek",
	"kekel",
	"kekemben",
	"kekep",
	"keker",
	"keki",
	"kekitir",
	"kekok",
	"kekol",
	"kekrupukan",
	"kelab",
	"kelabak",
	"kelabang",
	"kelabat",
	"kelabau",
	"kelabu",
	"keladak",
	"keladan",
	"keladau",
	"keladi",
	"kelah",
	"kelahi",
	"kelai",
	"kelak",
	"kelak-kelik",
	"kelak-keluk",
	"kelakah",
	"kelakanji",
	"kelakar",
	"kelalang",
	"kelam",
	"kelamai",
	"kelamarin",
	"kelambai",
	"kelambir",
	"kelambit",
	"kelambu",
	"kelambur",
	"kelamin",
	"kelamkari",
	"kelana",
	"kelandera",
	"kelang",
	"kelang-kelok",
	"kelangkan",
	"kelangkang",
	"kelanjar",
	"kelantang",
	"kelap",
	"kelapa",
	"kelar",
	"kelara",
	"kelarah",
	"kelarai",
	"kelaras",
	"kelari",
	"kelas",
	"kelasa",
	"kelasah",
	"kelasak",
	"kelasi",
	"kelat",
	"kelati",
	"kelawan",
	"kelayan",
	"kelayang",
	"kelayu",
	"kelder",
	"kelebat",
	"kelebek",
	"kelebet",
	"kelebu",
	"kelebuk",
	"kelebut",
	"keledai",
	"keledang",
	"keledar",
	"keledek",
	"kelejat",
	"kelek",
	"kelekap",
	"kelekatu",
	"kelelap",
	"kelelawar",
	"kelelesa",
	"kelelot",
	"kelemak-kelemek",
	"kelemantang",
	"kelemayar",
	"kelemayuh",
	"kelembahang",
	"kelembai",
	"kelembak",
	"kelemban",
	"kelembuai",
	"kelempai",
	"kelemping",
	"kelemton",
	"kelemumur",
	"kelemur",
	"kelencer",
	"kelendara",
	"keleneng",
	"kelengar",
	"kelenggara",
	"kelengkeng",
	"kelengkiak",
	"kelening",
	"kelenjar",
	"kelentang",
	"kelenteng",
	"kelentik",
	"kelenting",
	"kelentit",
	"kelentong",
	"kelentung",
	"kelenung",
	"kelenyit",
	"kelep",
	"kelepai",
	"kelepak",
	"kelepat",
	"kelepek",
	"kelepet",
	"kelepik",
	"kelepir",
	"kelepit",
	"kelepuk",
	"kelepur",
	"keler",
	"kelereng",
	"kelesa",
	"kelesah",
	"keleseh",
	"kelesek",
	"kelesot",
	"keletah",
	"keletak",
	"keletang",
	"keletar",
	"keleti",
	"keletik",
	"keletuk",
	"keletung",
	"kelewang",
	"keli",
	"kelian",
	"keliar",
	"kelibang",
	"kelibat",
	"kelicap",
	"kelici",
	"kelicik",
	"kelih",
	"kelijak",
	"kelik",
	"kelika",
	"kelikah",
	"kelikat",
	"keliki",
	"kelikih",
	"kelikik",
	"kelikir",
	"keliling",
	"kelilip",
	"kelim",
	"kelimat",
	"kelimpanan",
	"kelimpungan",
	"kelimun",
	"kelimut",
	"kelinci",
	"kelincir",
	"kelindan",
	"keling",
	"kelingking",
	"kelingsir",
	"kelining",
	"kelinjat",
	"kelintang",
	"kelintar",
	"kelinting",
	"kelip",
	"kelipat",
	"kelir",
	"keliru",
	"kelis",
	"kelisera",
	"kelisere",
	"kelit",
	"keliti",
	"kelitik",
	"keliwon",
	"kelobot",
	"kelobotisme",
	"kelocak",
	"keloceh",
	"kelodan",
	"keloelektrovolt",
	"keloid",
	"kelojot",
	"kelok",
	"kelokak",
	"kelola",
	"kelolong",
	"kelom",
	"kelombeng",
	"kelompang",
	"kelompen",
	"kelompok",
	"kelon",
	"keloneng",
	"kelonet",
	"kelong",
	"kelongkong",
	"kelongsong",
	"kelontang",
	"kelontang-kelantung",
	"kelontong",
	"kelonyo",
	"kelop",
	"kelopak",
	"kelor",
	"kelorak",
	"kelos",
	"kelosok",
	"kelotok",
	"keloyak",
	"keloyang",
	"keloyor",
	"kelp",
	"kelu",
	"kelua",
	"keluai",
	"keluak",
	"keluan",
	"keluang",
	"keluangsa",
	"keluar",
	"keluarga",
	"kelubak",
	"kelubi",
	"keluburan",
	"keluh",
	"kelui",
	"keluih",
	"keluk",
	"kelukup",
	"kelukur",
	"keluli",
	"kelulu",
	"kelulus",
	"kelulut",
	"kelumit",
	"kelumpang",
	"kelumun",
	"kelun",
	"keluna",
	"kelunak",
	"kelung",
	"kelupas",
	"kelupur",
	"keluron",
	"keluruk",
	"kelurut",
	"kelus",
	"kelusuh-kelasah",
	"kelut",
	"kelutum",
	"keluwung",
	"keluyuk",
	"keluyur",
	"kemah",
	"kemal",
	"kemala",
	"kemam",
	"kemamang",
	"keman",
	"kemandang",
	"kemandoran",
	"kemang",
	"kemangi",
	"kemarau",
	"kemari",
	"kemarin",
	"kemaruk",
	"kemas",
	"kemat",
	"kematu",
	"kematus",
	"kemayu",
	"kembal",
	"kembali",
	"kemban",
	"kembang",
	"kembar",
	"kembara",
	"kembatu",
	"kembayat",
	"kembeng",
	"kembera",
	"kembili",
	"kemboja",
	"kembol",
	"kembu",
	"kembuk",
	"kembung",
	"kembur",
	"kembut",
	"kemeja",
	"kemejan",
	"kemekmek",
	"kemelut",
	"kemenakan",
	"kemendalam",
	"kemendang",
	"kemendur",
	"kementam",
	"kemenyan",
	"kemerakan",
	"kemesu",
	"kemi",
	"kemih",
	"kemik",
	"kemilap",
	"kemiluminesens",
	"kemiri",
	"kemit",
	"kemlaka",
	"kemlandingan",
	"kemloko",
	"kemoceng",
	"kemokinesis",
	"kemon",
	"kemopsikiatri",
	"kemoterapi",
	"kempa",
	"kempal",
	"kempang",
	"kempas",
	"kempek",
	"kempes",
	"kempetai",
	"kempis",
	"kempit",
	"kemplang",
	"kempot",
	"kempu",
	"kempuh",
	"kempul",
	"kempunan",
	"kempung",
	"kemput",
	"kempyang",
	"kemu",
	"kemucing",
	"kemudi",
	"kemudian",
	"kemudu",
	"kemukus",
	"kemul",
	"kemumu",
	"kemuncak",
	"kemuncup",
	"kemundir",
	"kemung",
	"kemungkus",
	"kemuning",
	"kemunting",
	"kemurgi",
	"kemut",
	"kemutul",
	"ken",
	"kena",
	"kenaf",
	"kenal",
	"kenan",
	"kenang",
	"kenanga",
	"kenap",
	"kenapa",
	"kenapang",
	"kenari",
	"kenas",
	"kencan",
	"kencana",
	"kencang",
	"kencar",
	"kenceng",
	"kencing",
	"kencit",
	"kencong",
	"kencrang-kencring",
	"kencreng",
	"kencung",
	"kencur",
	"kendaga",
	"kendal",
	"kendala",
	"kendali",
	"kendana",
	"kendang",
	"kendara",
	"kendati",
	"kendayakan",
	"kendeka",
	"kenderi",
	"kendi",
	"kendil",
	"kendit",
	"kendo",
	"kendong",
	"kenduduk",
	"kendung",
	"kendungan",
	"kendur",
	"kenduri",
	"kenek",
	"keneker",
	"kenem",
	"kenematik",
	"kenes",
	"keng",
	"kengkang",
	"kengkeng",
	"kenidai",
	"kenikir",
	"kening",
	"kenohong",
	"kenong",
	"kenop",
	"kensel",
	"kental",
	"kentang",
	"kentar",
	"kentara",
	"kenteng",
	"kentrung",
	"kentung",
	"kentut",
	"kenur",
	"kenya",
	"kenyal",
	"kenyam",
	"kenyang",
	"kenyat",
	"kenyat-kenyit",
	"kenyet-kenyut",
	"kenyi",
	"kenyih",
	"kenyir",
	"kenyit",
	"kenyut",
	"keok",
	"keong",
	"kep",
	"kepada",
	"kepah",
	"kepai",
	"kepak",
	"kepal",
	"kepala",
	"kepalang",
	"kepam",
	"kepang",
	"kepar",
	"keparat",
	"kepayang",
	"kepecong",
	"kepek",
	"kepel",
	"kepencong",
	"kepeng",
	"keper",
	"keperancak",
	"kepet",
	"kepetang",
	"kepialu",
	"kepiat",
	"kepik",
	"kepil",
	"kepincut",
	"kepinding",
	"keping",
	"kepingin",
	"kepinis",
	"kepinjal",
	"kepiri",
	"kepis",
	"kepit",
	"kepiting",
	"keplak",
	"kepleset",
	"keplok",
	"kepodang",
	"kepoh",
	"kepol",
	"kepompong",
	"keponakan",
	"kepot",
	"keprak",
	"keprek",
	"kepret",
	"kepris",
	"kepruk",
	"kepuh",
	"kepuk",
	"kepul",
	"kepulaga",
	"kepundan",
	"kepundung",
	"kepung",
	"kepurun",
	"keputren",
	"kepuyuk",
	"kera",
	"kerabang",
	"kerabat",
	"kerabik",
	"kerabu",
	"keracak",
	"keracap",
	"keraeng",
	"kerah",
	"kerahi",
	"kerai",
	"kerajang",
	"kerajat",
	"kerak",
	"kerakah",
	"kerakal",
	"kerakap",
	"kerakeling",
	"keram",
	"kerama",
	"keraman",
	"keramas",
	"keramat",
	"keramba",
	"kerambil",
	"kerambit",
	"keramboja",
	"keramik",
	"keramikus",
	"kerampagi",
	"kerampang",
	"keramunting",
	"keran",
	"kerancang",
	"keranda",
	"kerang",
	"kerang-keroh",
	"kerangas",
	"kerangka",
	"kerangkai",
	"kerangkeng",
	"kerani",
	"keranjang",
	"keranjat",
	"keranji",
	"keranjingan",
	"keranta",
	"kerantong",
	"kerap",
	"kerapu",
	"keras",
	"kerasan",
	"kerat",
	"keratabasa",
	"keratin",
	"keratitis",
	"keratoelastin",
	"keraton",
	"kerau",
	"kerawai",
	"kerawak",
	"kerawang",
	"kerawat",
	"kerawit",
	"kerbang",
	"kerbat",
	"kerbau",
	"kerbuk",
	"kercap-kercip",
	"kercap-kercup",
	"kercing",
	"kercit",
	"kercup",
	"kercut",
	"kerdak",
	"kerdam",
	"kerdil",
	"kerdom",
	"kerdut",
	"kere",
	"kerebok",
	"kereceng",
	"kerecik",
	"keredak",
	"keredep",
	"keredok",
	"keredong",
	"kerek",
	"kereket",
	"kerekot",
	"kerekut",
	"keremi",
	"keremot",
	"kerempagi",
	"kerempeng",
	"kerempung",
	"keremus",
	"keren",
	"kerencang",
	"kerencung",
	"kerendang",
	"kereneng",
	"kereng",
	"kerengga",
	"kerenggamunggu",
	"kerengkam",
	"kerengkiang",
	"kerentam",
	"kerentang",
	"kerenting",
	"kerenyam",
	"kerenyot",
	"kerepas",
	"kerepek",
	"kerepes",
	"kerepot",
	"kerepyak",
	"kerese",
	"kerese-pese",
	"keresek",
	"kereseng",
	"keresot",
	"kereta",
	"keretan",
	"keretek",
	"keretot",
	"keretut",
	"kereweng",
	"keri",
	"keriang-keriut",
	"keriap",
	"kerias",
	"keriau",
	"kerical",
	"kericau",
	"keridas",
	"keridik",
	"kerih",
	"kerik",
	"kerikal",
	"kerikam",
	"kerikil",
	"kerikit",
	"kerimut",
	"kerinan",
	"kerincing",
	"kerinding",
	"kering",
	"keringat",
	"keriningan",
	"kerinjal",
	"kerinjang",
	"kerinjing",
	"kerintil",
	"kerinting",
	"kerip",
	"keripik",
	"keriput",
	"keris",
	"kerisi",
	"kerisik",
	"kerising",
	"kerisut",
	"kerit",
	"keritik",
	"keriting",
	"keriuk",
	"keriut",
	"kerja",
	"kerjang",
	"kerjantara",
	"kerjap",
	"kerkah",
	"kerkak",
	"kerkap",
	"kerkau",
	"kerkop",
	"kerkup",
	"kerlap",
	"kerling",
	"kerlip",
	"kermak",
	"kermanici",
	"kermi",
	"kernai",
	"kerneli",
	"kernet",
	"kernu",
	"kernyat-kernyut",
	"kernyau",
	"kernyih",
	"kernying",
	"kernyit",
	"kernyut",
	"kero",
	"kerobak",
	"kerobat",
	"kerobek",
	"keroco",
	"kerocok",
	"kerogen",
	"keroh",
	"kerok",
	"kerokot",
	"keromong",
	"keron",
	"keroncang",
	"keroncong",
	"keroncor",
	"kerong",
	"kerongkongan",
	"kerongsang",
	"kerontang",
	"kerop",
	"keropak",
	"keropas-keropis",
	"keropeng",
	"keropok",
	"keropong",
	"keropos",
	"kerosak",
	"kerosek",
	"kerosi",
	"kerosin",
	"kerosok",
	"kerosong",
	"kerot",
	"kerotak",
	"kerotot",
	"keroyok",
	"kerpai",
	"kerpak",
	"kerpas",
	"kerpubesi",
	"kerpuk",
	"kerpus",
	"kers",
	"kersai",
	"kersak",
	"kersang",
	"kersani",
	"kersen",
	"kersik",
	"kersuk",
	"kertaaji",
	"kertah",
	"kertak",
	"kertang",
	"kertap",
	"kertas",
	"kertau",
	"kertuk",
	"kertus",
	"keruan",
	"kerubim",
	"kerubin",
	"kerubung",
	"kerubut",
	"kerucil",
	"kerucut",
	"kerudung",
	"keruh",
	"keruing",
	"keruit",
	"keruk",
	"kerukut",
	"kerul",
	"keruma",
	"kerumit",
	"kerumuk",
	"kerumun",
	"kerumus",
	"kerun",
	"kerung",
	"kerunkel",
	"keruntang-pungkang",
	"kerunting",
	"keruntung",
	"kerunyut",
	"kerup",
	"kerupuk",
	"kerut",
	"kerutak",
	"kerutup",
	"keruyuk",
	"kes",
	"kesah",
	"kesak",
	"kesal",
	"kesam",
	"kesambet",
	"kesambi",
	"kesan",
	"kesana",
	"kesandung",
	"kesang",
	"kesangsang",
	"kesap-kesip",
	"kesasar",
	"kesat",
	"kesatria",
	"kesek",
	"kesel",
	"keselak",
	"keseleo",
	"kesemek",
	"kesengsem",
	"keseran",
	"keseser",
	"keset",
	"kesi",
	"kesiap",
	"kesik",
	"kesima",
	"kesimbukan",
	"kesini",
	"kesip",
	"kesitu",
	"kesiur",
	"keskul",
	"kesmaran",
	"kesohor",
	"kesomplok",
	"kesongo",
	"kesot",
	"kesrakat",
	"kesting",
	"kesturi",
	"kesu-kesi",
	"kesuh-kesih",
	"kesuk-kesik",
	"kesuma",
	"kesumat",
	"kesumba",
	"kesup",
	"kesusu",
	"kesut",
	"keta",
	"ketaban",
	"ketai",
	"ketak",
	"ketakar",
	"ketakong",
	"ketal",
	"ketam",
	"ketambak",
	"ketampi",
	"ketan",
	"ketang",
	"ketap",
	"ketapak",
	"ketapang",
	"ketapek",
	"ketar",
	"ketarap",
	"ketat",
	"ketaton",
	"ketawa",
	"ketaya",
	"ketayap",
	"ketegar",
	"ketek",
	"ketel",
	"ketela",
	"ketemu",
	"keten",
	"ketena",
	"keteng",
	"ketepel",
	"ketepeng",
	"keter",
	"ketes",
	"keteter",
	"ketgat",
	"keti",
	"ketiak",
	"ketial",
	"ketiap",
	"ketiau",
	"ketiban",
	"ketiding",
	"ketik",
	"ketika",
	"ketil",
	"ketilang",
	"ketimbang",
	"ketimbis",
	"ketimbul",
	"ketimbung",
	"keting",
	"ketinjau",
	"ketinting",
	"ketip",
	"ketiplak",
	"ketipung",
	"ketirah",
	"ketis",
	"ketitir",
	"ketlingsut",
	"ketogenesis",
	"ketok",
	"ketola",
	"ketombe",
	"keton",
	"ketonemia",
	"ketonggeng",
	"ketonuria",
	"ketopong",
	"ketoprak",
	"ketosa",
	"ketrek",
	"ketu",
	"ketua",
	"ketuat",
	"ketuban",
	"ketuir",
	"ketuk",
	"ketul",
	"ketumbar",
	"ketumbi",
	"ketumbit",
	"ketumbu",
	"ketumpang",
	"ketun",
	"ketungging",
	"ketup",
	"ketupa",
	"ketupat",
	"ketupuk",
	"ketur",
	"ketus",
	"kev",
	"kewalahan",
	"keweni",
	"kewer",
	"kewes",
	"kewuh",
	"kha",
	"khabis",
	"khadam",
	"khadim",
	"khafi",
	"khair",
	"khairat",
	"khalas",
	"khalayak",
	"khali",
	"khalifah",
	"khalifatulah",
	"khalifatullah",
	"khalik",
	"khalikah",
	"khalikul",
	"khalil",
	"khalilullah",
	"khalis",
	"khalwat",
	"khamar",
	"khamir",
	"khamsin",
	"khamzab",
	"khanjar",
	"kharab",
	"khas",
	"khasi",
	"khasiat",
	"khat",
	"khatam",
	"khatib",
	"khatifah",
	"khatimah",
	"khatulistiwa",
	"khauf",
	"khaul",
	"khawas",
	"khawasulkhawas",
	"khawatir",
	"khayal",
	"khayali",
	"khazanah",
	"khi",
	"khianat",
	"khiar",
	"khidaah",
	"khidmah",
	"khidmat",
	"khilaf",
	"khilafiah",
	"khinzir",
	"khisit",
	"khitah",
	"khitan",
	"khitbah",
	"khizanatulkitab",
	"khoja",
	"khojah",
	"khotbah",
	"khuduk",
	"khulafa",
	"khuldi",
	"khuluk",
	"khunsa",
	"khurafat",
	"khusuf",
	"khusus",
	"khusyuk",
	"kia",
	"kiah",
	"kiai",
	"kiak",
	"kial",
	"kiam",
	"kiamat",
	"kiambang",
	"kian",
	"kiang-kiut",
	"kiani",
	"kiap",
	"kiar",
	"kiara",
	"kias",
	"kiasi",
	"kiasmus",
	"kiat",
	"kiaupau",
	"kibang",
	"kibar",
	"kibas",
	"kibernetika",
	"kibir",
	"kiblat",
	"kiblik",
	"kibriah",
	"kibul",
	"kicang-kecoh",
	"kicang-kicu",
	"kicau",
	"kici",
	"kicik",
	"kicu",
	"kicuh",
	"kicut",
	"kida-kida",
	"kidal",
	"kidam",
	"kidang",
	"kidar",
	"kidul",
	"kidung",
	"kifayah",
	"kifoskaliose",
	"kifoskaliosis",
	"kihanat",
	"kijai",
	"kijang",
	"kijil",
	"kijing",
	"kikih",
	"kikik",
	"kikil",
	"kikir",
	"kikis",
	"kikitir",
	"kikuk",
	"kikus",
	"kila",
	"kilah",
	"kilai",
	"kilan",
	"kilang",
	"kilap",
	"kilar",
	"kilas",
	"kilat",
	"kilau",
	"kili",
	"kilik",
	"kilir",
	"kiln",
	"kilo",
	"kilogram",
	"kilohertz",
	"kilokalori",
	"kiloliter",
	"kilometer",
	"kiloton",
	"kilovolt",
	"kilowatt",
	"kilowattjam",
	"kilus",
	"kim",
	"kima",
	"kimah",
	"kimantu",
	"kimar",
	"kimbah",
	"kimbang",
	"kimbul",
	"kimia",
	"kimiawi",
	"kimkha",
	"kimlo",
	"kimo",
	"kimograf",
	"kimono",
	"kimpal",
	"kimpul",
	"kimpus",
	"kimput",
	"kimus",
	"kina",
	"kinang",
	"kinantan",
	"kinanti",
	"kinasa",
	"kinasih",
	"kinca",
	"kincah",
	"kincak",
	"kincang",
	"kincau",
	"kincir",
	"kincit",
	"kincung",
	"kincup",
	"kindap",
	"kinematika",
	"kinematograf",
	"kinesika",
	"kinesimeter",
	"kineskop",
	"kinestesia",
	"kinestesiometer",
	"kinestesis",
	"kinetik",
	"kinetika",
	"kinetokardiografi",
	"kingking",
	"kingkip",
	"kingkit",
	"kingkong",
	"kini",
	"kinine",
	"kinja",
	"kinjat",
	"kinjeng",
	"kinred",
	"kintaka",
	"kintal",
	"kinte",
	"kintil",
	"kinyang",
	"kio",
	"kios",
	"kipa",
	"kipai",
	"kipang",
	"kipas",
	"kiper",
	"kiprah",
	"kiprat",
	"kipsiau",
	"kipu",
	"kir",
	"kira",
	"kiraah",
	"kiraat",
	"kirab",
	"kirai",
	"kiramat",
	"kiran",
	"kirana",
	"kirap",
	"kiras",
	"kirau",
	"kirbat",
	"kiri",
	"kirik",
	"kirim",
	"kirinyu",
	"kirip",
	"kiris",
	"kirita",
	"kirmizi",
	"kiru",
	"kiruh",
	"kirung",
	"kisa",
	"kisah",
	"kisai",
	"kisar",
	"kisas",
	"kisat",
	"kisi",
	"kisik",
	"kismat",
	"kismis",
	"kisruh",
	"kista",
	"kisut",
	"kiswah",
	"kit",
	"kita",
	"kitab",
	"kitabulah",
	"kitang",
	"kitar",
	"kitik",
	"kitin",
	"kiting",
	"kitir",
	"kitorang",
	"kitri",
	"kits",
	"kiu",
	"kiuk",
	"kiwari",
	"kiwi",
	"kizib",
	"klaim",
	"klakklik",
	"klakson",
	"klamidospora",
	"klan",
	"klandestin",
	"klangenan",
	"klante",
	"klarifikasi",
	"klarinet",
	"klasemen",
	"klasifikasi",
	"klasik",
	"klasikal",
	"klasis",
	"klasisisme",
	"klausa",
	"klaustrofobia",
	"klaustrum",
	"klausul",
	"klaver",
	"klavikor",
	"klavikula",
	"klaviola",
	"kleder",
	"kleidotomi",
	"kleistogami",
	"klem",
	"klemensi",
	"klen",
	"klenengan",
	"klengkeng",
	"klenik",
	"klenteng",
	"klep",
	"klepon",
	"klepsidra",
	"kleptofobi",
	"kleptoman",
	"kleptomania",
	"kleptomaniak",
	"klerek",
	"klerikal",
	"klerikus",
	"klerus",
	"klien",
	"klik",
	"kliker",
	"klimaks",
	"klimakterium",
	"klimaktorium",
	"klimatografi",
	"klimatolog",
	"klimatologi",
	"klimis",
	"klimograf",
	"klimosekuen",
	"klimoskop",
	"klin",
	"klinik",
	"klining",
	"klinis",
	"klinisi",
	"klinometer",
	"klip",
	"kliping",
	"klir",
	"kliring",
	"klise",
	"klistron",
	"klitelum",
	"klitik",
	"klitoris",
	"kliwon",
	"kliyengan",
	"kloaka",
	"klon",
	"klona",
	"kloning",
	"klonograf",
	"klonus",
	"klop",
	"klor",
	"kloral",
	"kloramina",
	"klorat",
	"klorida",
	"kloridimeter",
	"klorin",
	"klorinasi",
	"klorit",
	"klorobenzena",
	"klorofil",
	"kloroform",
	"kloroformat",
	"klorokuin",
	"klorolignin",
	"kloroplas",
	"kloroprena",
	"klorosis",
	"kloset",
	"klub",
	"kluntang-kluntung",
	"klusium",
	"knalpot",
	"knop",
	"knot",
	"koa",
	"koagel",
	"koagregasi",
	"koagulan",
	"koagulasi",
	"koak",
	"koaksi",
	"koaksial",
	"koala",
	"koalisi",
	"koana",
	"koar",
	"kobah",
	"kobak",
	"kobalamin",
	"kobalt",
	"kobar",
	"kober",
	"koboi",
	"koboisme",
	"kobok",
	"kobol",
	"kobongan",
	"kobra",
	"kocah-kacih",
	"kocak",
	"kocar-kacir",
	"kocek",
	"koci",
	"kocilembik",
	"kocoh",
	"kocok",
	"kocolan",
	"kocong",
	"kocor",
	"koda",
	"kodak",
	"kode",
	"kodein",
	"kodeks",
	"kodi",
	"kodifikasi",
	"kodok",
	"kodominan",
	"kodrat",
	"kodrati",
	"koe",
	"koedukasi",
	"koefisien",
	"koeksistensi",
	"koenzim",
	"koersi",
	"koersif",
	"kofaktor",
	"kofein",
	"kofermen",
	"kognat",
	"kognatif",
	"kognisi",
	"kognitif",
	"koh",
	"kohabitasi",
	"koheren",
	"koherensi",
	"kohesi",
	"kohesif",
	"kohir",
	"kohlea",
	"kohol",
	"kohong",
	"kohor",
	"koil",
	"koin",
	"koinseden",
	"koinsiden",
	"koinsidensi",
	"koipuk",
	"koit",
	"koitus",
	"koja",
	"kojah",
	"kojang",
	"kojoh",
	"kojol",
	"kojor",
	"kok",
	"koka",
	"kokah",
	"kokaina",
	"kokainisasi",
	"kokainisme",
	"kokang",
	"kokarde",
	"kokas",
	"koki",
	"kokila",
	"koklea",
	"kokoa",
	"kokoh",
	"kokok",
	"kokokbeluk",
	"kokol",
	"kokon",
	"kokosan",
	"kokot",
	"kokpit",
	"koksa",
	"koktail",
	"kokurikuler",
	"kokus",
	"kol",
	"kola",
	"kolaborasi",
	"kolaborator",
	"kolagen",
	"kolak",
	"kolam",
	"kolang-kaling",
	"kolaps",
	"kolaret",
	"kolase",
	"kolateral",
	"kolator",
	"kolega",
	"kolegial",
	"kolegialitas",
	"koleh-koleh",
	"kolek",
	"koleksi",
	"kolekte",
	"kolektif",
	"kolektivis",
	"kolektivisasi",
	"kolektivisme",
	"kolektivitas",
	"kolektor",
	"kolembeng",
	"kolemia",
	"koleng",
	"koleoptil",
	"kolera",
	"kolese",
	"kolesom",
	"kolesterin",
	"kolesterol",
	"koli",
	"kolibri",
	"koligasi",
	"kolik",
	"kolimasi",
	"kolina",
	"kolintang",
	"koliseng",
	"kolitis",
	"kolkhoz",
	"kolodion",
	"kolofon",
	"kologen",
	"koloid",
	"koloidal",
	"kolok",
	"kolokasi",
	"kolokium",
	"kolom",
	"kolomben",
	"kolon",
	"kolone",
	"kolonel",
	"kolong",
	"koloni",
	"kolonial",
	"kolonialis",
	"kolonialisme",
	"kolonis",
	"kolonisasi",
	"kolonoskop",
	"kolonye",
	"kolor",
	"kolorimeter",
	"kolorimetri",
	"kolosal",
	"kolosom",
	"kolostomi",
	"kolostrum",
	"kolot",
	"kolportir",
	"kolt",
	"kolum",
	"kolumela",
	"kolumnis",
	"kolumnus",
	"kolusi",
	"koluvium",
	"kom",
	"koma",
	"komaliwan",
	"koman",
	"komandan",
	"komandemen",
	"komanditer",
	"komando",
	"komaran",
	"komat-kamit",
	"kombat",
	"kombinasi",
	"kombo",
	"kombor",
	"kombusio",
	"komedi",
	"komedian",
	"komendur",
	"komeng",
	"komensal",
	"komensalisme",
	"komentar",
	"komentator",
	"komersial",
	"komersialisasi",
	"komet",
	"komfortabel",
	"komidi",
	"komik",
	"komikal",
	"komikus",
	"kominusi",
	"komis",
	"komisar",
	"komisariat",
	"komisaris",
	"komisi",
	"komisioner",
	"komisura",
	"komit",
	"komite",
	"komitmen",
	"komkoma",
	"komoditas",
	"komodo",
	"komodor",
	"kompak",
	"kompanyon",
	"komparasi",
	"komparatif",
	"komparator",
	"kompartemen",
	"kompas",
	"kompatibel",
	"kompatibilitas",
	"kompatriot",
	"kompendium",
	"kompeni",
	"kompensasi",
	"kompes",
	"kompeten",
	"kompetensi",
	"kompetisi",
	"kompetitif",
	"kompetitor",
	"kompi",
	"kompilasi",
	"kompilator",
	"komplain",
	"kompleks",
	"kompleksitas",
	"komplemen",
	"komplementer",
	"komplet",
	"komplikasi",
	"komplikatif",
	"komplimen",
	"komplot",
	"kompon",
	"komponen",
	"kompong",
	"komponis",
	"kompor",
	"kompos",
	"komposer",
	"komposisi",
	"komposit",
	"kompositum",
	"komprador",
	"komprang",
	"komprehensif",
	"kompres",
	"kompresi",
	"kompresor",
	"kompromi",
	"kompromistis",
	"kompulsi",
	"kompulsif",
	"komputer",
	"komputerisasi",
	"komtabilitas",
	"komunal",
	"komunalisme",
	"komunalistik",
	"komune",
	"komuni",
	"komunikabilitas",
	"komunikan",
	"komunikasi",
	"komunikatif",
	"komunikator",
	"komunike",
	"komunis",
	"komunisme",
	"komunistis",
	"komunistofobi",
	"komunistofobia",
	"komunitas",
	"komutator",
	"komuter",
	"konan",
	"konco",
	"koncoisme",
	"kondang",
	"kondangan",
	"konde",
	"kondektur",
	"kondensasi",
	"kondensat",
	"kondensator",
	"kondensor",
	"kondilus",
	"kondisi",
	"kondom",
	"kondominium",
	"kondomisasi",
	"kondor",
	"kondrin",
	"kondroblas",
	"konduite",
	"konduksi",
	"konduktans",
	"konduktimeter",
	"konduktivitas",
	"konduktor",
	"kondusif",
	"koneksi",
	"koneksitas",
	"konektor",
	"konfederasi",
	"konfeksi",
	"konferensi",
	"konfesi",
	"konfigurasi",
	"konfiks",
	"konfirmasi",
	"konflik",
	"konform",
	"konformitas",
	"konfrontasi",
	"konfrontatif",
	"kongenital",
	"kongesti",
	"kongkalikong",
	"kongko",
	"kongkoan",
	"kongkong",
	"kongkret",
	"konglomerasi",
	"konglomerat",
	"kongregasi",
	"kongres",
	"kongresis",
	"kongsi",
	"konifera",
	"konis",
	"konjugan",
	"konjugasi",
	"konjungsi",
	"konjungter",
	"konjungtif",
	"konjungtiva",
	"konjungtivitis",
	"konjungtor",
	"konjungtur",
	"konkaf",
	"konklaf",
	"konklusi",
	"konklusif",
	"konkologi",
	"konkomitan",
	"konkordansi",
	"konkordat",
	"konkresi",
	"konkret",
	"konkretisasi",
	"konkuisnador",
	"konkuren",
	"konkurensi",
	"konkurs",
	"konoid",
	"konon",
	"konosemen",
	"konotasi",
	"konotatif",
	"konperensi",
	"konsekrasi",
	"konsekuen",
	"konsekuensi",
	"konsekutif",
	"konseli",
	"konseling",
	"konselor",
	"konsensus",
	"konsentrasi",
	"konsentrat",
	"konsentrik",
	"konsentris",
	"konsep",
	"konsepsi",
	"konsepsional",
	"konseptor",
	"konseptual",
	"konseptualisasi",
	"konser",
	"konsertina",
	"konserto",
	"konservasi",
	"konservasionis",
	"konservatif",
	"konservatisme",
	"konservator",
	"konservatori",
	"konservatorium",
	"konsesi",
	"konsesif",
	"konsesional",
	"konsiderans",
	"konsiderasi",
	"konsili",
	"konsiliasi",
	"konsinyasi",
	"konsinyatir",
	"konsisten",
	"konsistensi",
	"konsistori",
	"konsol",
	"konsolasi",
	"konsolidasi",
	"konsonan",
	"konsonansi",
	"konsonantal",
	"konsorsium",
	"konspirasi",
	"konspiratif",
	"konspirator",
	"konstabel",
	"konstan",
	"konstanta",
	"konstantagravitasi",
	"konstatasi",
	"konstatatif",
	"konstatir",
	"konstelasi",
	"konstipasi",
	"konstituante",
	"konstituen",
	"konstitusi",
	"konstitusional",
	"konstitusionalisme",
	"konstriksi",
	"konstriktor",
	"konstruksi",
	"konstruktif",
	"konstruktivisme",
	"konsul",
	"konsulat",
	"konsulen",
	"konsuler",
	"konsultan",
	"konsultasi",
	"konsumen",
	"konsumer",
	"konsumerisme",
	"konsumsi",
	"konsumtif",
	"kontak",
	"kontal-kantil",
	"kontaminasi",
	"kontan",
	"kontang-kanting",
	"konte",
	"konteks",
	"kontekstual",
	"kontekstualisme",
	"kontemplasi",
	"kontemplatif",
	"kontemporer",
	"konten",
	"konter",
	"kontes",
	"kontestan",
	"kontet",
	"kontiguitas",
	"kontinen",
	"kontinental",
	"kontingen",
	"kontinu",
	"kontinuitas",
	"kontinum",
	"kontoid",
	"kontol",
	"kontra",
	"kontrabande",
	"kontrabas",
	"kontradiksi",
	"kontradiktif",
	"kontraindikasi",
	"kontrak",
	"kontraksi",
	"kontraktor",
	"kontraktual",
	"kontraproduktif",
	"kontras",
	"kontrasepsi",
	"kontraseptif",
	"kontravensi",
	"kontribusi",
	"kontributor",
	"kontrol",
	"kontrolir",
	"kontroversi",
	"kontroversial",
	"kontur",
	"konus",
	"konveks",
	"konveksi",
	"konvektif",
	"konvensi",
	"konvensional",
	"konvergen",
	"konvergensi",
	"konversasi",
	"konversi",
	"konveyor",
	"konvoi",
	"konvolusi",
	"konvulsan",
	"konvulsi",
	"konyak",
	"konyal",
	"konyan",
	"konyol",
	"kooperasi",
	"kooperatif",
	"kooperativisme",
	"kooperator",
	"kooptasi",
	"koordinasi",
	"koordinat",
	"koordinatif",
	"koordinator",
	"kop",
	"kopah",
	"kopaiba",
	"kopak",
	"kopal",
	"kopat-kapit",
	"kopbal",
	"kopek",
	"kopel",
	"kopelrim",
	"koper",
	"koperasi",
	"kopet",
	"kopi",
	"kopiah",
	"kopilot",
	"kopling",
	"koplo",
	"kopok",
	"kopolimer",
	"kopong",
	"kopra",
	"koprafagia",
	"koprak",
	"kopral",
	"koprok",
	"koprol",
	"koprolit",
	"kopula",
	"kopulasi",
	"kopulatif",
	"kopyok",
	"kopyor",
	"kor",
	"koral",
	"koralit",
	"koran",
	"korano",
	"korban",
	"korden",
	"kordial",
	"kordit",
	"kordon",
	"korduroi",
	"kored",
	"koreferensialitas",
	"korek",
	"koreke",
	"koreksi",
	"korektif",
	"korektor",
	"korelasi",
	"korelatif",
	"korenah",
	"koreng",
	"koreograf",
	"koreografer",
	"koreografi",
	"koreografis",
	"kores",
	"koresponden",
	"korespondensi",
	"koret",
	"koridor",
	"korion",
	"kornea",
	"kornel",
	"korner",
	"kornet",
	"koroh",
	"koroid",
	"korok",
	"korologi",
	"korona",
	"koronal",
	"koroner",
	"korong",
	"korosi",
	"korosif",
	"korporasi",
	"korporat",
	"korporatif",
	"korporatisme",
	"korps",
	"korpulensi",
	"korpus",
	"korsase",
	"korsel",
	"korselet",
	"korset",
	"korsleting",
	"korteks",
	"kortikulus",
	"korting",
	"kortison",
	"korugator",
	"korundum",
	"korup",
	"korupsi",
	"koruptif",
	"koruptor",
	"korve",
	"korvet",
	"kosak-kasik",
	"kosakata",
	"kosar",
	"kosbas",
	"kosek",
	"kosekan",
	"kosel",
	"kosen",
	"koset",
	"kosinus",
	"kosmetik",
	"kosmetilogi",
	"kosmetolog",
	"kosmetologi",
	"kosmetologis",
	"kosmis",
	"kosmogoni",
	"kosmografi",
	"kosmologi",
	"kosmologis",
	"kosmonaut",
	"kosmopolit",
	"kosmopolitan",
	"kosmopolitanisme",
	"kosmos",
	"kosmotron",
	"kosokbali",
	"kosong",
	"kostum",
	"kota",
	"kotah",
	"kotai",
	"kotak",
	"kotak-katik",
	"kotaklema",
	"kotek",
	"koteka",
	"koteks",
	"koteng",
	"koterek",
	"kotes",
	"kotiledon",
	"kotipa",
	"kotok",
	"kotong",
	"kotor",
	"kotrek",
	"kovalensi",
	"kover",
	"kowan",
	"kowek",
	"koyak",
	"koyam",
	"koyan",
	"koyok",
	"krai",
	"krakal",
	"kram",
	"krama",
	"kranapaksa",
	"krangeyan",
	"kraniologi",
	"kraniometri",
	"kraniotomi",
	"kranium",
	"krans",
	"krasis",
	"krayon",
	"kreasi",
	"kreatif",
	"kreativitas",
	"kreator",
	"krebo",
	"krecek",
	"kredibilitas",
	"kredit",
	"kreditabel",
	"kreditor",
	"kredo",
	"krem",
	"kremasi",
	"krematori",
	"krematorium",
	"kreol",
	"kreolin",
	"kreolisasi",
	"kreosol",
	"kresendo",
	"kresol",
	"kretin",
	"kribo",
	"kricak",
	"krida",
	"krifoli",
	"krim",
	"kriminal",
	"kriminalis",
	"kriminalisasi",
	"kriminalitas",
	"kriminolog",
	"kriminologi",
	"kriminologis",
	"kring",
	"krio",
	"kriofil",
	"kriofit",
	"kriogen",
	"kriogenika",
	"krioterapi",
	"kripta",
	"kriptogam",
	"kriptografi",
	"kriptogram",
	"kriptol",
	"kripton",
	"krisan",
	"krisantemum",
	"krisis",
	"krisma",
	"krisoberil",
	"krisofil",
	"krisolit",
	"krisopras",
	"krista",
	"kristal",
	"kristalisasi",
	"kristalografi",
	"kristaloid",
	"kristalosa",
	"kristen",
	"kristiani",
	"kristus",
	"kriteria",
	"kriterium",
	"kritik",
	"kritikus",
	"kritis",
	"kritisi",
	"kriya",
	"krobongan",
	"kroco",
	"kroket",
	"krol",
	"krom",
	"kromat",
	"kromatid",
	"kromatika",
	"kromatin",
	"kromatis",
	"kromatofor",
	"kromatografi",
	"kromit",
	"kromium",
	"kromo",
	"kromofil",
	"kromofob",
	"kromogen",
	"kromong",
	"kromosfer",
	"kromosom",
	"kromotropi",
	"krompyang",
	"kronem",
	"kroni",
	"kronik",
	"kroniometri",
	"kronis",
	"kronisme",
	"kronobiologi",
	"kronogram",
	"kronologi",
	"kronologis",
	"kronometer",
	"kronosekuen",
	"kronoskop",
	"krosboi",
	"kroto",
	"kru",
	"kruistik",
	"kruk",
	"krukat",
	"krusial",
	"krustasea",
	"ksatria",
	"ksi",
	"kuaci",
	"kuadran",
	"kuadrat",
	"kuadratika",
	"kuadratur",
	"kuadratus",
	"kuadrenium",
	"kuadriliun",
	"kuadripartit",
	"kuadrisep",
	"kuadrupel",
	"kuadrupleks",
	"kuadruplet",
	"kuah",
	"kuai",
	"kuak",
	"kuala",
	"kualat",
	"kuali",
	"kualifikasi",
	"kualitas",
	"kualitatif",
	"kualon",
	"kuang",
	"kuangkiut",
	"kuangwung",
	"kuantifikasi",
	"kuantitas",
	"kuantitatif",
	"kuantum",
	"kuap",
	"kuar",
	"kuari",
	"kuarik",
	"kuark",
	"kuarsa",
	"kuarsit",
	"kuart",
	"kuartal",
	"kuarter",
	"kuarterner",
	"kuartet",
	"kuartil",
	"kuarto",
	"kuas",
	"kuasa",
	"kuasar",
	"kuasi",
	"kuat",
	"kuatren",
	"kuau",
	"kuaya",
	"kuayah",
	"kuayan",
	"kubah",
	"kubak",
	"kubang",
	"kubik",
	"kubil",
	"kubin",
	"kubis",
	"kubisme",
	"kubistik",
	"kubit",
	"kuboid",
	"kubra",
	"kubti",
	"kubu",
	"kubul",
	"kubung",
	"kubur",
	"kubus",
	"kucai",
	"kucak",
	"kucam",
	"kucandan",
	"kucar-kacir",
	"kucek",
	"kucel",
	"kucica",
	"kucil",
	"kucindan",
	"kucing",
	"kucir",
	"kucup",
	"kucur",
	"kuda",
	"kudai",
	"kudang",
	"kudap",
	"kudeta",
	"kudi",
	"kudian",
	"kudis",
	"kudu",
	"kuduk",
	"kudung",
	"kudup",
	"kudus",
	"kue",
	"kueni",
	"kuesioner",
	"kuetiau",
	"kufu",
	"kufur",
	"kui",
	"kuih",
	"kuil",
	"kuilu",
	"kuin",
	"kuing",
	"kuini",
	"kuinina",
	"kuintal",
	"kuintesens",
	"kuintet",
	"kuintil",
	"kuintiliun",
	"kuintuplet",
	"kuir",
	"kuis",
	"kuit",
	"kuitansi",
	"kujang",
	"kujarat",
	"kujung",
	"kujur",
	"kujut",
	"kuk",
	"kukabura",
	"kukai",
	"kukang",
	"kukila",
	"kuku",
	"kukuh",
	"kukuk",
	"kukul",
	"kukup",
	"kukur",
	"kukuruyuk",
	"kukus",
	"kulah",
	"kulai",
	"kulak",
	"kulakasar",
	"kulan",
	"kulansing",
	"kulasentana",
	"kulat",
	"kulawangsa",
	"kuli",
	"kuliah",
	"kulik-kulik",
	"kulikat",
	"kulim",
	"kulimat",
	"kuliner",
	"kulintang",
	"kulir",
	"kulit",
	"kulkas",
	"kulminasi",
	"kulon",
	"kulot",
	"kult",
	"kultivar",
	"kultivasi",
	"kultur",
	"kultural",
	"kulturisasi",
	"kultus",
	"kulub",
	"kuluk",
	"kulum",
	"kulup",
	"kulur",
	"kulut",
	"kulzum",
	"kuma-kuma",
	"kumai",
	"kumal",
	"kuman",
	"kumandang",
	"kumanga",
	"kumat",
	"kumba",
	"kumbah",
	"kumbang",
	"kumbar",
	"kumbik",
	"kumbu",
	"kumbuh",
	"kumena",
	"kumico",
	"kuminter",
	"kumis",
	"kumkuma",
	"kumpai",
	"kumpal",
	"kumpar",
	"kumpi",
	"kumpul",
	"kumuh",
	"kumulasi",
	"kumulatif",
	"kumulonimbus",
	"kumulus",
	"kumur",
	"kumus",
	"kumut",
	"kunang-kunang",
	"kunani",
	"kunar-kunar",
	"kunarpa",
	"kunca",
	"kuncah",
	"kuncen",
	"kunci",
	"kuncir",
	"kuncit",
	"kuncung",
	"kuncup",
	"kundai",
	"kundang",
	"kundi",
	"kundur",
	"kunduran",
	"kunfayakun",
	"kung",
	"kungfu",
	"kungkang",
	"kungki",
	"kungkum",
	"kungkung",
	"kuning",
	"kuningan",
	"kunjung",
	"kuno",
	"kunta",
	"kuntau",
	"kuntilanak",
	"kuntit",
	"kuntuan",
	"kuntul",
	"kuntum",
	"kuntung",
	"kunut",
	"kunyah",
	"kunyam",
	"kunyit",
	"kunyuk",
	"kuorum",
	"kuosien",
	"kuota",
	"kup",
	"kupa",
	"kupahan",
	"kupak",
	"kupang",
	"kupas",
	"kupat",
	"kupat-kapit",
	"kupe",
	"kupel",
	"kupi",
	"kupil",
	"kuping",
	"kupir",
	"kuplet",
	"kupluk",
	"kupnat",
	"kupon",
	"kuproprotein",
	"kuprum",
	"kupu-kupu",
	"kupui",
	"kupur",
	"kur",
	"kura",
	"kurai",
	"kurambit",
	"kurang",
	"kurap",
	"kuras",
	"kurasani",
	"kurasao",
	"kuratif",
	"kurator",
	"kuratorium",
	"kurau",
	"kurawal",
	"kurban",
	"kurcaci",
	"kuren",
	"kuret",
	"kuretase",
	"kuria",
	"kuricak",
	"kurigram",
	"kurik",
	"kurikuler",
	"kurikulum",
	"kuring",
	"kuriositas",
	"kuripan",
	"kurir",
	"kuririk",
	"kurium",
	"kurkatovium",
	"kurkuma",
	"kurltase",
	"kurma",
	"kurs",
	"kursemangat",
	"kursi",
	"kursif",
	"kursor",
	"kursus",
	"kurtase",
	"kurun",
	"kurung",
	"kurus",
	"kuruyuk",
	"kurva",
	"kurvalinier",
	"kurvatur",
	"kus",
	"kusa",
	"kusal",
	"kusam",
	"kusanin",
	"kusat-mesat",
	"kusau",
	"kusen",
	"kusik",
	"kusir",
	"kuskus",
	"kuspis",
	"kusruk",
	"kusta",
	"kusu",
	"kusuf",
	"kusuk",
	"kusuma",
	"kusut",
	"kuta",
	"kutaha",
	"kutak",
	"kutang",
	"kutat",
	"kutat-kutet",
	"kuteks",
	"kuteri",
	"kuti",
	"kutik",
	"kutikula",
	"kutil",
	"kutin",
	"kuting",
	"kutip",
	"kutu",
	"kutub",
	"kutubaru",
	"kutubusitah",
	"kutuk",
	"kutung",
	"kutut",
	"kuud",
	"kuwu",
	"kuwuk",
	"kuwung-kuwung",
	"kuwur",
	"kuya",
	"kuyang",
	"kuyu",
	"kuyuh",
	"kuyup",
	"kwartet",
	"kwartir",
	"kwasiorkor",
	"kweni",
	"kwetiau",
	"kwosien",
	"laal",
	"lab",
	"laba",
	"labah-labah",
	"labak",
	"labang",
	"labas",
	"label",
	"labelum",
	"laberang",
	"labi-labi",
	"labial",
	"labialisasi",
	"labil",
	"labiodental",
	"labiovelar",
	"labirin",
	"labium",
	"laboran",
	"laboratoris",
	"laboratorium",
	"labrak",
	"labrakan",
	"labrang",
	"labres",
	"labrum",
	"labu",
	"labuda",
	"labuh",
	"labun",
	"labur",
	"labut",
	"lacak",
	"laci",
	"lacur",
	"lacut",
	"lada",
	"ladah",
	"ladam",
	"ladan",
	"ladang",
	"laden",
	"ladi",
	"lading",
	"ladu",
	"ladung",
	"lafal",
	"laga",
	"lagak",
	"lagam",
	"lagan",
	"lagang",
	"lagau",
	"lagi",
	"lagiah",
	"lago",
	"lagonder",
	"lagu",
	"laguh-lagah",
	"laguna",
	"lagwu",
	"lah",
	"lahab",
	"lahad",
	"lahak",
	"lahan",
	"lahang",
	"lahap",
	"lahar",
	"lahir",
	"lahiriah",
	"lai",
	"laici",
	"laif",
	"laik",
	"lailah",
	"lailatulkadar",
	"lain",
	"lais",
	"laja",
	"lajak",
	"lajang",
	"lajat",
	"lajnah",
	"laju",
	"lajur",
	"lak",
	"lakab",
	"lakak",
	"lakar",
	"lakara",
	"laken",
	"lakeri",
	"laki",
	"laklak",
	"laklakan",
	"lakmus",
	"laknat",
	"laknatullah",
	"lakon",
	"lakonik",
	"lakonisme",
	"lakrimator",
	"laksa",
	"laksamana",
	"laksana",
	"laksatif",
	"laksmi",
	"laktase",
	"laktasi",
	"laktat",
	"laktogen",
	"laktoglobulin",
	"laktometer",
	"lakton",
	"laktosa",
	"laku",
	"lakum",
	"lakuna",
	"lakur",
	"lakustrin",
	"lala",
	"lalah",
	"lalai",
	"lalak",
	"lalandak",
	"lalang",
	"lalap",
	"lalat",
	"lalau",
	"laler",
	"lali",
	"lalim",
	"lalu",
	"lalu-lalang",
	"lam",
	"lama",
	"lamalif",
	"laman",
	"lamang",
	"lamar",
	"lamat-lamat",
	"lambai",
	"lambak",
	"lamban",
	"lambang",
	"lambar",
	"lambat",
	"lambda",
	"lambe",
	"lambert",
	"lambit",
	"lambo",
	"lambu",
	"lambuk",
	"lambung",
	"lambur",
	"lamdukpai",
	"lamela",
	"lamender",
	"lamin",
	"lamina",
	"laminah",
	"laminasi",
	"laminating",
	"lampai",
	"lampam",
	"lampan",
	"lampang",
	"lampar",
	"lampas",
	"lampau",
	"lampeni",
	"lampes",
	"lampias",
	"lampik",
	"lampin",
	"lamping",
	"lampion",
	"lampir",
	"lampit",
	"lampok",
	"lampor",
	"lampu",
	"lampung",
	"lampus",
	"lamtoro",
	"lamtoronisasi",
	"lamun",
	"lamur",
	"lamusir",
	"lana",
	"lanang",
	"lanar",
	"lanau",
	"lanbau",
	"lanca",
	"lancang",
	"lancap",
	"lancar",
	"lancia",
	"lancing",
	"lancip",
	"lancit",
	"lancong",
	"lancung",
	"lancur",
	"lancut",
	"landa",
	"landahur",
	"landai",
	"landak",
	"landang",
	"landap",
	"landas",
	"landau",
	"landors",
	"landrad",
	"landuk",
	"landung",
	"landur",
	"lang",
	"langah",
	"langak-languk",
	"langau",
	"langen",
	"langendrian",
	"langenswara",
	"langgah",
	"langgai",
	"langgam",
	"langgan",
	"langgang",
	"langgar",
	"langgas",
	"langgayan",
	"langgeng",
	"langguk",
	"langgung",
	"langi",
	"langir",
	"langis",
	"langit",
	"langka",
	"langkah",
	"langkai",
	"langkan",
	"langkang",
	"langkap",
	"langkara",
	"langkas",
	"langkat",
	"langkau",
	"langking",
	"langkisan",
	"langkitang",
	"langkong",
	"langkup",
	"langlai",
	"langlang",
	"langsai",
	"langsam",
	"langsang",
	"langsar",
	"langsat",
	"langse",
	"langseng",
	"langsep",
	"langsi",
	"langsing",
	"langsir",
	"langsuir",
	"langsung",
	"langu",
	"langut",
	"lanhir",
	"lanja",
	"lanjai",
	"lanjak",
	"lanjam",
	"lanjang",
	"lanjar",
	"lanjau",
	"lanji",
	"lanjuk",
	"lanjung",
	"lanjur",
	"lanjut",
	"lanolin",
	"lanset",
	"lansia",
	"lansir",
	"lanskap",
	"lantah",
	"lantai",
	"lantak",
	"lantam",
	"lantan",
	"lantang",
	"lantanum",
	"lantar",
	"lantas",
	"lantera",
	"lantesari",
	"lantik",
	"lantin",
	"lanting",
	"lantip",
	"lantun",
	"lantung",
	"lantur",
	"lanugo",
	"lanun",
	"lanus",
	"lanyah",
	"lanyak",
	"lanyau",
	"laocu",
	"laos",
	"laoteng",
	"lap",
	"lapah",
	"lapak",
	"lapang",
	"lapar",
	"laparoskop",
	"laparoskopi",
	"lapat-lapat",
	"lapektomi",
	"lapel",
	"lapih",
	"lapik",
	"lapili",
	"lapir",
	"lapis",
	"lapislazuli",
	"lapo",
	"lapor",
	"laptop",
	"lapuk",
	"lapun",
	"lapur",
	"lara",
	"larah",
	"larai",
	"larak",
	"laram",
	"larang",
	"larap",
	"laras",
	"larat",
	"larau",
	"largisimo",
	"largo",
	"lari",
	"larih",
	"larik",
	"laring",
	"laringal",
	"laringitis",
	"laringoskop",
	"laris",
	"larnaks",
	"laron",
	"lars",
	"laru",
	"larung",
	"larut",
	"larva",
	"larvarium",
	"las",
	"lasa",
	"lasah",
	"lasak",
	"lasana",
	"lasat",
	"laser",
	"lasi",
	"lasinia",
	"laskar",
	"laso",
	"lasparaginase",
	"lasuh",
	"lat",
	"lata",
	"latah",
	"latak",
	"latam",
	"latar",
	"latas",
	"lateks",
	"laten",
	"latensi",
	"lateral",
	"laterit",
	"latif",
	"latifundium",
	"latih",
	"lating",
	"latis",
	"latma",
	"latosol",
	"latuh",
	"latuk",
	"latung",
	"latur",
	"lauh",
	"lauk",
	"laun",
	"laung",
	"laur",
	"laut",
	"lauya",
	"lava",
	"lavase",
	"lavendel",
	"lavender",
	"lawa",
	"lawah",
	"lawak",
	"lawalata",
	"lawamah",
	"lawan",
	"lawang",
	"lawar",
	"lawas",
	"lawat",
	"lawazim",
	"lawe",
	"lawean",
	"lawi",
	"lawina",
	"lawon",
	"lawrensium",
	"layah",
	"layak",
	"layam",
	"layan",
	"layang",
	"layap",
	"layar",
	"layas",
	"layat",
	"layer",
	"layon",
	"layu",
	"layuh",
	"layuk",
	"layung",
	"layur",
	"layut",
	"laza",
	"lazim",
	"lazuardi",
	"leak",
	"lebah",
	"lebai",
	"lebak",
	"lebam",
	"leban",
	"lebang",
	"lebap",
	"lebar",
	"lebaran",
	"lebas",
	"lebat",
	"leber",
	"lebih",
	"lebuh",
	"lebuk",
	"lebum",
	"lebun",
	"lebung",
	"lebur",
	"lecah",
	"lecak",
	"lecap",
	"lecat",
	"leceh",
	"lecek",
	"lecer",
	"lecet",
	"leci",
	"lecit",
	"leco",
	"lecok",
	"lecuh",
	"lecun",
	"lecup",
	"lecur",
	"lecut",
	"ledak",
	"ledang",
	"ledek",
	"ledeng",
	"ledes",
	"leding",
	"ledos",
	"ledre",
	"leduk",
	"ledung",
	"lefa",
	"lega",
	"legak-legok",
	"legal",
	"legalisasi",
	"legalitas",
	"legam",
	"legap",
	"legar",
	"legasi",
	"legasteni",
	"legat",
	"legataris",
	"legato",
	"legator",
	"lege",
	"legek",
	"legen",
	"legenda",
	"legendaris",
	"leger",
	"leges",
	"leghorn",
	"legi",
	"legih",
	"legio",
	"legislasi",
	"legislatif",
	"legislator",
	"legisme",
	"legit",
	"legitimaris",
	"legitimas",
	"legitimasi",
	"legitimitas",
	"legiun",
	"lego",
	"legok",
	"legong",
	"legu",
	"legum",
	"legunder",
	"legundi",
	"legung",
	"legup-legup",
	"leha-leha",
	"lehar",
	"leher",
	"lei",
	"leja",
	"lejang",
	"lejar",
	"lejas",
	"lejit",
	"lejok",
	"leka",
	"lekah",
	"lekak-lekuk",
	"lekam",
	"lekang",
	"lekap",
	"lekap-lekup",
	"lekar",
	"lekas",
	"lekat",
	"lekemia",
	"lekir",
	"lekit",
	"lekok",
	"lekosit",
	"leksem",
	"leksikal",
	"leksikograf",
	"leksikografi",
	"leksikografis",
	"leksikolog",
	"leksikologi",
	"leksikon",
	"leksikostatistik",
	"leksis",
	"lekton",
	"lektor",
	"lektur",
	"leku",
	"lekuh-lekih",
	"lekuk",
	"lekum",
	"lekun",
	"lekung",
	"lekup-lekap",
	"lela",
	"lelabah",
	"lelah",
	"lelai",
	"lelaki",
	"lelancur",
	"lelang",
	"lelangon",
	"lelangse",
	"lelap",
	"lelar",
	"lelas",
	"lelat",
	"lelatu",
	"lelawa",
	"lele",
	"leleh",
	"lelembut",
	"lelemuku",
	"lelep",
	"leler",
	"leles",
	"lelet",
	"lelewa",
	"leli",
	"lelonobroto",
	"leluasa",
	"lelucon",
	"leluhur",
	"leluing",
	"lelung",
	"lelungit",
	"leluri",
	"lem",
	"lema",
	"lemah",
	"lemak",
	"lemang",
	"lemari",
	"lemas",
	"lemata",
	"lemau",
	"lembaga",
	"lembah",
	"lembai",
	"lembak",
	"lembam",
	"lemban",
	"lembang",
	"lembap",
	"lembar",
	"lembayung",
	"lembega",
	"lembek",
	"lembeng",
	"lembidang",
	"lembing",
	"lembok",
	"lembora",
	"lembu",
	"lembung",
	"lembur",
	"lemburu",
	"lembut",
	"lemena",
	"lemender",
	"lemes",
	"lemidi",
	"lemo",
	"lemon",
	"lempah",
	"lempai",
	"lempang",
	"lempap",
	"lempar",
	"lempari",
	"lempaung",
	"lempem",
	"lempenai",
	"lempeng",
	"lemper",
	"lemping",
	"lempit",
	"lempoh",
	"lempuh",
	"lempuk",
	"lempung",
	"lempuyang",
	"lempuyangan",
	"lemur",
	"lemuru",
	"lemusir",
	"lena",
	"lenan",
	"lencana",
	"lencang",
	"lenceng",
	"lencet",
	"lenci",
	"lencir",
	"lencit",
	"lencong",
	"lencun",
	"lenda",
	"lendaian",
	"lendeh",
	"lender",
	"lendir",
	"lendot",
	"lendung",
	"lendut",
	"leng",
	"lenga",
	"lengah",
	"lengai",
	"lengak",
	"lengan",
	"lengang",
	"lengar",
	"lengas",
	"lengat",
	"lenge",
	"lenggak",
	"lenggana",
	"lengganan",
	"lenggang",
	"lenggara",
	"lenggek",
	"lengger",
	"lenggok",
	"lenggong",
	"lenggor",
	"lenggundi",
	"lenggut",
	"lengit",
	"lengkai",
	"lengkanas",
	"lengkang",
	"lengkap",
	"lengkara",
	"lengkeng",
	"lengkesa",
	"lengket",
	"lengkiang",
	"lengking",
	"lengkitang",
	"lengkok",
	"lengkong",
	"lengkuas",
	"lengkung",
	"lengkur",
	"lengoh",
	"lengong",
	"lengos",
	"lengseng",
	"lengser",
	"lengset",
	"lenguh",
	"lengung",
	"lening",
	"lenis",
	"lenitrik",
	"lenja",
	"lenjan",
	"lenjaran",
	"lenjing",
	"lenjuang",
	"lenong",
	"lenor",
	"lens",
	"lensa",
	"lenser",
	"lenset",
	"lenso",
	"lentam-lentum",
	"lentang",
	"lentang-lentok",
	"lenteng",
	"lentera",
	"lentik",
	"lenting",
	"lentisel",
	"lentoid",
	"lentok",
	"lentong",
	"lentuk",
	"lentum",
	"lentung",
	"lentur",
	"lentus",
	"lenung",
	"lenyah",
	"lenyai",
	"lenyak",
	"lenyap",
	"lenyau",
	"lenyeh",
	"lenyet",
	"lenyut",
	"leo",
	"leonid",
	"leontin",
	"leot",
	"lepa",
	"lepai",
	"lepak",
	"lepang",
	"lepap",
	"lepas",
	"lepat",
	"lepau",
	"lepe",
	"lepek",
	"leper",
	"leperi",
	"lepes",
	"lepet",
	"lepih",
	"lepik",
	"lepit",
	"leplap",
	"lepoh",
	"lepok",
	"lepot",
	"lepra",
	"leproma",
	"lepromin",
	"leproseri",
	"leptodos",
	"leptoskop",
	"leptosom",
	"lepu",
	"lepuh",
	"lepuk",
	"lepur",
	"lerah",
	"lerai",
	"lerak",
	"lerang",
	"lerap",
	"lereng",
	"leret",
	"lerok",
	"lerot",
	"lerum",
	"les",
	"lesa",
	"lesak",
	"lesan",
	"lesang",
	"lesap",
	"lesat",
	"lesbi",
	"lesbian",
	"lesbianisme",
	"leseh",
	"lesek",
	"leset",
	"lesi",
	"lesing",
	"lesir",
	"lesit",
	"lesitin",
	"lesitina",
	"lesnar",
	"lesot",
	"lesplang",
	"lestari",
	"lestek",
	"lesterung",
	"lesu",
	"lesung",
	"lesus",
	"lesut",
	"leta",
	"letai",
	"letak",
	"letal",
	"letalitas",
	"letang",
	"letargi",
	"lete-lete",
	"letek",
	"leter",
	"leterseter",
	"letih",
	"letik",
	"leting",
	"letis",
	"letnan",
	"letoi",
	"letos",
	"letraset",
	"letuk",
	"letum",
	"letung",
	"letup",
	"letur",
	"letus",
	"leuca",
	"leukemia",
	"leukoderma",
	"leukofit",
	"leukoma",
	"leukonisia",
	"leukopenia",
	"leukoplakia",
	"leukore",
	"leukorea",
	"leukosit",
	"leukositometer",
	"leukositosis",
	"level",
	"lever",
	"leveransir",
	"levertran",
	"levirat",
	"levitin",
	"levulosa",
	"lewa",
	"lewah",
	"lewar",
	"lewat",
	"lewisid",
	"lewu",
	"leyeh",
	"leyot",
	"lezat",
	"liabilitas",
	"lian",
	"liana",
	"liang",
	"liangliong",
	"liar",
	"lias",
	"liat",
	"liau",
	"libas",
	"libat",
	"libei",
	"liberal",
	"liberalis",
	"liberalisasi",
	"liberalisme",
	"liberalistis",
	"liberasi",
	"liberator",
	"libero",
	"libidis",
	"libido",
	"libitum",
	"libra",
	"librasi",
	"libreto",
	"libur",
	"licak",
	"licau",
	"lici",
	"licik",
	"licin",
	"licurai",
	"lid",
	"lidah",
	"lidas",
	"lidi",
	"lidid",
	"lifo",
	"lift",
	"lifter",
	"liga",
	"ligamen",
	"ligan",
	"ligar",
	"ligas",
	"ligasi",
	"ligat",
	"ligatur",
	"ligih",
	"lignin",
	"lignit",
	"lignoselulosa",
	"lignosulfonat",
	"lignotuber",
	"lihai",
	"lihat",
	"lik",
	"likantropi",
	"likas",
	"likat",
	"likir",
	"liku",
	"likuid",
	"likuida",
	"likuidasi",
	"likuiditas",
	"likur",
	"likut",
	"lil",
	"lila",
	"lilah",
	"lilan",
	"lilau",
	"lili",
	"lilin",
	"liliput",
	"lilit",
	"lillahi",
	"lima",
	"liman",
	"limar",
	"limas",
	"limau",
	"limbah",
	"limbai",
	"limbak",
	"limban",
	"limbang",
	"limbat",
	"limbing",
	"limbubu",
	"limbuk",
	"limbung",
	"limbur",
	"limfa",
	"limfadema",
	"limfadenitis",
	"limfadenoma",
	"limfadenosis",
	"limfaderitis",
	"limfangioma",
	"limfatik",
	"limfoblartoma",
	"limfoblas",
	"limfoblastoma",
	"limfografi",
	"limfoma",
	"limfonodus",
	"limfopenia",
	"limfosit",
	"limfositopenia",
	"limfositosis",
	"limit",
	"limitasi",
	"limitatif",
	"limnetik",
	"limnologi",
	"limnoplankton",
	"limpa",
	"limpah",
	"limpap",
	"limpapas",
	"limpas",
	"limpau",
	"limpit",
	"limpoh",
	"limpung",
	"limun",
	"limusin",
	"limut",
	"lin",
	"linang",
	"linau",
	"lincah",
	"lincak",
	"lincam",
	"lincir",
	"lincun",
	"lindak",
	"lindang",
	"lindap",
	"lindas",
	"lindik",
	"lindis",
	"lindu",
	"lindung",
	"lindur",
	"linear",
	"linen",
	"ling",
	"lingar",
	"lingat",
	"lingga",
	"linggam",
	"linggata",
	"linggayuran",
	"linggi",
	"linggis",
	"lingkap",
	"lingkar",
	"lingkawa",
	"lingkis",
	"lingkung",
	"lingkup",
	"linglung",
	"lingsa",
	"lingsang",
	"lingsir",
	"lingsu",
	"lingua",
	"linguafon",
	"linguis",
	"linguistik",
	"lini",
	"linier",
	"linimen",
	"lining",
	"linjak",
	"linoleum",
	"linsang",
	"lintabung",
	"lintadu",
	"lintah",
	"lintang",
	"lintap",
	"lintar",
	"lintas",
	"lintibang",
	"linting",
	"lintir",
	"lintuh",
	"lintup",
	"linu",
	"linuhung",
	"linyak",
	"linyar",
	"lio",
	"liofilisasi",
	"liong",
	"liontin",
	"lipai",
	"lipan",
	"lipas",
	"lipase",
	"lipat",
	"lipektomi",
	"lipemia",
	"lipid",
	"lipiodol",
	"lipit",
	"liplap",
	"lipoksidase",
	"lipolisis",
	"lipoprotein",
	"lipstik",
	"lipu",
	"lipur",
	"liput",
	"lir",
	"lira",
	"lirida",
	"lirih",
	"lirik",
	"liris",
	"lis",
	"lisah",
	"lisan",
	"lisani",
	"lisensi",
	"lisimeter",
	"lisis",
	"lisol",
	"lisong",
	"lisplang",
	"lister",
	"listeria",
	"listrik",
	"lisu",
	"lisus",
	"lisut",
	"litah",
	"litak",
	"litani",
	"liter",
	"literator",
	"literer",
	"litium",
	"litografi",
	"litologi",
	"litoral",
	"litosfer",
	"litotes",
	"litotomi",
	"litsus",
	"liturgi",
	"liturgis",
	"liuk",
	"liung-liung",
	"liur",
	"liut",
	"liver",
	"liwa",
	"liwan",
	"liwat",
	"liwet",
	"loak",
	"lob",
	"loba",
	"lobak",
	"loban",
	"loberci",
	"lobi",
	"lobster",
	"locok",
	"locot",
	"lodan",
	"lodeh",
	"lodoh",
	"lodong",
	"log",
	"logam",
	"logaritma",
	"logat",
	"logawiah",
	"logika",
	"logis",
	"logistik",
	"logo",
	"logogram",
	"logopedia",
	"logotip",
	"loh",
	"loha",
	"lohok",
	"lohor",
	"loji",
	"lok",
	"loka",
	"lokacipta",
	"lokakarya",
	"lokal",
	"lokalis",
	"lokalisasi",
	"lokan",
	"lokananta",
	"lokap",
	"lokasi",
	"lokastiti",
	"lokatif",
	"lokatikranta",
	"lokatraya",
	"lokawarta",
	"lokawidura",
	"lokawigna",
	"lokawiruda",
	"lokawisata",
	"lokcuan",
	"lokek",
	"lokeswara",
	"loket",
	"loki",
	"lokia",
	"lokika",
	"lokio",
	"loklok",
	"lokomobil",
	"lokomotif",
	"lokos",
	"loksek",
	"loksun",
	"loktong",
	"lokus",
	"lokusi",
	"lolak",
	"loleng",
	"loloh",
	"lolohan",
	"lolong",
	"lolos",
	"lomba",
	"lombar",
	"lombok",
	"lombong",
	"lomek",
	"lomot",
	"lompat",
	"lompayang",
	"lompok",
	"lompong",
	"lonan",
	"loncat",
	"loncek",
	"lonceng",
	"loncer",
	"lonco",
	"loncos",
	"londang",
	"londong",
	"loneng",
	"long",
	"longak-longok",
	"longdres",
	"longgar",
	"longgok",
	"longgor",
	"longitudinal",
	"longo",
	"longok",
	"longong",
	"longser",
	"longsor",
	"longtorso",
	"lonjak",
	"lonjong",
	"lonjor",
	"lonsong",
	"lontai",
	"lontang-lanting",
	"lontang-lantung",
	"lontar",
	"lontara",
	"lonte",
	"lontok",
	"lontong",
	"lonyok",
	"lop",
	"lopak",
	"lopek",
	"loper",
	"lopis",
	"lopor",
	"lor",
	"lorah",
	"loran",
	"lorat",
	"lorber",
	"lorek",
	"loreng",
	"lori",
	"lornyet",
	"lorong",
	"lorot",
	"los",
	"lose",
	"losin",
	"losion",
	"losmen",
	"loso",
	"losong",
	"lot",
	"lota",
	"lotak",
	"lotek",
	"loteng",
	"lotis",
	"lotong",
	"lotre",
	"lotus",
	"lowong",
	"loya",
	"loyak",
	"loyal",
	"loyalis",
	"loyalitas",
	"loyang",
	"loyar",
	"loyo",
	"loyong",
	"lozenge",
	"luah",
	"luak",
	"luang",
	"luap",
	"luar",
	"luas",
	"luat",
	"luban",
	"lubang",
	"luber",
	"lubuk",
	"lucah",
	"lucu",
	"lucup",
	"lucut",
	"ludah",
	"ludat",
	"ludes",
	"luding",
	"ludruk",
	"lues",
	"lugas",
	"lugu",
	"lugut",
	"luhak",
	"luhmahful",
	"luhung",
	"luhur",
	"luih",
	"luik",
	"luing",
	"luk",
	"luka",
	"lukah",
	"lukat",
	"lukeh",
	"lukis",
	"luks",
	"luku",
	"lukut",
	"lulai",
	"luli",
	"luluh",
	"luluk",
	"lulum",
	"lulup",
	"lulur",
	"lulus",
	"lulut",
	"lum",
	"lumai",
	"lumang",
	"lumar",
	"lumas",
	"lumat",
	"lumayan",
	"lumba-lumba",
	"lumbal",
	"lumbu",
	"lumbung",
	"lumen",
	"lumer",
	"lumi-lumi",
	"luminositas",
	"lumpang",
	"lumpektomi",
	"lumpia",
	"lumping",
	"lumpuh",
	"lumpuk",
	"lumpur",
	"lumrah",
	"lumsum",
	"lumuh",
	"lumur",
	"lumus",
	"lumut",
	"lunak",
	"lunas",
	"lunau",
	"luncai",
	"luncas",
	"luncung",
	"luncur",
	"lundang",
	"lundi",
	"lundu",
	"luner",
	"lung",
	"lungguh",
	"lungkah",
	"lungkang",
	"lungkum",
	"lunglai",
	"lunglung",
	"lungsar",
	"lungse",
	"lungsin",
	"lungsung",
	"lungsur",
	"lungun",
	"lunjur",
	"lunta",
	"luntang",
	"luntang-lantung",
	"luntas",
	"luntur",
	"lunyah",
	"lunyai",
	"lup",
	"lupa",
	"lupat",
	"lupi",
	"lupuh",
	"lupuk",
	"lupung",
	"lupus",
	"luput",
	"lurah",
	"lurik",
	"luru",
	"lurub",
	"luruh",
	"lurus",
	"lurut",
	"lus",
	"lusa",
	"lusin",
	"lustrum",
	"lusuh",
	"lut",
	"lutetium",
	"luti",
	"lutu",
	"lutung",
	"lutut",
	"luweng",
	"luwes",
	"luyak",
	"luyu",
	"luyut",
	"maab",
	"maaf",
	"mabriuk",
	"mabrur",
	"mabuh",
	"mabuk",
	"mabul",
	"macakal",
	"macam",
	"macan",
	"macapat",
	"mace",
	"macet",
	"macis",
	"mad",
	"mada",
	"madah",
	"madali",
	"madam",
	"madang",
	"madani",
	"madar",
	"madat",
	"madewi",
	"madi",
	"madia",
	"madik",
	"madinding",
	"madmadah",
	"mado",
	"madona",
	"madras",
	"madrasah",
	"madu",
	"madukara",
	"madumangsa",
	"madya",
	"maesan",
	"maesenas",
	"maestro",
	"mafela",
	"mafhum",
	"mafia",
	"mafioso",
	"mafsadah",
	"mafsadat",
	"mag",
	"magainin",
	"magalah",
	"magandi",
	"magang",
	"magasin",
	"magel",
	"magenta",
	"magersari",
	"magfirah",
	"magfirat",
	"magi",
	"magis",
	"magister",
	"magistrat",
	"maglub",
	"magma",
	"magnesium",
	"magnesol",
	"magnet",
	"magnetik",
	"magnetika",
	"magnetis",
	"magnetisme",
	"magnetit",
	"magnetometer",
	"magnetor",
	"magnetostatika",
	"magnitudo",
	"magrib",
	"magribi",
	"magrur",
	"magun",
	"mah",
	"maha",
	"mahabah",
	"mahabintang",
	"mahadewa",
	"mahadewi",
	"mahaduta",
	"mahaguru",
	"mahah",
	"mahajana",
	"mahakala",
	"mahakarya",
	"mahakuasa",
	"mahal",
	"mahamen",
	"mahamenteri",
	"mahamulia",
	"mahang",
	"mahaparana",
	"mahapatih",
	"mahar",
	"maharaja",
	"maharajalela",
	"maharana",
	"maharani",
	"mahardika",
	"maharesi",
	"maharupa",
	"mahasiswa",
	"mahasiswi",
	"mahasuci",
	"mahatahu",
	"mahatma",
	"mahatur",
	"mahayana",
	"mahbub",
	"mahbubah",
	"mahbubat",
	"mahdi",
	"maherat",
	"mahesa",
	"maheswara",
	"mahfuz",
	"mahia",
	"mahimahi",
	"mahir",
	"mahkamah",
	"mahkota",
	"mahligai",
	"mahmud",
	"mahoni",
	"mahraj",
	"mahram",
	"mahsul",
	"mahsyar",
	"mahwu",
	"mahyong",
	"mahzurat",
	"mai",
	"maido",
	"maimun",
	"main",
	"mair",
	"mairat",
	"maizena",
	"maja",
	"majaan",
	"majakane",
	"majakaya",
	"majakeling",
	"majal",
	"majalah",
	"majas",
	"majasi",
	"majati",
	"majedub",
	"majekeling",
	"majelis",
	"majemuk",
	"majenun",
	"majikan",
	"majir",
	"majizat",
	"majong",
	"maju",
	"majuh",
	"majuj",
	"majun",
	"majung",
	"majusi",
	"maka",
	"makadam",
	"makadasang",
	"makadok",
	"makalah",
	"makalangkang",
	"makam",
	"makan",
	"makantah",
	"makantuh",
	"makanya",
	"makao",
	"makaopo",
	"makar",
	"makara",
	"makaroni",
	"makas",
	"makbud",
	"makbul",
	"makcik",
	"makcomblang",
	"makda",
	"makdan",
	"makelar",
	"makerel",
	"maket",
	"makhdum",
	"makhluk",
	"makhraj",
	"maki",
	"makin",
	"making",
	"makiyah",
	"makjuj",
	"maklaf",
	"maklum",
	"maklumat",
	"maklun",
	"makmal",
	"makmum",
	"makmur",
	"makna",
	"maknawi",
	"makramat",
	"makrame",
	"makrifat",
	"makrifatullah",
	"makro",
	"makroekonomi",
	"makrofita",
	"makrofotografi",
	"makroftalmus",
	"makrogametosit",
	"makrohistori",
	"makrokosmos",
	"makrokriminologi",
	"makrolinguistik",
	"makromelia",
	"makrometeorologi",
	"makromolekul",
	"makrosefalik",
	"makroskopis",
	"makrosmatik",
	"makrosmatis",
	"makrososiologi",
	"makruf",
	"makruh",
	"maksi",
	"maksiat",
	"maksila",
	"maksim",
	"maksimal",
	"maksimum",
	"maksud",
	"maksum",
	"maktab",
	"maktub",
	"makua",
	"makul",
	"makula",
	"makulat",
	"makurung",
	"makuta",
	"makyong",
	"makzul",
	"mal",
	"mala",
	"malabau",
	"malabsorpsi",
	"malafide",
	"malafungsi",
	"malagandang",
	"malagizi",
	"malah",
	"malai",
	"malaik",
	"malaikat",
	"malaikatulmaut",
	"malaise",
	"malak",
	"malaka",
	"malakama",
	"malakat",
	"malakit",
	"malakofili",
	"malakologi",
	"malakut",
	"malam",
	"malan",
	"malang",
	"malangbang",
	"malap",
	"malapari",
	"malapetaka",
	"malapraktek",
	"malapraktik",
	"malar",
	"malaria",
	"malas",
	"malasia",
	"malasuai",
	"malatindak",
	"malau",
	"maldistribusi",
	"male",
	"maleman",
	"maleo",
	"maleolus",
	"mali-mali",
	"maligai",
	"malih",
	"malik",
	"maliki",
	"malikuljabar",
	"malikulmuluk",
	"malim",
	"maling",
	"malis",
	"malisol",
	"malka",
	"malnutrisi",
	"maloklusi",
	"malt",
	"maltase",
	"maltosa",
	"malu",
	"malun",
	"malung",
	"mam",
	"mama",
	"mamah",
	"mamai",
	"mamak",
	"mamalia",
	"maman",
	"mamanah",
	"mamanda",
	"mamang",
	"mamano",
	"mamat",
	"mambang",
	"mambek",
	"mambo",
	"mambruk",
	"mambu",
	"mambung",
	"mamduhah",
	"mami",
	"mamik",
	"mamlakat",
	"mamografi",
	"mampai",
	"mampat",
	"mampir",
	"mampu",
	"mampung",
	"mampus",
	"mamut",
	"man",
	"mana",
	"manah",
	"manai",
	"manajemen",
	"manajer",
	"manajerial",
	"manakala",
	"manakan",
	"manakib",
	"manalagi",
	"manasik",
	"manasongo",
	"manasuka",
	"manau",
	"mancanegara",
	"mancawarna",
	"manci",
	"mancis",
	"mancung",
	"mancur",
	"manda",
	"mandah",
	"mandai",
	"mandala",
	"mandalika",
	"mandam",
	"mandar",
	"mandarin",
	"mandat",
	"mandataris",
	"mandau",
	"mandeh",
	"mandek",
	"mandelevium",
	"mandi",
	"mandibula",
	"mandil",
	"mandir",
	"mandiri",
	"mandolin",
	"mandor",
	"mandraguna",
	"mandril",
	"mandrin",
	"mandul",
	"mandung",
	"maneken",
	"manerisme",
	"manfaat",
	"mang",
	"mangan",
	"mangap",
	"mangas",
	"mangau",
	"mangayubagya",
	"mangga",
	"manggah",
	"manggala",
	"manggar",
	"manggis",
	"manggung",
	"mangir",
	"mangkak",
	"mangkanya",
	"mangkar",
	"mangkas",
	"mangkat",
	"mangkel",
	"mangkih",
	"mangkir",
	"mangkok",
	"mangkubumi",
	"mangkuk",
	"mangkus",
	"mangsa",
	"mangsi",
	"mangu",
	"mangun",
	"mangut",
	"mani",
	"mania",
	"maniak",
	"manifes",
	"manifestasi",
	"manifesto",
	"manik",
	"manik-depresif",
	"manikam",
	"manikdepresi",
	"manikmaya",
	"manikur",
	"manila",
	"manimba",
	"manipol",
	"manipulasi",
	"manipulatif",
	"manipulator",
	"manira",
	"manis",
	"manise",
	"manja",
	"manjapada",
	"manjau",
	"manjeri",
	"manjing",
	"manjung",
	"manjur",
	"manol",
	"manometer",
	"manora",
	"manostat",
	"manset",
	"mansiang",
	"mansukh",
	"manta",
	"mantan",
	"mantap",
	"mantari",
	"mantel",
	"manten",
	"manti",
	"mantik",
	"mantiki",
	"mantisa",
	"mantissa",
	"mantra",
	"mantram",
	"mantri",
	"mantu",
	"mantuk",
	"manual",
	"manufaktur",
	"manufakturing",
	"manuk",
	"manumisio",
	"manumpak",
	"manunggal",
	"manusia",
	"manusiawi",
	"manuskrip",
	"manut",
	"manuver",
	"manuwa",
	"manyala",
	"manyar",
	"manzil",
	"manzilah",
	"maois",
	"map",
	"mapak",
	"mapalus",
	"mapan",
	"mar",
	"mara",
	"marah",
	"maraja",
	"marak",
	"marakas",
	"marambung",
	"maramus",
	"maranta",
	"marapulai",
	"maras",
	"maraton",
	"marbling",
	"marbut",
	"marcapada",
	"mardatilah",
	"mardatillah",
	"mardud",
	"mare",
	"marem",
	"maret",
	"marfuk",
	"marga",
	"margalit",
	"margarin",
	"margasatwa",
	"margin",
	"marginal",
	"marginalisasi",
	"marginalisme",
	"margrit",
	"marhaban",
	"marhaen",
	"marhaenis",
	"marhaenisme",
	"marhum",
	"marhumah",
	"mari",
	"maria",
	"marikan",
	"marikh",
	"marikultur",
	"marimu",
	"marina",
	"marinade",
	"marine",
	"marinir",
	"marinyo",
	"marinyu",
	"marital",
	"maritim",
	"mariyuana",
	"marjik",
	"marjinal",
	"mark",
	"marka",
	"markado",
	"markah",
	"markas",
	"markasit",
	"marketri",
	"markis",
	"markisa",
	"markoni",
	"markonis",
	"markusip",
	"marlin",
	"marmelade",
	"marmer",
	"marmot",
	"maro",
	"marpaud",
	"mars",
	"marsaoleh",
	"marsekal",
	"marsepen",
	"marsose",
	"martabak",
	"martaban",
	"martabat",
	"martandang",
	"martil",
	"martini",
	"martir",
	"maru",
	"marus",
	"marut",
	"marwas",
	"marxisme",
	"marzipan",
	"mas",
	"masa",
	"masai",
	"masak",
	"masakan",
	"masakat",
	"masala",
	"masalah",
	"masam",
	"masap",
	"masase",
	"masayu",
	"masbuk",
	"masdar",
	"masehi",
	"masektomi",
	"maser",
	"maserasi",
	"mashaf",
	"masif",
	"masih",
	"masin",
	"masinal",
	"masing-masing",
	"masinis",
	"masir",
	"masjid",
	"masjidilaksa",
	"masjidilharam",
	"maskanat",
	"maskapai",
	"maskara",
	"maskat",
	"maskawin",
	"masker",
	"maskodok",
	"maskon",
	"maskot",
	"maskulin",
	"maskulinitas",
	"maskumambang",
	"maslahat",
	"masnawi",
	"masohi",
	"masoi",
	"masokhis",
	"masokhisme",
	"masokisme",
	"mason",
	"masori",
	"masrum",
	"massa",
	"massal",
	"mastautin",
	"mastektomi",
	"master",
	"masterplan",
	"mastik",
	"mastitis",
	"mastodon",
	"mastuli",
	"masturbasi",
	"masuk",
	"masuliah",
	"masya",
	"masyakah",
	"masyarakat",
	"masygul",
	"masyhadat",
	"masyhur",
	"masyrik",
	"masyuk",
	"mat",
	"mata",
	"matador",
	"matahari",
	"matakao",
	"matalamat",
	"matan",
	"matang",
	"mate",
	"matematika",
	"matematikus",
	"matematis",
	"materi",
	"material",
	"materialistis",
	"materiil",
	"mati",
	"matine",
	"matlak",
	"matoa",
	"maton",
	"matra",
	"matras",
	"matres",
	"matriarkal",
	"matriarkat",
	"matriks",
	"matrikulasi",
	"matrilineal",
	"matrilokal",
	"matris",
	"matronim",
	"matros",
	"matu",
	"matur",
	"maturasi",
	"maturitas",
	"mau",
	"mauizah",
	"maujud",
	"maujudat",
	"maukhid",
	"maukif",
	"maukuf",
	"maula",
	"maulai",
	"maulana",
	"maulhayat",
	"maulid",
	"maulidurasul",
	"maulud",
	"maung",
	"maupun",
	"mausoleum",
	"maut",
	"mauz",
	"mawadah",
	"mawar",
	"mawas",
	"maweda",
	"mawin",
	"mawon",
	"mawut",
	"maya",
	"mayam",
	"mayang",
	"mayangda",
	"mayapada",
	"mayas",
	"mayat",
	"mayeng",
	"mayokratio",
	"mayones",
	"mayor",
	"mayoret",
	"mayoritas",
	"mayung",
	"mayur",
	"mazarin",
	"mazbah",
	"mazhab",
	"mazi",
	"mazkur",
	"mazmumah",
	"mazmur",
	"mbah",
	"mbak",
	"mbakyu",
	"mbeling",
	"mbok",
	"mbokmas",
	"meander",
	"mebel",
	"mecis",
	"medali",
	"medalion",
	"medan",
	"medang",
	"mede",
	"media",
	"medial",
	"median",
	"mediasi",
	"mediastinum",
	"mediator",
	"medik",
	"medikamentosa",
	"medikasi",
	"mediko",
	"medikolegal",
	"medikus",
	"medil",
	"medio",
	"medis",
	"medisinal",
	"medit",
	"meditasi",
	"mediterania",
	"medium",
	"medok",
	"medu",
	"medula",
	"medusa",
	"mega",
	"megabyte",
	"megafon",
	"megah",
	"megak",
	"megakredit",
	"megal-megol",
	"megalit",
	"megalitikum",
	"megalomania",
	"megalomaniak",
	"megalopolis",
	"megalosit",
	"megamerger",
	"megan",
	"megaohm",
	"megap-megap",
	"megapolis",
	"megaproyek",
	"megar",
	"megaspora",
	"megasporangium",
	"megasporofil",
	"megat",
	"megaton",
	"megatren",
	"megatruh",
	"megawatt",
	"meger",
	"megrek-megrek",
	"mei",
	"meiosis",
	"meja",
	"mejam",
	"mejan",
	"mejana",
	"mejeng",
	"mek",
	"mekanik",
	"mekanika",
	"mekanikgraha",
	"mekanis",
	"mekanisasi",
	"mekanisme",
	"mekanolinguistik",
	"mekap",
	"mekar",
	"meko",
	"mekonium",
	"mel",
	"melabuai",
	"melambang",
	"melamin",
	"melanesia",
	"melangkup",
	"melanin",
	"melanisme",
	"melankolia",
	"melankolis",
	"melankonis",
	"melanoderma",
	"melar",
	"melarat",
	"melas",
	"melase",
	"melasma",
	"melati",
	"melawah",
	"melayu",
	"melek",
	"melela",
	"melempem",
	"meleng",
	"meler",
	"melesek",
	"meleset",
	"melik",
	"melilin",
	"melinjo",
	"melintir",
	"melit",
	"melitofili",
	"meliwis",
	"melodi",
	"melodika",
	"melodius",
	"melodrama",
	"melodramatik",
	"melodramatis",
	"melompong",
	"melon",
	"melor",
	"melotot",
	"melpari",
	"melukut",
	"melulu",
	"melur",
	"mem",
	"memang",
	"memar",
	"membal",
	"memble",
	"membran",
	"memedi",
	"memek",
	"memelas",
	"memo",
	"memoar",
	"memorabilia",
	"memorandum",
	"memorat",
	"memori",
	"memorial",
	"mempan",
	"mempelai",
	"mempelam",
	"mempelas",
	"mempelasari",
	"mempening",
	"memper",
	"mempitis",
	"memplak",
	"mempurung",
	"memutah",
	"mena",
	"menaga",
	"menak",
	"menampun",
	"menang",
	"menantu",
	"menara",
	"menat",
	"mencak",
	"mencelat",
	"menceng",
	"menceret",
	"mencit",
	"mencla-mencle",
	"menclok",
	"mencok",
	"mencong",
	"mencos",
	"mencret",
	"mendak",
	"mendap",
	"mendapa",
	"mendeleka",
	"mendelevium",
	"mendeng",
	"mendiang",
	"mendikai",
	"mending",
	"mendira",
	"mendoan",
	"mendonan",
	"mendong",
	"mendreng",
	"mendu",
	"mendung",
	"mendur",
	"mendura",
	"mendut",
	"menep",
	"menepaat",
	"mengah",
	"mengangah",
	"mengap",
	"mengapa",
	"mengapmendam",
	"mengeh",
	"mengerawan",
	"mengerna",
	"menget",
	"mengga",
	"menggala",
	"menggusta",
	"mengi",
	"mengiang",
	"mengicip",
	"mengirat",
	"mengkal",
	"mengkali",
	"mengkara",
	"mengkaras",
	"mengkelan",
	"mengkerang",
	"mengkeret",
	"mengking",
	"mengkirai",
	"mengkirik",
	"mengkis",
	"mengkona",
	"mengkuang",
	"mengkudu",
	"mengok",
	"mengor",
	"mengot",
	"mengsol",
	"mengsong",
	"mengung",
	"menhir",
	"meni",
	"meningitis",
	"menir",
	"meniran",
	"meniskus",
	"menit",
	"menjangan",
	"menong",
	"menopause",
	"menor",
	"menoragia",
	"menostaksis",
	"mens",
	"menserendahi",
	"mensiang",
	"menstruasi",
	"mensurasi",
	"mentah",
	"mentak",
	"mental",
	"mentalitas",
	"mentang",
	"mentari",
	"mentaruh",
	"mentas",
	"mentaus",
	"mentega",
	"menteleng",
	"menteng",
	"mentereng",
	"menteri",
	"mentibu",
	"mentifakta",
	"mentigi",
	"mentilau",
	"mentimun",
	"mentis",
	"mentok",
	"mentol",
	"mentolo",
	"mentor",
	"mentora",
	"mentua",
	"mentul",
	"menu",
	"menuet",
	"menung",
	"menur",
	"meong",
	"mepet",
	"meracang",
	"meraga",
	"meragi",
	"merah",
	"merajak",
	"merak",
	"merakan",
	"meralgia",
	"merambai",
	"merambung",
	"merana",
	"merang",
	"meranggi",
	"merangsi",
	"merangu",
	"meranti",
	"merapu",
	"merat",
	"merawal",
	"merawan",
	"merbah",
	"merbau",
	"merbaya",
	"merbuk",
	"merbulan",
	"mercak-mercik",
	"mercon",
	"mercu",
	"mercusuar",
	"merdangga",
	"merdeka",
	"merdesa",
	"merdinah",
	"merdu",
	"merduk",
	"mere",
	"merek",
	"mereka",
	"merem",
	"merembung",
	"mereng",
	"meres",
	"mergat",
	"merger",
	"mergul",
	"meri",
	"meriam",
	"meriang",
	"merica",
	"meridian",
	"merih",
	"merik",
	"merikan",
	"merikarp",
	"merinding",
	"mering",
	"meristem",
	"merjan",
	"merkah",
	"merkantilisme",
	"merkubang",
	"merkuri",
	"merkurium",
	"merkurius",
	"merkuro",
	"merkurokrom",
	"merlilin",
	"merlimau",
	"merogoni",
	"merosot",
	"merot",
	"merpati",
	"merpaud",
	"merpitis",
	"merpoyan",
	"merserisasi",
	"mersik",
	"merta",
	"mertamu",
	"mertapal",
	"mertayam",
	"mertega",
	"mertelu",
	"mertua",
	"meru",
	"meruap",
	"merubi",
	"merunggai",
	"merut",
	"merwatin",
	"mes",
	"mesa",
	"mesan",
	"mesara",
	"mesem",
	"mesin",
	"mesiu",
	"mesjid",
	"meskalin",
	"meskalina",
	"meski",
	"mesmerisme",
	"mesoderm",
	"mesodermik",
	"mesofili",
	"mesofit",
	"mesolitik",
	"mesolitikum",
	"mesometeorologi",
	"mesomorf",
	"meson",
	"mesopause",
	"mesosfer",
	"mesotel",
	"mesotoraks",
	"mesozoa",
	"mesozoikum",
	"mesra",
	"mester",
	"mesti",
	"mestika",
	"mestizo",
	"mesui",
	"mesum",
	"mesut",
	"meta",
	"metabahasa",
	"metabolik",
	"metabolis",
	"metabolisme",
	"metabolit",
	"metafil",
	"metafisik",
	"metafisika",
	"metafora",
	"metaforis",
	"metah",
	"metai",
	"metal",
	"metalik",
	"metalinguistik",
	"metalografi",
	"metaloid",
	"metalurgi",
	"metalurgis",
	"metamorf",
	"metamorfis",
	"metamorfisme",
	"metamorfosis",
	"metana",
	"metanefros",
	"metanol",
	"metari",
	"metasenter",
	"metastasis",
	"metatarsus",
	"metatesis",
	"metazoa",
	"mete",
	"meteor",
	"meteorit",
	"meteorograf",
	"meteorogram",
	"meteoroid",
	"meteorologi",
	"meteorologis",
	"meter",
	"meterai",
	"metil",
	"metode",
	"metodik",
	"metodis",
	"metodologi",
	"metonimi",
	"metonimia",
	"metrik",
	"metris",
	"metro",
	"metrologi",
	"metromini",
	"metronimik",
	"metronom",
	"metronomis",
	"metropolis",
	"metropolisasi",
	"metropolitan",
	"metroragia",
	"metrum",
	"meunasah",
	"mewah",
	"mewari",
	"mewek",
	"mezanin",
	"mezbah",
	"mezosopran",
	"mi",
	"miak",
	"miana",
	"miang",
	"miap",
	"miasma",
	"midar",
	"midi",
	"midik",
	"midodareni",
	"mieloma",
	"migrain",
	"migran",
	"migrasi",
	"migren",
	"mihrab",
	"mihun",
	"miiofili",
	"mijil",
	"miju",
	"mik",
	"mika",
	"mikat",
	"mikologi",
	"mikoprotein",
	"mikosis",
	"mikotoksin",
	"mikraj",
	"mikro",
	"mikroanalisis",
	"mikroangiopati",
	"mikrob",
	"mikrobe",
	"mikrobiologi",
	"mikrobiologis",
	"mikrobisida",
	"mikrobus",
	"mikroekonomi",
	"mikroelektronika",
	"mikroelemen",
	"mikrofag",
	"mikrofarad",
	"mikrofilm",
	"mikrofita",
	"mikrofon",
	"mikrofotografi",
	"mikrogelombang",
	"mikrograf",
	"mikrografika",
	"mikrogram",
	"mikrohabitat",
	"mikrohistori",
	"mikrohm",
	"mikroklimat",
	"mikrokomputer",
	"mikrokosmos",
	"mikrolet",
	"mikrolinguistik",
	"mikrolit",
	"mikrom",
	"mikromanipulasi",
	"mikrometer",
	"mikrometri",
	"mikron",
	"mikroorganisme",
	"mikroprosesor",
	"mikrosefalia",
	"mikrosekon",
	"mikroskop",
	"mikroskopis",
	"mikrospora",
	"mikrotom",
	"mikrovilus",
	"mikrowatt",
	"mikser",
	"miksoedema",
	"mil",
	"milad",
	"milenium",
	"miliampere",
	"miliar",
	"miliarder",
	"miliaria",
	"milibar",
	"milieu",
	"miligram",
	"milik",
	"mililiter",
	"milimeter",
	"milimikron",
	"milimol",
	"milioner",
	"milir",
	"milisi",
	"militan",
	"militansi",
	"militer",
	"militerisme",
	"militeristis",
	"miliun",
	"miliuner",
	"milivolt",
	"milu",
	"mim",
	"mimbar",
	"mimeograf",
	"mimesis",
	"mimi",
	"mimik",
	"mimikri",
	"mimis",
	"mimisan",
	"mimosa",
	"mimpi",
	"min",
	"mina",
	"minangsraya",
	"minat",
	"minder",
	"mindi",
	"mindoan",
	"mindring",
	"mineral",
	"mineralisasi",
	"mineralogi",
	"mineralogis",
	"minggat",
	"minggir",
	"minggu",
	"minhaj",
	"mini",
	"miniatur",
	"minibasket",
	"minibus",
	"minikar",
	"minikata",
	"minikomputer",
	"minim",
	"minimal",
	"minimarket",
	"minimum",
	"minium",
	"minor",
	"minoritas",
	"minta",
	"mintak",
	"mintakat",
	"mintakulburuj",
	"mintal",
	"minterat",
	"mintuna",
	"minum",
	"minus",
	"minyak",
	"mioglobin",
	"miokardia",
	"mioma",
	"miop",
	"miopia",
	"miosis",
	"miotik",
	"mipis",
	"mirah",
	"mirai",
	"mirakel",
	"mirat",
	"miriapod",
	"mirih",
	"mirik",
	"miring",
	"mirip",
	"miris",
	"mirmekofag",
	"mirmekofili",
	"mirmekologi",
	"misa",
	"misai",
	"misal",
	"misan",
	"misantrop",
	"misbah",
	"misdinar",
	"misi",
	"misil",
	"misiologi",
	"misionaris",
	"misioner",
	"miskal",
	"miskin",
	"miskram",
	"misoa",
	"misofobia",
	"misogami",
	"misoginis",
	"mispersepsi",
	"miss",
	"mistar",
	"mister",
	"misteri",
	"misterius",
	"mistik",
	"mistis",
	"mistisisme",
	"mistri",
	"misuh",
	"miswat",
	"mitasi",
	"mite",
	"mitisida",
	"mitogen",
	"mitologi",
	"mitologis",
	"mitos",
	"mitosis",
	"mitra",
	"mitraliur",
	"mizab",
	"mizan",
	"mnemonik",
	"moa",
	"mob",
	"mobil",
	"mobilet",
	"mobilisasi",
	"mobilisator",
	"mobilitas",
	"moblong",
	"mobokrasi",
	"mochi",
	"modal",
	"modalitas",
	"modar",
	"mode",
	"model",
	"modeling",
	"modem",
	"moderamen",
	"moderat",
	"moderato",
	"moderator",
	"modern",
	"modernisasi",
	"modernisme",
	"modernitas",
	"modernomaniak",
	"modifikasi",
	"modifikatif",
	"modin",
	"modis",
	"modiste",
	"modol",
	"modul",
	"modular",
	"modulasi",
	"modulator",
	"modus",
	"mofet",
	"moga",
	"mogok",
	"mohair",
	"mohon",
	"mohor",
	"mojah",
	"mojang",
	"mok",
	"moka",
	"mokal",
	"moke",
	"moko",
	"moksa",
	"mol",
	"mola",
	"molar",
	"mole",
	"molek",
	"molekul",
	"molekuler",
	"moler",
	"moles",
	"molibden",
	"molibdenum",
	"molor",
	"molos",
	"molotov",
	"moluska",
	"momen",
	"momental",
	"momentum",
	"momok",
	"momong",
	"momot",
	"monarki",
	"moncong",
	"moncor",
	"mondar-mandir",
	"mondeling",
	"mondial",
	"mondok",
	"mondolan",
	"mondong",
	"monel",
	"moneter",
	"mong",
	"monggo",
	"monggol",
	"mongkok",
	"mongmong",
	"mongolisme",
	"mongoloid",
	"monisme",
	"monitor",
	"mono",
	"monoatom",
	"monodi",
	"monodrama",
	"monofag",
	"monofobia",
	"monofonir",
	"monogam",
	"monogami",
	"monogini",
	"monografi",
	"monogram",
	"monokarpa",
	"monokel",
	"monokini",
	"monoklin",
	"monoklinal",
	"monokotil",
	"monokotiledon",
	"monokrasi",
	"monokrom",
	"monokromatis",
	"monokromator",
	"monoksida",
	"monokultur",
	"monolingual",
	"monolit",
	"monolitik",
	"monolog",
	"monoloyalitas",
	"monomania",
	"monomer",
	"monoploid",
	"monopoli",
	"monopolistik",
	"monopsoni",
	"monorel",
	"monosakarida",
	"monosem",
	"monosemantik",
	"monosemi",
	"monosilabel",
	"monosilabisme",
	"monosit",
	"monospermi",
	"monoteis",
	"monoteisme",
	"monotipe",
	"monoton",
	"monsinyur",
	"monster",
	"monstera",
	"monsun",
	"montase",
	"montering",
	"montir",
	"montit",
	"montok",
	"monumen",
	"monumental",
	"monyet",
	"monyong",
	"monyos",
	"mop",
	"mopela",
	"mopit",
	"morak",
	"moral",
	"moralis",
	"moralisasi",
	"moralisme",
	"moralistis",
	"moralitas",
	"morat-marit",
	"moratorium",
	"morbiditas",
	"morbili",
	"mordan",
	"moreng",
	"mores",
	"morf",
	"morfem",
	"morfemik",
	"morfemis",
	"morfin",
	"morfinis",
	"morfofonem",
	"morfofonemik",
	"morfofonemis",
	"morfofonologi",
	"morfogenesis",
	"morfologi",
	"mori",
	"moril",
	"mormon",
	"moron",
	"morong",
	"morse",
	"mortalitas",
	"mortar",
	"mortir",
	"mosaik",
	"mosi",
	"mosok",
	"moster",
	"mota",
	"motel",
	"motif",
	"motivasi",
	"motivator",
	"moto",
	"motor",
	"motorik",
	"motoris",
	"motorisasi",
	"motorsaikel",
	"moyang",
	"mozah",
	"mozaik",
	"mu",
	"mua",
	"muadin",
	"muai",
	"muak",
	"muakadah",
	"mual",
	"mualaf",
	"mualamat",
	"mualif",
	"mualim",
	"muamalah",
	"muamalat",
	"muanas",
	"muara",
	"muarikh",
	"muas",
	"muasasah",
	"muasir",
	"muat",
	"muazam",
	"muazin",
	"mubah",
	"mubalig",
	"mubaligah",
	"mubarak",
	"mubarat",
	"mubazir",
	"mubtadi",
	"mubut",
	"mucikari",
	"mud",
	"muda",
	"mudah",
	"mudakar",
	"mudarabah",
	"mudarat",
	"mudasir",
	"mudat",
	"mudigah",
	"mudik",
	"mudra",
	"mudun",
	"mufaham",
	"mufakat",
	"mufarik",
	"mufasal",
	"mufasir",
	"muflis",
	"mufrad",
	"mufsidin",
	"mufti",
	"mugabat",
	"muhabah",
	"muhadarah",
	"muhadat",
	"muhajat",
	"muhajir",
	"muhajirin",
	"muhal",
	"muhalil",
	"muhami",
	"muhammad",
	"muharam",
	"muhasabah",
	"muhib",
	"muhibah",
	"muhit",
	"muhlikah",
	"muhrim",
	"muhsin",
	"muhtasyam",
	"muih",
	"mujadalah",
	"mujadid",
	"mujahadat",
	"mujahid",
	"mujahidin",
	"mujair",
	"mujang",
	"mujarab",
	"mujarad",
	"mujari",
	"mujbir",
	"mujtahid",
	"mujtamak",
	"mujur",
	"muk",
	"muka",
	"mukabalah",
	"mukadam",
	"mukadas",
	"mukadim",
	"mukadimah",
	"mukadin",
	"mukadis",
	"mukah",
	"mukalaf",
	"mukalid",
	"mukaram",
	"mukatabah",
	"mukena",
	"mukhabarah",
	"mukhalaf",
	"mukhalafah",
	"mukhalif",
	"mukhalis",
	"mukhlis",
	"mukhtasar",
	"mukibat",
	"mukim",
	"mukimin",
	"mukjizat",
	"mukmin",
	"mukminat",
	"mukminin",
	"mukoprotein",
	"mukosa",
	"mukositis",
	"muktabar",
	"muktamad",
	"muktamar",
	"muktamirin",
	"muktazilah",
	"mukun",
	"mula",
	"mulai",
	"mulakat",
	"mulamasah",
	"mulas",
	"mulat",
	"mulato",
	"mulazamah",
	"mulhid",
	"mulia",
	"mullah",
	"mulsa",
	"multazam",
	"multibahasa",
	"multidimensi",
	"multidisipliner",
	"multietnik",
	"multifaset",
	"multifungsi",
	"multigravida",
	"multiguna",
	"multikompleks",
	"multikrisis",
	"multikultur",
	"multikulturalisme",
	"multilateral",
	"multilingual",
	"multilingualisme",
	"multimedia",
	"multimeter",
	"multimilioner",
	"multinasional",
	"multinegara",
	"multiorgan",
	"multipara",
	"multipel",
	"multipleks",
	"multiplikasi",
	"multiplikator",
	"multipolar",
	"multiprosesor",
	"multirasial",
	"multirasialisme",
	"multiseluler",
	"multivalen",
	"multivalensi",
	"multivitamin",
	"muluk",
	"mulur",
	"mulus",
	"mulut",
	"mumayiz",
	"mumbang",
	"mumbul",
	"mumbung",
	"mumet",
	"mumi",
	"mumifikasi",
	"mumpung",
	"mumpuni",
	"mumuk",
	"mumur",
	"mumut",
	"munafik",
	"munafikin",
	"munajat",
	"munajim",
	"munasabah",
	"muncang",
	"munci",
	"muncikari",
	"muncrat",
	"muncul",
	"muncus",
	"mundam",
	"munding",
	"mundu",
	"mundur",
	"mung",
	"munggu",
	"munggur",
	"mungil",
	"mungkar",
	"mungkin",
	"mungkir",
	"mungkum",
	"mungkur",
	"mungmung",
	"mungsi",
	"mungut",
	"munib",
	"munjung",
	"muno",
	"munsyi",
	"muntaber",
	"muntah",
	"muntaha",
	"muntu",
	"muntul",
	"muntup",
	"munyuk",
	"muon",
	"mupaham",
	"muparik",
	"mupus",
	"mur",
	"mura",
	"murad",
	"muradif",
	"murah",
	"murai",
	"murakab",
	"murakabi",
	"mural",
	"muram",
	"murang",
	"muras",
	"murba",
	"murbei",
	"murca",
	"muri",
	"murid",
	"muring",
	"muris",
	"murka",
	"murni",
	"mursal",
	"mursyid",
	"murtad",
	"muruah",
	"murung",
	"murup",
	"murus",
	"mus",
	"musaadah",
	"musabab",
	"musabaqah",
	"musafir",
	"musafirin",
	"musakat",
	"musala",
	"musang",
	"musara",
	"museolog",
	"museologi",
	"museum",
	"mushaf",
	"musibah",
	"musik",
	"musikal",
	"musikalisasi",
	"musikalitas",
	"musikolog",
	"musikologi",
	"musikologis",
	"musikus",
	"musim",
	"musisi",
	"muskil",
	"muskovit",
	"muslih",
	"muslihat",
	"muslim",
	"muslimat",
	"muslimin",
	"muslin",
	"musnah",
	"muspra",
	"mustahak",
	"mustahik",
	"mustahil",
	"mustaid",
	"mustajab",
	"mustak",
	"mustaka",
	"mustakim",
	"mustamik",
	"mustang",
	"musuh",
	"musyarakah",
	"musyarakat",
	"musyarik",
	"musyawarah",
	"musyawarat",
	"musyrik",
	"musyrikin",
	"musytak",
	"musytari",
	"mutabar",
	"mutagen",
	"mutah",
	"mutakadim",
	"mutakalim",
	"mutakhir",
	"mutaki",
	"mutalaah",
	"mutamad",
	"mutan",
	"mutasawif",
	"mutasi",
	"mutawif",
	"mute",
	"mutiara",
	"mutih",
	"mutilasi",
	"mutisme",
	"mutlak",
	"mutmainah",
	"mutu",
	"mutualisme",
	"mutung",
	"muwafakat",
	"muwahid",
	"muwajahah",
	"muwakal",
	"muwakil",
	"muwari",
	"muzah",
	"muzakar",
	"muzakarah",
	"muzaki",
	"muzamil",
	"muzawir",
	"muzhab",
	"naam",
	"nabatah",
	"nabati",
	"nabi",
	"nabtun",
	"nabu",
	"nada",
	"nadi",
	"nadim",
	"nadir",
	"naf",
	"nafar",
	"nafas",
	"nafi",
	"nafiri",
	"nafkah",
	"nafsi",
	"nafsu",
	"nafta",
	"naftal",
	"naftalena",
	"naftena",
	"naftol",
	"naga",
	"nagam",
	"nagara",
	"nagari",
	"nagasari",
	"nahak",
	"nahas",
	"nahdiyin",
	"nahi",
	"nahkoda",
	"nahu",
	"naib",
	"naif",
	"naik",
	"naim",
	"najam",
	"najasah",
	"najasat",
	"najis",
	"nak",
	"naka",
	"nakal",
	"nakara",
	"nakhoda",
	"nal",
	"nala",
	"nalam",
	"nalar",
	"nali",
	"nalih",
	"naluri",
	"naluriah",
	"nama",
	"namaskara",
	"namatad",
	"namatium",
	"nambi",
	"namnam",
	"nampan",
	"namun",
	"nan",
	"nanah",
	"nanang",
	"nanap",
	"nanaplankton",
	"nanar",
	"nanas",
	"nandu",
	"nandung",
	"nang",
	"nangka",
	"nangkoda",
	"nangkring",
	"nangui",
	"naning",
	"nanofarad",
	"nanofosil",
	"nanogram",
	"nanometer",
	"nanti",
	"napal",
	"napalm",
	"napas",
	"napuh",
	"naqal",
	"naqli",
	"nara",
	"narablog",
	"narapati",
	"narapidana",
	"narapraja",
	"narasi",
	"narasumber",
	"naratif",
	"narator",
	"narkolepsi",
	"narkomaniak",
	"narkose",
	"narkosis",
	"narkotik",
	"narpati",
	"narsis",
	"narsisisme",
	"narsisme",
	"narwastu",
	"nas",
	"nasab",
	"nasabah",
	"nasakh",
	"nasal",
	"nasalisasi",
	"nasar",
	"nasehat",
	"nasel",
	"nasi",
	"nasib",
	"nasihat",
	"nasion",
	"nasional",
	"nasionalis",
	"nasionalisasi",
	"nasionalisme",
	"nasionalistis",
	"nasionisme",
	"naskah",
	"nasofaring",
	"nasrani",
	"nasti",
	"nasut",
	"natal",
	"natalis",
	"natalitas",
	"natang",
	"natar",
	"natijah",
	"nativis",
	"nativisme",
	"nativistik",
	"natolokal",
	"natrium",
	"natur",
	"natura",
	"natural",
	"naturalis",
	"naturalisasi",
	"naturalisme",
	"naturalistis",
	"naturopatis",
	"naung",
	"nauplius",
	"nausea",
	"nautik",
	"nautika",
	"nautikal",
	"nautilus",
	"nauzubillah",
	"navigasi",
	"navigator",
	"nawa",
	"nawaitu",
	"nawala",
	"nawalapradata",
	"nayaka",
	"nayam",
	"nayap",
	"nazam",
	"nazar",
	"nazi",
	"naziisme",
	"nazim",
	"nazir",
	"ndoro",
	"ndoroisme",
	"neala",
	"nealogi",
	"nebeng",
	"nebula",
	"nebulium",
	"neces",
	"necis",
	"nefoskop",
	"nefrektomi",
	"nefridium",
	"nefrit",
	"nefritis",
	"nefroblastoma",
	"nefrologi",
	"nefron",
	"nefrosis",
	"negara",
	"negasi",
	"negatif",
	"negativisme",
	"negativistik",
	"neger",
	"negeri",
	"negosi",
	"negosiasi",
	"negosiator",
	"negrito",
	"negro",
	"negroid",
	"negus",
	"neka",
	"nekad",
	"nekara",
	"nekat",
	"nekel",
	"neko",
	"nekrofag",
	"nekrofagus",
	"nekrofili",
	"nekrofilia",
	"nekrogeografi",
	"nekrolog",
	"nekrologi",
	"nekromansi",
	"nekropolis",
	"nekropsi",
	"nekrosis",
	"neksus",
	"nektar",
	"nelangsa",
	"nelayan",
	"nemagon",
	"nematoda",
	"nematologi",
	"nematosida",
	"nematosis",
	"nenda",
	"nendatan",
	"nenek",
	"nenekanda",
	"nenen",
	"nenenda",
	"nener",
	"nenes",
	"neng",
	"neodarwinisme",
	"neodimium",
	"neofeodalisme",
	"neofeodalistis",
	"neoiknologi",
	"neoimpresionisme",
	"neokarpi",
	"neoklasik",
	"neoklasisisme",
	"neoklasisme",
	"neokolonialisme",
	"neoliberalisme",
	"neolit",
	"neolitik",
	"neolitikum",
	"neologi",
	"neologisme",
	"neolokal",
	"neon",
	"neonatal",
	"neonatus",
	"neontologi",
	"neoplasma",
	"neoplatonisme",
	"neoprena",
	"neositosis",
	"neotipologi",
	"neovirus",
	"neozoikum",
	"nepotis",
	"nepotisme",
	"neptunium",
	"neptunus",
	"neraca",
	"nerak",
	"neraka",
	"neritik",
	"neritopelagik",
	"neritoplankton",
	"neroglia",
	"nervasi",
	"nervur",
	"nesa",
	"nestapa",
	"nestor",
	"net",
	"neting",
	"neto",
	"netra",
	"netral",
	"netralis",
	"netralisasi",
	"netralisme",
	"netralitas",
	"neural",
	"neuralgia",
	"neurastenia",
	"neuritis",
	"neuroblastoma",
	"neuroglia",
	"neurolinguistik",
	"neurolog",
	"neurologi",
	"neurologis",
	"neuron",
	"neurosis",
	"neurotik",
	"neurotransmiter",
	"neustonologi",
	"neutrino",
	"neutron",
	"newton",
	"ngabei",
	"ngaben",
	"ngablak",
	"ngabur",
	"ngakngikngok",
	"ngalau",
	"ngalor-ngidul",
	"nganga",
	"ngap-ngap",
	"ngapain",
	"ngarai",
	"ngeang",
	"ngebet",
	"ngebut",
	"ngeceng",
	"ngeden",
	"ngedumel",
	"ngelindur",
	"ngemil",
	"ngenas",
	"ngengat",
	"ngenyek",
	"ngeong",
	"ngeres",
	"ngeri",
	"ngiang",
	"ngilu",
	"ngoko",
	"ngos-ngosan",
	"ngot-ngotan",
	"ngowos",
	"ngoyo",
	"ngung",
	"nia",
	"niaga",
	"nian",
	"niasin",
	"niat",
	"nibung",
	"nica",
	"nidasi",
	"nidera",
	"nidikola",
	"nidulus",
	"nifak",
	"nifas",
	"nih",
	"nihil",
	"nihilis",
	"nihilisme",
	"nijas",
	"nik",
	"nikah",
	"nikel",
	"nikmat",
	"nikotin",
	"niktigami",
	"nila",
	"nilai",
	"nilakandi",
	"nilam",
	"nilau",
	"nilon",
	"nimbostratus",
	"nimbrung",
	"nimfomania",
	"ninabobo",
	"ning",
	"ningnong",
	"ningrat",
	"nini",
	"ninik",
	"ninitowok",
	"niobium",
	"nipah",
	"nipis",
	"nira",
	"niraksara",
	"nirgagasan",
	"nirgesekan",
	"nirguna",
	"nirkabel",
	"nirlaba",
	"nirleka",
	"nirmala",
	"nirselera",
	"nirwana",
	"nirwarta",
	"nisab",
	"nisan",
	"nisbah",
	"nisbi",
	"niscaya",
	"niskala",
	"nista",
	"nistagmus",
	"nistatin",
	"nitrat",
	"nitrifikasi",
	"nitrobenzena",
	"nitrofili",
	"nitrofit",
	"nitrogen",
	"nitrogliserin",
	"nitroselulosa",
	"niyaga",
	"noa",
	"nobat",
	"nobelium",
	"noda",
	"nodulus",
	"nodus",
	"noem",
	"noja",
	"noken",
	"noktah",
	"nokturia",
	"nokturnal",
	"nol",
	"nomad",
	"nomenklatur",
	"nomina",
	"nominal",
	"nominalisasi",
	"nominalisme",
	"nominasi",
	"nominatif",
	"nominator",
	"nomine",
	"nomogram",
	"nomokrasi",
	"nomor",
	"nomplok",
	"non",
	"nona",
	"nonagresi",
	"nonaktif",
	"nonblok",
	"nondepartemen",
	"nondepartemental",
	"none",
	"nonekonomi",
	"noneksakta",
	"nonfiksi",
	"nonformal",
	"nong-nong",
	"nongol",
	"nongrata",
	"nonhistoris",
	"noni",
	"nonilium",
	"nonindustri",
	"nonintervensi",
	"nonius",
	"nonkimia",
	"nonkombatan",
	"nonkonvensional",
	"nonkooperasi",
	"nonkooperatif",
	"nonmedis",
	"nonmigas",
	"nonmiliter",
	"nonok",
	"nonol",
	"nonong",
	"nonpatogenik",
	"nonpemerintah",
	"nonpolitik",
	"nonpredikatif",
	"nonpribumi",
	"nonproduktif",
	"nonprofit",
	"nonprotein",
	"nonsens",
	"nonsilabis",
	"nonstandar",
	"nonstop",
	"nonteknis",
	"nontradisional",
	"nonverbal",
	"nopek",
	"norak",
	"norit",
	"norma",
	"normal",
	"normalisasi",
	"normatif",
	"nosologi",
	"nostalgia",
	"nostrum",
	"not",
	"nota",
	"notabene",
	"notariat",
	"notaris",
	"notasi",
	"notes",
	"notifikasi",
	"notok",
	"notula",
	"notulis",
	"nova",
	"novel",
	"novela",
	"novelet",
	"novelis",
	"november",
	"novena",
	"novokaina",
	"nrima",
	"nuansa",
	"nubuat",
	"nudis",
	"nudisme",
	"nugat",
	"nugraha",
	"nujum",
	"nukil",
	"nukleat",
	"nukleolus",
	"nukleon",
	"nukleoprotein",
	"nukleus",
	"nuklida",
	"nuklir",
	"nulipara",
	"numeralia",
	"numerik",
	"numeris",
	"numismatika",
	"nun",
	"nunatak",
	"nung",
	"nunsius",
	"nunut",
	"nur",
	"nuraga",
	"nurani",
	"nurbisa",
	"nuri",
	"nuriah",
	"nus",
	"nusa",
	"nusaindah",
	"nusakambangan",
	"nusantara",
	"nusyu",
	"nusyus",
	"nutan",
	"nutasi",
	"nutfah",
	"nutriea",
	"nutrisi",
	"nutrisionis",
	"nutrisisme",
	"nuzul",
	"nuzulul",
	"nyai",
	"nyak",
	"nyala",
	"nyalang",
	"nyalar",
	"nyalawadi",
	"nyale",
	"nyali",
	"nyaman",
	"nyambing",
	"nyamik",
	"nyamleng",
	"nyampang",
	"nyamplung",
	"nyamuk",
	"nyamur",
	"nyana",
	"nyang",
	"nyanya",
	"nyanyah",
	"nyanyang",
	"nyanyar",
	"nyanyi",
	"nyanyu",
	"nyanyuk",
	"nyapang",
	"nyapnyap",
	"nyarang",
	"nyarik",
	"nyaring",
	"nyaris",
	"nyata",
	"nyatuh",
	"nyawa",
	"nyawang",
	"nyelekit",
	"nyemplong",
	"nyentrik",
	"nyenyai",
	"nyenyak",
	"nyenyat",
	"nyenyeh",
	"nyenyep",
	"nyenyet",
	"nyepi",
	"nyeri",
	"nyerocos",
	"nyi",
	"nyilih",
	"nyingnying",
	"nyinyir",
	"nyiri",
	"nyiru",
	"nyit",
	"nyiur",
	"nyolnyolan",
	"nyolo",
	"nyoman",
	"nyong",
	"nyonya",
	"nyonyeh",
	"nyonyong",
	"nyonyor",
	"nyungsung",
	"nyunyut",
	"nyureng",
	"nyut",
	"oase",
	"oasis",
	"obar",
	"obat",
	"obduksi",
	"obelisk",
	"obeng",
	"obesitas",
	"obi",
	"obituarium",
	"objek",
	"objektif",
	"objektivisme",
	"objektivitas",
	"oblak",
	"oblasi",
	"obligasi",
	"oblong",
	"obo",
	"obor",
	"obral",
	"obras",
	"obrol",
	"obrus",
	"observasi",
	"observatorium",
	"obsesi",
	"obsesif",
	"obsidian",
	"obsolet",
	"obstetri",
	"obstruen",
	"obstruksi",
	"obversi",
	"obviatif",
	"obyek",
	"obyektif",
	"obyektivisme",
	"obyektivitas",
	"oceh",
	"odalan",
	"ode",
	"odekolonye",
	"odinometer",
	"oditur",
	"odoh",
	"odol",
	"odometer",
	"odontoblas",
	"odontoid",
	"odontologi",
	"odoran",
	"oedipus-kompleks",
	"oersted",
	"ofensif",
	"oferte",
	"ofisial",
	"ofset",
	"oftalmia",
	"oftalmoskop",
	"oga",
	"ogah",
	"ogah-agih",
	"ogak-agik",
	"ogak-ogak",
	"ogam",
	"ogel",
	"ogok",
	"ogonium",
	"ohm",
	"ohmmeter",
	"oikumene",
	"oja",
	"ojeg",
	"ojek",
	"ojok",
	"okarina",
	"oke",
	"oker",
	"oklokrasi",
	"oklusi",
	"oklusif",
	"oknum",
	"okok",
	"oksalat",
	"oksiasetilena",
	"oksida",
	"oksidan",
	"oksidasi",
	"oksidator",
	"oksigen",
	"oksigenase",
	"oksimoron",
	"oksitetrasiklin",
	"oksiton",
	"oktaf",
	"oktagon",
	"oktahedron",
	"oktal",
	"oktana",
	"oktet",
	"oktober",
	"oktroi",
	"okulasi",
	"okuler",
	"okulis",
	"okultis",
	"okultisme",
	"okupasi",
	"okupasional",
	"olah",
	"olahraga",
	"olak",
	"olak-alik",
	"olanda",
	"olang-aling",
	"oleander",
	"olefin",
	"oleh",
	"olek",
	"oleng",
	"oleografi",
	"oleometer",
	"oleovitamin",
	"oles",
	"olet",
	"oleum",
	"oli",
	"olia",
	"oligarki",
	"oligofagus",
	"oligofrenia",
	"oligopoli",
	"oligopolistis",
	"oligopsoni",
	"oligosen",
	"oligositemia",
	"oligotrofik",
	"oliman",
	"olimpiade",
	"oliva",
	"olivin",
	"olok",
	"olong-olong",
	"om",
	"oma",
	"ombak",
	"ombang-ambing",
	"ombyok",
	"omega",
	"omel",
	"omikron",
	"omnibus",
	"omnivor",
	"omnivora",
	"omong",
	"ompol",
	"ompong",
	"ompreng",
	"omprong",
	"ompu",
	"omset",
	"omslah",
	"omzet",
	"onagata",
	"onak",
	"onani",
	"onar",
	"oncat",
	"once",
	"oncek",
	"oncen",
	"oncer",
	"oncom",
	"oncor",
	"onde-onde",
	"ondel-ondel",
	"onder",
	"onderdil",
	"onderdistrik",
	"onderneming",
	"onderok",
	"ondo",
	"ondoafi",
	"ondok",
	"ondos",
	"oneng-oneng",
	"ong",
	"ongahangih",
	"ongeh",
	"onggok",
	"ongji",
	"ongkang",
	"ongkok",
	"ongkos",
	"ongok",
	"ongol-ongol",
	"oniks",
	"onkogen",
	"onkologi",
	"onomasiologi",
	"onomastika",
	"onomatologi",
	"onomatope",
	"ons",
	"onslah",
	"ontogeni",
	"ontologi",
	"ontologis",
	"ontran-ontran",
	"onyah-anyih",
	"onyak-anyik",
	"onyang",
	"onyok",
	"onyot",
	"oogenesis",
	"oolit",
	"opa",
	"opak",
	"opak-apik",
	"opal",
	"opalesen",
	"opas",
	"opasitas",
	"opelet",
	"open",
	"opendim",
	"openkap",
	"oper",
	"opera",
	"operasi",
	"operasional",
	"operasionalisasi",
	"operatif",
	"operator",
	"operet",
	"operkulum",
	"opini",
	"opisometer",
	"opium",
	"oplah",
	"oplet",
	"oplos",
	"opmak",
	"opname",
	"oponen",
	"opor",
	"oportunis",
	"oportunisme",
	"oportunistis",
	"oportunitas",
	"oposan",
	"oposisi",
	"oppo",
	"opsen",
	"opseter",
	"opsi",
	"opsin",
	"opsinder",
	"opsiner",
	"opsional",
	"opsir",
	"opstal",
	"optatif",
	"optik",
	"optika",
	"optimal",
	"optimalisasi",
	"optimis",
	"optimisme",
	"optimistis",
	"optimum",
	"optis",
	"optisien",
	"optoelektronika",
	"optometri",
	"optometris",
	"opus",
	"orak",
	"orak-arik",
	"orakel",
	"oral",
	"oralit",
	"orang",
	"orang-aring",
	"oranye",
	"orasi",
	"orat-oret",
	"orator",
	"oratoria",
	"oratoris",
	"oratorium",
	"orbit",
	"orbita",
	"orbital",
	"orde",
	"order",
	"ordi",
	"ordinal",
	"ordinasi",
	"ordinat",
	"ordiner",
	"ordner",
	"ordo",
	"ordonans",
	"ordonansi",
	"oren",
	"oreng",
	"oreol",
	"oret",
	"organ",
	"organdi",
	"organel",
	"organik",
	"organis",
	"organisasi",
	"organisator",
	"organisatoris",
	"organisir",
	"organisme",
	"organismus",
	"organogram",
	"organon",
	"orgasme",
	"orgasmik",
	"orgel",
	"orien",
	"oriental",
	"orientalis",
	"orientasi",
	"origami",
	"orion",
	"orisinal",
	"orisinalitas",
	"orkes",
	"orkestra",
	"orkestrasi",
	"ornamen",
	"ornamental",
	"ornamentasi",
	"ornitologi",
	"ornitologis",
	"ornitosis",
	"orografi",
	"orografik",
	"orografis",
	"orok",
	"orong-orong",
	"ortodidaktik",
	"ortodoks",
	"ortodoksi",
	"ortodrom",
	"ortoepi",
	"ortografi",
	"ortografis",
	"ortoklas",
	"ortopedagogik",
	"ortopedi",
	"ortopedis",
	"ose",
	"osean",
	"oseanarium",
	"oseanografi",
	"oseanologi",
	"osifikasi",
	"osikel",
	"osilasi",
	"osilator",
	"osilograf",
	"osilogram",
	"osiloskop",
	"oskilator",
	"oskulum",
	"osmium",
	"osmometer",
	"osmoregulasi",
	"osmose",
	"osmosis",
	"osomosis",
	"ostentasi",
	"osteoblas",
	"osteoklas",
	"osteologi",
	"osteopati",
	"osteoporosis",
	"ostium",
	"otak",
	"otak-atik",
	"otak-otak",
	"otar",
	"otek",
	"otentik",
	"oto",
	"otobus",
	"otofon",
	"otologi",
	"otomat",
	"otomatis",
	"otomatisasi",
	"otomobil",
	"otomotif",
	"otonom",
	"otonomi",
	"otopet",
	"otorisasi",
	"otoritas",
	"otoriter",
	"otoritet",
	"otoskop",
	"otot",
	"ototipi",
	"oval",
	"ovarium",
	"ovasi",
	"oven",
	"over",
	"overaktif",
	"overakting",
	"overal",
	"overdosis",
	"overkompensasi",
	"overpopulasi",
	"overproduksi",
	"oversimplifikasi",
	"overste",
	"oviduk",
	"ovipar",
	"oviparitas",
	"ovipositor",
	"ovitesis",
	"ovovivipar",
	"ovulasi",
	"ovulum",
	"ovum",
	"oyak",
	"oyek",
	"oyok",
	"oyong",
	"oyot",
	"ozokerit",
	"ozon",
	"ozonisasi",
	"ozonisator",
	"ozonometer",
	"pabean",
	"pabrik",
	"pabrikan",
	"pabrikasi",
	"pacai",
	"pacak",
	"pacal",
	"pacangan",
	"pacar",
	"pacat",
	"pacau",
	"pace",
	"pacek",
	"paceklik",
	"pacet",
	"pacih",
	"pacik",
	"pacok",
	"pacu",
	"pacuk",
	"pacul",
	"pada",
	"padah",
	"padahal",
	"padak",
	"padam",
	"padan",
	"padang",
	"padas",
	"padasan",
	"padat",
	"padepokan",
	"padi",
	"padma",
	"padmasana",
	"padmi",
	"padri",
	"padu",
	"padudan",
	"paduk",
	"paduka",
	"paduraksa",
	"paedofil",
	"paes",
	"pagan",
	"paganisme",
	"pagar",
	"pagas",
	"pagebluk",
	"pagelaran",
	"pagi",
	"pagina",
	"pagoda",
	"pagon",
	"pagositosis",
	"pagu",
	"pagun",
	"pagupon",
	"pagut",
	"paguyuban",
	"pah",
	"paha",
	"pahala",
	"paham",
	"pahang",
	"pahar",
	"pahat",
	"paheman",
	"pahit",
	"pahlawan",
	"pahter",
	"pai",
	"paidon",
	"pail",
	"pailit",
	"paing",
	"paip",
	"pair",
	"pais",
	"paitua",
	"paja",
	"pajak",
	"pajan",
	"pajang",
	"pajuan",
	"pajuh",
	"pakai",
	"pakal",
	"pakan",
	"pakanira",
	"pakansi",
	"pakar",
	"pakaryan",
	"pakat",
	"pakau",
	"pakcik",
	"pakde",
	"pakem",
	"paket",
	"pakihang",
	"pakihi",
	"paking",
	"pakis",
	"paklik",
	"pakma",
	"pakpui",
	"pakpung",
	"paksa",
	"paksi",
	"paksina",
	"pakta",
	"pakter",
	"paku",
	"pakuh",
	"pakuk",
	"pakuncen",
	"pakus",
	"pal",
	"pala",
	"paladium",
	"palagan",
	"palai",
	"palak",
	"palaka",
	"palam",
	"palamarta",
	"palang",
	"palapa",
	"palar",
	"palari",
	"palas",
	"palasik",
	"palat",
	"palatabilitas",
	"palatal",
	"palatalisasi",
	"palatografi",
	"palatogram",
	"palatum",
	"palau",
	"palawa",
	"palawija",
	"paldu",
	"pale",
	"palem",
	"palen",
	"paleoantropologi",
	"paleobotani",
	"paleoekologi",
	"paleogeografi",
	"paleografi",
	"paleografis",
	"paleoklimatologi",
	"paleolitik",
	"paleolitikum",
	"paleontologi",
	"paleosen",
	"paleozoikum",
	"pales",
	"palet",
	"pali",
	"paliatif",
	"paliatip",
	"palindrom",
	"paling",
	"palinologi",
	"palis",
	"palit",
	"palka",
	"pallawa",
	"palmarosa",
	"palmin",
	"palmistri",
	"palmit",
	"palmitat",
	"palolo",
	"palpasi",
	"palsu",
	"paltu",
	"palu",
	"paluh",
	"palun",
	"palung",
	"palut",
	"pamah",
	"paman",
	"pameget",
	"pamer",
	"pamflet",
	"pamit",
	"pamong",
	"pamor",
	"pampa",
	"pampan",
	"pampang",
	"pampas",
	"pampat",
	"pamper",
	"pampiniform",
	"pamrih",
	"pamungkas",
	"pan",
	"pana",
	"panah",
	"panai",
	"panakawan",
	"panar",
	"panas",
	"panasea",
	"panau",
	"panca",
	"pancabicara",
	"pancabuta",
	"pancacita",
	"pancadarma",
	"pancaindera",
	"pancaindra",
	"pancaka",
	"pancakara",
	"pancakembar",
	"pancal",
	"pancalima",
	"pancalogam",
	"pancalomba",
	"pancalongok",
	"pancamarga",
	"pancamuka",
	"pancang",
	"pancaniti",
	"pancapersada",
	"pancar",
	"pancaragam",
	"pancarajadiraja",
	"pancaroba",
	"pancarona",
	"pancasila",
	"pancasilais",
	"pancasona",
	"pancasuara",
	"pancasuda",
	"pancausaha",
	"pancawalikrama",
	"pancawara",
	"pancawarna",
	"pancawarsa",
	"panci",
	"pancing",
	"pancir",
	"pancit",
	"panco",
	"pancong",
	"pancung",
	"pancur",
	"pancut",
	"pandai",
	"pandak",
	"pandam",
	"pandan",
	"pandang",
	"pandau",
	"pandawa",
	"pandega",
	"pandemi",
	"pandemik",
	"pandialektal",
	"pandir",
	"pandit",
	"pandom",
	"pandu",
	"panekuk",
	"panel",
	"panelis",
	"panembahan",
	"panembrama",
	"panen",
	"panewu",
	"pangabekti",
	"pangah",
	"pangan",
	"pangeran",
	"pangestu",
	"panggak",
	"panggal",
	"panggang",
	"panggar",
	"panggau",
	"panggih",
	"panggil",
	"panggon",
	"panggu",
	"panggul",
	"panggung",
	"pangkah",
	"pangkai",
	"pangkal",
	"pangkas",
	"pangkat",
	"pangkek",
	"pangkin",
	"pangking",
	"pangkon",
	"pangku",
	"pangkung",
	"pangkur",
	"panglima",
	"pangling",
	"panglong",
	"pangolat",
	"pangonan",
	"pangpet",
	"pangpung",
	"pangreh",
	"pangrehpraja",
	"pangrukti",
	"pangsa",
	"pangsek",
	"pangsi",
	"pangsit",
	"panguk",
	"pangur",
	"pangus",
	"panik",
	"paniki",
	"panil",
	"panili",
	"paninggil",
	"paningset",
	"panir",
	"paniradia",
	"panitera",
	"panitia",
	"panja",
	"panjak",
	"panjang",
	"panjar",
	"panjarwala",
	"panjat",
	"panjer",
	"panji",
	"panjing",
	"panjul",
	"panjunan",
	"panjut",
	"pankreas",
	"pankromatis",
	"pankronis",
	"panlektal",
	"panleukapema",
	"panleukopenia",
	"panoptikum",
	"panorama",
	"panser",
	"pantai",
	"pantak",
	"pantalon",
	"pantang",
	"pantar",
	"pantas",
	"pantat",
	"pantau",
	"panteis",
	"panteisme",
	"panteistis",
	"pantek",
	"pantekosta",
	"panteon",
	"panter",
	"panti",
	"pantik",
	"panting",
	"pantis",
	"panto",
	"pantofel",
	"pantograf",
	"pantomim",
	"pantri",
	"pantul",
	"pantun",
	"panus",
	"panutan",
	"panyembrama",
	"pao-pao",
	"papa",
	"papacang",
	"papah",
	"papain",
	"papak",
	"papakerma",
	"papan",
	"papar",
	"paparazi",
	"papas",
	"papat",
	"papatong",
	"papi",
	"papil",
	"papila",
	"papirus",
	"papras",
	"paprika",
	"papui",
	"par",
	"para",
	"parab",
	"parabasis",
	"parabel",
	"parabiosis",
	"parabola",
	"paradam",
	"parade",
	"paradigma",
	"paradigmatis",
	"paradiso",
	"paradoks",
	"paradoksal",
	"parados",
	"paraf",
	"parafasia",
	"parafemia",
	"parafin",
	"parafrasa",
	"parafrase",
	"parafrenia",
	"paragaster",
	"paragog",
	"paragon",
	"paragraf",
	"parah",
	"parak",
	"paralaks",
	"paraldehida",
	"paralel",
	"paralelisasi",
	"paralelisme",
	"paralelogram",
	"paralgesia",
	"paralinguistik",
	"paralinguistis",
	"paralipsis",
	"paralisis",
	"paralitis",
	"param",
	"paramaarta",
	"paramarta",
	"paramasastra",
	"paramedis",
	"paramen",
	"parameter",
	"paramiliter",
	"parampara",
	"paran",
	"parang",
	"paranoia",
	"paranoid",
	"paranormal",
	"paranpara",
	"parap",
	"parapalatal",
	"parapati",
	"paraplasme",
	"paraplegia",
	"parapodium",
	"parapsikolog",
	"parapsikologi",
	"paras",
	"parasetamol",
	"parasintesis",
	"parasit",
	"parasitisme",
	"parasitoid",
	"parasitologi",
	"parasitoma",
	"parasitopolis",
	"parasut",
	"parasutis",
	"parataksis",
	"parataktis",
	"paratesis",
	"paratifus",
	"paratiroid",
	"parau",
	"pare",
	"parenial",
	"parenkim",
	"parental",
	"parentesis",
	"parestesia",
	"parewa",
	"parfum",
	"parga",
	"parhelion",
	"pari",
	"paria",
	"parididimis",
	"parih",
	"parik",
	"parikan",
	"paring",
	"paripurna",
	"paris",
	"parit",
	"paritas",
	"pariwara",
	"pariwisata",
	"parji",
	"parka",
	"parket",
	"parkinson",
	"parkinsonisme",
	"parkir",
	"parkit",
	"parlemen",
	"parlementaria",
	"parlementarisme",
	"parlementer",
	"parmitu",
	"paro",
	"parodi",
	"paroki",
	"parokial",
	"parokialisme",
	"parolfaktori",
	"paron",
	"paronim",
	"paronisia",
	"paronomasia",
	"parotitis",
	"pars",
	"parser",
	"parsi",
	"parsial",
	"partai",
	"partenogenesis",
	"partial",
	"partikel",
	"partikelir",
	"partikularisme",
	"partisan",
	"partisi",
	"partisipan",
	"partisipasi",
	"partitif",
	"partitur",
	"partner",
	"partus",
	"paru",
	"paruh",
	"parun",
	"parut",
	"parvenu",
	"parwa",
	"pas",
	"pasah",
	"pasai",
	"pasak",
	"pasal",
	"pasang",
	"pasanggiri",
	"pasar",
	"pasara",
	"pasaraya",
	"pasase",
	"pasasir",
	"pasat",
	"pascabedah",
	"pascadoktoral",
	"pascajual",
	"pascakawin",
	"pascakrisis",
	"pascalahir",
	"pascalarva",
	"pascalikuidasi",
	"pascamodern",
	"pascamodernisme",
	"pascaoperasi",
	"pascapanen",
	"pascaperang",
	"pascaproduksi",
	"pascareformasi",
	"pascasarjana",
	"pascausaha",
	"pascayuwana",
	"paseban",
	"paser",
	"paset",
	"pasfoto",
	"pasi",
	"pasien",
	"pasif",
	"pasifikasi",
	"pasifisme",
	"pasigrafi",
	"pasik",
	"pasilan",
	"pasim",
	"pasimologi",
	"pasir",
	"pasirah",
	"pasit",
	"pasiva",
	"paskah",
	"pasmat",
	"pasmen",
	"pasok",
	"pasowan",
	"paspor",
	"pasrah",
	"pasta",
	"pastel",
	"pasteur",
	"pasteurisasi",
	"pasti",
	"pastiles",
	"pastor",
	"pastoral",
	"pastoran",
	"pastur",
	"pastura",
	"pasu",
	"pasuel",
	"pasuk",
	"pasumandan",
	"pasung",
	"patah",
	"pataka",
	"patam",
	"patang",
	"patar",
	"patek",
	"patela",
	"paten",
	"pater",
	"patera",
	"pateram",
	"paternalis",
	"paternalisme",
	"paternalistis",
	"patet",
	"patetis",
	"patgulipat",
	"pati",
	"patih",
	"patik",
	"patikim",
	"patil",
	"patin",
	"patina",
	"pating",
	"patio",
	"patirasa",
	"patiseri",
	"patka",
	"patogen",
	"patogenesis",
	"patogenik",
	"patois",
	"patok",
	"patokimia",
	"patol",
	"patola",
	"patolog",
	"patologi",
	"patologis",
	"patolopolis",
	"patos",
	"patra",
	"patrap",
	"patri",
	"patriark",
	"patriarkat",
	"patrilineal",
	"patrimonium",
	"patriot",
	"patriotik",
	"patriotisme",
	"patroli",
	"patron",
	"patronasi",
	"patrun",
	"patuh",
	"patuk",
	"patung",
	"patungan",
	"patut",
	"pauh",
	"pauhi",
	"pauk",
	"paul",
	"paun",
	"paung",
	"paus",
	"pause",
	"paut",
	"paviliun",
	"pawai",
	"pawak",
	"pawaka",
	"pawana",
	"pawang",
	"pawiyatan",
	"pawukon",
	"paya",
	"payah",
	"payang",
	"payar",
	"payau",
	"payet",
	"payon",
	"payu",
	"payudara",
	"payung",
	"peang",
	"pecah",
	"pecai",
	"pecak",
	"pecal",
	"pecara",
	"pecat",
	"pece",
	"pecel",
	"peci",
	"pecicilan",
	"pecinan",
	"pecok",
	"pecuk",
	"pecun",
	"pecut",
	"peda",
	"pedada",
	"pedadah",
	"pedagog",
	"pedagogi",
	"pedagogis",
	"pedak",
	"pedaka",
	"pedal",
	"pedanda",
	"pedang",
	"pedapa",
	"pedar",
	"pedas",
	"pedati",
	"pedel",
	"pedena",
	"pedendang",
	"pedengan",
	"pedepokan",
	"pedestrian",
	"pedet",
	"pedewakan",
	"pediatri",
	"pedih",
	"pedikur",
	"pedis",
	"pedisel",
	"pedogenesis",
	"pedok",
	"pedologi",
	"pedoman",
	"pedometer",
	"pedongkang",
	"pedot",
	"peduli",
	"pedunkel",
	"pedusi",
	"pedut",
	"pegagang",
	"pegah",
	"pegal",
	"pegan",
	"pegang",
	"pegar",
	"pegari",
	"pegas",
	"pegat",
	"pegawai",
	"pego",
	"pegoh",
	"pegon",
	"peguam",
	"pegun",
	"pehong",
	"pei",
	"pejajaran",
	"pejaka",
	"pejal",
	"pejam",
	"pejatian",
	"pejera",
	"pek",
	"peka",
	"pekaja",
	"pekak",
	"pekakak",
	"pekan",
	"pekarang",
	"pekasam",
	"pekaseh",
	"pekat",
	"pekatu",
	"pekatul",
	"pekau",
	"pekerti",
	"pekik",
	"peking",
	"pekir",
	"pekis",
	"pekiwan",
	"pekojan",
	"peksi",
	"pektik",
	"pektil",
	"pektin",
	"peku",
	"pekuk",
	"pekulun",
	"pekung",
	"pekur",
	"pel",
	"pelabi",
	"pelabur",
	"pelaga",
	"pelagas",
	"pelagis",
	"pelagra",
	"pelah",
	"pelak",
	"pelalah",
	"pelamin",
	"pelampang",
	"pelampung",
	"pelan",
	"pelana",
	"pelancar",
	"pelanduk",
	"pelang",
	"pelangai",
	"pelanggi",
	"pelangi",
	"pelangkin",
	"pelangpang",
	"pelantar",
	"pelanting",
	"pelas",
	"pelasah",
	"pelasik",
	"pelaspas",
	"pelasuh",
	"pelat",
	"pelata",
	"pelatuk",
	"pelawa",
	"pelayon",
	"pelbagai",
	"pelbak",
	"pelbet",
	"pelebat",
	"pelebaya",
	"pelebegu",
	"pelebon",
	"pelecet",
	"pelecok",
	"peleh",
	"pelek",
	"pelekat",
	"pelekok",
	"pelekuk",
	"pelembaya",
	"pelencit",
	"pelengak",
	"pelengan",
	"pelengset",
	"pelepah",
	"peles",
	"pelesat",
	"peleset",
	"pelesir",
	"pelesit",
	"pelet",
	"peletek",
	"peletik",
	"peleting",
	"peleton",
	"pelias",
	"pelihara",
	"pelik",
	"pelikan",
	"pelikel",
	"pelinggam",
	"pelinteng",
	"pelintir",
	"pelipir",
	"pelipis",
	"pelir",
	"pelisir",
	"pelisit",
	"pelit",
	"pelita",
	"pelitur",
	"pelo",
	"pelog",
	"peloh",
	"pelojok",
	"pelonco",
	"pelong",
	"pelopor",
	"pelor",
	"pelorot",
	"pelosok",
	"pelosot",
	"pelota",
	"pelotaris",
	"pelotot",
	"pelples",
	"pelpolisi",
	"pels",
	"peluang",
	"peluh",
	"peluit",
	"peluk",
	"peluluk",
	"pelulut",
	"pelumpung",
	"pelungpung",
	"pelupuh",
	"pelupuk",
	"peluru",
	"peluruh",
	"pelus",
	"pelvis",
	"pemair",
	"pemali",
	"pemarip",
	"pematah",
	"pematang",
	"pemayang",
	"pembarap",
	"pembayan",
	"pemendak",
	"pemeo",
	"pemetikan",
	"pemidang",
	"pemindang",
	"peminggir",
	"pempek",
	"pemuda",
	"pemudi",
	"pemuras",
	"pen",
	"pena",
	"penak",
	"penaka",
	"penalti",
	"penampan",
	"penampang",
	"penanggah",
	"penaram",
	"penasaran",
	"penat",
	"penatu",
	"penatua",
	"penca",
	"pencak",
	"pencalang",
	"pencar",
	"pencet",
	"pencil",
	"pencok",
	"pencong",
	"pencu",
	"pencut",
	"penda",
	"pendaga",
	"pendahan",
	"pendak",
	"pendam",
	"pendapa",
	"pendar",
	"pendaringan",
	"pendek",
	"pendekar",
	"pendet",
	"pendeta",
	"pending",
	"pendok",
	"pendongkok",
	"pendopo",
	"pendua",
	"penduk",
	"pendulum",
	"penembahan",
	"penes",
	"penetrasi",
	"penetron",
	"penewu",
	"pengalasan",
	"penganak",
	"penganan",
	"pengang",
	"pengantin",
	"pengap",
	"pengapuh",
	"pengar",
	"pengaruh",
	"pengat",
	"pengatu",
	"pengawinan",
	"pengeng",
	"pengerih",
	"pengga",
	"penggaga",
	"penggah",
	"penggal",
	"penggar",
	"penggawa",
	"penghulu",
	"pengin",
	"pengkal",
	"pengkar",
	"pengki",
	"pengkis",
	"pengkol",
	"pengkor",
	"pengos",
	"penguin",
	"pengulun",
	"peni",
	"peniaram",
	"pening",
	"peningset",
	"penis",
	"penisilin",
	"penisilinat",
	"penitensi",
	"peniti",
	"penjajap",
	"penjalin",
	"penjara",
	"penjaruman",
	"penjor",
	"penjuna",
	"penjura",
	"penjuru",
	"penmes",
	"penologi",
	"penomah",
	"pensi",
	"pensil",
	"pensiun",
	"pentagin",
	"pentagon",
	"pentagor",
	"pentagram",
	"pentahedron",
	"pental",
	"pentameter",
	"pentan",
	"pentana",
	"pentang",
	"pentar",
	"pentas",
	"pentatonik",
	"pentil",
	"pentilasi",
	"penting",
	"pentode",
	"pentol",
	"pentosa",
	"pentotal",
	"pentung",
	"penuh",
	"penyap",
	"penyek",
	"penyet",
	"penyok",
	"penyu",
	"peok",
	"peot",
	"pepagan",
	"pepah",
	"pepak",
	"pepaku",
	"peparu",
	"pepas",
	"pepat",
	"pepatah",
	"pepaya",
	"pepe",
	"pepek",
	"pepeling",
	"peper",
	"pepermin",
	"pepes",
	"pepet",
	"pepindan",
	"peplum",
	"pepsin",
	"pepsina",
	"pepsinogen",
	"peptida",
	"peptidase",
	"peptik",
	"pepton",
	"pepuju",
	"pepunden",
	"pepung",
	"peputut",
	"per",
	"pera",
	"perabot",
	"perabung",
	"perada",
	"peragat",
	"perah",
	"perahu",
	"perai",
	"peraji",
	"perak",
	"peraka",
	"peram",
	"perambut",
	"peran",
	"perancah",
	"perang",
	"perangah",
	"perangai",
	"peranggang",
	"peranggu",
	"peranggul",
	"perangin",
	"perangkap",
	"perangkat",
	"peranjat",
	"peranti",
	"peranye",
	"perap",
	"peras",
	"peras-perus",
	"perasat",
	"perasukan",
	"perat",
	"perata",
	"perawan",
	"perawas",
	"perawi",
	"perawis",
	"perbal",
	"perban",
	"perbani",
	"perbatin",
	"perbawa",
	"perbegu",
	"perbekel",
	"perca",
	"percaya",
	"percik",
	"percis",
	"percit",
	"percul",
	"percuma",
	"perdah",
	"perdana",
	"perdata",
	"perdeo",
	"perdikan",
	"perdom",
	"perdu",
	"pere",
	"peredus",
	"pereh",
	"perei",
	"perek",
	"perekik",
	"perempuan",
	"perencah",
	"perenggan",
	"perengkat",
	"perengus",
	"perengut",
	"perenial",
	"perenkum",
	"perenyak",
	"perenyuk",
	"perepat",
	"peres",
	"peresau",
	"peresih",
	"perestroika",
	"peretel",
	"perewa",
	"perfek",
	"perfeksi",
	"perfeksionis",
	"perfeksionisme",
	"perfektif",
	"perforasi",
	"perforator",
	"performa",
	"pergam",
	"pergat",
	"pergata",
	"pergedel",
	"pergi",
	"pergok",
	"pergol",
	"pergola",
	"perhati",
	"peri",
	"peria",
	"perian",
	"periang",
	"periantium",
	"peribahasa",
	"periboga",
	"peribudi",
	"peridi",
	"perifer",
	"periferal",
	"periferalis",
	"periferi",
	"perifiton",
	"perifrasa",
	"perifrase",
	"perifrastis",
	"perige",
	"perigel",
	"perigi",
	"perih",
	"perihal",
	"perihelion",
	"perikarditis",
	"perikardium",
	"perikemanusiaan",
	"perikondrium",
	"periksa",
	"perilaku",
	"perimbas",
	"perimeter",
	"perimisium",
	"perimpin",
	"perimping",
	"perinci",
	"perincit",
	"perineorium",
	"perineum",
	"perineurium",
	"pering",
	"peringgan",
	"peringgi",
	"peringgitan",
	"peringis",
	"peringkat",
	"perintah",
	"periodat",
	"periode",
	"periodik",
	"periodisasi",
	"periodonsium",
	"periodontium",
	"periorbita",
	"periosteum",
	"perirana",
	"perisa",
	"perisai",
	"periskop",
	"perispora",
	"peristalsis",
	"peristaltik",
	"peristerit",
	"peristiwa",
	"peristonium",
	"perit",
	"peritoneum",
	"peritonitis",
	"periuk",
	"perivaskuler",
	"perjaka",
	"perji",
	"perkakas",
	"perkale",
	"perkamen",
	"perkara",
	"perkasa",
	"perkedel",
	"perkelang",
	"perkolar",
	"perkolasi",
	"perkolator",
	"perkoler",
	"perkosa",
	"perkusi",
	"perkutut",
	"perlahan",
	"perlak",
	"perlambang",
	"perleng",
	"perlente",
	"perlenteh",
	"perli",
	"perlina",
	"perling",
	"perlintih",
	"perlip",
	"perlit",
	"perlop",
	"perlu",
	"perlup",
	"perlus",
	"permadani",
	"permai",
	"permaisuri",
	"permak",
	"permalin",
	"permana",
	"permanen",
	"permanganat",
	"permasan",
	"permata",
	"permeabel",
	"permeabilitas",
	"permen",
	"permil",
	"permisi",
	"permisif",
	"permutasi",
	"pernah",
	"pernak",
	"pernekel",
	"pernik",
	"pernikel",
	"pernis",
	"perogol",
	"perohong",
	"peroi",
	"peroksida",
	"peroksidase",
	"peroksisom",
	"peroksisoma",
	"peroman",
	"perompak",
	"peron",
	"peroneal",
	"peronyok",
	"perop",
	"perosok",
	"perosot",
	"perot",
	"perpatih",
	"perpetuasi",
	"perponding",
	"pers",
	"persada",
	"persangga",
	"persegi",
	"persekot",
	"persekusi",
	"persen",
	"persentase",
	"persentil",
	"persepsi",
	"perseptif",
	"perseptivitas",
	"persero",
	"persetan",
	"perseus",
	"perseverasi",
	"persih",
	"persik",
	"persil",
	"persis",
	"persisi",
	"perslah",
	"persneling",
	"person",
	"persona",
	"personal",
	"personalia",
	"personalisme",
	"personalitas",
	"personel",
	"personifikasi",
	"perspektif",
	"perspektivisme",
	"persuasi",
	"persuasif",
	"pertal",
	"pertama",
	"pertepel",
	"pertiwi",
	"pertua",
	"perturbasi",
	"pertusis",
	"peruak",
	"peruan",
	"peruang",
	"perubalsem",
	"perudang",
	"peruk",
	"perum",
	"perumpung",
	"perun",
	"perunggu",
	"perunjung",
	"perupuk",
	"perus",
	"perusi",
	"perut",
	"perversi",
	"perwara",
	"perwira",
	"pes",
	"pesa",
	"pesai",
	"pesak",
	"pesakin",
	"pesam",
	"pesan",
	"pesanggrahan",
	"pesantren",
	"pesara",
	"pesat",
	"pesawat",
	"pese",
	"peseh",
	"pesek",
	"peser",
	"pesero",
	"peset",
	"pesi",
	"pesiar",
	"pesimis",
	"pesimisme",
	"pesimistis",
	"pesing",
	"pesirah",
	"pesisir",
	"pesok",
	"pesolot",
	"pesona",
	"pesong",
	"pesta",
	"pestaka",
	"pestisida",
	"pestol",
	"pesuk",
	"pesut",
	"pet",
	"peta",
	"petah",
	"petai",
	"petak",
	"petaka",
	"petal",
	"petala",
	"petaling",
	"petam",
	"petamari",
	"petan",
	"petanen",
	"petang",
	"petaram",
	"petarang",
	"petarangan",
	"petaruan",
	"petas",
	"petatang-peteteng",
	"petatus",
	"petegian",
	"petek",
	"petel",
	"petenteng",
	"petepete",
	"peterana",
	"peterseli",
	"petes",
	"peti",
	"petia",
	"petik",
	"petikrah",
	"petikut",
	"petilan",
	"peting",
	"petinggi",
	"petiolus",
	"petir",
	"petis",
	"petisi",
	"petitih",
	"petitum",
	"petogram",
	"petola",
	"petopan",
	"petor",
	"petrodolar",
	"petrografi",
	"petrogram",
	"petrokimia",
	"petrol",
	"petrolatum",
	"petroleum",
	"petrologi",
	"petromaks",
	"petsai",
	"petuah",
	"petuding",
	"petuduh",
	"petuk",
	"petunia",
	"peturun",
	"petus",
	"petut",
	"pewaka",
	"pewat",
	"peyek",
	"peyorasi",
	"peyot",
	"phi",
	"piadah",
	"piagam",
	"piah",
	"piak",
	"pial",
	"piala",
	"pialang",
	"pialing",
	"pialu",
	"piama",
	"piang",
	"pianggang",
	"pianggu",
	"pianika",
	"pianis",
	"piano",
	"pianola",
	"piantan",
	"piara",
	"piarit",
	"pias",
	"piaster",
	"piat",
	"piatu",
	"piawai",
	"pica",
	"picah",
	"picik",
	"picing",
	"picis",
	"picit",
	"pico",
	"picu",
	"picung",
	"pidana",
	"pidato",
	"pidi",
	"piezoelektrik",
	"piezoelektrisitas",
	"piezometer",
	"pigmen",
	"pigmentasi",
	"pigmi",
	"pigura",
	"pihak",
	"pijah",
	"pijak",
	"pijar",
	"pijat",
	"pijin",
	"pijinasi",
	"pijit",
	"pika",
	"pikap",
	"pikat",
	"pikau",
	"pike",
	"piket",
	"pikir",
	"piknik",
	"piknometer",
	"pikofarad",
	"pikogram",
	"pikolo",
	"piktografi",
	"piktogram",
	"pikul",
	"pikun",
	"pikup",
	"pil",
	"pilah",
	"pilak",
	"pilang",
	"pilar",
	"pilas",
	"pilaster",
	"pilau",
	"pileh",
	"pilek",
	"pileren",
	"pilih",
	"pilin",
	"pilis",
	"pilon",
	"pilong",
	"pilorus",
	"pilositas",
	"pilot",
	"pilsener",
	"pilu",
	"pilus",
	"pimpel",
	"pimpin",
	"pimping",
	"pin",
	"pina-pina",
	"pinak",
	"pinang",
	"pinar",
	"pincang",
	"pincuk",
	"pincut",
	"pinda",
	"pindah",
	"pindai",
	"pindang",
	"pines",
	"pinga",
	"pingai",
	"pinggah",
	"pinggan",
	"pinggang",
	"pinggir",
	"pinggul",
	"pingit",
	"pingkal",
	"pingkau",
	"pingpong",
	"pingsan",
	"pingul",
	"pinis",
	"pinisepuh",
	"pinisi",
	"pinjal",
	"pinjam",
	"pinjung",
	"pinset",
	"pinta",
	"pintal",
	"pintan",
	"pintang",
	"pintar",
	"pintas",
	"pintil",
	"pintu",
	"pintur",
	"pinus",
	"piogenik",
	"pion",
	"pioner",
	"piong",
	"pionir",
	"pipa",
	"pipet",
	"pipi",
	"pipih",
	"pipil",
	"pipis",
	"pipit",
	"pir",
	"pirai",
	"piramid",
	"piramida",
	"piramidal",
	"pirang",
	"piranograf",
	"piranogram",
	"piranometer",
	"pirasat",
	"pirau",
	"pireksia",
	"pirektik",
	"piretrum",
	"pirian",
	"piriform",
	"pirik",
	"piring",
	"pirit",
	"pirofilit",
	"pirofobia",
	"piroksen",
	"pirolisis",
	"piromania",
	"pirometalurgi",
	"pirometer",
	"piroteknik",
	"pirsa",
	"piruet",
	"pirus",
	"pis",
	"pisah",
	"pisang",
	"pisau",
	"pises",
	"pisiformis",
	"pisik",
	"pisin",
	"pisit",
	"pisitan",
	"pisovonus",
	"pispot",
	"pistol",
	"pistom",
	"piston",
	"pisuh",
	"pit",
	"pita",
	"pitak",
	"pitam",
	"pitanggang",
	"pitar",
	"pitarah",
	"pitawat",
	"piting",
	"pitiriasis",
	"pitis",
	"pitometer",
	"piton",
	"pitot",
	"pitut",
	"piuh",
	"piung",
	"piut",
	"piutang",
	"pivot",
	"piwulang",
	"piyik",
	"piza",
	"plafon",
	"plagiarisme",
	"plagiat",
	"plagiator",
	"plagioklas",
	"plakat",
	"plaket",
	"plaksegel",
	"plamir",
	"plan",
	"planaria",
	"planel",
	"planet",
	"planetarium",
	"planetoid",
	"plang",
	"plangkan",
	"planimeter",
	"planimetri",
	"planing",
	"planisfer",
	"plankton",
	"plano",
	"planologi",
	"planologis",
	"planospora",
	"plantase",
	"planula",
	"plasenta",
	"plaser",
	"plasma",
	"plasmodium",
	"plasmosis",
	"plastid",
	"plastik",
	"plastin",
	"plastis",
	"plastisitas",
	"plastogami",
	"plastometer",
	"plastron",
	"platelet",
	"platform",
	"platina",
	"platinoid",
	"platinum",
	"platisma",
	"plato",
	"platonik",
	"platonisme",
	"plaza",
	"plebisit",
	"pleidoi",
	"pleiogami",
	"pleistosen",
	"pleksus",
	"plengkung",
	"pleno",
	"pleonasme",
	"pleopod",
	"plerem",
	"plester",
	"pletora",
	"pleura",
	"plinplan",
	"plintat-plintut",
	"plinteng",
	"plintit",
	"pliosaurus",
	"pliosen",
	"ploi",
	"ploidi",
	"plombir",
	"plonci",
	"plonco",
	"plong",
	"plonga-plongo",
	"plontos",
	"plosif",
	"plot",
	"plug",
	"plumbago",
	"plumbum",
	"plumbung",
	"plural",
	"pluralis",
	"pluralisme",
	"pluralistis",
	"pluriform",
	"plus",
	"pluto",
	"plutokrasi",
	"plutonik",
	"plutonium",
	"pluvial",
	"pluviograf",
	"pluviometer",
	"pneumatika",
	"pneumatofos",
	"pneumatokista",
	"pneumonia",
	"poal",
	"poces",
	"poci",
	"pocok",
	"pocong",
	"podemporem",
	"podikal",
	"podium",
	"poetika",
	"pof",
	"pogrom",
	"pohon",
	"poikilohalin",
	"poikiloterm",
	"poin",
	"point",
	"poise",
	"poiseuille",
	"pojok",
	"pok",
	"pokah",
	"pokeng",
	"poker",
	"poket",
	"poko",
	"pokok",
	"pokrol",
	"poksai",
	"pokta",
	"pol",
	"pola",
	"polah",
	"polan",
	"polang",
	"polarimeter",
	"polarimetri",
	"polaris",
	"polarisasi",
	"polaritas",
	"poldan",
	"polder",
	"polemik",
	"polemis",
	"polen",
	"poleng",
	"polenter",
	"poler",
	"poles",
	"polet",
	"poliandri",
	"poliantus",
	"poliester",
	"polifagia",
	"polifase",
	"polifoni",
	"poligam",
	"poligami",
	"poligini",
	"poliglot",
	"poliglotisme",
	"poligon",
	"poligraf",
	"polihalin",
	"polikel",
	"poliket",
	"poliklinik",
	"polikrom",
	"polikultur",
	"polimer",
	"polimerisasi",
	"polinia",
	"polio",
	"polip",
	"polipeptida",
	"polipetal",
	"poliploid",
	"polipropilena",
	"polis",
	"polisakarida",
	"polisemi",
	"polisentrisme",
	"polisepal",
	"polisi",
	"polisiklis",
	"polisilogisme",
	"polisindeton",
	"polisional",
	"polispermi",
	"polister",
	"politbiro",
	"politeis",
	"politeisme",
	"politeistis",
	"politeknik",
	"politena",
	"politik",
	"politika",
	"politikus",
	"politis",
	"politisasi",
	"poliuretan",
	"polivini",
	"polizoa",
	"polka",
	"polkadot",
	"polmah",
	"polo",
	"polok",
	"polones",
	"polong",
	"polonium",
	"polonter",
	"polos",
	"polusi",
	"polutan",
	"polutif",
	"poma",
	"pomade",
	"pomologi",
	"pompa",
	"pompang",
	"pompon",
	"pompong",
	"pon",
	"ponakan",
	"ponco",
	"pondamen",
	"pondar",
	"ponderabilitas",
	"pondik",
	"pondoh",
	"pondok",
	"pondong",
	"pongah",
	"ponggang",
	"ponggok",
	"pongkol",
	"pongsu",
	"poni",
	"ponil",
	"ponok",
	"ponor",
	"pons",
	"pontang-panting",
	"ponten",
	"pontoh",
	"ponton",
	"poo",
	"pop",
	"popelin",
	"popi",
	"popok",
	"popor",
	"popularisasi",
	"popularitas",
	"populasi",
	"populer",
	"populis",
	"populisme",
	"pora",
	"porah",
	"porak-parik",
	"porak-peranda",
	"porak-poranda",
	"porfiria",
	"pori",
	"porisitas",
	"porno",
	"pornografi",
	"pornografis",
	"porok",
	"porong",
	"poros",
	"porositas",
	"porot",
	"porselen",
	"porsi",
	"porta",
	"portabel",
	"portal",
	"portepel",
	"portik",
	"portir",
	"porto",
	"portofolio",
	"pos",
	"pose",
	"poser",
	"posesif",
	"posisi",
	"positif",
	"positivisme",
	"positivistik",
	"positron",
	"positronium",
	"poskar",
	"poso",
	"posologi",
	"postar",
	"poster",
	"posterior",
	"postulat",
	"postur",
	"pot",
	"potas",
	"potasium",
	"potator",
	"potehi",
	"potel",
	"potensi",
	"potensial",
	"potensiometer",
	"potia",
	"potlot",
	"potol",
	"potong",
	"potret",
	"poundal",
	"poyang",
	"praanggapan",
	"praba",
	"prabu",
	"pradana",
	"pradesa",
	"pradesain",
	"pradini",
	"praduga",
	"pragmatik",
	"pragmatika",
	"pragmatis",
	"pragmatisme",
	"prah",
	"prahara",
	"prahoto",
	"prairi",
	"praja",
	"prajaksa",
	"prajurit",
	"prakala",
	"prakarsa",
	"prakarya",
	"prakata",
	"prakilang",
	"prakira",
	"prakondisi",
	"prakonsepsi",
	"praksis",
	"praktek",
	"praktik",
	"praktikan",
	"praktikum",
	"praktis",
	"praktisi",
	"pralahir",
	"pramenstruasi",
	"prameswari",
	"pramodern",
	"pramubakti",
	"pramubarang",
	"pramubayi",
	"pramudi",
	"pramugara",
	"pramugari",
	"pramujasa",
	"pramuka",
	"pramukamar",
	"pramuniaga",
	"pramupintu",
	"pramuria",
	"pramusaji",
	"pramusiwi",
	"pramutamu",
	"pramuwisata",
	"pramuwisma",
	"pranala",
	"pranata",
	"pranatacara",
	"pranatal",
	"prangas",
	"prangko",
	"pranikah",
	"prapalatal",
	"prapatan",
	"prapendapat",
	"praperadilan",
	"prapromosi",
	"prapuber",
	"prapubertas",
	"prapuna",
	"prapustaka",
	"prarasa",
	"prarekam",
	"praremaja",
	"prasaja",
	"prasangka",
	"prasaran",
	"prasarana",
	"prasasti",
	"prasawya",
	"prasejahtera",
	"prasejarah",
	"prasekolah",
	"praseminar",
	"praseodimium",
	"prasetia",
	"prasi",
	"prasmanan",
	"prastudi",
	"prasyarat",
	"pratersier",
	"pratinjau",
	"prawacana",
	"prawira",
	"prayang",
	"prayitna",
	"prayojana",
	"prayuwana",
	"preadvis",
	"preambul",
	"preantena",
	"preasetabulum",
	"predasi",
	"predator",
	"predestinasi",
	"predikat",
	"predikatif",
	"prediksi",
	"predisposisi",
	"preferensi",
	"prefiks",
	"prehistori",
	"prei",
	"prekositas",
	"prekursor",
	"preliminer",
	"prelude",
	"preman",
	"prematur",
	"premi",
	"premis",
	"premium",
	"premolar",
	"prenatal",
	"prenjak",
	"preparat",
	"preposisi",
	"prepotensi",
	"prerogatif",
	"pres",
	"presbiopia",
	"presbiterium",
	"preseden",
	"presensi",
	"presentabel",
	"presentasi",
	"presentil",
	"preservasi",
	"presesi",
	"presiden",
	"presidensial",
	"presidentil",
	"presidium",
	"presiositas",
	"presipitasi",
	"presisi",
	"preskripsi",
	"preskriptif",
	"prestasi",
	"prestise",
	"prestisius",
	"presto",
	"presumsi",
	"pretel",
	"pretensi",
	"prevalensi",
	"preventif",
	"preview",
	"prewangan",
	"pria",
	"priagung",
	"priayi",
	"pribadi",
	"pribumi",
	"prihatin",
	"prima",
	"primadona",
	"primas",
	"primata",
	"primbon",
	"primer",
	"primitif",
	"primogenetur",
	"primordial",
	"primordialisme",
	"primpen",
	"pringas-pringis",
	"pringgitan",
	"prinsip",
	"prinsipiil",
	"prioritas",
	"pripih",
	"pris",
	"prisma",
	"prit",
	"privasi",
	"privat",
	"privatisasi",
	"prive",
	"privilese",
	"pro",
	"proaktif",
	"probabilitas",
	"problem",
	"problematik",
	"procot",
	"prodemokrasi",
	"prodeo",
	"produk",
	"produksi",
	"produktif",
	"produktivitas",
	"produsen",
	"produser",
	"proenzim",
	"prof",
	"profan",
	"profanitas",
	"profase",
	"profesi",
	"profesional",
	"profesionalisme",
	"profesionalitas",
	"profesor",
	"profetik",
	"profil",
	"profilaksis",
	"profit",
	"profitabel",
	"profitabilitas",
	"proforma",
	"progeni",
	"progesteron",
	"prognosis",
	"program",
	"programa",
	"progres",
	"progresif",
	"progresivitas",
	"prohibisi",
	"proklamasi",
	"proklamator",
	"proklitik",
	"proksimal",
	"proksimat",
	"prokurasi",
	"prokurator",
	"prolat",
	"prolegomena",
	"proleksem",
	"proletar",
	"proletariat",
	"proletarisasi",
	"proliferasi",
	"prolog",
	"promenade",
	"prometium",
	"prominen",
	"prominensia",
	"promiskuitas",
	"promontorium",
	"promosi",
	"promotif",
	"promotor",
	"promovendus",
	"pronomina",
	"pronominal",
	"pronominalisasi",
	"prop",
	"propaganda",
	"propagandis",
	"propana",
	"propelan",
	"propeler",
	"properti",
	"propfan",
	"propilena",
	"propinsi",
	"proporsi",
	"proporsional",
	"proposal",
	"proposisi",
	"propulsi",
	"prosa",
	"prosais",
	"prosede",
	"prosedur",
	"prosedural",
	"prosenium",
	"proses",
	"prosesi",
	"prosesor",
	"proskonion",
	"proskriptivisme",
	"prosodi",
	"prosodis",
	"prospek",
	"prospeksi",
	"prospektif",
	"prospektus",
	"prostaglandin",
	"prostat",
	"prostitusi",
	"protagonis",
	"protaktinium",
	"protandri",
	"protandris",
	"protasis",
	"proteid",
	"protein",
	"proteinuria",
	"proteksi",
	"proteksionisme",
	"protektif",
	"protektorat",
	"proteolisis",
	"proteolitik",
	"protes",
	"protese",
	"protesis",
	"protestan",
	"protestantisme",
	"protista",
	"proto",
	"protofon",
	"protogenesis",
	"protokol",
	"protokoler",
	"protolisis",
	"protolitik",
	"proton",
	"protoneolitik",
	"protoplasma",
	"protoraks",
	"prototipe",
	"protozoa",
	"protrombin",
	"protuberansia",
	"provinsi",
	"provinsialisme",
	"provisi",
	"provisional",
	"provitamin",
	"provokasi",
	"provokatif",
	"provokator",
	"provokatur",
	"provos",
	"proyek",
	"proyeksi",
	"proyektil",
	"proyektor",
	"prudensial",
	"prurigo",
	"psalm",
	"psamolitoral",
	"pseudo",
	"pseudokata",
	"pseudomorf",
	"pseudonim",
	"psi",
	"psike",
	"psikiater",
	"psikiatri",
	"psikis",
	"psikoanalisis",
	"psikodrama",
	"psikofarmakologi",
	"psikofisiologis",
	"psikokinesis",
	"psikolepsi",
	"psikolinguistik",
	"psikolog",
	"psikologi",
	"psikologis",
	"psikometri",
	"psikometrika",
	"psikomotor",
	"psikomotorik",
	"psikoneurosis",
	"psikopat",
	"psikopati",
	"psikopatologi",
	"psikosastra",
	"psikoseksual",
	"psikosis",
	"psikosomatik",
	"psikoteknik",
	"psikoteknis",
	"psikoterapi",
	"psikotes",
	"psikotropika",
	"psikrofili",
	"psikrometer",
	"psikrometri",
	"psitakosis",
	"psoriasis",
	"pterodaktil",
	"pteropoda",
	"ptialin",
	"ptomaina",
	"puadai",
	"puah",
	"puak",
	"puaka",
	"pual",
	"pualam",
	"puan",
	"puas",
	"puasa",
	"puatang",
	"pub",
	"puber",
	"pubertas",
	"pubesens",
	"publik",
	"publikasi",
	"publisis",
	"publisistik",
	"publisitas",
	"pucang",
	"pucat",
	"pucik",
	"pucuk",
	"pucung",
	"pudar",
	"pudat",
	"pudel",
	"puder",
	"pudi",
	"puding",
	"pudur",
	"puerpera",
	"puerperium",
	"pugak",
	"pugar",
	"pugas",
	"puguh",
	"puih",
	"puing",
	"puisi",
	"puitis",
	"puitisasi",
	"puja",
	"pujangga",
	"puji",
	"pujuk",
	"pujur",
	"pujut",
	"pukah",
	"pukal",
	"pukang",
	"pukas",
	"pukat",
	"pukau",
	"puki",
	"pukul",
	"pul",
	"pula",
	"pulai",
	"pulan",
	"pulang",
	"pulas",
	"pulasan",
	"pulasari",
	"pulau",
	"pulen",
	"pulih",
	"pulik",
	"pulover",
	"pulp",
	"pulpa",
	"pulpen",
	"pulper",
	"pulsa",
	"pulsar",
	"pulsasi",
	"puluh",
	"pulun",
	"pulung",
	"pulut",
	"puma",
	"pumpun",
	"pun",
	"punah",
	"punai",
	"punakawan",
	"punar",
	"punat",
	"punca",
	"puncak",
	"punci",
	"pundak",
	"punden",
	"pundi",
	"punding",
	"punduh",
	"punduk",
	"pundung",
	"pung",
	"pungak-pinguk",
	"punggah",
	"punggai",
	"punggal",
	"punggawa",
	"pungguk",
	"punggung",
	"punggur",
	"pungkah",
	"pungkang",
	"pungkas",
	"pungkur",
	"pungli",
	"pungsi",
	"pungtuasi",
	"punguk",
	"pungut",
	"punia",
	"punjul",
	"punjung",
	"punjut",
	"punk",
	"puntal",
	"punti",
	"puntianak",
	"puntir",
	"puntuk",
	"puntul",
	"puntung",
	"punuk",
	"punya",
	"pupa",
	"pupil",
	"pupu",
	"pupuan",
	"pupuh",
	"pupuk",
	"pupur",
	"pupus",
	"puput",
	"pura",
	"purba",
	"purbakala",
	"purbani",
	"purbasangka",
	"purbawisesa",
	"purdah",
	"pure",
	"purgatif",
	"puri",
	"purifikasi",
	"purik",
	"puring",
	"puris",
	"purisme",
	"puristis",
	"puritan",
	"puritanisme",
	"purna",
	"purnabakti",
	"purnaintegrasi",
	"purnajabatan",
	"purnajual",
	"purnakarya",
	"purnama",
	"purnapugar",
	"purnasarjana",
	"purnatugas",
	"purnawaktu",
	"purpura",
	"purser",
	"puruk",
	"puruk-parak",
	"purun",
	"purus",
	"purusa",
	"purut",
	"purwa",
	"purwakanti",
	"purwapada",
	"purwarupa",
	"pus",
	"pusa",
	"pusak",
	"pusaka",
	"pusang",
	"pusar",
	"pusara",
	"pusat",
	"puser",
	"pusing",
	"puskesmas",
	"puso",
	"puspa",
	"puspadana",
	"puspadanta",
	"puspamala",
	"pusparagam",
	"puspas",
	"puspawarna",
	"puspita",
	"pusta",
	"pustaha",
	"pustaka",
	"pustakaloka",
	"pusu",
	"pusung",
	"pusut",
	"putar",
	"putat",
	"puter",
	"puti",
	"putih",
	"putik",
	"puting",
	"putra",
	"putranda",
	"putrawali",
	"putrefaksi",
	"putresin",
	"putri",
	"putriditas",
	"putu",
	"putus",
	"putut",
	"puvi-puvi",
	"puyan",
	"puyeng",
	"puyer",
	"puyonghai",
	"puyu",
	"puyuh",
	"qaf",
	"qari",
	"qariah",
	"qasar",
	"qiamulail",
	"qiraah",
	"qiraat",
	"qudsi",
	"quran",
	"raba",
	"raba-rubu",
	"rabak",
	"raban",
	"rabana",
	"rabani",
	"rabas",
	"rabat",
	"rabet",
	"rabi",
	"rabies",
	"rabik",
	"rabit",
	"rabiulakhir",
	"rabiulawal",
	"rabotase",
	"rabu",
	"rabuk",
	"rabulizat",
	"rabun",
	"rabung",
	"rabut",
	"racak",
	"racau",
	"racik",
	"racuh",
	"racun",
	"rad",
	"rada",
	"radaah",
	"radah",
	"radai",
	"radak",
	"radang",
	"radar",
	"radas",
	"raden",
	"rades",
	"radi",
	"radiah",
	"radial",
	"radian",
	"radians",
	"radiasi",
	"radiator",
	"radif",
	"radikal",
	"radikalisasi",
	"radikalisme",
	"radiks",
	"radikula",
	"radin",
	"radio",
	"radioaktif",
	"radioaktivitas",
	"radiogenetika",
	"radiogoniometer",
	"radiogoniometri",
	"radiograf",
	"radiografi",
	"radiogram",
	"radioisotop",
	"radiokarbon",
	"radiokimia",
	"radiolisis",
	"radiolog",
	"radiologi",
	"radiolokasi",
	"radiometer",
	"radiosonde",
	"radiotelefoni",
	"radiotelegrafi",
	"radiotelegrafis",
	"radioterapi",
	"radis",
	"radium",
	"radius",
	"radon",
	"radu",
	"radurisasi",
	"rafak",
	"rafaksi",
	"rafe",
	"rafi",
	"rafia",
	"rafidi",
	"rafik",
	"raflesia",
	"raga",
	"ragam",
	"ragang",
	"ragas",
	"ragawi",
	"ragi",
	"ragib",
	"ragil",
	"ragu",
	"raguk",
	"ragum",
	"ragung",
	"ragut",
	"rahak",
	"rahang",
	"rahap",
	"raharja",
	"rahasia",
	"rahat",
	"rahayu",
	"rahib",
	"rahim",
	"rahimakallah",
	"rahimakumullah",
	"rahmah",
	"rahman",
	"rahmat",
	"rahmatullah",
	"rahu",
	"rai",
	"raib",
	"raigedeg",
	"raih",
	"raimuna",
	"rais",
	"raja",
	"rajab",
	"rajabiah",
	"rajah",
	"rajalela",
	"rajam",
	"rajang",
	"rajapati",
	"rajawali",
	"rajim",
	"rajin",
	"rajok",
	"rajuk",
	"rajul",
	"rajungan",
	"rajut",
	"rak",
	"raka",
	"rakaat",
	"rakah",
	"rakanita",
	"rakap",
	"rakat",
	"rakawira",
	"rakbol",
	"raket",
	"rakila",
	"rakis",
	"rakit",
	"rakitis",
	"rakna",
	"raksa",
	"raksabumi",
	"raksasa",
	"raksi",
	"rakuk",
	"rakung",
	"rakus",
	"rakut",
	"rakyat",
	"rakyu",
	"ralat",
	"ralip",
	"ram",
	"rama",
	"rama-rama",
	"ramadan",
	"ramah",
	"ramai",
	"ramal",
	"ramanda",
	"ramania",
	"rambah",
	"rambai",
	"rambak",
	"ramban",
	"rambang",
	"rambat",
	"rambeh",
	"rambih",
	"rambu",
	"rambun",
	"rambung",
	"rambut",
	"rambutan",
	"rambuti",
	"rames",
	"rami",
	"ramin",
	"ramirezi",
	"rampa",
	"rampai",
	"rampak",
	"rampang",
	"rampas",
	"rampat",
	"ramping",
	"rampok",
	"rampuh",
	"rampung",
	"rampus",
	"ramu",
	"ramus",
	"rana",
	"ranah",
	"ranai",
	"ranap",
	"ranca",
	"rancah",
	"rancak",
	"rancam",
	"rancang",
	"rancap",
	"rancau",
	"rancu",
	"rancung",
	"randa",
	"randa-rondo",
	"randah",
	"randai",
	"randajawan",
	"randak",
	"randat",
	"randau",
	"randek",
	"randi",
	"randu",
	"randuk",
	"randung",
	"rang",
	"rangah",
	"rangai",
	"rangak",
	"rangam",
	"rangas",
	"rangga",
	"ranggah",
	"ranggak",
	"ranggas",
	"ranggeh",
	"ranggi",
	"ranggit",
	"ranggul",
	"ranggung",
	"rangin",
	"rangina",
	"rangka",
	"rangkai",
	"rangkak",
	"rangkam",
	"rangkang",
	"rangkap",
	"rangkaya",
	"rangket",
	"rangkiang",
	"rangkik",
	"rangking",
	"rangkit",
	"rangkok",
	"rangkul",
	"rangkum",
	"rangkung",
	"rangkup",
	"rangkus",
	"rangkut",
	"rango-rango",
	"rangrang",
	"rangrangan",
	"rangsang",
	"rangu",
	"rangum",
	"rangup",
	"rani",
	"ranjah",
	"ranjang",
	"ranjau",
	"ranji",
	"ranjing",
	"rankine",
	"ransel",
	"ransum",
	"rantai",
	"rantam",
	"rantang",
	"rantas",
	"rantau",
	"rante",
	"ranti",
	"ranting",
	"rantuk",
	"rantus",
	"ranum",
	"ranyah",
	"ranyang",
	"ranyau",
	"ranyun",
	"rap",
	"rapah",
	"rapai",
	"rapak",
	"rapal",
	"rapang",
	"rapat",
	"rapel",
	"rapi",
	"rapiah",
	"rapik",
	"rapor",
	"rapsodi",
	"rapu",
	"rapuh",
	"rapun",
	"rapung",
	"rapus",
	"raraha",
	"rarai",
	"rarak",
	"rarangan",
	"raras",
	"ras",
	"rasa",
	"rasai",
	"rasam",
	"rasamala",
	"rasan",
	"rasau",
	"rasberi",
	"rase",
	"rasem",
	"rasi",
	"rasia",
	"rasial",
	"rasialis",
	"rasialisme",
	"rasian",
	"rasio",
	"rasional",
	"rasionalis",
	"rasionalisasi",
	"rasionalisme",
	"rasionalitas",
	"rasisme",
	"raster",
	"rasuk",
	"rasul",
	"rasuli",
	"rasulullah",
	"rasyid",
	"rasywah",
	"rat",
	"rata",
	"ratah",
	"ratap",
	"ratib",
	"ratifikasi",
	"ratna",
	"ratu",
	"ratus",
	"rau",
	"raudah",
	"raudatul",
	"raudatulatfal",
	"raum",
	"raun",
	"raung",
	"raup",
	"raut",
	"rawa",
	"rawah",
	"rawai",
	"rawak",
	"rawan",
	"rawang",
	"rawat",
	"rawatib",
	"rawi",
	"rawin",
	"rawit",
	"rawon",
	"rawuh",
	"raya",
	"rayah",
	"rayan",
	"rayang",
	"rayap",
	"rayau",
	"rayon",
	"rayonisasi",
	"rayu",
	"razia",
	"reagen",
	"reagensia",
	"reak",
	"reaksi",
	"reaksioner",
	"reaktan",
	"reaktans",
	"reaktansi",
	"reaktif",
	"reaktivitas",
	"reakton",
	"reaktor",
	"reaktualisasi",
	"real",
	"realis",
	"realisasi",
	"realisme",
	"realistis",
	"realitas",
	"realokasi",
	"realpolitik",
	"reasuransi",
	"reaumur",
	"reba",
	"rebab",
	"rebah",
	"rebak",
	"reban",
	"rebana",
	"rebas",
	"rebat",
	"rebeh",
	"rebek",
	"rebes",
	"rebet",
	"rebewes",
	"reboisasi",
	"rebon",
	"rebu",
	"rebuk",
	"rebung",
	"rebus",
	"rebut",
	"reca",
	"recak",
	"receh",
	"recet",
	"recik",
	"recok",
	"recup",
	"reda",
	"redah",
	"redaksi",
	"redaksional",
	"redaktur",
	"redam",
	"redang",
	"redap",
	"redefinisi",
	"redih",
	"redik",
	"redoks",
	"reduksi",
	"reduksionisme",
	"redum",
	"redup",
	"reduplikasi",
	"redusir",
	"redut",
	"reedukasi",
	"reekspor",
	"referat",
	"referen",
	"referendaris",
	"referendum",
	"referensi",
	"referensial",
	"reflasi",
	"refleks",
	"refleksi",
	"reflektif",
	"reflektor",
	"reformasi",
	"reformis",
	"refraksi",
	"refraktometer",
	"refraktor",
	"refrein",
	"refrigerator",
	"regah",
	"regan",
	"regang",
	"regas",
	"regat",
	"regata",
	"regel",
	"regen",
	"regenarasi",
	"regenerasi",
	"reges",
	"regi",
	"regio",
	"region",
	"regional",
	"regionalisme",
	"register",
	"registrasi",
	"regisur",
	"reglemen",
	"reglementer",
	"regol",
	"regresi",
	"regresif",
	"regu",
	"reguk",
	"regularisasi",
	"regulasi",
	"regulatif",
	"regulator",
	"reguler",
	"regup",
	"rehab",
	"rehabilitasi",
	"rehabilitatif",
	"rehal",
	"rehat",
	"rehidrasi",
	"reideologisasi",
	"reindoktrinasi",
	"reinkarnasi",
	"reintegrasi",
	"reinterpretasi",
	"reinvestasi",
	"reja",
	"rejab",
	"rejah",
	"rejan",
	"rejang",
	"rejasa",
	"rejeh",
	"rejeng",
	"rejuk",
	"rek",
	"reka",
	"rekah",
	"rekal",
	"rekalkulasi",
	"rekalsitran",
	"rekam",
	"rekan",
	"rekanalisasi",
	"rekanita",
	"rekap",
	"rekapangan",
	"rekapitalisasi",
	"rekapitulasi",
	"rekat",
	"rekata",
	"rekayasa",
	"reken",
	"rekening",
	"rekes",
	"rekisitor",
	"rekisitur",
	"reklamasi",
	"reklame",
	"reklasering",
	"reklasifikasi",
	"rekognisi",
	"rekoleksi",
	"rekombinan",
	"rekombinasi",
	"rekomendasi",
	"rekonsiliasi",
	"rekonstruksi",
	"rekonstruktif",
	"rekonvensi",
	"rekor",
	"rekreasi",
	"rekrut",
	"rekrutmen",
	"reksa",
	"rekstok",
	"rektifikasi",
	"rekto",
	"rektor",
	"rekuiem",
	"rekuisisi",
	"rekuisitor",
	"rekurs",
	"rel",
	"rela",
	"relai",
	"relaks",
	"relaksasi",
	"relang",
	"relap",
	"relas",
	"relasi",
	"relatif",
	"relativisasi",
	"relativisme",
	"relativitas",
	"relau",
	"relban",
	"relevan",
	"relevansi",
	"reli",
	"reliabel",
	"reliabilitas",
	"relief",
	"religi",
	"religiositas",
	"religius",
	"relik",
	"relikui",
	"relikwi",
	"relokasi",
	"reluk",
	"relung",
	"rem",
	"rema",
	"remah",
	"remai",
	"remaja",
	"remak",
	"remanen",
	"remang",
	"remas",
	"rematik",
	"rematisme",
	"rematoid",
	"rembah",
	"rembang",
	"rembas",
	"rembat",
	"rembega",
	"rembes",
	"rembet",
	"rembih",
	"rembuk",
	"rembulan",
	"rembunai",
	"remburs",
	"rembut",
	"remedi",
	"remedial",
	"remediasi",
	"remeh",
	"remenia",
	"remet",
	"remi",
	"remiak",
	"remiling",
	"reminisensi",
	"remis",
	"remisi",
	"remoh",
	"rempa",
	"rempah",
	"rempak",
	"rempela",
	"rempelas",
	"rempenai",
	"rempeyek",
	"rempong",
	"rempuh",
	"rempuk",
	"rempus",
	"remujung",
	"remuk",
	"remunerasi",
	"remunggai",
	"rena",
	"renah",
	"renai",
	"renaisans",
	"renal",
	"renang",
	"rencah",
	"rencak",
	"rencam",
	"rencana",
	"rencang",
	"rencat",
	"renceh",
	"renceng",
	"rencet",
	"rencong",
	"renda",
	"rendabel",
	"rendah",
	"rendam",
	"rendang",
	"rendemen",
	"rendeng",
	"rendet",
	"rendong",
	"renegosiasi",
	"renek",
	"renes",
	"reng",
	"rengadean",
	"rengap",
	"rengas",
	"rengat",
	"rengeh",
	"rengek",
	"rengeng",
	"rengga",
	"renggam",
	"renggang",
	"renggat",
	"renggek",
	"rengges",
	"rengginang",
	"renggut",
	"rengit",
	"rengkah",
	"rengkam",
	"rengkeh",
	"rengket",
	"rengkit",
	"rengkong",
	"rengkudah",
	"rengkuh",
	"rengrengan",
	"rengsa",
	"rengus",
	"rengut",
	"renik",
	"renin",
	"renium",
	"renjana",
	"renjatan",
	"renjeng",
	"renjis",
	"renjong",
	"renjul",
	"renkinang",
	"renovasi",
	"renta",
	"rentabilitas",
	"rentak",
	"rentaka",
	"rental",
	"rentan",
	"rentang",
	"rentap",
	"rentas",
	"rente",
	"renteng",
	"rentenir",
	"rentet",
	"renti",
	"rentik",
	"renumerasi",
	"renung",
	"renvoi",
	"renyah",
	"renyai",
	"renyam",
	"renyang",
	"renyap",
	"renyau",
	"renyeh",
	"renyek",
	"renyem",
	"renyuk",
	"renyut",
	"reog",
	"reol",
	"reologi",
	"reometri",
	"reorganisasi",
	"reorientasi",
	"reostat",
	"reot",
	"rep-repan",
	"repang",
	"reparasi",
	"repas",
	"repatrian",
	"repatriasi",
	"repek",
	"repertoar",
	"repertorium",
	"repes",
	"repet",
	"repeten",
	"repetisi",
	"repetitif",
	"repetitor",
	"repih",
	"replik",
	"replika",
	"repolarisasi",
	"repormir",
	"reportase",
	"reporter",
	"reposisi",
	"repot",
	"representasi",
	"representatif",
	"represi",
	"represif",
	"reproduksi",
	"reprografi",
	"reptil",
	"reptilia",
	"republik",
	"republiken",
	"repuh",
	"repui",
	"reput",
	"reputasi",
	"rerak",
	"rerangka",
	"reranting",
	"reras",
	"rerata",
	"reresanan",
	"rerongkong",
	"rerot",
	"rerugi",
	"reruntuk",
	"resa",
	"resah",
	"resak",
	"resam",
	"resan",
	"resap",
	"resbang",
	"resek",
	"resensi",
	"resensor",
	"resep",
	"resepsi",
	"resepsionis",
	"reseptif",
	"reseptor",
	"reserse",
	"resersir",
	"reservat",
	"reserve",
	"reservoir",
	"reses",
	"resesi",
	"resi",
	"residen",
	"residivis",
	"residivisme",
	"residivistis",
	"residu",
	"resik",
	"resiko",
	"resimen",
	"resin",
	"resinol",
	"resipien",
	"resiprok",
	"resiprokal",
	"resistan",
	"resistans",
	"resistansi",
	"resistor",
	"resital",
	"resitasi",
	"resmi",
	"resolusi",
	"resonan",
	"resonansi",
	"resonator",
	"resor",
	"resorpsi",
	"resorsinol",
	"resosialisasi",
	"respek",
	"respirasi",
	"respirator",
	"responden",
	"respons",
	"responsi",
	"responsif",
	"restan",
	"restiformis",
	"restitusi",
	"restoran",
	"restorasi",
	"restriksi",
	"restriktif",
	"restrukturisasi",
	"restu",
	"restung",
	"resu",
	"resultan",
	"resume",
	"resurjensi",
	"ret",
	"reta",
	"retail",
	"retak",
	"retardasi",
	"retas",
	"retek",
	"retenidos",
	"retensi",
	"retet",
	"retih",
	"retikuler",
	"retina",
	"retinakulum",
	"retinitis",
	"retok",
	"retorik",
	"retorika",
	"retoris",
	"retorsi",
	"retradisionalisasi",
	"retreatisme",
	"retret",
	"retribusi",
	"retro",
	"retroaktif",
	"retrofleks",
	"retrofleksi",
	"retrogresi",
	"retrogresif",
	"retrolingual",
	"retromamal",
	"retromandibuler",
	"retrospeksi",
	"retur",
	"retus",
	"reumatismos",
	"reuni",
	"reunifikasi",
	"revaksinasi",
	"revaluasi",
	"revans",
	"reverberasi",
	"revisi",
	"revisibilitas",
	"revisionis",
	"revitalisasi",
	"revolusi",
	"revolusioner",
	"revolver",
	"rewak",
	"rewan",
	"rewanda",
	"rewang",
	"rewel",
	"rewet",
	"reyal",
	"reyot",
	"rezeki",
	"rezim",
	"rho",
	"ria",
	"riadat",
	"riah",
	"riak",
	"rial",
	"riam",
	"rian",
	"riang",
	"riap",
	"rias",
	"riba",
	"ribang",
	"ribat",
	"ribatat",
	"riben",
	"riboflavin",
	"ribosom",
	"ribu",
	"ribut",
	"rica",
	"ricau",
	"ricik",
	"ricuh",
	"rida",
	"ridan",
	"ridi",
	"riding",
	"ridip",
	"ridu",
	"rigai",
	"rigi-rigi",
	"rihat",
	"rihlah",
	"riil",
	"rijal",
	"rijalugaib",
	"rijalulgaib",
	"rijang",
	"rikuh",
	"rileks",
	"rilis",
	"rim",
	"rima",
	"rimas",
	"rimata",
	"rimba",
	"rimbas",
	"rimbat",
	"rimbawan",
	"rimbun",
	"rime",
	"rimis",
	"rimpang",
	"rimpel",
	"rimpi",
	"rimpuh",
	"rimpung",
	"rinai",
	"rincih",
	"rincis",
	"rincu",
	"rindang",
	"rinding",
	"rindu",
	"ring",
	"ringan",
	"ringgit",
	"ringih",
	"ringik",
	"ringin",
	"ringis",
	"ringkai",
	"ringkas",
	"ringkih",
	"ringkik",
	"ringking",
	"ringkuk",
	"ringkus",
	"ringsek",
	"ringsing",
	"rini",
	"rinitis",
	"rinjing",
	"rinoskop",
	"rintang",
	"rintas",
	"rintih",
	"rintik",
	"rintis",
	"rinyai",
	"riol",
	"ripit",
	"ripta",
	"ripuh",
	"ripuk",
	"ririt",
	"risa",
	"risak",
	"risalah",
	"risau",
	"riset",
	"risi",
	"risik",
	"risiko",
	"risit",
	"riskan",
	"rit",
	"ritel",
	"ritma",
	"ritme",
	"ritmis",
	"ritual",
	"ritul",
	"ritus",
	"riuh",
	"riuk",
	"riung",
	"rival",
	"rivalitas",
	"riwan",
	"riwayat",
	"robak-rabik",
	"robat-rabit",
	"robek",
	"roboh",
	"robok",
	"robot",
	"robotika",
	"rocet",
	"roda",
	"rodan",
	"rodat",
	"rodensial",
	"rodentisida",
	"rodi",
	"rodium",
	"rodok",
	"rodolit",
	"rodong",
	"roga",
	"rogoh",
	"rogok",
	"rogol",
	"roh",
	"rohani",
	"rohaniah",
	"rohmat",
	"rohulkudus",
	"roi",
	"rojeng",
	"rojol",
	"rok",
	"rokade",
	"roker",
	"roket",
	"roki",
	"rokok",
	"rol",
	"rolet",
	"rolpres",
	"roma",
	"roman",
	"romanistik",
	"romansa",
	"romantik",
	"romantika",
	"romantikus",
	"romantis",
	"romantisisme",
	"romawi",
	"rombak",
	"rombang-rambing",
	"rombeng",
	"rombik",
	"rombohedron",
	"romboid",
	"rombok",
	"rombong",
	"rombus",
	"romet",
	"romok",
	"romol-romol",
	"romong",
	"rompak",
	"rompal",
	"rompang",
	"rompeng",
	"rompes",
	"rompi",
	"rompoh",
	"rompok",
	"rompong",
	"rompyok",
	"romsus",
	"romusa",
	"rona",
	"ronce",
	"roncet",
	"ronda",
	"rondah-rondih",
	"ronde",
	"rondo",
	"rondok",
	"roneo",
	"rong",
	"rongak",
	"rongga",
	"ronggang",
	"ronggeng",
	"ronggok",
	"ronggong",
	"rongkoh",
	"rongkok",
	"rongkol",
	"rongkong",
	"rongos",
	"rongrong",
	"rongseng",
	"rongsok",
	"ronta",
	"rontek",
	"rontgen",
	"rontok",
	"ronyeh",
	"ronyok",
	"ropak-rapik",
	"rorehe",
	"rorod",
	"ros",
	"rosario",
	"rosbang",
	"rosela",
	"roseng",
	"roseola",
	"roset",
	"rosin",
	"rosok",
	"rosot",
	"rotan",
	"rotasi",
	"rotator",
	"roti",
	"rotograf",
	"rotok",
	"rowa",
	"rowot",
	"royak",
	"royal",
	"royalti",
	"royan",
	"royemen",
	"royer",
	"royong",
	"rua",
	"ruadat",
	"ruah",
	"ruai",
	"ruak",
	"ruam",
	"ruang",
	"ruap",
	"ruas",
	"ruat",
	"ruaya",
	"ruba-ruba",
	"rubah",
	"rubai",
	"rubaiat",
	"ruban",
	"rubanat",
	"rubel",
	"rubela",
	"rubeola",
	"rubiah",
	"rubidium",
	"rubik",
	"rubin",
	"rubing",
	"rubrik",
	"rubu",
	"rubung",
	"rucah",
	"rudah",
	"rudal",
	"rudapaksa",
	"rudi",
	"rudimen",
	"rudin",
	"rudu",
	"rudus",
	"rugbi",
	"rugi",
	"ruh",
	"ruhbahnat",
	"ruhban",
	"ruhbanat",
	"ruhbaniat",
	"ruilslag",
	"ruing",
	"ruit",
	"rujah",
	"rujak",
	"ruji",
	"rujuk",
	"rukam",
	"rukhsah",
	"rukiah",
	"ruko",
	"ruku",
	"rukuh",
	"rukuk",
	"rukun",
	"rukyat",
	"rukyatulhilal",
	"rum",
	"rumah",
	"rumal",
	"rumba",
	"rumbah",
	"rumbai",
	"rumbia",
	"rumbing",
	"rumbu",
	"rumen",
	"rumenia",
	"rumi",
	"rumin",
	"ruminansi",
	"ruminansia",
	"rumit",
	"rumor",
	"rumpakan",
	"rumpang",
	"rumpi",
	"rumpil",
	"rumpon",
	"rumpun",
	"rumput",
	"rumrum",
	"rumuk",
	"rumung",
	"rumus",
	"runcing",
	"runcit",
	"runding",
	"rundu-rundu",
	"runduk",
	"rundung",
	"rungau",
	"runggas",
	"runggu",
	"runggu-rangga",
	"rungguh",
	"runggut",
	"rungkau",
	"rungkuh",
	"rungkun",
	"rungkup",
	"rungu",
	"rungus",
	"rungut",
	"runjam",
	"runjang",
	"runjau",
	"runjung",
	"runtai",
	"runtang-runtung",
	"runtas",
	"runti",
	"runtih",
	"runtuh",
	"runtun",
	"runtut",
	"runut",
	"runyam",
	"runyut",
	"ruok",
	"rupa",
	"rupee",
	"rupiah",
	"rurut",
	"rusa",
	"rusak",
	"rusuh",
	"rusuk",
	"rutab",
	"rute",
	"rutenium",
	"ruterfordium",
	"rutin",
	"rutuk",
	"rutup",
	"ruwah",
	"ruwat",
	"ruwet",
	"ruyak",
	"ruyap",
	"ruyung",
	"ruyup",
	"saadah",
	"saadin",
	"saanen",
	"saat",
	"sab-sab",
	"saba",
	"sabah",
	"sabak",
	"saban",
	"sabana",
	"sabang",
	"sabar",
	"sabas",
	"sabasani",
	"sabat",
	"sabatikal",
	"sabda",
	"sabel",
	"saben",
	"sabet",
	"sabi",
	"sabil",
	"sabilillah",
	"sabit",
	"sabitah",
	"sableng",
	"sablon",
	"sabo",
	"sabot",
	"sabotase",
	"sabsab",
	"sabtu",
	"sabuk",
	"sabun",
	"sabung",
	"sabur",
	"sabut",
	"sad",
	"sadah",
	"sadai",
	"sadak",
	"sadang",
	"sadap",
	"sadar",
	"sadariah",
	"sadarulkalam",
	"sadarusalam",
	"sadau",
	"sadel",
	"sadik",
	"sadin",
	"sading",
	"sadir",
	"sadis",
	"sadisme",
	"sadistis",
	"sado",
	"sadrah",
	"sadran",
	"sadu",
	"sadur",
	"saf",
	"safa",
	"safar",
	"safari",
	"safi",
	"safih",
	"safinah",
	"safinatunajah",
	"safir",
	"safrah",
	"safron",
	"safsaf",
	"safsah",
	"saga",
	"sagai",
	"sagang",
	"sagar",
	"sagitarius",
	"sagon",
	"sagu",
	"saguer",
	"sagur",
	"sah",
	"sahabat",
	"sahaja",
	"saham",
	"sahan",
	"sahang",
	"sahap",
	"sahara",
	"saharah",
	"sahaya",
	"sahayanda",
	"sahda",
	"sahdu",
	"sahi",
	"sahib",
	"sahibulbait",
	"sahibulhajat",
	"sahibulhikayat",
	"sahifah",
	"sahih",
	"sahir",
	"sahkan",
	"sahmura",
	"sahur",
	"sahut",
	"sai",
	"saif",
	"sailan",
	"sailo",
	"saing",
	"sains",
	"saintis",
	"sair",
	"sais",
	"saja",
	"sajadah",
	"sajak",
	"sajang",
	"sajen",
	"saji",
	"sak",
	"saka",
	"sakai",
	"sakal",
	"sakang",
	"sakap",
	"sakar",
	"sakarida",
	"sakarimeter",
	"sakarin",
	"sakarosa",
	"sakat",
	"sake",
	"sakelar",
	"sakelek",
	"sakhawat",
	"sakhi",
	"sakhrat",
	"sakhsi",
	"saki",
	"sakinah",
	"saking",
	"sakit",
	"saklek",
	"sakral",
	"sakramen",
	"sakramental",
	"sakramentalia",
	"sakratulmaut",
	"sakrilegi",
	"sakristi",
	"sakrokoksigeal",
	"sakrolumbal",
	"sakrum",
	"saksama",
	"saksang",
	"saksi",
	"saksofon",
	"sakti",
	"saku",
	"sakura",
	"sal",
	"sala",
	"salaf",
	"salah",
	"salai",
	"salak",
	"salam",
	"salang",
	"salar",
	"salaris",
	"salasal",
	"salat",
	"salatin",
	"saldo",
	"sale",
	"saleh",
	"salem",
	"salep",
	"sali",
	"salib",
	"salihah",
	"salim",
	"salin",
	"salina",
	"salindia",
	"salindra",
	"saling",
	"salinisasi",
	"salinitas",
	"salinometer",
	"salip",
	"salir",
	"salira",
	"salivasi",
	"salju",
	"salmon",
	"salmonela",
	"salon",
	"salpeter",
	"salping",
	"saltasi",
	"salto",
	"saluir",
	"saluk",
	"salung",
	"salur",
	"salut",
	"salvarsan",
	"salvo",
	"sama",
	"samad",
	"samak",
	"saman",
	"samanera",
	"samaniah",
	"samapta",
	"samar",
	"samara",
	"samarium",
	"samas",
	"samawi",
	"samba",
	"sambal",
	"sambalewa",
	"sambang",
	"sambangan",
	"sambar",
	"sambat",
	"sambau",
	"samben",
	"sambet",
	"sambi",
	"sambil",
	"sambiloto",
	"sambit",
	"sambuk",
	"sambung",
	"sambur",
	"sambut",
	"sami",
	"samidra",
	"samijaga",
	"samin",
	"samir",
	"samo-samo",
	"samovar",
	"sampa",
	"sampah",
	"sampai",
	"sampak",
	"sampakan",
	"sampan",
	"sampang",
	"sampanye",
	"sampar",
	"samparan",
	"sampat",
	"sampean",
	"sampek",
	"sampel",
	"samper",
	"sampeyan",
	"sampil",
	"sampilik",
	"samping",
	"sampir",
	"sampling",
	"samplok",
	"sampo",
	"sampu",
	"sampuk",
	"sampul",
	"sampur",
	"samsak",
	"samsam",
	"samseng",
	"samsir",
	"samsiti",
	"samsu",
	"samudra",
	"samuh",
	"samum",
	"samun",
	"samurai",
	"sana",
	"sanad",
	"sanak",
	"sanat",
	"sanatogen",
	"sanatorium",
	"sanatulhijriah",
	"sanatulmiladiah",
	"sanawiah",
	"sanca",
	"sanda",
	"sandal",
	"sandang",
	"sandar",
	"sandel",
	"sandera",
	"sandi",
	"sanding",
	"sandiwara",
	"sando",
	"sandung",
	"sandungan",
	"sanering",
	"sang",
	"sanga",
	"sangai",
	"sangan",
	"sangar",
	"sangat",
	"sangau",
	"sangga",
	"sanggah",
	"sanggam",
	"sanggama",
	"sanggan",
	"sanggang",
	"sanggar",
	"sanggarunggi",
	"sanggat",
	"sanggep",
	"sanggerah",
	"sangging",
	"sanggit",
	"sanggrah",
	"sanggraloka",
	"sanggul",
	"sanggup",
	"sanggurdi",
	"sangha",
	"sangih",
	"sangir",
	"sangit",
	"sangka",
	"sangkak",
	"sangkakala",
	"sangkal",
	"sangkala",
	"sangkan",
	"sangkar",
	"sangkil",
	"sangku",
	"sangkul",
	"sangkur",
	"sangkuriang",
	"sangkut",
	"sangkut-paut",
	"sangli",
	"sangling",
	"sanglir",
	"sangon",
	"sangrai",
	"sangsai",
	"sangsam",
	"sangsang",
	"sangsi",
	"sangu",
	"sanguifikasi",
	"sangulun",
	"sangyang",
	"sani",
	"sanik",
	"sanitas",
	"sanitasi",
	"saniter",
	"sanjai",
	"sanjak",
	"sanjang",
	"sanjung",
	"sanksi",
	"sano",
	"sansai",
	"sanseviera",
	"sanskerta",
	"santa",
	"santai",
	"santak",
	"santam",
	"santan",
	"santap",
	"santase",
	"santau",
	"santer",
	"santet",
	"santiaji",
	"santing",
	"santir",
	"santo",
	"santonin",
	"santri",
	"santun",
	"santung",
	"sanubari",
	"sap",
	"sapa",
	"sapai",
	"saparantu",
	"sapat",
	"sapau",
	"sapersi",
	"sapi",
	"sapih",
	"sapir",
	"sapit",
	"sapogenin",
	"saponin",
	"saprofit",
	"sapta",
	"saptadarma",
	"saptamarga",
	"saptapesona",
	"sapu",
	"saput",
	"saputangan",
	"sar",
	"sara",
	"saradasi",
	"saraf",
	"sarak",
	"saran",
	"sarana",
	"sarang",
	"sarangan",
	"sarap",
	"sarasehan",
	"sarat",
	"sarau",
	"sarden",
	"sardencis",
	"sarean",
	"sareh",
	"sarekat",
	"saren",
	"sarengat",
	"sarhad",
	"sari",
	"saridele",
	"sarik",
	"sarikan",
	"saring",
	"sarira",
	"sarirah",
	"sarit",
	"sarjana",
	"sarju",
	"sarkasme",
	"sarkastis",
	"sarkode",
	"sarkoderma",
	"sarkofagus",
	"sarkolema",
	"sarkologi",
	"sarkoma",
	"sarkoplasma",
	"saron",
	"sarsaparila",
	"sartan",
	"saru",
	"saruk",
	"sarung",
	"sarut",
	"sarwa",
	"sasa",
	"sasak",
	"sasakala",
	"sasana",
	"sasando",
	"sasap",
	"sasar",
	"sasau",
	"sasi",
	"sasian",
	"sasis",
	"sasmita",
	"sastra",
	"sasus",
	"sat",
	"satai",
	"satak",
	"satang",
	"satanologi",
	"satar",
	"sate",
	"satelit",
	"satih",
	"satin",
	"satinet",
	"satir",
	"satire",
	"satiris",
	"sato",
	"satori",
	"satpam",
	"satria",
	"satron",
	"satu",
	"saturnus",
	"saturometer",
	"satwa",
	"satyagraha",
	"satyalencana",
	"satyawacana",
	"sau",
	"saudagar",
	"saudara",
	"saudari",
	"sauh",
	"saujana",
	"sauk",
	"saum",
	"sauna",
	"saung",
	"saur",
	"saus",
	"saut",
	"sauvinis",
	"sauvinisme",
	"sauvinistis",
	"saw",
	"sawa",
	"sawab",
	"sawah",
	"sawai",
	"sawala",
	"sawan",
	"sawang",
	"sawangan",
	"sawar",
	"sawat",
	"sawer",
	"sawi",
	"sawit",
	"sawo",
	"sawut",
	"saya",
	"sayak",
	"sayang",
	"sayap",
	"sayat",
	"sayembara",
	"sayet",
	"sayib",
	"sayid",
	"sayidani",
	"sayidi",
	"sayidina",
	"sayu",
	"sayung",
	"sayup",
	"sayur",
	"seba",
	"sebab",
	"sebahat",
	"sebai",
	"sebak",
	"sebal",
	"sebam",
	"sebar",
	"sebarang",
	"sebarau",
	"sebasah",
	"sebat",
	"sebaur",
	"sebekah",
	"sebel",
	"sebelas",
	"sebeng",
	"sebentar",
	"seberang",
	"seberhana",
	"sebet",
	"sebit",
	"seblang",
	"sebrot",
	"sebu",
	"sebuk",
	"sebum",
	"sebun",
	"sebura",
	"seburas",
	"seburu",
	"seburus",
	"seburut",
	"sebut",
	"secang",
	"seceng",
	"secerek",
	"secina",
	"sedahan",
	"sedak",
	"sedam",
	"sedan",
	"sedang",
	"sedap",
	"sedat",
	"sedatif",
	"sedativa",
	"sedawai",
	"sedekah",
	"sedekap",
	"sedelinggam",
	"sedeng",
	"sederhana",
	"sederum",
	"sedia",
	"sediakala",
	"sedih",
	"sedikit",
	"sedimen",
	"sedimentasi",
	"sedimenter",
	"sedingin",
	"sedong",
	"sedot",
	"sedu",
	"seduayah",
	"seduh",
	"sefalopoda",
	"sefalotoraks",
	"seg",
	"sega",
	"segah",
	"segak",
	"segala",
	"segan",
	"seganda",
	"segani",
	"segar",
	"segara",
	"segata",
	"segeger",
	"segeh",
	"segel",
	"segenap",
	"segera",
	"segi",
	"segianya",
	"segitiga",
	"segmen",
	"segmental",
	"segmentasi",
	"segregasi",
	"seguna",
	"seh",
	"seharah",
	"sehat",
	"sehingga",
	"seia",
	"seilometer",
	"sein",
	"seismik",
	"seismograf",
	"seismogram",
	"seismolog",
	"seismologi",
	"seismometer",
	"sejahtera",
	"sejajar",
	"sejak",
	"sejarah",
	"sejarawan",
	"sejari",
	"sejat",
	"sejati",
	"sejingkat",
	"sejuk",
	"sek",
	"seka",
	"sekadar",
	"sekah",
	"sekak",
	"sekakar",
	"sekakmat",
	"sekal",
	"sekala",
	"sekali",
	"sekaligus",
	"sekalipun",
	"sekalor",
	"sekam",
	"sekan",
	"sekang",
	"sekap",
	"sekapar",
	"sekar",
	"sekarang",
	"sekarat",
	"sekat",
	"sekata",
	"sekaten",
	"sekati",
	"sekaut",
	"sekeber",
	"sekebun",
	"sekedeng",
	"sekeduduk",
	"sekedup",
	"sekelat",
	"sekelebatan",
	"sekelian",
	"sekema",
	"sekendal",
	"sekendi",
	"sekengkeng",
	"sekepat",
	"sekeram",
	"sekeri",
	"sekerindangan",
	"sekering",
	"sekesel",
	"seketeng",
	"sekh",
	"sekian",
	"sekilwak",
	"sekip",
	"sekira",
	"sekiram",
	"sekitar",
	"seko",
	"sekoci",
	"sekoi",
	"sekolah",
	"sekon",
	"sekongkol",
	"sekonyong-konyong",
	"sekop",
	"sekopong",
	"sekoteng",
	"sekrap",
	"sekresi",
	"sekret",
	"sekreta",
	"sekretariat",
	"sekretaris",
	"sekretin",
	"sekring",
	"sekrip",
	"sekrup",
	"seks",
	"seksi",
	"seksmaniak",
	"seksolog",
	"seksologi",
	"seksologis",
	"sekstan",
	"sekstet",
	"seksual",
	"seksualitas",
	"sektarian",
	"sektarianisme",
	"sekte",
	"sektor",
	"sektoral",
	"sekuas",
	"sekui",
	"sekul",
	"sekularis",
	"sekularisasi",
	"sekularisme",
	"sekularitas",
	"sekuler",
	"sekulir",
	"sekunar",
	"sekunder",
	"sekunyit",
	"sekuritas",
	"sekuriti",
	"sekutu",
	"sel",
	"sela",
	"selabar",
	"selaber",
	"selaberak",
	"selada",
	"seladang",
	"seladon",
	"selagi",
	"selai",
	"selain",
	"selaju",
	"selak",
	"selaka",
	"selakarang",
	"selaku",
	"selalu",
	"selam",
	"selamat",
	"selamba",
	"selampai",
	"selampe",
	"selampek",
	"selampit",
	"selan",
	"selancak",
	"selancang",
	"selancar",
	"selang",
	"selangat",
	"selangka",
	"selangkang",
	"selangkup",
	"selanting",
	"selap",
	"selapan",
	"selaput",
	"selar",
	"selara",
	"selarak",
	"selaras",
	"selarung",
	"selasa",
	"selasar",
	"selasih",
	"selat",
	"selatan",
	"selawah",
	"selawat",
	"selawe",
	"selaya",
	"selayun",
	"selayur",
	"sele",
	"selebaran",
	"selebran",
	"selebrasi",
	"selebritas",
	"selebriti",
	"selebu",
	"seleder",
	"selederi",
	"seledri",
	"seleguri",
	"selekeh",
	"selekoh",
	"selekor",
	"seleksi",
	"selekta",
	"selektif",
	"selektivitas",
	"seleler",
	"selembana",
	"selembubu",
	"selempada",
	"selempang",
	"selempukau",
	"selempuri",
	"selendang",
	"selender",
	"selendro",
	"selenggara",
	"selengkatan",
	"selenium",
	"selenografi",
	"selenologi",
	"selentang-selenting",
	"selentik",
	"selenting",
	"seleo",
	"selepa",
	"selepang",
	"selepat",
	"selepe",
	"seleper",
	"selepetan",
	"selepi",
	"selera",
	"selerak",
	"selerang",
	"seleret",
	"selesa",
	"selesai",
	"selesma",
	"seletuk",
	"seleweng",
	"selia",
	"seliap",
	"selibat",
	"selibu",
	"selibut",
	"selidik",
	"seligi",
	"seligit",
	"selimang",
	"selimpang",
	"selimpat",
	"selimut",
	"selinap",
	"selindung",
	"seling",
	"selingar",
	"selingkit",
	"selingkuh",
	"selingkup",
	"selip",
	"selipar",
	"selir",
	"selira",
	"selirak",
	"selirat",
	"seliri",
	"selisih",
	"selisik",
	"selisip",
	"selisir",
	"selit",
	"seliwer",
	"selo",
	"selofan",
	"selok",
	"seloka",
	"selokan",
	"seloki",
	"selom",
	"selomot",
	"selompret",
	"selon",
	"selonding",
	"selong",
	"selongkar",
	"selongsong",
	"selonjor",
	"selonong",
	"selop",
	"seloroh",
	"selot",
	"seloyak",
	"seloyong",
	"selter",
	"seluang",
	"seluar",
	"selubung",
	"seludang",
	"seludu",
	"seluduk",
	"seludup",
	"selui",
	"seluk",
	"seluk-beluk",
	"selukat",
	"selukung",
	"seluler",
	"seluloid",
	"selulosa",
	"selulup",
	"selulur",
	"selumar",
	"selumbar",
	"selumbari",
	"selumbat",
	"selumu",
	"selumur",
	"seluncur",
	"selundat",
	"selundup",
	"selungkang",
	"selungkup",
	"selup",
	"selupan",
	"selupat",
	"selurah",
	"seluru",
	"seluruh",
	"selusuh",
	"selusup",
	"selusur",
	"selut",
	"sema",
	"semadi",
	"semafor",
	"semah",
	"semai",
	"semaja",
	"semak",
	"semalu",
	"semambu",
	"semampai",
	"semampang",
	"semampat",
	"seman",
	"semanak",
	"semandan",
	"semandarasa",
	"semandarasah",
	"semandera",
	"semang",
	"semangat",
	"semanggi",
	"semangka",
	"semangkok",
	"semangkuk",
	"semantan",
	"semantik",
	"semantis",
	"semantung",
	"semaput",
	"semara",
	"semarai",
	"semarak",
	"semaram",
	"semarmendem",
	"semat",
	"semata",
	"semawang",
	"semawar",
	"semaya",
	"semayam",
	"semayi",
	"sembab",
	"sembabat",
	"sembada",
	"sembagi",
	"sembah",
	"sembahyang",
	"sembai",
	"sembak",
	"sembam",
	"sembap",
	"sembar",
	"sembarang",
	"sembari",
	"sembat",
	"sembawang",
	"sembayan",
	"sembelih",
	"sembelit",
	"sember",
	"semberap",
	"semberip",
	"sembesi",
	"sembeta",
	"sembiang",
	"sembilan",
	"sembilang",
	"sembilik",
	"sembilu",
	"sembir",
	"sembirat",
	"semboyan",
	"sembrani",
	"sembrono",
	"sembuang",
	"sembuh",
	"sembul",
	"sembung",
	"sembunyi",
	"sembur",
	"semburat",
	"semburit",
	"semecah",
	"semedera",
	"semejana",
	"semeleh",
	"sememeh",
	"semen",
	"semena",
	"semenanjung",
	"semenda",
	"semendarasa",
	"semenggah",
	"semenjak",
	"semenjana",
	"sementang",
	"sementara",
	"sementasi",
	"sementelah",
	"sementung",
	"semerawang",
	"semerbak",
	"semerdanta",
	"semesta",
	"semester",
	"semi",
	"semiang",
	"semidiurnal",
	"semifinal",
	"semifinalis",
	"semiidiom",
	"semikonduktor",
	"semilat",
	"seminai",
	"seminar",
	"seminari",
	"seminaris",
	"seminau",
	"semiologi",
	"semiotik",
	"semiotika",
	"semipermanen",
	"semir",
	"semitisme",
	"semivokal",
	"semok",
	"sempada",
	"sempadan",
	"sempak",
	"sempal",
	"sempalai",
	"sempana",
	"sempang",
	"sempat",
	"sempelah",
	"sempena",
	"sempil",
	"sempit",
	"semplak",
	"sempoyong",
	"sempoyongan",
	"semprit",
	"semprong",
	"semprot",
	"sempul",
	"sempur",
	"sempuras",
	"sempurna",
	"semrawut",
	"semringah",
	"semsem",
	"semu",
	"semua",
	"semunding",
	"semunian",
	"semur",
	"semut",
	"sen",
	"sena",
	"senak",
	"senam",
	"senamaki",
	"senandika",
	"senandung",
	"senang",
	"senangin",
	"senantan",
	"senantiasa",
	"senapan",
	"senapati",
	"senar",
	"senarai",
	"senario",
	"senat",
	"senator",
	"senawan",
	"senawar",
	"senawat",
	"senawi",
	"senda",
	"sendal",
	"sendalu",
	"sendam",
	"sendang",
	"sendar",
	"sendarat",
	"sendaren",
	"sendat",
	"sendawa",
	"sendayan",
	"sendayang",
	"sendel",
	"sendeng",
	"sender",
	"senderik",
	"senderung",
	"senderut",
	"sendi",
	"sending",
	"sendiri",
	"sendocong",
	"sendok",
	"sendon",
	"sendorong",
	"sendratari",
	"sendu",
	"senduduk",
	"senduk",
	"senen",
	"senewen",
	"seng",
	"sengaja",
	"sengal",
	"sengam",
	"sengangar",
	"sengangkar",
	"sengap",
	"sengar",
	"sengar-sengir",
	"sengarat",
	"sengaring",
	"sengat",
	"sengau",
	"sengelat",
	"senget",
	"senggak",
	"senggang",
	"senggara",
	"senggat",
	"senggau",
	"senggayut",
	"senggerahan",
	"senggeruk",
	"sengget",
	"senggiling",
	"senggol",
	"senggora",
	"senggugu",
	"senggugut",
	"sengguk",
	"senggulung",
	"senggut",
	"sengih",
	"sengingih",
	"sengir",
	"sengit",
	"sengkak",
	"sengkal",
	"sengkalan",
	"sengkang",
	"sengkar",
	"sengkarut",
	"sengkawang",
	"sengkayan",
	"sengked",
	"sengkedan",
	"sengkek",
	"sengkela",
	"sengkelang",
	"sengkelat",
	"sengkeling",
	"sengkelit",
	"sengkenit",
	"sengker",
	"sengketa",
	"sengkil",
	"sengkilit",
	"sengkuang",
	"sengkuap",
	"sengon",
	"sengsai",
	"sengsam",
	"sengsara",
	"sengsem",
	"sengsurit",
	"senguk",
	"sengungut",
	"sengut",
	"seni",
	"senigai",
	"senil",
	"senilitas",
	"seniman",
	"senin",
	"senior",
	"senioritas",
	"senja",
	"senjak",
	"senjang",
	"senjata",
	"senjolong",
	"senjong",
	"senohong",
	"senonoh",
	"senoyong",
	"sensasi",
	"sensasional",
	"sensibel",
	"sensibilitas",
	"sensitif",
	"sensitivitas",
	"sensor",
	"sensoris",
	"sensual",
	"sensualisme",
	"sensualitas",
	"sensur",
	"sensus",
	"senta",
	"sentada",
	"sentadu",
	"sentagi",
	"sentak",
	"sentaka",
	"sental",
	"sentali",
	"sentana",
	"sentap",
	"sentara",
	"senteng",
	"senter",
	"senterpor",
	"senti",
	"sentiare",
	"sentiasa",
	"sentigram",
	"sentil",
	"sentiliter",
	"sentimen",
	"sentimental",
	"sentimentalitas",
	"sentimentil",
	"sentimeter",
	"senting",
	"sentiong",
	"sentiung",
	"sentol",
	"sentong",
	"sentosa",
	"sentra",
	"sentral",
	"sentralisasi",
	"sentralistis",
	"sentrifugal",
	"sentripetal",
	"sentrum",
	"sentuh",
	"sentuk",
	"sentul",
	"sentung",
	"senu",
	"senuh",
	"senuk",
	"senunggang",
	"senur",
	"senyampang",
	"senyap",
	"senyar",
	"senyawa",
	"senyum",
	"senyur",
	"seok",
	"seolah-olah",
	"sep",
	"sepada",
	"sepah",
	"sepai",
	"sepak",
	"sepakat",
	"sepal",
	"sepala-pala",
	"sepam",
	"sepan",
	"sepanar",
	"sepandri",
	"sepang",
	"sepangkalan",
	"separasi",
	"separatis",
	"separatisme",
	"separbang",
	"sepasin",
	"sepat",
	"sepatbor",
	"sepatu",
	"sepeda",
	"sepedas",
	"sepegoh",
	"sepekuk",
	"sepel",
	"sepele",
	"sepeling",
	"sepen",
	"sepenuh",
	"seperah",
	"seperantu",
	"sepersi",
	"seperti",
	"sepesan",
	"sepet",
	"sepetir",
	"sepi",
	"sepih",
	"sepiker",
	"sepir",
	"sepit",
	"seples",
	"sepoi",
	"seprai",
	"seprei",
	"sepsis",
	"september",
	"septima",
	"septum",
	"sepuh",
	"sepuit",
	"sepuk",
	"sepukal",
	"sepul",
	"sepulih",
	"sepuluh",
	"sepupu",
	"sepur",
	"seput",
	"sera",
	"serabi",
	"serabut",
	"serabutan",
	"seraga",
	"seragam",
	"serah",
	"serahi",
	"serai",
	"serak",
	"serakah",
	"seram",
	"serama",
	"serambi",
	"serampang",
	"serampin",
	"serampu",
	"serampuk",
	"seran",
	"serana",
	"seranah",
	"serandang",
	"serandau",
	"serandib",
	"serandung",
	"serang",
	"serangga",
	"serangguh",
	"seranggung",
	"serangkak",
	"serangsang",
	"serani",
	"seranograf",
	"seranometer",
	"seranta",
	"serap",
	"serapah",
	"serapat",
	"serasa",
	"serasah",
	"serasi",
	"serat",
	"seratah",
	"serati",
	"seratung",
	"serau",
	"seraumeter",
	"seraut",
	"serawak",
	"serawal",
	"seraya",
	"serba",
	"serbaada",
	"serbaakal",
	"serbabaru",
	"serbabisa",
	"serbadua",
	"serbaemas",
	"serbaguna",
	"serbah-serbih",
	"serbaindah",
	"serbak",
	"serbakeemasan",
	"serbakurang",
	"serbamacam",
	"serban",
	"serbaneka",
	"serbaputih",
	"serbarumah",
	"serbasalah",
	"serbasama",
	"serbasusah",
	"serbat",
	"serbausaha",
	"serbet",
	"serbi",
	"serbu",
	"serbuk",
	"serdadu",
	"serdak",
	"serdam",
	"serdang",
	"serdawa",
	"serdi",
	"serdih",
	"serealia",
	"serealin",
	"sereat",
	"serebral",
	"serebrospinal",
	"serebrum",
	"seregang",
	"sereh",
	"serembah-serembih",
	"seremban",
	"seremoni",
	"seremonial",
	"serempak",
	"serempet",
	"serempu",
	"serendah",
	"serendeng",
	"sereng",
	"serengam",
	"serengeh",
	"serengit",
	"serenjak",
	"serenjang",
	"serenta",
	"serentak",
	"serep",
	"seresin",
	"seret",
	"sergah",
	"sergam",
	"sergap",
	"sergut",
	"seri",
	"serial",
	"seriap",
	"seriat",
	"seriawan",
	"seribulan",
	"seriding",
	"serigading",
	"serigala",
	"serigunting",
	"serik",
	"serikat",
	"serikaya",
	"serimala",
	"serimpet",
	"serimpi",
	"serimpung",
	"serindai",
	"serindit",
	"sering",
	"seringai",
	"seringing",
	"seriosa",
	"serit",
	"serium",
	"serius",
	"serkah",
	"serkai",
	"serkap",
	"serkup",
	"serlah",
	"serling",
	"sermangin",
	"sermet",
	"sernak",
	"sero",
	"serobeh",
	"serobok",
	"serobot",
	"serografi",
	"seroja",
	"serok",
	"serologi",
	"serombong",
	"serompok",
	"serondeng",
	"serondok",
	"serondol",
	"serondong",
	"serong",
	"seronok",
	"seroplastik",
	"seropot",
	"serositas",
	"serosoh",
	"serot",
	"seroyong",
	"serpentina",
	"serpih",
	"sersan",
	"serse",
	"sersi",
	"serta",
	"sertifikasi",
	"sertifikat",
	"sertu",
	"seru",
	"seruak",
	"seruas",
	"seruda",
	"serudi",
	"seruduk",
	"serugah",
	"serugat",
	"seruh",
	"serui",
	"seruit",
	"seruk",
	"serul",
	"seruling",
	"serum",
	"serumat",
	"serumen",
	"serumpu",
	"serun",
	"serunai",
	"serunda",
	"serundang",
	"serundeng",
	"seruni",
	"serunjang",
	"seruntun",
	"serupih",
	"seruput",
	"seruru",
	"serut",
	"serutu",
	"seruyuk",
	"servis",
	"sesah",
	"sesai",
	"sesaing",
	"sesajen",
	"sesak",
	"sesal",
	"sesam",
	"sesamoid",
	"sesanti",
	"sesap",
	"sesar",
	"sesat",
	"sesawi",
	"sesenap",
	"seser",
	"sesi",
	"sesil",
	"sesira",
	"sesium",
	"sesoca",
	"sespan",
	"sestina",
	"sesuai",
	"sesuatu",
	"sesumbar",
	"set",
	"seta",
	"setabelan",
	"setagen",
	"setai",
	"setaka",
	"setakona",
	"setal",
	"setambun",
	"setan",
	"setana",
	"setang",
	"setangan",
	"setanggi",
	"setapak",
	"setaria",
	"setat",
	"setawar",
	"setebal",
	"seteger",
	"seteheng",
	"setek",
	"seteker",
	"setel",
	"setela",
	"seteleng",
	"setem",
	"setempel",
	"seten",
	"setenggar",
	"seter",
	"seteranah",
	"seteru",
	"setewel",
	"seti",
	"setia",
	"setiabu",
	"setiar",
	"setiga",
	"setik",
	"setin",
	"setinggi",
	"setip",
	"setir",
	"setirman",
	"setiwel",
	"setoka",
	"setokin",
	"setolop",
	"setom",
	"seton",
	"setop",
	"setoples",
	"setor",
	"setori",
	"setoter",
	"setra",
	"setrap",
	"setrat",
	"setren",
	"setreng",
	"setrik",
	"setrika",
	"setrimin",
	"setrip",
	"setruk",
	"setrum",
	"setrup",
	"setti",
	"setu",
	"setuil",
	"setum",
	"setung",
	"setup",
	"seturi",
	"seturu",
	"seudati",
	"sewa",
	"sewah",
	"sewaka",
	"sewal",
	"sewar",
	"sewat",
	"sewot",
	"sewu",
	"sfenoidal",
	"sferoid",
	"sferometer",
	"sfigmograf",
	"sfigmomanometer",
	"sfikmograf",
	"sfingofili",
	"sfingter",
	"sfinks",
	"sia",
	"siaga",
	"siah",
	"siak",
	"siakap",
	"siakon",
	"sial",
	"sialang",
	"sialit",
	"siam",
	"siamang",
	"sian",
	"sianamida",
	"sianang",
	"siang",
	"sianggit",
	"sianida",
	"sianometer",
	"sianometri",
	"sianosis",
	"siantan",
	"siap",
	"siap-sedia",
	"siap-siaga",
	"siapa",
	"siapuh",
	"siar",
	"siarah",
	"siarat",
	"siasat",
	"siat",
	"siau",
	"sibak",
	"sibar",
	"sibernetika",
	"sibilan",
	"sibir",
	"sibuk",
	"sibur",
	"sibusuk",
	"sice",
	"sicerek",
	"sida",
	"sidai",
	"sidamukti",
	"sidang",
	"sidat",
	"siderit",
	"sidi",
	"sidik",
	"siding",
	"sidomukti",
	"sidratulmuntaha",
	"siduga",
	"siduk",
	"sif",
	"sifat",
	"sifatullah",
	"sifer",
	"sifilis",
	"sifilobia",
	"sifiloid",
	"sifir",
	"sifon",
	"sigai",
	"sigak",
	"sigando",
	"sigap",
	"sigar",
	"sigaret",
	"sigasir",
	"sigenting",
	"siger",
	"sigi",
	"sigilografi",
	"sigma",
	"signifikan",
	"signifikansi",
	"signifikasi",
	"sigot",
	"sigung",
	"sih",
	"sihir",
	"sijik",
	"sijil",
	"sika",
	"sikah",
	"sikai",
	"sikak",
	"sikap",
	"sikari",
	"sikas",
	"sikat",
	"sikedempung",
	"sikeras",
	"sikik",
	"sikikih",
	"sikin",
	"sikit",
	"siklik",
	"siklis",
	"sikloid",
	"siklon",
	"sikloparafin",
	"siklotron",
	"siklus",
	"siksa",
	"siku",
	"sikudidi",
	"sikudomba",
	"sikut",
	"sil",
	"sila",
	"silabel",
	"silabis",
	"silabus",
	"silah",
	"silalatu",
	"silam",
	"silampukau",
	"silang",
	"silap",
	"silara",
	"silase",
	"silat",
	"silaturahmi",
	"silau",
	"silengah",
	"silet",
	"silih",
	"silik",
	"silika",
	"silikat",
	"silikon",
	"silikona",
	"silikosis",
	"silinder",
	"silindris",
	"silindroid",
	"silir",
	"silium",
	"silo",
	"silogisme",
	"silok",
	"silologi",
	"silometer",
	"siloptik",
	"silsilah",
	"silt",
	"silu",
	"siluet",
	"siluk",
	"siluman",
	"silungkang",
	"silvika",
	"silvikultur",
	"silvisida",
	"simak",
	"simalakama",
	"simalu",
	"simaung",
	"simbah",
	"simbai",
	"simbang",
	"simbar",
	"simbat",
	"simbion",
	"simbiosis",
	"simbiotis",
	"simbiou",
	"simbok",
	"simbol",
	"simbolis",
	"simbolisme",
	"simbukan",
	"simbur",
	"simetri",
	"simetris",
	"simfisis",
	"simfoni",
	"simifisis",
	"simile",
	"simpai",
	"simpak",
	"simpan",
	"simpang",
	"simpang-siur",
	"simpanse",
	"simpat",
	"simpati",
	"simpatik",
	"simpatisan",
	"simpel",
	"simpetal",
	"simping",
	"simpir",
	"simpleks",
	"simplifikasi",
	"simplistis",
	"simposium",
	"simpuh",
	"simpuk",
	"simpul",
	"simpur",
	"simtom",
	"simtomatis",
	"simtomatologi",
	"simulasi",
	"simulator",
	"simulfiks",
	"simultan",
	"simuntu",
	"sin",
	"sinaga",
	"sinagoga",
	"sinagoge",
	"sinambung",
	"sinanaga",
	"sinansari",
	"sinar",
	"sinatan",
	"sinau",
	"sinawar",
	"sindap",
	"sinden",
	"sinder",
	"sindeton",
	"sindikalisme",
	"sindikasi",
	"sindikat",
	"sindir",
	"sindrom",
	"sindur",
	"sineas",
	"sinekdoke",
	"sinektika",
	"sinema",
	"sinemapleks",
	"sinemaskop",
	"sinematik",
	"sinematograf",
	"sinematografi",
	"sinematografis",
	"sinemikrografik",
	"sineol",
	"sinepleks",
	"sinergi",
	"sinergis",
	"sinergisme",
	"sineskop",
	"sinestesia",
	"sinetron",
	"sing",
	"singa",
	"singahak",
	"singelar",
	"singga",
	"singgah",
	"singgan",
	"singgang",
	"singgasana",
	"singgel",
	"singgir",
	"singgit",
	"singgul",
	"singgung",
	"singit",
	"singkak",
	"singkang",
	"singkap",
	"singkat",
	"singkeh",
	"singkek",
	"singkil",
	"singkir",
	"singkong",
	"singkup",
	"singkur",
	"singlet",
	"singsat",
	"singse",
	"singset",
	"singsing",
	"singularis",
	"singulum",
	"singulun",
	"singunen",
	"sini",
	"sinis",
	"sinisme",
	"sinjang",
	"sinklin",
	"sinkonina",
	"sinkope",
	"sinkretis",
	"sinkretisasi",
	"sinkretisme",
	"sinkron",
	"sinkronis",
	"sinkronisasi",
	"sinkronisme",
	"sinode",
	"sinolog",
	"sinologi",
	"sinom",
	"sinoman",
	"sinonim",
	"sinonimi",
	"sinopsis",
	"sinoptis",
	"sinovia",
	"sinovial",
	"sinovitas",
	"sinovitis",
	"sinrili",
	"sinse",
	"sintagma",
	"sintagmatis",
	"sintaksis",
	"sintaktis",
	"sintal",
	"sintar",
	"sintas",
	"sinter",
	"sinterklas",
	"sintese",
	"sintesis",
	"sintetik",
	"sintetis",
	"sinting",
	"sintir",
	"sintonik",
	"sintren",
	"sintua",
	"sintuk",
	"sintulang",
	"sintung",
	"sinu",
	"sinuhun",
	"sinus",
	"sinusal",
	"sinusitis",
	"sinusoid",
	"sinyal",
	"sinyalemen",
	"sinyalir",
	"sinyo",
	"sinyokolas",
	"sio",
	"sioca",
	"siong",
	"siongka",
	"sip",
	"sipahi",
	"sipai",
	"sipangkalan",
	"sipat",
	"sipatung",
	"sipedas",
	"sipesan",
	"sipi",
	"sipil",
	"sipir",
	"sipit",
	"sipolan",
	"sipongang",
	"sipu",
	"sipulut",
	"siput",
	"sir",
	"sira",
	"sirah",
	"siram",
	"sirangkak",
	"sirap",
	"sirat",
	"siratalmustakim",
	"siraut",
	"sirene",
	"sirep",
	"siri",
	"siriasis",
	"sirib",
	"sirih",
	"sirik",
	"siring",
	"siringitis",
	"sirip",
	"sirkam",
	"sirke",
	"sirkol",
	"sirkuit",
	"sirkulasi",
	"sirkuler",
	"sirkumfiks",
	"sirkumfleks",
	"sirkus",
	"sirlak",
	"sirna",
	"sirokumulus",
	"sirop",
	"sirostratus",
	"sirsak",
	"siru",
	"sirup",
	"sirus",
	"sis",
	"sisa",
	"sisal",
	"sisalak",
	"sisi",
	"sisih",
	"sisik",
	"sisip",
	"sisir",
	"sista",
	"sistaltik",
	"sistem",
	"sistematik",
	"sistematika",
	"sistematis",
	"sistematisasi",
	"sistematisir",
	"sistemis",
	"sistemisasi",
	"sisterna",
	"sistitis",
	"sistole",
	"sistolik",
	"sisurut",
	"siswa",
	"siswi",
	"sit",
	"sita",
	"sitak",
	"sitat",
	"siter",
	"siti",
	"sitinggil",
	"sitir",
	"sitokrom",
	"sitolilis",
	"sitolisis",
	"sitologi",
	"sitoplasma",
	"sitrat",
	"sitrin",
	"sitrun",
	"situ",
	"situasi",
	"situasional",
	"situn",
	"situs",
	"siuh",
	"siuk",
	"siul",
	"siuman",
	"siung",
	"siur",
	"siut",
	"sivilisasi",
	"siwalan",
	"siwaratri",
	"siwer",
	"sizigi",
	"skafa",
	"skala",
	"skalanisasi",
	"skalar",
	"skalop",
	"skandal",
	"skandium",
	"skarifikasi",
	"skatola",
	"skatologi",
	"skedul",
	"skelet",
	"skema",
	"skematis",
	"skenario",
	"skene",
	"skeptis",
	"skeptisisme",
	"sketsa",
	"ski",
	"skiameter",
	"skiatika",
	"skilot",
	"skip",
	"skiping",
	"skisma",
	"skizofrenia",
	"skizoid",
	"sklerenkima",
	"sklerosis",
	"skleroterapi",
	"skolastik",
	"skolastikus",
	"skolastisi",
	"skolastisisme",
	"skombroid",
	"skop",
	"skopometer",
	"skor",
	"skorbut",
	"skorpio",
	"skors",
	"skorsing",
	"skrin",
	"skrining",
	"skrip",
	"skripsi",
	"skrobikulus",
	"skrotum",
	"skuadron",
	"skuas",
	"skuat",
	"skuos",
	"skuter",
	"slagorde",
	"slah",
	"slang",
	"slebor",
	"slendro",
	"sling",
	"slintat-slintut",
	"slip",
	"slof",
	"slogan",
	"smes",
	"smokel",
	"snob",
	"snobisme",
	"soak",
	"soal",
	"soang",
	"soarma",
	"soba",
	"soban",
	"sobat",
	"sobek",
	"sobok",
	"soda",
	"sodet",
	"sodium",
	"sodok",
	"sodomasosisme",
	"sodomi",
	"sodomia",
	"sodor",
	"soe",
	"sofa",
	"sofis",
	"sofisme",
	"sofistri",
	"sofitel",
	"soga",
	"sogan",
	"sogang",
	"sogo",
	"sogok",
	"sohar",
	"sohib",
	"sohor",
	"sohun",
	"soja",
	"sok",
	"soka",
	"sokah",
	"soker",
	"soket",
	"sokom",
	"sokong",
	"sol",
	"solah",
	"solak",
	"solang",
	"solanina",
	"solar",
	"solarimeter",
	"solder",
	"solek",
	"solempis",
	"solenoide",
	"solfatar",
	"solfatara",
	"solid",
	"solidaritas",
	"solider",
	"soliditas",
	"solilokui",
	"solinometer",
	"solipsisme",
	"solis",
	"soliter",
	"solo",
	"solois",
	"solok",
	"solokan",
	"solot",
	"solum",
	"solusi",
	"solvabilitas",
	"solven",
	"som",
	"soma",
	"somah",
	"somasi",
	"somatis",
	"somatomegali",
	"sombok",
	"sombol",
	"sombong",
	"sombrero",
	"someng",
	"somnambulis",
	"somnambulisme",
	"sompek",
	"sompeng",
	"somplak",
	"somplok",
	"sompoh",
	"sompok",
	"sompong",
	"sompret",
	"sonar",
	"sonata",
	"sonatina",
	"sondai",
	"sondanco",
	"sondang",
	"sondase",
	"sondek",
	"sonder",
	"sondok",
	"sondong",
	"soneta",
	"songar",
	"songel",
	"songgeng",
	"songket",
	"songkok",
	"songkro",
	"songong",
	"songsong",
	"sonik",
	"sono",
	"sonogram",
	"sonokeling",
	"sonor",
	"sonoran",
	"sontak",
	"sontek",
	"sontok",
	"sontoloyo",
	"sop",
	"sopak",
	"sopan",
	"sopek",
	"sopi",
	"sopir",
	"soporifik",
	"sopran",
	"sorak",
	"sorang",
	"sorban",
	"sorbet",
	"sore",
	"sorek",
	"soren",
	"sorgum",
	"sori",
	"sorog",
	"sorok",
	"sorong",
	"sorot",
	"sortir",
	"sosi",
	"sosial",
	"sosialis",
	"sosialisasi",
	"sosialisme",
	"sosialistis",
	"sosio",
	"sosio-kultural",
	"sosiobiolog",
	"sosiodemokrasi",
	"sosiodrama",
	"sosiokultural",
	"sosiolek",
	"sosiolinguistik",
	"sosiolog",
	"sosiologi",
	"sosiologis",
	"sosiometri",
	"sosionasional",
	"sosiopat",
	"sosis",
	"sositet",
	"sosoh",
	"sosok",
	"sosor",
	"soto",
	"sotoh",
	"sotong",
	"sotor",
	"soun",
	"sowan",
	"sowang",
	"soyak",
	"spageti",
	"spalasi",
	"span",
	"spanduk",
	"spaning",
	"sparing",
	"spasi",
	"spasial",
	"spasmodis",
	"spasmus",
	"spastik",
	"spatbor",
	"spatula",
	"spedometer",
	"spektakel",
	"spektakuler",
	"spektator",
	"spektograf",
	"spektogram",
	"spektrograf",
	"spektrogram",
	"spektrokimia",
	"spektrometer",
	"spektroskop",
	"spektrum",
	"spekuk",
	"spekulan",
	"spekulasi",
	"spekulatif",
	"spekulator",
	"speleologi",
	"spelter",
	"sperma",
	"spermaseti",
	"spermatid",
	"spermatofora",
	"spermatogenesis",
	"spermatosit",
	"spermatozoa",
	"spermatozoid",
	"spesial",
	"spesialis",
	"spesialisasi",
	"spesialistis",
	"spesies",
	"spesifik",
	"spesifikasi",
	"spesimen",
	"spidol",
	"spidometer",
	"spikul",
	"spil",
	"spina",
	"spion",
	"spionase",
	"spiral",
	"spiralisasi",
	"spirilum",
	"spirit",
	"spiritis",
	"spiritisme",
	"spiritual",
	"spiritualisasi",
	"spiritualisme",
	"spiritus",
	"spirometer",
	"spons",
	"sponsor",
	"spontan",
	"spontanitas",
	"spora",
	"sporadis",
	"sporangium",
	"sporofil",
	"sport",
	"sportif",
	"sportivitas",
	"spring",
	"sprint",
	"sprinter",
	"sputnik",
	"sputum",
	"sreg",
	"sregep",
	"srempet",
	"sri",
	"srigading",
	"srigunggu",
	"srigunting",
	"srikandi",
	"srikaya",
	"srimanganti",
	"sripah",
	"sripanggung",
	"sriti",
	"stabil",
	"stabilisasi",
	"stabilisator",
	"stabilitas",
	"stabilizer",
	"stadion",
	"stadium",
	"staf",
	"stafilitis",
	"stagnan",
	"stagnasi",
	"staking",
	"stalagmit",
	"stalagmometri",
	"stalaktit",
	"stalinisme",
	"stalon",
	"stamba",
	"stambon",
	"stambuk",
	"stambul",
	"stamen",
	"stamina",
	"stan",
	"standar",
	"standardisasi",
	"stanplat",
	"stanum",
	"stanza",
	"stapler",
	"staples",
	"start",
	"starter",
	"stasi",
	"stasioner",
	"stasis",
	"stasiun",
	"statis",
	"statistik",
	"statistika",
	"statistis",
	"stator",
	"status",
	"statuta",
	"statuter",
	"stearat",
	"stearin",
	"steatit",
	"steatosis",
	"stegodon",
	"steik",
	"stek",
	"steker",
	"stela",
	"steling",
	"stema",
	"stemma",
	"stempel",
	"sten",
	"stengun",
	"steno",
	"stenografer",
	"stenografi",
	"stenogram",
	"stensil",
	"step",
	"stepa",
	"stepler",
	"steradian",
	"stereo",
	"stereofoni",
	"stereofonik",
	"stereognosis",
	"stereograf",
	"stereografi",
	"stereoisomerisme",
	"stereokimia",
	"stereometri",
	"stereoskop",
	"stereotip",
	"stereotipikal",
	"steril",
	"sterilisasi",
	"sterilitas",
	"steroid",
	"steroidal",
	"sterol",
	"stetoskop",
	"stevador",
	"stibium",
	"stigma",
	"stigmata",
	"stik",
	"stiker",
	"stilbestrol",
	"stilir",
	"stilistika",
	"stilograf",
	"stimulan",
	"stimulans",
	"stimulasi",
	"stimulatif",
	"stimulator",
	"stimulus",
	"stipendium",
	"stipulasi",
	"stirena",
	"stoikiometri",
	"stok",
	"stokastik",
	"stoker",
	"stol",
	"stoliditas",
	"stolon",
	"stomata",
	"stomatitis",
	"stomatogastrik",
	"stomatoskop",
	"stop",
	"stoper",
	"stopkeran",
	"stopkontak",
	"stoples",
	"stori",
	"stormking",
	"strabotomi",
	"strata",
	"strategem",
	"strategi",
	"strategis",
	"stratifikasi",
	"stratigrafi",
	"strato",
	"stratokumulus",
	"stratopause",
	"stratopouse",
	"stratosfer",
	"stratum",
	"stratus",
	"streng",
	"streptokokus",
	"streptomisin",
	"stres",
	"striker",
	"strimin",
	"strip",
	"striptis",
	"stroberi",
	"strobila",
	"stroboskop",
	"stroke",
	"stromking",
	"strontium",
	"struktur",
	"struktural",
	"strukturalisasi",
	"strukturalisme",
	"struma",
	"studen",
	"studi",
	"studio",
	"stuko",
	"stupa",
	"sua",
	"suah",
	"suai",
	"suak",
	"suaka",
	"suam",
	"suami",
	"suaminda",
	"suang",
	"suangi",
	"suap",
	"suar",
	"suara",
	"suarang",
	"suargaloka",
	"suari",
	"suasa",
	"suasana",
	"suat",
	"suatu",
	"sub",
	"subak",
	"subal",
	"subam",
	"suban",
	"subang",
	"subbab",
	"subbagian",
	"subdirektorat",
	"subentri",
	"suberat",
	"suberin",
	"subetnik",
	"subfilum",
	"subgeneralisasi",
	"subgenus",
	"subhana",
	"subhanallah",
	"subhat",
	"subirigasi",
	"subjek",
	"subjektif",
	"subjektivisme",
	"subkategorisasi",
	"subkelas",
	"subklas",
	"subkontraktor",
	"subkultur",
	"sublema",
	"subletal",
	"sublim",
	"sublimasi",
	"sublimat",
	"submarine",
	"submukosa",
	"subordinasi",
	"subordinat",
	"suborganisasi",
	"subsider",
	"subsidi",
	"subskrip",
	"subsonik",
	"substandar",
	"substansi",
	"substansial",
	"substantif",
	"substitusi",
	"substitutif",
	"substrat",
	"subtil",
	"subtonik",
	"subtropik",
	"subuco",
	"subuh",
	"subunit",
	"subur",
	"subversi",
	"subversif",
	"subyek",
	"subyektif",
	"subyektivisme",
	"suceng",
	"suci",
	"suda",
	"sudah",
	"sudet",
	"sudi",
	"sudip",
	"sudoriferus",
	"sudra",
	"sudu",
	"suduayah",
	"suduk",
	"sudung",
	"sudut",
	"suf",
	"sufah",
	"sufal",
	"sufi",
	"sufiks",
	"sufisme",
	"sufrah",
	"sugar",
	"sugesti",
	"sugi",
	"sugih",
	"suguh",
	"sugul",
	"sugun",
	"suh",
	"suhad",
	"suhian",
	"suhu",
	"suhuf",
	"suhun",
	"suiseki",
	"suit",
	"sujana",
	"sujen",
	"suji",
	"sujud",
	"suka",
	"sukacita",
	"sukade",
	"sukamandi",
	"sukan",
	"sukar",
	"sukarela",
	"sukaria",
	"sukat",
	"sukduf",
	"suke",
	"suket",
	"suki",
	"suklapaksa",
	"sukma",
	"sukrosa",
	"sukses",
	"suksesi",
	"suksesif",
	"suku",
	"sukuisme",
	"sukun",
	"sula",
	"sulah",
	"sulalah",
	"sulalat",
	"sulam",
	"sulang",
	"sulap",
	"sulat-sulit",
	"sulbi",
	"sulfanasi",
	"sulfanilamida",
	"sulfat",
	"sulfhidril",
	"sulfolipid",
	"sulfonamida",
	"sulfur",
	"sulfurasi",
	"suli",
	"sulih",
	"suling",
	"sulit",
	"sultan",
	"sultanat",
	"sultani",
	"suluh",
	"suluk",
	"sulung",
	"sulur",
	"sulut",
	"sum",
	"sumah",
	"sumarah",
	"sumare",
	"sumasi",
	"sumba",
	"sumbang",
	"sumbangsih",
	"sumbar",
	"sumbat",
	"sumbel",
	"sumber",
	"sumbi",
	"sumbing",
	"sumbu",
	"sumbuk",
	"sumbul",
	"sumbung",
	"sumbur",
	"sumbut",
	"sumeh",
	"sumengit",
	"sumilir",
	"sumir",
	"sumirat",
	"sumo",
	"sumpah",
	"sumpal",
	"sumpek",
	"sumpel",
	"sumping",
	"sumpit",
	"sumsum",
	"sumur",
	"sumurung",
	"sun",
	"sunah",
	"sunam",
	"sunan",
	"sunat",
	"sunatullah",
	"sunbulat",
	"sundai",
	"sundak",
	"sundal",
	"sundang",
	"sundari",
	"sundep",
	"sunduk",
	"sundul",
	"sundus",
	"sundusin",
	"sundut",
	"sungai",
	"sungga",
	"sunggi",
	"sungging",
	"sunggit",
	"sungguh",
	"sungguhpun",
	"sungil",
	"sungkah",
	"sungkai",
	"sungkal",
	"sungkan",
	"sungkap",
	"sungkawa",
	"sungkem",
	"sungkit",
	"sungkuk",
	"sungkum",
	"sungkup",
	"sungkur",
	"sungkuran",
	"sungsang",
	"sungu",
	"sungut",
	"suni",
	"sunjam",
	"sunti",
	"suntiabu",
	"suntih",
	"suntik",
	"sunting",
	"suntuk",
	"sunu",
	"sunukung",
	"sunyata",
	"sunyi",
	"sup",
	"supa",
	"supai",
	"supaya",
	"supel",
	"super",
	"superblok",
	"supercepat",
	"superfisial",
	"superfosfat",
	"superheterodin",
	"superinfeksi",
	"superintenden",
	"superior",
	"superioritas",
	"superjet",
	"superkomputer",
	"superkonduktivitas",
	"superkonduktor",
	"superlatif",
	"superlativisme",
	"superlunar",
	"supermarket",
	"supermen",
	"supernatural",
	"supernova",
	"superskrip",
	"superskripsi",
	"supersonik",
	"superstar",
	"superstruktur",
	"supervisi",
	"supervisor",
	"suplai",
	"suplemen",
	"suplementasi",
	"suplesi",
	"supletoar",
	"suporter",
	"suportif",
	"supra",
	"supraalami",
	"suprafiks",
	"supramolekuler",
	"supranasional",
	"suprarene",
	"suprarenoma",
	"suprasasti",
	"suprasegmental",
	"supremasi",
	"supresif",
	"supresor",
	"surah",
	"surahi",
	"surai",
	"suralaya",
	"suraloka",
	"suram",
	"surat",
	"surati",
	"surau",
	"suraya",
	"surealis",
	"surealisme",
	"suren",
	"surfaktan",
	"surga",
	"surgaloka",
	"surgawi",
	"suri",
	"surian",
	"surih",
	"surili",
	"surjan",
	"surogat",
	"surplus",
	"suruh",
	"suruk",
	"surup",
	"surut",
	"survei",
	"surya",
	"suryakanta",
	"suryani",
	"sus",
	"susah",
	"susastra",
	"suseptibilitas",
	"susila",
	"susilat",
	"suspender",
	"suspensi",
	"suster",
	"susu",
	"susuh",
	"susuk",
	"susul",
	"susun",
	"susung",
	"susup",
	"susur",
	"susut",
	"sut",
	"sutan",
	"suten",
	"sutil",
	"sutra",
	"sutradara",
	"sutura",
	"suul",
	"suun",
	"suuzan",
	"suvenir",
	"suwarnabumi",
	"suwarnadwipa",
	"suwir",
	"suwita",
	"svedberg",
	"swa",
	"swabakar",
	"swabela",
	"swadana",
	"swadarma",
	"swadaya",
	"swadesi",
	"swadidik",
	"swadisiplin",
	"swagriya",
	"swahara",
	"swaharga",
	"swaimbas",
	"swak",
	"swakaji",
	"swakarsa",
	"swakarya",
	"swakelola",
	"swakendali",
	"swakontradiksi",
	"swalayan",
	"swanama",
	"swanggi",
	"swapraja",
	"swarabakti",
	"swasembada",
	"swasensor",
	"swasraya",
	"swasta",
	"swastanisasi",
	"swastiastu",
	"swastika",
	"swatabur",
	"swatantra",
	"swausaha",
	"sweter",
	"swike",
	"swimpak",
	"swipoa",
	"syabah",
	"syabas",
	"syafaat",
	"syafakat",
	"syafii",
	"syah",
	"syahadat",
	"syahadatain",
	"syahbandar",
	"syahda",
	"syahdan",
	"syahdu",
	"syahid",
	"syahriah",
	"syahsiah",
	"syahwat",
	"syair",
	"syairi",
	"syajar",
	"syajarah",
	"syak",
	"syaka",
	"syakban",
	"syakduf",
	"syakhsi",
	"syakir",
	"syal",
	"syala",
	"syam",
	"syamali",
	"syaman",
	"syamanisme",
	"syamsi",
	"syamsiah",
	"syamsir",
	"syamsu",
	"syantung",
	"syar",
	"syarab",
	"syarah",
	"syarak",
	"syarat",
	"syarbat",
	"syarekat",
	"syariat",
	"syarif",
	"syarifah",
	"syarik",
	"syarikat",
	"syatar",
	"syaulam",
	"syawal",
	"syeir",
	"syekh",
	"syeti",
	"syiar",
	"syikak",
	"syin",
	"syirik",
	"syiwa",
	"syiwaratri",
	"syogun",
	"syok",
	"syubhat",
	"syuhada",
	"syukur",
	"syumuliah",
	"syur",
	"syura",
	"syurah",
	"syuriah",
	"syuruk",
	"syuting",
	"taajul",
	"taala",
	"taaruf",
	"taasub",
	"taat",
	"taawud",
	"taazur",
	"tabah",
	"tabak",
	"tabal",
	"taban",
	"tabar-tabar",
	"tabarak",
	"tabaruk",
	"tabayun",
	"tabe",
	"tabel",
	"tabela",
	"tabelaris",
	"tabernakel",
	"tabia",
	"tabiat",
	"tabib",
	"tabii",
	"tabiin",
	"tabik",
	"tabir",
	"tablet",
	"tablig",
	"tablo",
	"tabloid",
	"tabo",
	"tabok",
	"tabrak",
	"tabu",
	"tabuh",
	"tabuhan",
	"tabula",
	"tabulasi",
	"tabulator",
	"tabulatur",
	"tabun",
	"tabung",
	"tabur",
	"tabut",
	"tabzir",
	"taci",
	"tadabur",
	"tadah",
	"tadaruk",
	"tadarus",
	"tadbir",
	"tadi",
	"tadir",
	"tadung",
	"tadwin",
	"taekwondo",
	"taeniasis",
	"taf",
	"tafadal",
	"tafahus",
	"tafakur",
	"tafeta",
	"tafsir",
	"tagak",
	"tagal",
	"tagan",
	"tagar",
	"tageh",
	"tagih",
	"tago",
	"tagut",
	"tahajud",
	"tahak",
	"tahal",
	"tahalul",
	"tahan",
	"tahana",
	"tahang",
	"tahap",
	"tahar",
	"taharah",
	"tahbis",
	"tahi",
	"tahiat",
	"tahil",
	"tahir",
	"tahkik",
	"tahkim",
	"tahlil",
	"tahmid",
	"tahniah",
	"tahnik",
	"tahsil",
	"tahu",
	"tahun",
	"taib",
	"taifun",
	"taiga",
	"taiko",
	"taipan",
	"tais",
	"taiso",
	"taja",
	"tajak",
	"tajali",
	"tajam",
	"tajarud",
	"tajau",
	"tajdid",
	"tajen",
	"taji",
	"tajin",
	"tajnis",
	"tajribah",
	"taju",
	"tajuk",
	"tajung",
	"tajur",
	"tajusalatin",
	"tajwid",
	"tak",
	"takabur",
	"takaful",
	"takah",
	"takak",
	"takal",
	"takang-takik",
	"takar",
	"takarir",
	"takarub",
	"takat",
	"takbir",
	"takbiratulihram",
	"takdim",
	"takdir",
	"takdis",
	"takeh",
	"takel",
	"takeyari",
	"takhayul",
	"takhlik",
	"takhsis",
	"takhta",
	"taki",
	"takigrafi",
	"takik",
	"takimeter",
	"takir",
	"takisme",
	"takjil",
	"takjub",
	"taklid",
	"taklif",
	"taklik",
	"taklikat",
	"taklim",
	"taklimat",
	"takluk",
	"takma",
	"takmurni",
	"takoah",
	"takol",
	"takometer",
	"takraw",
	"takrif",
	"takrim",
	"takrir",
	"taksa",
	"taksasi",
	"taksem",
	"taksi",
	"taksidermi",
	"taksimeter",
	"taksin",
	"taksir",
	"taksologi",
	"takson",
	"taksonomi",
	"taktik",
	"taktil",
	"taktis",
	"takuh",
	"takuk",
	"takung",
	"takur",
	"takut",
	"takwa",
	"takwil",
	"takwim",
	"takwin",
	"takyin",
	"takziah",
	"takzim",
	"takzir",
	"tal",
	"tala",
	"talabiah",
	"talah",
	"talak",
	"talam",
	"talang",
	"talar",
	"talas",
	"talasemia",
	"talasofit",
	"talbiah",
	"talek",
	"talempong",
	"talen",
	"talenan",
	"talenta",
	"tali",
	"talib",
	"talibun",
	"talium",
	"talk",
	"talkin",
	"talon",
	"talu",
	"talun",
	"talupuh",
	"talut",
	"tam",
	"tamadun",
	"tamah",
	"tamak",
	"tamam",
	"taman",
	"tamar",
	"tamarinda",
	"tamasya",
	"tamat",
	"tamatulkalam",
	"tambah",
	"tambak",
	"tambakan",
	"tambal",
	"tamban",
	"tambang",
	"tambar",
	"tambat",
	"tamber",
	"tambera",
	"tambi",
	"tambo",
	"tamborin",
	"tambuh",
	"tambul",
	"tambun",
	"tambung",
	"tambur",
	"tambus",
	"tameng",
	"tamimah",
	"tampah",
	"tampak",
	"tampal",
	"tampan",
	"tampang",
	"tampar",
	"tampas",
	"tampel",
	"tampi",
	"tampik",
	"tampil",
	"tampin",
	"tamping",
	"tampon",
	"tamponade",
	"tampuk",
	"tampung",
	"tampus",
	"tamsil",
	"tamtam",
	"tamtama",
	"tamu",
	"tamuk",
	"tamyiz",
	"tan",
	"tanah",
	"tanai",
	"tanak",
	"tanam",
	"tanang",
	"tanau",
	"tanazul",
	"tanbiat",
	"tanbihat",
	"tancang",
	"tancap",
	"tanda",
	"tandak",
	"tandan",
	"tandang",
	"tandas",
	"tandem",
	"tandik",
	"tandikat",
	"tandil",
	"tanding",
	"tandon",
	"tandu",
	"tanduk",
	"tandun",
	"tandur",
	"tandus",
	"tanfiziah",
	"tang",
	"tangan",
	"tangap",
	"tangar",
	"tangas",
	"tangeh",
	"tangen",
	"tangga",
	"tanggah",
	"tanggal",
	"tanggam",
	"tanggang",
	"tanggap",
	"tanggar",
	"tanggetong",
	"tangguh",
	"tangguk",
	"tanggul",
	"tanggulang",
	"tanggung",
	"tangis",
	"tangkah",
	"tangkai",
	"tangkaian",
	"tangkal",
	"tangkap",
	"tangkar",
	"tangkas",
	"tangki",
	"tangkil",
	"tangkis",
	"tangkue",
	"tangkuk",
	"tangkul",
	"tangkup",
	"tangkur",
	"tangkut",
	"tanglung",
	"tango",
	"tangsa",
	"tangsel",
	"tangsi",
	"tani",
	"tania",
	"tanin",
	"tanjak",
	"tanji",
	"tanjidor",
	"tanju",
	"tanjul",
	"tanjung",
	"tanjur",
	"tank",
	"tanker",
	"tanpa",
	"tansi",
	"tantang",
	"tante",
	"tanti",
	"tantiem",
	"tantrisme",
	"tanur",
	"tanwin",
	"tanwir",
	"tanwujud",
	"tanya",
	"tanzih",
	"tanzil",
	"taocang",
	"taoci",
	"taoco",
	"taoge",
	"taoisme",
	"taoke",
	"taosi",
	"tap",
	"tapa",
	"tapai",
	"tapak",
	"tapal",
	"tapang",
	"tapestri",
	"tapi",
	"tapih",
	"tapin",
	"tapioka",
	"tapir",
	"tapis",
	"taplak",
	"taprofit",
	"taptibau",
	"taptu",
	"tapui",
	"tapuk",
	"tapung",
	"tapus",
	"tar",
	"tara",
	"taraf",
	"tarah",
	"tarak",
	"taraksasin",
	"taram",
	"tarang",
	"tarantisme",
	"tarantula",
	"tarap",
	"taraqi",
	"tarasul",
	"tarawangsa",
	"tarawih",
	"tarbiah",
	"tarbil",
	"tarbus",
	"tarcis",
	"tarekat",
	"target",
	"tarhim",
	"tari",
	"tarif",
	"tarik",
	"tarikat",
	"tarikh",
	"taring",
	"taris",
	"tarjih",
	"tarkas",
	"tarling",
	"tarmak",
	"tarpaulin",
	"tarsus",
	"tartar",
	"tartil",
	"tartir",
	"tartrat",
	"taruh",
	"taruk",
	"taruko",
	"tarum",
	"tarung",
	"tarup",
	"tarzan",
	"tas",
	"tasa",
	"tasai",
	"tasak",
	"tasalsul",
	"tasamuh",
	"tasaruf",
	"tasawuf",
	"tasbeh",
	"tasbih",
	"tasdik",
	"tasel",
	"tashih",
	"tasik",
	"taslim",
	"tasmik",
	"tasrif",
	"tasrih",
	"taswir",
	"tasyahud",
	"tasyakur",
	"tasyaum",
	"tasyayuh",
	"tasybih",
	"tasydid",
	"tasyhid",
	"tasyrih",
	"tasyrik",
	"tata",
	"tataganing",
	"tatah",
	"tatai",
	"tatak",
	"tatal",
	"tatami",
	"tatanan",
	"tatang",
	"tatap",
	"tatar",
	"tatih",
	"tating",
	"tatkala",
	"tato",
	"tau",
	"taubat",
	"taucang",
	"taufah",
	"taufik",
	"tauhid",
	"tauhidiah",
	"tauke",
	"taul",
	"tauliah",
	"taun",
	"taung",
	"taur",
	"taurat",
	"tauret",
	"taurus",
	"taut",
	"tautofoni",
	"tautologi",
	"tautomerisme",
	"tautonimi",
	"tautonomi",
	"tawa",
	"tawadu",
	"tawaduk",
	"tawaf",
	"tawajuh",
	"tawak",
	"tawakal",
	"tawan",
	"tawang",
	"tawar",
	"tawarik",
	"tawaruk",
	"tawas",
	"tawasul",
	"tawes",
	"tawon",
	"tawur",
	"tayamum",
	"tayang",
	"tayib",
	"tayibah",
	"tayub",
	"tayum",
	"tazkirah",
	"tean",
	"teater",
	"teatris",
	"tebah",
	"tebak",
	"tebal",
	"teban",
	"tebang",
	"tebar",
	"tebas",
	"tebat",
	"tebeng",
	"teberau",
	"tebing",
	"tebok",
	"tebon",
	"tebu",
	"tebuhar",
	"tebuk",
	"tebung",
	"tebus",
	"tedak",
	"tedarus",
	"tedas",
	"tedeng",
	"tedong",
	"teduh",
	"tedung",
	"tefrit",
	"tega",
	"tegah",
	"tegak",
	"tegal",
	"tegang",
	"tegap",
	"tegar",
	"tegari",
	"tegarun",
	"tegas",
	"tegel",
	"tegil",
	"tegmen",
	"teguh",
	"teguk",
	"tegun",
	"tegur",
	"teh",
	"teisme",
	"teja",
	"teji",
	"teka",
	"tekaan",
	"tekad",
	"tekah",
	"tekak",
	"tekalak",
	"tekam",
	"tekan",
	"tekang",
	"tekap",
	"tekar",
	"tekat",
	"tekek",
	"tekel",
	"teken",
	"teker",
	"teki",
	"tekidanto",
	"tekik",
	"tekis",
	"teklek",
	"teklok",
	"teknifon",
	"teknik",
	"teknikus",
	"teknis",
	"teknisi",
	"teknokrasi",
	"teknokrat",
	"teknokratik",
	"teknokratisme",
	"teknologi",
	"teknonim",
	"teknonimi",
	"teko",
	"tekoan",
	"tekoh",
	"tekokak",
	"tekong",
	"tekor",
	"tekoran",
	"tekpi",
	"teks",
	"tekstil",
	"tekstur",
	"tekstural",
	"tekte",
	"tektek",
	"tektit",
	"tektogenesa",
	"tektonik",
	"tektonis",
	"tektum",
	"tekua",
	"tekuk",
	"tekukur",
	"tekun",
	"tekung",
	"tekur",
	"tel",
	"tela",
	"telaah",
	"telabang",
	"telabat",
	"telacak",
	"teladan",
	"teladas",
	"telaga",
	"telah",
	"telajak",
	"telak",
	"telakup",
	"telampung",
	"telan",
	"telancang",
	"telang",
	"telangkai",
	"telangkup",
	"telanjang",
	"telanjur",
	"telantar",
	"telap",
	"telapak",
	"telas",
	"telat",
	"telatah",
	"telatap",
	"telaten",
	"telau",
	"tele",
	"telearsika",
	"teledek",
	"teledor",
	"teledrama",
	"telefon",
	"telefoni",
	"telefoto",
	"telegenik",
	"telegraf",
	"telegrafi",
	"telegrafis",
	"telegram",
	"telegrap",
	"telekan",
	"telekap",
	"telekinesis",
	"telekomedi",
	"telekomunikasi",
	"teleks",
	"teleku",
	"telekung",
	"telelensa",
	"telemeter",
	"telemetri",
	"telempap",
	"telempong",
	"teleng",
	"telenovela",
	"telentang",
	"teleologi",
	"teleost",
	"telepati",
	"telepok",
	"telepon",
	"teleprinter",
	"telepromter",
	"telepuk",
	"teler",
	"telerang",
	"teles",
	"teleskop",
	"telestesia",
	"televisi",
	"telgram",
	"telik",
	"telikung",
	"telimpuh",
	"telinak",
	"telinga",
	"telingkah",
	"telingkung",
	"teliti",
	"telmotofit",
	"telop",
	"telor",
	"telotak",
	"telpon",
	"teluh",
	"teluk",
	"teluki",
	"telungkup",
	"telunjuk",
	"telur",
	"telurat",
	"telurit",
	"telus",
	"telusuk",
	"telusur",
	"telut",
	"telutuh",
	"telutur",
	"telutut",
	"tem",
	"tema",
	"temaah",
	"temabur",
	"temaha",
	"temahak",
	"temak",
	"temalang",
	"temali",
	"teman",
	"temangau",
	"temangga",
	"temanten",
	"temara",
	"temaram",
	"temas",
	"tematik",
	"tematis",
	"tematisasi",
	"temayun",
	"tembadau",
	"tembaga",
	"tembak",
	"tembakang",
	"tembakau",
	"tembakul",
	"tembam",
	"tembang",
	"tembarau",
	"tembatar",
	"tembatu",
	"tembek",
	"tembekar",
	"tembel",
	"tembelang",
	"tembelian",
	"tembeliung",
	"tembelok",
	"tembem",
	"tembera",
	"temberam",
	"temberang",
	"temberas",
	"temberek",
	"tembereng",
	"temberih",
	"temberos",
	"tembesu",
	"tembiang",
	"tembikai",
	"tembikar",
	"tembilang",
	"tembilar",
	"tembiring",
	"tembis",
	"tembok",
	"tembolok",
	"tembong",
	"tembosa",
	"tembra",
	"tembu",
	"tembuk",
	"tembuku",
	"tembung",
	"tembuni",
	"tembus",
	"tembusu",
	"temegun",
	"temeh",
	"temengalan",
	"temenggung",
	"temenung",
	"temesar",
	"temetu",
	"temiang",
	"temilang",
	"temin",
	"temokus",
	"temoleh",
	"tempa",
	"tempah",
	"tempala",
	"tempan",
	"tempang",
	"tempap",
	"tempat",
	"tempaus",
	"tempawak",
	"tempawan",
	"tempayak",
	"tempayan",
	"tempayung",
	"tempe",
	"tempek",
	"tempel",
	"tempelak",
	"tempeleng",
	"temperamen",
	"temperamental",
	"temperas",
	"temperatur",
	"temperau",
	"tempiar",
	"tempias",
	"tempik",
	"tempilai",
	"tempinah",
	"tempinis",
	"templek",
	"templok",
	"tempo",
	"tempoh",
	"tempolong",
	"temponek",
	"tempong",
	"temporal",
	"temporer",
	"tempoyak",
	"tempoyan",
	"tempua",
	"tempuh",
	"tempui",
	"tempuling",
	"tempunai",
	"tempunik",
	"tempur",
	"tempurung",
	"tempus",
	"tempuyung",
	"temu",
	"temucut",
	"temukut",
	"temungkul",
	"temuras",
	"temurat",
	"temut-temut",
	"tenaga",
	"tenahak",
	"tenak",
	"tenam",
	"tenang",
	"tenar",
	"tenat",
	"tenda",
	"tendang",
	"tendas",
	"tendensi",
	"tendensius",
	"tender",
	"tendinitis",
	"tendo",
	"tendon",
	"tener",
	"teng",
	"tengadah",
	"tengah",
	"tengak",
	"tengalan",
	"tengar",
	"tengara",
	"tengas",
	"tenggadai",
	"tenggak",
	"tenggala",
	"tenggalung",
	"tenggan",
	"tenggang",
	"tenggara",
	"tenggarang",
	"tenggat",
	"tenggayun",
	"tenggayung",
	"tenggehem",
	"tenggek",
	"tenggelam",
	"tengger",
	"tenggiling",
	"tenggiri",
	"tenggiring",
	"tenggok",
	"tenggorok",
	"tengguli",
	"tengik",
	"tengil",
	"tengkalak",
	"tengkalang",
	"tengkaluk",
	"tengkam",
	"tengkang",
	"tengkar",
	"tengkarah",
	"tengkarap",
	"tengkaras",
	"tengkawang",
	"tengkek",
	"tengkel",
	"tengkelek",
	"tengker",
	"tengkerong",
	"tengkes",
	"tengking",
	"tengkoh",
	"tengkolok",
	"tengkorak",
	"tengku",
	"tengkujuh",
	"tengkuk",
	"tengkulak",
	"tengkuluk",
	"tengkurap",
	"tengkuyung",
	"tengok",
	"tengteng",
	"tengu",
	"tenis",
	"tenjet",
	"tenok",
	"tenong",
	"tenor",
	"tensi",
	"tentakel",
	"tentamen",
	"tentang",
	"tentara",
	"tentatif",
	"tentawan",
	"tenteng",
	"tenteram",
	"tentir",
	"tentu",
	"tenuk",
	"tenun",
	"tenung",
	"teodolit",
	"teokrasi",
	"teokratis",
	"teolog",
	"teologi",
	"teologis",
	"teoretikus",
	"teoretis",
	"teori",
	"teorisasi",
	"teosofi",
	"teosofis",
	"tepa",
	"tepak",
	"tepam",
	"tepas",
	"tepat",
	"tepeh",
	"tepek",
	"tepekong",
	"teperam",
	"tepes",
	"tepet",
	"tepi",
	"tepik",
	"tepis",
	"teplok",
	"tepo",
	"tepok",
	"tepos",
	"teptibau",
	"tepu",
	"tepuk",
	"tepung",
	"tepurang",
	"tepus",
	"ter",
	"tera",
	"teracak",
	"terada",
	"terajam",
	"teraju",
	"terak",
	"terakota",
	"terakup",
	"teral",
	"terala",
	"terali",
	"teraling",
	"teramisin",
	"terampil",
	"teran",
	"teranas",
	"terang",
	"terap",
	"terapang",
	"terapeutik",
	"terapi",
	"terarium",
	"teras",
	"terasi",
	"teraso",
	"terasul",
	"teratai",
	"teratak",
	"teratap",
	"teratologi",
	"teratu",
	"terau",
	"terawang",
	"teraweh",
	"terban",
	"terbang",
	"terbis",
	"terbit",
	"terbium",
	"terbul",
	"terbut",
	"terein",
	"terem",
	"terenang",
	"terendak",
	"terenen",
	"terentang",
	"terenyuh",
	"teres",
	"teret",
	"teretet",
	"teri",
	"teriak",
	"teriba",
	"terigu",
	"terik",
	"terika",
	"terikit",
	"teriko",
	"terima",
	"terin",
	"terindil",
	"tering",
	"teripang",
	"terista",
	"teritih",
	"teritik",
	"teritip",
	"teritis",
	"teritorial",
	"teritorium",
	"teriujung",
	"terjal",
	"terjang",
	"terjemah",
	"terjun",
	"terka",
	"terkadang",
	"terkam",
	"terkap",
	"terkul",
	"terkup",
	"terlak",
	"terlalu",
	"terlut",
	"term",
	"termaestesia",
	"termal",
	"termin",
	"terminal",
	"terminasi",
	"terminografi",
	"terminologi",
	"termion",
	"termionika",
	"termistor",
	"termodinamika",
	"termodinamis",
	"termoelektris",
	"termoelektrisitas",
	"termofili",
	"termofilik",
	"termofosforesens",
	"termograf",
	"termogram",
	"termohigrograf",
	"termokimia",
	"termoklin",
	"termolabil",
	"termolisis",
	"termolistrik",
	"termoluminesens",
	"termometer",
	"termonuklir",
	"termoplastik",
	"termos",
	"termosfer",
	"termostat",
	"terna",
	"ternak",
	"terobos",
	"terok",
	"teroka",
	"terombol",
	"teromol",
	"terompah",
	"terompet",
	"terondol",
	"terong",
	"terongko",
	"teropong",
	"teror",
	"teroris",
	"terorisme",
	"terowongan",
	"terpa",
	"terpal",
	"terpana",
	"terpedo",
	"terpentin",
	"tersier",
	"tertawa",
	"tertib",
	"terubuk",
	"terubus",
	"terucuk",
	"terucukan",
	"teruk",
	"terum",
	"terumba",
	"terumbu",
	"terumbuk",
	"teruna",
	"terung",
	"terungku",
	"teruntum",
	"terup",
	"terus",
	"terusi",
	"terwelu",
	"terzina",
	"tes",
	"tesaurus",
	"tesis",
	"tesmak",
	"testa",
	"testamen",
	"tester",
	"testes",
	"testikel",
	"testimonium",
	"testing",
	"testis",
	"testosteron",
	"teta",
	"tetak",
	"tetal",
	"tetampan",
	"tetamu",
	"tetangga",
	"tetanus",
	"tetap",
	"tetapi",
	"tetar",
	"tetas",
	"teteguk",
	"teteh",
	"tetek",
	"tetelan",
	"tetelo",
	"teter",
	"teterapan",
	"tetes",
	"tetibar",
	"tetibau",
	"tetikus",
	"tetirah",
	"tetiron",
	"tetoron",
	"tetra",
	"tetrahidrokanabinol",
	"tetrahidron",
	"tetraklorida",
	"tetraploid",
	"tetris",
	"tetua",
	"tetuang",
	"tewas",
	"teyan",
	"tezi",
	"theta",
	"tiada",
	"tiaga",
	"tiam",
	"tian",
	"tiang",
	"tiangui",
	"tiap",
	"tiara",
	"tiarap",
	"tib",
	"tiba",
	"tiban",
	"tidak",
	"tidur",
	"tifa",
	"tifus",
	"tiga",
	"tigari",
	"tigas",
	"tihul",
	"tijaniah",
	"tik",
	"tika",
	"tikai",
	"tikam",
	"tikar",
	"tikas",
	"tike",
	"tiket",
	"tikim",
	"tikpi",
	"tikung",
	"tikus",
	"tilam",
	"tilan",
	"tilang",
	"tilap",
	"tilas",
	"tilawah",
	"tilde",
	"tilik",
	"tim",
	"timah",
	"timang",
	"timarah",
	"timba",
	"timbal",
	"timbang",
	"timbau",
	"timbel",
	"timbil",
	"timbo",
	"timbre",
	"timbrung",
	"timbuk",
	"timbul",
	"timbun",
	"timburu",
	"timbus",
	"timi",
	"timol",
	"timpa",
	"timpal",
	"timpang",
	"timpani",
	"timpanitis",
	"timpanum",
	"timpas",
	"timpuh",
	"timpuk",
	"timpus",
	"timu-timu",
	"timun",
	"timur",
	"timus",
	"tin",
	"tindak",
	"tindan",
	"tindas",
	"tindawan",
	"tindih",
	"tindik",
	"tindis",
	"tiner",
	"ting",
	"tinggal",
	"tinggam",
	"tinggi",
	"tinggung",
	"tingi",
	"tingkah",
	"tingkal",
	"tingkalak",
	"tingkap",
	"tingkar",
	"tingkarang",
	"tingkarung",
	"tingkas",
	"tingkat",
	"tingkeb",
	"tingkis",
	"tingkrang",
	"tingkuh",
	"tingting",
	"tingtong",
	"tingtur",
	"tinja",
	"tinjak",
	"tinjau",
	"tinju",
	"tinta",
	"tinting",
	"tintir",
	"tinulat",
	"tip",
	"tipar",
	"tipe",
	"tipi",
	"tipikal",
	"tipis",
	"tipograf",
	"tipografi",
	"tipologi",
	"tipologis",
	"tipu",
	"tir",
	"tirah",
	"tirai",
	"tirakat",
	"tiram",
	"tiran",
	"tirani",
	"tiras",
	"tiraton",
	"tirau",
	"tiri",
	"tiris",
	"tirkah",
	"tiroid",
	"tiroiditis",
	"tiroksin",
	"tirta",
	"tiru",
	"tirus",
	"tis",
	"tisik",
	"tisotropi",
	"tisu",
	"titah",
	"titanium",
	"titar",
	"titel",
	"titer",
	"titi",
	"titik",
	"titilasi",
	"titimangsa",
	"titinada",
	"titip",
	"titir",
	"titis",
	"titisara",
	"titit",
	"titrasi",
	"titrimetri",
	"tituler",
	"tiung",
	"tiup",
	"tiwah",
	"tiwikrama",
	"tiwul",
	"tmesis",
	"toapekong",
	"toas",
	"tobak",
	"tobang",
	"tobat",
	"toblos",
	"toboh",
	"tobong",
	"tobralko",
	"todak",
	"todong",
	"toga",
	"togan",
	"toge",
	"togel",
	"togok",
	"toh",
	"tohok",
	"tohor",
	"toilet",
	"tok",
	"tokak",
	"tokcer",
	"toke",
	"tokek",
	"toko",
	"tokoh",
	"tokok",
	"tokong",
	"toksemia",
	"toksikogenik",
	"toksikolog",
	"toksikologi",
	"toksin",
	"toktok",
	"tol",
	"tolak",
	"tolan",
	"tolap",
	"toleh",
	"toleran",
	"toleransi",
	"tolerir",
	"tolok",
	"tolol",
	"tolong",
	"toluena",
	"tom",
	"toman",
	"tomang",
	"tomat",
	"tombak",
	"tomboi",
	"tombok",
	"tombol",
	"tombola",
	"tombong",
	"tombru",
	"tomong",
	"tompel",
	"ton",
	"tona",
	"tonase",
	"tonem",
	"tonetika",
	"tong",
	"tonggak",
	"tonggara",
	"tonggek",
	"tonggeret",
	"tonggok",
	"tonggong",
	"tonggos",
	"tongkah",
	"tongkang",
	"tongkat",
	"tongkeng",
	"tongkol",
	"tongkor",
	"tongkrong",
	"tongol",
	"tongong",
	"tongpes",
	"tongsan",
	"tongseng",
	"tongsit",
	"tongtong",
	"tonik",
	"tonikum",
	"tonil",
	"tonis",
	"tonisitas",
	"tonit",
	"tonjok",
	"tonjol",
	"tonometer",
	"tonsil",
	"tonton",
	"tonus",
	"top",
	"topan",
	"topang",
	"topas",
	"topdal",
	"topek",
	"topeng",
	"topes",
	"tophit",
	"topi",
	"topiari",
	"topik",
	"topikalisasi",
	"topikalitas",
	"topo",
	"topografi",
	"topografis",
	"topong",
	"toponimi",
	"torak",
	"toraks",
	"torani",
	"toreh",
	"torek",
	"tores",
	"torida",
	"torium",
	"tornado",
	"torne",
	"toro",
	"torpedo",
	"torpedor",
	"torsi",
	"torso",
	"tortor",
	"torus",
	"tos",
	"tosan",
	"toserba",
	"total",
	"totalisator",
	"totalitas",
	"totaliter",
	"totaliterisme",
	"totau",
	"totem",
	"totemisme",
	"totemproparte",
	"totok",
	"totol",
	"towel",
	"toya",
	"toyor",
	"tra",
	"trabekula",
	"tradisi",
	"tradisional",
	"tradisionalisme",
	"trafo",
	"tragedi",
	"tragikomedi",
	"tragis",
	"tragus",
	"trailer",
	"trakeid",
	"trakom",
	"traksi",
	"traktasi",
	"traktat",
	"traktir",
	"traktor",
	"traktus",
	"trama",
	"trampolin",
	"trans",
	"transaksi",
	"transduksi",
	"transek",
	"transeksual",
	"transenden",
	"transendental",
	"transfer",
	"transfigurasi",
	"transformasi",
	"transformasionalis",
	"transformatif",
	"transformator",
	"transfusi",
	"transgenik",
	"transisi",
	"transistor",
	"transit",
	"transitif",
	"transkrip",
	"transkripsi",
	"translasi",
	"transliterasi",
	"translokasi",
	"translusens",
	"transmigran",
	"transmigrasi",
	"transmisi",
	"transmiter",
	"transmogrifikasi",
	"transmutasi",
	"transnasional",
	"transonik",
	"transparan",
	"transparansi",
	"transpirasi",
	"transplantasi",
	"transpor",
	"transportasi",
	"transposisi",
	"transversal",
	"transvetisme",
	"trap",
	"trapesium",
	"trapezoid",
	"tras",
	"trauler",
	"trauma",
	"traumatis",
	"travesti",
	"trawler",
	"trayek",
	"trek",
	"trekbal",
	"trem",
	"trema",
	"trematoda",
	"trembesi",
	"tremer",
	"tremor",
	"tren",
	"trendi",
	"trengginas",
	"trenyuh",
	"tres",
	"tresna",
	"tri",
	"trias",
	"triatlon",
	"tribokelistrikan",
	"tribologi",
	"tribrata",
	"tribunal",
	"tribune",
	"tributa",
	"trica",
	"tridarma",
	"tridentat",
	"trienial",
	"triennale",
	"trifoliat",
	"triftong",
	"trigatra",
	"trigemius",
	"trigliserida",
	"trigonometri",
	"trigraf",
	"trihidrik",
	"trik",
	"triko",
	"trikotomi",
	"trikuspid",
	"tril",
	"trilateral",
	"trilingga",
	"trilipat",
	"triliun",
	"trilogi",
	"trilomba",
	"trim",
	"trimatra",
	"trimurti",
	"trinil",
	"trinitas",
	"trinitrotoluena",
	"trio",
	"triode",
	"trip",
	"tripartit",
	"tripleks",
	"triplet",
	"triplik",
	"tripod",
	"triprasetia",
	"trips",
	"tripsin",
	"tripsinogen",
	"triptofan",
	"triptotos",
	"trisep",
	"trisula",
	"tritunggal",
	"triturasi",
	"triumvirat",
	"trivalen",
	"trivialitas",
	"triwangsa",
	"triwindu",
	"triwulan",
	"trofi",
	"trofoblas",
	"troi",
	"troika",
	"trokanter",
	"trokea",
	"troli",
	"trombin",
	"trombon",
	"trombosis",
	"trombosit",
	"trombus",
	"tromol",
	"trompet",
	"trompong",
	"tropik",
	"tropika",
	"tropis",
	"tropisme",
	"tropopause",
	"troposfer",
	"tropus",
	"tros",
	"trotoar",
	"trubadur",
	"truf",
	"truk",
	"truntum",
	"trusa",
	"tsar",
	"tsunami",
	"tsuru",
	"tua",
	"tuah",
	"tuai",
	"tuak",
	"tual",
	"tuala",
	"tualang",
	"tuam",
	"tuan",
	"tuang",
	"tuangku",
	"tuanku",
	"tuap",
	"tuar",
	"tuarang",
	"tuas",
	"tuba",
	"tubagus",
	"tuban",
	"tube",
	"tubektomi",
	"tuberkulosis",
	"tubi",
	"tubin",
	"tubir",
	"tubruk",
	"tubuh",
	"tuding",
	"tuduh",
	"tudung",
	"tufa",
	"tufah",
	"tugal",
	"tugar",
	"tugas",
	"tugi",
	"tugu",
	"tugur",
	"tuhan",
	"tuhfah",
	"tuhfahlulajnas",
	"tuhfahtulajnas",
	"tuhfat",
	"tuhmah",
	"tuhu",
	"tuidi",
	"tuil",
	"tuit",
	"tujah",
	"tuji",
	"tuju",
	"tujuh",
	"tujul",
	"tuk",
	"tukai",
	"tukak",
	"tukal",
	"tukam",
	"tukang",
	"tukar",
	"tukas",
	"tukik",
	"tukil",
	"tukmis",
	"tuksedo",
	"tuku",
	"tukuk",
	"tukul",
	"tukun",
	"tukung",
	"tukup",
	"tula",
	"tulah",
	"tulak",
	"tulang",
	"tular",
	"tulat",
	"tule",
	"tulen",
	"tuli",
	"tulis",
	"tulium",
	"tulu",
	"tulup",
	"tulus",
	"tum",
	"tuma",
	"tuman",
	"tumang",
	"tumbakan",
	"tumbal",
	"tumbang",
	"tumbas",
	"tumben",
	"tumbu",
	"tumbuh",
	"tumbuk",
	"tumbung",
	"tumenggung",
	"tumika",
	"tumis",
	"tumit",
	"tumor",
	"tumpah",
	"tumpak",
	"tumpal",
	"tumpang",
	"tumpang-tindih",
	"tumpas",
	"tumpat",
	"tumpeng",
	"tumper",
	"tumpil",
	"tumplak",
	"tumplek",
	"tumpu",
	"tumpuk",
	"tumpul",
	"tumpur",
	"tumtam",
	"tumu",
	"tumungkul",
	"tumus",
	"tun",
	"tuna",
	"tunaaksara",
	"tunabusana",
	"tunadaksa",
	"tunaganda",
	"tunagizi",
	"tunagrahita",
	"tunai",
	"tunak",
	"tunakarya",
	"tunalaras",
	"tunam",
	"tunan",
	"tunanetra",
	"tunang",
	"tunapolitik",
	"tunarungu",
	"tunas",
	"tunasosial",
	"tunasusila",
	"tunatenaga",
	"tunawicara",
	"tunawisma",
	"tunda",
	"tundan",
	"tundang",
	"tundra",
	"tunduk",
	"tundun",
	"tundung",
	"tung",
	"tungau",
	"tunggak",
	"tunggal",
	"tungganai",
	"tunggang",
	"tunggik",
	"tungging",
	"tunggu",
	"tunggul",
	"tungkahan",
	"tungkai",
	"tungkak",
	"tungkap",
	"tungku",
	"tungkul",
	"tungkup",
	"tungkus",
	"tungro",
	"tungsten",
	"tungu",
	"tunik",
	"tunjal",
	"tunjam",
	"tunjang",
	"tunjuk",
	"tunjung",
	"tuntas",
	"tuntun",
	"tuntung",
	"tuntut",
	"tunu",
	"tupai",
	"tur",
	"tura",
	"turang",
	"turangga",
	"turap",
	"turas",
	"turba",
	"turbiditas",
	"turbin",
	"turbogenerator",
	"turbojet",
	"turbulen",
	"turbulensi",
	"turfat",
	"turgor",
	"turi",
	"turiang",
	"turinisasi",
	"turis",
	"turisme",
	"turistik",
	"turkuois",
	"turmalin",
	"turnamen",
	"turne",
	"turnoi",
	"tursi",
	"turun",
	"turus",
	"turut",
	"tus",
	"tusam",
	"tusir",
	"tuslah",
	"tustel",
	"tusuk",
	"tuter",
	"tutor",
	"tutorial",
	"tuts",
	"tutu",
	"tutuh",
	"tutuk",
	"tutul",
	"tutung",
	"tutup",
	"tutur",
	"tutut",
	"tuwuhan",
	"tuwung",
	"tuyuk",
	"tuyul",
	"uai",
	"uak",
	"uan",
	"uanda",
	"uang",
	"uap",
	"uar",
	"uba",
	"ubah",
	"uban",
	"ubang",
	"ubar",
	"ubat",
	"ubek",
	"ubel",
	"uber",
	"ubet",
	"ubi",
	"ubikuitas",
	"ubin",
	"ubit",
	"ubrak-abrik",
	"ubub",
	"ubudiah",
	"ubun-ubun",
	"ubung",
	"ubur-ubur",
	"ubyang-ubyung",
	"ucap",
	"ucek",
	"uci-uci",
	"ucis",
	"ucok",
	"ucu",
	"ucus",
	"uda",
	"udak",
	"udam",
	"udang",
	"udani",
	"udap",
	"udar",
	"udara",
	"ude",
	"udek",
	"udel",
	"udeng",
	"udet",
	"udi",
	"udik",
	"udim",
	"udo",
	"udu",
	"uduh",
	"uduk",
	"udut",
	"uek",
	"ufti",
	"ufuk",
	"ugahari",
	"ugal-ugalan",
	"ugem",
	"uger",
	"uget-uget",
	"ugut",
	"uhu",
	"uih",
	"uik",
	"uir-uir",
	"uis",
	"uit",
	"ujana",
	"ujang",
	"ujar",
	"uji",
	"uju",
	"ujub",
	"ujud",
	"ujuk",
	"ujul",
	"ujung",
	"ukas",
	"ukhrawi",
	"ukhuwah",
	"ukik",
	"ukir",
	"uktab",
	"ukulele",
	"ukup",
	"ukur",
	"ula-ula",
	"ulah",
	"ulak",
	"ulam",
	"ulama",
	"ulan",
	"ulang",
	"ulang-alik",
	"ulang-aling",
	"ulap-ulap",
	"ular",
	"ulas",
	"ulat",
	"ulayah",
	"ulayat",
	"ulek",
	"ulem",
	"ulen",
	"ules",
	"ulet",
	"uli",
	"ulik",
	"ulin",
	"uling",
	"ulir",
	"ulit",
	"ulna",
	"ulos",
	"ultima",
	"ultimatum",
	"ultimo",
	"ultimogenitur",
	"ultra",
	"ultrafilter",
	"ultramarin",
	"ultramikroskopik",
	"ultramikroskopiks",
	"ultramodern",
	"ultrasonik",
	"ultrasonika",
	"ultrasonografi",
	"ultraungu",
	"ultraviolet",
	"ulu",
	"uluk",
	"ulun",
	"ulung",
	"ulup",
	"ulur",
	"uma",
	"umak",
	"uman",
	"umang-umang",
	"umara",
	"umat",
	"umbai",
	"umbalan",
	"umban",
	"umbang",
	"umbang-ambing",
	"umbar",
	"umbara",
	"umbi",
	"umbilikus",
	"umbin",
	"umbisi",
	"umbo",
	"umbra",
	"umbu",
	"umbuk",
	"umbul",
	"umbur-umbur",
	"umbut",
	"umi",
	"umlaut",
	"umpak",
	"umpama",
	"umpan",
	"umpat",
	"umpet",
	"umpil",
	"umpuk",
	"umpun",
	"umput",
	"umrah",
	"umu",
	"umuk",
	"umum",
	"umun",
	"umur",
	"unam",
	"uncang",
	"uncang-uncit",
	"uncit",
	"uncu",
	"uncue",
	"uncui",
	"unda",
	"undagi",
	"undak",
	"undan",
	"undang",
	"undi",
	"unduh",
	"unduk-unduk",
	"undung-undung",
	"undur",
	"unek-unek",
	"ungah-angih",
	"ungam",
	"ungar",
	"unggah",
	"unggal",
	"unggang-anggit",
	"unggas",
	"unggat-unggit",
	"unggis",
	"unggit",
	"unggul",
	"unggun",
	"unggut",
	"ungka",
	"ungkah",
	"ungkai",
	"ungkak",
	"ungkal",
	"ungkap",
	"ungkat",
	"ungkau",
	"ungkil",
	"ungkir",
	"ungkit",
	"ungkul",
	"ungkur",
	"ungsi",
	"ungti",
	"ungu",
	"unguis",
	"uni",
	"uniat",
	"unifikasi",
	"uniform",
	"uniformitas",
	"unik",
	"unilateral",
	"unilineal",
	"unilinear",
	"union",
	"uniseks",
	"uniseluler",
	"unit",
	"unitaris",
	"unitarisme",
	"univalen",
	"universal",
	"universalia",
	"universalisme",
	"universalitas",
	"universiade",
	"universitas",
	"universiter",
	"universitet",
	"universum",
	"unjuk",
	"unjun",
	"unjung",
	"unjur",
	"unjut",
	"unsur",
	"unsuri",
	"unta",
	"untai",
	"untal",
	"untang-anting",
	"unti",
	"until",
	"unting",
	"untir",
	"untuk",
	"untun",
	"untung",
	"untut",
	"unun",
	"unyai",
	"upa",
	"upaboga",
	"upacara",
	"upaduta",
	"upah",
	"upajiwa",
	"upak",
	"upakara",
	"upakarti",
	"upam",
	"upan",
	"upanishad",
	"upar",
	"upau",
	"upawasa",
	"upaya",
	"upet",
	"upeti",
	"upih",
	"upik",
	"upil",
	"upsilon",
	"ura-ura",
	"uraemia",
	"urah",
	"urai",
	"urak",
	"urakus",
	"uran-uran",
	"uranisme",
	"uranium",
	"uranologi",
	"uranus",
	"urap",
	"uras",
	"urat",
	"urban",
	"urbanisasi",
	"urbanisme",
	"urdu",
	"urea",
	"uremia",
	"ureter",
	"uretra",
	"uretritis",
	"urgen",
	"urgensi",
	"uri",
	"urian",
	"uribang",
	"urik",
	"urinalisis",
	"urine",
	"uring",
	"urinoar",
	"urinometer",
	"urip",
	"uris",
	"urit",
	"urita",
	"uritan",
	"urna",
	"urolog",
	"urologi",
	"uroskopi",
	"uruk",
	"urun",
	"urung",
	"urup",
	"urus",
	"urut",
	"usada",
	"usah",
	"usaha",
	"usai",
	"usak",
	"usali",
	"usam",
	"usang",
	"usap",
	"usar",
	"usat",
	"user-user",
	"usia",
	"usik",
	"usil",
	"usir",
	"uskup",
	"usrek",
	"ustad",
	"ustaz",
	"ustazah",
	"usuk",
	"usul",
	"usuluddin",
	"usung",
	"usur",
	"usus",
	"usut",
	"uswah",
	"utak-atik",
	"utama",
	"utang",
	"utar-utar",
	"utara",
	"utarid",
	"utas",
	"uterus",
	"utih",
	"utik",
	"utilitas",
	"utopia",
	"utopis",
	"utopisme",
	"utrikel",
	"utrolokal",
	"utuh",
	"utus",
	"uvula",
	"uvular",
	"uwar",
	"uwungan",
	"uwur",
	"uyuh",
	"uzlah",
	"uzur",
	"vagina",
	"vak",
	"vakansi",
	"vakasi",
	"vakatur",
	"vakbon",
	"vaksin",
	"vaksinasi",
	"vakum",
	"vakuol",
	"vakuola",
	"valas",
	"valensi",
	"valentin",
	"valentine",
	"valeria",
	"valid",
	"validitas",
	"valis",
	"valium",
	"valorisasi",
	"valuta",
	"vampir",
	"vanadium",
	"vandal",
	"vandalisme",
	"vandalistis",
	"vandel",
	"vanili",
	"varia",
	"variabel",
	"variabilitas",
	"varian",
	"variansi",
	"variasi",
	"variatif",
	"varietas",
	"variola",
	"varises",
	"vas",
	"vasal",
	"vasektomi",
	"vaselin",
	"vaskular",
	"vaskularisasi",
	"vaskuler",
	"vaskulum",
	"vasodilasi",
	"vasodilator",
	"vasomotor",
	"vatikan",
	"vaucer",
	"vedda",
	"veddoid",
	"veem",
	"vegetarian",
	"vegetarir",
	"vegetaris",
	"vegetarisme",
	"vegetasi",
	"vektor",
	"velamentum",
	"velar",
	"velarisasi",
	"velodrom",
	"velositas",
	"velum",
	"vena",
	"venal",
	"venalitas",
	"vendeta",
	"vendor",
	"ventilasi",
	"ventilator",
	"ventrikel",
	"ventrikulus",
	"venus",
	"verba",
	"verbal",
	"verbalisan",
	"verbalisasi",
	"verbalisme",
	"verbalistis",
	"verbatim",
	"verbena",
	"verdigris",
	"verifikasi",
	"verifikatur",
	"veritisme",
	"verkoper",
	"vermilium",
	"vermiliun",
	"vermiseli",
	"vermisida",
	"vernis",
	"veronal",
	"verset",
	"versi",
	"verso",
	"verstek",
	"versus",
	"vertebra",
	"vertebrata",
	"vertikal",
	"verzet",
	"vespa",
	"veste",
	"vestibul",
	"vestibula",
	"vestibulum",
	"vet",
	"veter",
	"veteran",
	"veterinarian",
	"veteriner",
	"vetiver",
	"veto",
	"vetsin",
	"via",
	"viabel",
	"viabilitas",
	"viaduk",
	"vibran",
	"vibrasi",
	"vibrator",
	"vibrio",
	"vide",
	"video",
	"videofon",
	"videoklip",
	"videoteks",
	"vigia",
	"vigili",
	"vignet",
	"vikariat",
	"vikaris",
	"vila",
	"vinil",
	"vinyet",
	"viol",
	"viola",
	"violces",
	"violet",
	"violin",
	"violinis",
	"violis",
	"virga",
	"virginia",
	"virgo",
	"virilis",
	"virilisme",
	"virilitas",
	"virilokal",
	"virologi",
	"virtual",
	"virtuoso",
	"virulen",
	"virulensi",
	"virus",
	"visa",
	"visera",
	"visi",
	"visibel",
	"visibilitas",
	"visioner",
	"visitasi",
	"visitator",
	"visiun",
	"viskometer",
	"viskose",
	"viskositas",
	"vista",
	"visual",
	"visualisasi",
	"visum",
	"visus",
	"vitakultur",
	"vital",
	"vitalitas",
	"vitamin",
	"vitelin",
	"vitiligo",
	"vitreositas",
	"vitrifikasi",
	"vitriol",
	"vivarium",
	"vivifikasi",
	"vivipar",
	"vla",
	"vlek",
	"voal",
	"vodka",
	"vokabularium",
	"vokabuler",
	"vokal",
	"vokalia",
	"vokalis",
	"vokasional",
	"vokatif",
	"vokoid",
	"volatil",
	"volatilitas",
	"voli",
	"volt",
	"voltameter",
	"voltase",
	"volume",
	"volumeter",
	"volumetri",
	"volunter",
	"vonis",
	"vopo",
	"vorteks",
	"voting",
	"votum",
	"vrah",
	"vrahoto",
	"vulgar",
	"vulgata",
	"vulger",
	"vulkan",
	"vulkanis",
	"vulkanisasi",
	"vulkanolog",
	"vulkanologi",
	"vulkavit",
	"vulpen",
	"vulva",
	"vulvektomi",
	"vuring",
	"waad",
	"waadat",
	"wabah",
	"wabakdu",
	"wabarakatuh",
	"wacana",
	"wadah",
	"wadak",
	"wadal",
	"wadam",
	"wadat",
	"wadi",
	"wadon",
	"waduh",
	"waduk",
	"wadung",
	"wafa",
	"wafak",
	"wafat",
	"wage",
	"wagon",
	"wagu",
	"wah",
	"wahah",
	"wahai",
	"waham",
	"wahana",
	"wahdah",
	"wahdaniah",
	"wahdiah",
	"wahib",
	"wahid",
	"wahyu",
	"wai",
	"waid",
	"waima",
	"waisak",
	"waisya",
	"waitankung",
	"wajah",
	"wajan",
	"wajar",
	"wajib",
	"wajik",
	"wak",
	"wakaf",
	"wakil",
	"waktu",
	"wakun",
	"wakwak",
	"walabi",
	"walad",
	"walafiat",
	"walah",
	"walak",
	"walakhir",
	"walakin",
	"walang",
	"walangkopo",
	"walango",
	"walat",
	"walau",
	"walaupun",
	"waledan",
	"waleh",
	"walet",
	"walhal",
	"walhasil",
	"wali",
	"walikukun",
	"walimah",
	"walimana",
	"waliullah",
	"wallahi",
	"wallahualam",
	"wals",
	"waluh",
	"waluku",
	"wambrau",
	"wan",
	"wana",
	"wanara",
	"wanawisata",
	"wanda",
	"wandu",
	"wang",
	"wangi",
	"wangkang",
	"wangsa",
	"wangsit",
	"wani",
	"wanita",
	"wanodya",
	"wantah",
	"wantek",
	"wanti-wanti",
	"wantilan",
	"wara",
	"warak",
	"warakawuri",
	"waralaba",
	"warangan",
	"waranggana",
	"warangka",
	"waras",
	"warasah",
	"warawiri",
	"wardi",
	"warga",
	"wari",
	"waria",
	"warid",
	"waringin",
	"waris",
	"warita",
	"warkat",
	"warna",
	"warna-warni",
	"warok",
	"warsa",
	"warta",
	"waru",
	"waruga",
	"waruna",
	"warung",
	"warwar",
	"wasahlan",
	"wasak",
	"wasal",
	"wasalam",
	"wasangka",
	"wasi",
	"wasiat",
	"wasilah",
	"wasir",
	"wasit",
	"wasitah",
	"waskita",
	"waskom",
	"waslah",
	"waslap",
	"waspada",
	"wastafel",
	"waswas",
	"watak",
	"watan",
	"watang",
	"watas",
	"watase",
	"watermantel",
	"watermark",
	"waterpas",
	"waterpruf",
	"watt",
	"watu",
	"wau",
	"wawa",
	"wawancara",
	"wawanmuka",
	"wawanrembuk",
	"wawas",
	"wawu",
	"wayang",
	"wayuh",
	"wazari",
	"wazir",
	"weda",
	"wedam",
	"wedana",
	"wedang",
	"wedani",
	"wedar",
	"wede",
	"wedel",
	"weduk",
	"wegah",
	"weh",
	"weharima",
	"wejang",
	"wekel",
	"weker",
	"welahar",
	"welas",
	"weling",
	"welirang",
	"welit",
	"welter",
	"welut",
	"wenang",
	"wenter",
	"werak",
	"werangka",
	"werda",
	"werdatama",
	"were",
	"werek",
	"wereng",
	"werit",
	"werst",
	"wese",
	"wesel",
	"weselbor",
	"wesi",
	"wesket",
	"westernis",
	"westernisasi",
	"wet",
	"wetan",
	"weton",
	"wewarah",
	"wewaton",
	"wewe",
	"wibawa",
	"wicaksana",
	"wicara",
	"widi",
	"widiaiswara",
	"widiwasa",
	"widodari",
	"widoro",
	"widuri",
	"widyaiswara",
	"widyawisata",
	"wig",
	"wigata",
	"wihara",
	"wijaya",
	"wijayakusuma",
	"wijayamala",
	"wijayamulia",
	"wijdaniah",
	"wijen",
	"wiji",
	"wijik",
	"wikalat",
	"wiku",
	"wiladah",
	"wilah",
	"wilangon",
	"wilayah",
	"wilis",
	"wilwatikta",
	"wimana",
	"winaya",
	"windu",
	"wing",
	"wingit",
	"winglet",
	"winter",
	"wira",
	"wirabank",
	"wiracarita",
	"wiraga",
	"wirakarya",
	"wirang",
	"wiraniaga",
	"wirasuara",
	"wiraswasta",
	"wirid",
	"wiru",
	"wisa",
	"wisal",
	"wisata",
	"wisaya",
	"wisesa",
	"wisik",
	"wiski",
	"wisma",
	"wisnu",
	"wisuda",
	"witir",
	"wiwaha",
	"wiweka",
	"wiyaga",
	"wiyata",
	"wizurai",
	"wodka",
	"wol",
	"wolanda",
	"wolfram",
	"wombat",
	"won",
	"wong",
	"wora-wari",
	"wortel",
	"wosi",
	"wotogal-agil",
	"wrang",
	"wreda",
	"wredatama",
	"wregu",
	"wrisaba",
	"wudani",
	"wudu",
	"wuduk",
	"wujud",
	"wuker",
	"wukerar",
	"wuku",
	"wukuf",
	"wulan",
	"wulang",
	"wulu",
	"wulung",
	"wungon",
	"wungu",
	"wuwungan",
	"xantat",
	"xantena",
	"xantofil",
	"xenia",
	"xenofili",
	"xenofobia",
	"xenoglosia",
	"xenograf",
	"xenokrasi",
	"xenolit",
	"xenomania",
	"xenon",
	"xerofil",
	"xerofit",
	"xeroftalmia",
	"xerografi",
	"xerosis",
	"xifoid",
	"xilem",
	"xilena",
	"xilofon",
	"xilograf",
	"xilografi",
	"xiloid",
	"xiloidina",
	"xilol",
	"xilologi",
	"xilonit",
	"xilosa",
	"yad",
	"yahud",
	"yahudi",
	"yahudiah",
	"yahwe",
	"yais",
	"yaitu",
	"yakin",
	"yakis",
	"yakitori",
	"yakjuj",
	"yakni",
	"yaksa",
	"yakun",
	"yakut",
	"yamtuan",
	"yang",
	"yantra",
	"yard",
	"yargon",
	"yasan",
	"yasmin",
	"yasti",
	"yatim",
	"yaum",
	"yaumudin",
	"yaumulakhir",
	"yaumulaza",
	"yaumuljamak",
	"yaumuljaza",
	"yaumulkiamah",
	"yaumulmahsyar",
	"yayasan",
	"yayi",
	"yayu",
	"yehova",
	"yel",
	"yen",
	"yeyunum",
	"yodium",
	"yoga",
	"yoghurt",
	"yogi",
	"yogia",
	"yohimbina",
	"yojana",
	"yokal",
	"yolk",
	"yos",
	"yosong",
	"yoyo",
	"yubileum",
	"yuda",
	"yudikatif",
	"yudisial",
	"yudisium",
	"yudo",
	"yudoka",
	"yuk",
	"yunani",
	"yunda",
	"yunior",
	"yunta",
	"yupa",
	"yupiter",
	"yura",
	"yuran",
	"yuridis",
	"yuris",
	"yurisdiksi",
	"yurisprudensi",
	"yustisi",
	"yute",
	"yuvenil",
	"yuwana",
	"yuwaraja",
	"yuyitsu",
	"yuyu",
	"zabah",
	"zabaniah",
	"zabarjad",
	"zabib",
	"zabur",
	"zadah",
	"zahid",
	"zai",
	"zaim",
	"zair",
	"zaitun",
	"zakar",
	"zakat",
	"zakelek",
	"zakiah",
	"zakum",
	"zal",
	"zalim",
	"zalir",
	"zaman",
	"zamin",
	"zamindar",
	"zamrud",
	"zamzam",
	"zan",
	"zanggi",
	"zantara",
	"zarafah",
	"zarah",
	"zaratit",
	"zariah",
	"zariat",
	"zat",
	"zatua",
	"zawal",
	"zawiat",
	"zebra",
	"zebu",
	"zelot",
	"zen",
	"zend-avesta",
	"zendeling",
	"zending",
	"zeni",
	"zenit",
	"zeolit",
	"zeoponik",
	"zero",
	"zet",
	"zeta",
	"ziadah",
	"ziarah",
	"zib",
	"zig-zag",
	"zigomorf",
	"zigot",
	"zikir",
	"zilullah",
	"zimase",
	"zimi",
	"zimogen",
	"zimolisis",
	"zimosis",
	"zimotik",
	"zimurgi",
	"zina",
	"zindik",
	"zink",
	"zinkografi",
	"zion",
	"zionis",
	"zionisme",
	"zirafah",
	"zirah",
	"zirbad",
	"zirkonia",
	"zirkonium",
	"zirnikh",
	"ziter",
	"zodiak",
	"zoetrop",
	"zohal",
	"zohrah",
	"zohrat",
	"zona",
	"zonasi",
	"zonder",
	"zone",
	"zoning",
	"zoofit",
	"zoofobia",
	"zoogani",
	"zoogeografi",
	"zoologi",
	"zoonosis",
	"zoosemiotika",
	"zuama",
	"zuhud",
	"zuhur",
	"zulfikar",
	"zulhijah",
	"zulkaidah",
	"zulmat",
	"zulu",
	"zurafah",
	"zuriah",
	"zus",
	""
];

/*
Copyright (c) 2017, Alif Bhaskoro, Andy Librian, R. Kukuh (Reimplemented from https://github.com/sastrawi/sastrawi)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/
var prefix_rules;
var hasRequiredPrefix_rules;
function requirePrefix_rules() {
  if (hasRequiredPrefix_rules) return prefix_rules;
  hasRequiredPrefix_rules = 1;
  // a list of commonly used words that have little meaning and can be excluded
  // from analysis.

  const Removal = requireRemoval();

  // Make global variable for dictionary
  const dictionary = loadDictionary();
  function loadDictionary() {
    const fin = require$$3;
    return new Set(fin.filter(Boolean));
  }

  // Find certain word in dictionary
  function find(word) {
    return dictionary.has(word);
  }
  function PrefixRules() {
    const PrefixRules = this;
    this.removal = undefined;
    this.currentWord = undefined;

    // Run the array of disambiguate rules on input word
    function runDisambiguator(disambiguateRules, word) {
      let result;
      for (const i in disambiguateRules) {
        result = disambiguateRules[i](word);
        if (find(result)) {
          break;
        }
      }
      if (result === undefined) {
        this.currentWord = word;
        this.removal = undefined;
        return this;
      }
      return createResultObject(result, word, 'DP');
    }
    function createResultObject(result, word, type) {
      const removedPart = word.replace(result, '');
      const removal = new Removal(word, result, removedPart, type);
      this.removal = removal;
      this.currentWord = result;
      return this;
    }
    PrefixRules.RemovePlainPrefix = function (word) {
      const result = word.replace(/^(di|ke|se)/, '');
      if (result !== word) {
        const removedPart = word.replace(result, '');
        const removal = new Removal(word, result, removedPart, 'DP');
        this.removal = removal;
      } else {
        this.removal = undefined;
      }
      this.currentWord = result;
      return this;
    };

    // RULE 1
    function disambiguateRule1A(word) {
      // Rule 1a : berV -> ber-V
      const matches = word.match(/^ber([aiueo].*)$/);
      if (matches) {
        return matches[1];
      }
    }
    function disambiguateRule1B(word) {
      // Rule 1b : berV -> be-rV
      const matches = word.match(/^ber([aiueo].*)$/);
      if (matches) {
        return 'r' + matches[1];
      }
    }
    PrefixRules.DisambiguatorPrefixRule1 = function (word) {
      // Push rules 1A & 1B
      const disambiguateRules = [];
      disambiguateRules.push(disambiguateRule1A);
      disambiguateRules.push(disambiguateRule1B);
      return runDisambiguator(disambiguateRules, word);
    };

    // RULE 2
    function disambiguateRule2(word) {
      // Rule 2 : berCAP -> ber-CAP where C != 'r' AND P != 'er'
      const matches = word.match(/^ber([bcdfghjklmnpqrstvwxyz])([a-z])(.*)/);
      if (matches) {
        if (matches[3].match(/^er(.*)$/)) {
          return;
        }
        return matches[1] + matches[2] + matches[3];
      }
    }
    PrefixRules.DisambiguatorPrefixRule2 = function (word) {
      // Push rule 2
      const disambiguateRules = [];
      disambiguateRules.push(disambiguateRule2);
      return runDisambiguator(disambiguateRules, word);
    };

    // RULE 3
    function disambiguateRule3(word) {
      // Rule 3 : berCAerV -> ber-CAerV where C != 'r'
      const matches = word.match(/ber([bcdfghjklmnpqrstvwxyz])([a-z])er([aiueo])(.*)/);
      if (matches) {
        if (matches[1] === 'r') {
          return;
        }
        return matches[1] + matches[2] + 'er' + matches[3] + matches[4];
      }
    }
    PrefixRules.DisambiguatorPrefixRule3 = function (word) {
      // Push rule 3
      const disambiguateRules = [];
      disambiguateRules.push(disambiguateRule3);
      return runDisambiguator(disambiguateRules, word);
    };

    // RULE 4
    function disambiguateRule4(word) {
      // Rule 4 : belajar -> ajar
      if (word === 'belajar') {
        return 'ajar';
      }
    }
    PrefixRules.DisambiguatorPrefixRule4 = function (word) {
      // Push rule 4
      const disambiguateRules = [];
      disambiguateRules.push(disambiguateRule4);
      return runDisambiguator(disambiguateRules, word);
    };

    // RULE 5
    function disambiguateRule5(word) {
      // Rule 5 : beC1erC2 -> be-C1erC2 where C1 != 'r'
      const matches = word.match(/be([bcdfghjklmnpqstvwxyz])(er[bcdfghjklmnpqrstvwxyz])(.*)$/);
      if (matches) {
        return matches[1] + matches[2] + matches[3];
      }
    }
    PrefixRules.DisambiguatorPrefixRule5 = function (word) {
      // Push rule 5
      const disambiguateRules = [];
      disambiguateRules.push(disambiguateRule5);
      return runDisambiguator(disambiguateRules, word);
    };

    // RULE 6
    function disambiguateRule6a(word) {
      // Rule 6a : terV -> ter-V
      const matches = word.match(/^ter([aiueo].*)$/);
      if (matches) {
        return matches[1];
      }
    }
    function disambiguateRule6b(word) {
      // Rule 6b : terV -> te-rV
      const matches = word.match(/^ter([aiueo].*)$/);
      if (matches) {
        return 'r' + matches[1];
      }
    }
    PrefixRules.DisambiguatorPrefixRule6 = function (word) {
      // Push rule 6
      const disambiguateRules = [];
      disambiguateRules.push(disambiguateRule6a);
      disambiguateRules.push(disambiguateRule6b);
      return runDisambiguator(disambiguateRules, word);
    };

    // RULE 7
    function disambiguateRule7(word) {
      // Rule 7 : terCerv -> ter-CerV where C != 'r'
      const matches = word.match(/^ter([bcdfghjklmnpqrstvwxyz])er([aiueo].*)$/);
      if (matches) {
        if (matches[1] === 'r') {
          return;
        }
        return matches[1] + 'er' + matches[2];
      }
    }
    PrefixRules.DisambiguatorPrefixRule7 = function (word) {
      // Push rule 7
      const disambiguateRules = [];
      disambiguateRules.push(disambiguateRule7);
      return runDisambiguator(disambiguateRules, word);
    };

    // RULE 8
    function disambiguateRule8(word) {
      // Rule 8 : terCP -> ter-CP where C != 'r' and P != 'er'
      const matches = word.match(/^ter([bcdfghjklmnpqrstvwxyz])(.*)$/);
      if (matches) {
        if (matches[1] === 'r' || matches[2].match(/^er(.*)$/)) {
          return;
        }
        return matches[1] + matches[2];
      }
    }
    PrefixRules.DisambiguatorPrefixRule8 = function (word) {
      // Push rule 8
      const disambiguateRules = [];
      disambiguateRules.push(disambiguateRule8);
      return runDisambiguator(disambiguateRules, word);
    };

    // RULE 9
    function disambiguateRule9(word) {
      // Rule 9 : te-C1erC2 -> te-C1erC2 where C1 != 'r'
      const matches = word.match(/^te([bcdfghjklmnpqrstvwxyz])er([bcdfghjklmnpqrstvwxyz])(.*)$/);
      if (matches) {
        if (matches[1] === 'r') {
          return;
        }
        return matches[1] + 'er' + matches[2] + matches[3];
      }
    }
    PrefixRules.DisambiguatorPrefixRule9 = function (word) {
      // Push rule 9
      const disambiguateRules = [];
      disambiguateRules.push(disambiguateRule9);
      return runDisambiguator(disambiguateRules, word);
    };

    // RULE 10
    function disambiguateRule10(word) {
      // Rule 10 : me{l|r|w|y}V -> me-{l|r|w|y}V
      const matches = word.match(/^me([lrwy])([aiueo])(.*)$/);
      if (matches) {
        return matches[1] + matches[2] + matches[3];
      }
    }
    PrefixRules.DisambiguatorPrefixRule10 = function (word) {
      // Push rule 10
      const disambiguateRules = [];
      disambiguateRules.push(disambiguateRule10);
      return runDisambiguator(disambiguateRules, word);
    };

    // RULE 11
    function disambiguateRule11(word) {
      // Rule 11 : mem{b|f|v} -> mem-{b|f|v}
      const matches = word.match(/^mem([bfv])(.*)$/);
      if (matches) {
        return matches[1] + matches[2];
      }
    }
    PrefixRules.DisambiguatorPrefixRule11 = function (word) {
      // Push rule 11
      const disambiguateRules = [];
      disambiguateRules.push(disambiguateRule11);
      return runDisambiguator(disambiguateRules, word);
    };

    // RULE 12
    function disambiguateRule12(word) {
      // Nazief and Adriani Rule 12 : beC1erC2 -> be-C1erC2 where C1 != 'r'
      // Modified by Jelita Asian's CS Rule 12 : mempe -> mem-pe to stem mempengaruhi
      const matches = word.match(/^mempe(.*)$/);
      if (matches) {
        return 'pe' + matches[1];
      }
    }
    PrefixRules.DisambiguatorPrefixRule12 = function (word) {
      // Push rule 12
      const disambiguateRules = [];
      disambiguateRules.push(disambiguateRule12);
      return runDisambiguator(disambiguateRules, word);
    };

    // RULE 13
    function disambiguateRule13a(word) {
      // Rule 13a : mem{rV|V} -> me-m{rV|V}
      const matches = word.match(/^mem([aiueo])(.*)$/);
      if (matches) {
        return 'm' + matches[1] + matches[2];
      }
    }
    function disambiguateRule13b(word) {
      // Rule 13b : mem{rV|V} -> me-p{rV|V}
      const matches = word.match(/^mem([aiueo])(.*)$/);
      if (matches) {
        return 'p' + matches[1] + matches[2];
      }
    }
    PrefixRules.DisambiguatorPrefixRule13 = function (word) {
      // Push rule 13
      const disambiguateRules = [];
      disambiguateRules.push(disambiguateRule13a);
      disambiguateRules.push(disambiguateRule13b);
      return runDisambiguator(disambiguateRules, word);
    };

    // RULE 14
    function disambiguateRule14(word) {
      /* Rule 14 modified by Andy Librian : men{c|d|j|s|t|z} -> men-{c|d|j|s|t|z}
          in order to stem mentaati
           Rule 14 modified by ECS: men{c|d|j|s|z} -> men-{c|d|j|s|z}
          in order to stem mensyaratkan, mensyukuri
           Original CS Rule no 14 was : men{c|d|j|z} -> men-{c|d|j|z} */
      const matches = word.match(/^men([cdjstz])(.*)$/);
      if (matches) {
        return matches[1] + matches[2];
      }
    }
    PrefixRules.DisambiguatorPrefixRule14 = function (word) {
      // Push rule 14
      const disambiguateRules = [];
      disambiguateRules.push(disambiguateRule14);
      return runDisambiguator(disambiguateRules, word);
    };

    // RULE 15
    function disambiguateRule15a(word) {
      // Rule 15a : men{V} -> me-n{V}
      const matches = word.match(/^men([aiueo])(.*)$/);
      if (matches) {
        return 'n' + matches[1] + matches[2];
      }
    }
    function disambiguateRule15b(word) {
      // Rule 15b : men{V} -> me-t{V}
      const matches = word.match(/^men([aiueo])(.*)$/);
      if (matches) {
        return 't' + matches[1] + matches[2];
      }
    }
    PrefixRules.DisambiguatorPrefixRule15 = function (word) {
      // Push rule 15
      const disambiguateRules = [];
      disambiguateRules.push(disambiguateRule15a);
      disambiguateRules.push(disambiguateRule15b);
      return runDisambiguator(disambiguateRules, word);
    };

    // RULE 16
    function disambiguateRule16(word) {
      // Original Nazief and Adriani's Rule 16 : meng{g|h|q} -> meng-{g|h|q}
      // Modified Jelita Asian's CS Rule 16 : meng{g|h|q|k} -> meng-{g|h|q|k} to stem mengkritik
      const matches = word.match(/^meng([g|h|q|k])(.*)$/);
      if (matches) {
        return matches[1] + matches[2];
      }
    }
    PrefixRules.DisambiguatorPrefixRule16 = function (word) {
      // Push rule 16
      const disambiguateRules = [];
      disambiguateRules.push(disambiguateRule16);
      return runDisambiguator(disambiguateRules, word);
    };

    // RULE 17
    function disambiguateRule17a(word) {
      // Rule 17a : mengV -> meng-V
      const matches = word.match(/^meng([aiueo])(.*)$/);
      if (matches) {
        return matches[1] + matches[2];
      }
    }
    function disambiguateRule17b(word) {
      // Rule 17b : mengV -> meng-kV
      const matches = word.match(/^meng([aiueo])(.*)$/);
      if (matches) {
        return 'k' + matches[1] + matches[2];
      }
    }
    function disambiguateRule17c(word) {
      // Rule 17c : mengV -> meng-V- where V = 'e'
      const matches = word.match(/^menge(.*)$/);
      if (matches) {
        return matches[1];
      }
    }
    function disambiguateRule17d(word) {
      // Rule 17d : mengV -> me-ngV
      const matches = word.match(/^meng([aiueo])(.*)$/);
      if (matches) {
        return 'ng' + matches[1] + matches[2];
      }
    }
    PrefixRules.DisambiguatorPrefixRule17 = function (word) {
      // Push rule 17
      const disambiguateRules = [];
      disambiguateRules.push(disambiguateRule17a);
      disambiguateRules.push(disambiguateRule17b);
      disambiguateRules.push(disambiguateRule17c);
      disambiguateRules.push(disambiguateRule17d);
      return runDisambiguator(disambiguateRules, word);
    };

    // RULE 18
    function disambiguateRule18a(word) {
      // Rule 18a : menyV -> me-nyV to stem menyala -> nyala
      const matches = word.match(/^meny([aiueo])(.*)$/);
      if (matches) {
        return 'ny' + matches[1] + matches[2];
      }
    }
    function disambiguateRule18b(word) {
      // Original Rule 18b : menyV -> meny-sV
      // Modified by CC (shifted into 18b, see also 18a)
      const matches = word.match(/^meny([aiueo])(.*)$/);
      if (matches) {
        return 's' + matches[1] + matches[2];
      }
    }
    PrefixRules.DisambiguatorPrefixRule18 = function (word) {
      // Push rule 18
      const disambiguateRules = [];
      disambiguateRules.push(disambiguateRule18a);
      disambiguateRules.push(disambiguateRule18b);
      return runDisambiguator(disambiguateRules, word);
    };

    // RULE 19
    function disambiguateRule19(word) {
      // Original Rule 19 : mempV -> mem-pV where V != 'e'
      // Modified Rule 19 by ECS : mempA -> mem-pA where A != 'e' in order to stem memproteksi
      const matches = word.match(/^memp([abcdfghijklmopqrstuvwxyz])(.*)$/);
      if (matches) {
        return 'p' + matches[1] + matches[2];
      }
    }
    PrefixRules.DisambiguatorPrefixRule19 = function (word) {
      // Push rule 19
      const disambiguateRules = [];
      disambiguateRules.push(disambiguateRule19);
      return runDisambiguator(disambiguateRules, word);
    };

    // RULE 20
    function disambiguateRule20(word) {
      // Rule 20 : pe{w|y}V -> pe-{w|y}V
      const matches = word.match(/^pe([wy])([aiueo])(.*)$/);
      if (matches) {
        return matches[1] + matches[2] + matches[3];
      }
    }
    PrefixRules.DisambiguatorPrefixRule20 = function (word) {
      // Push rule 20
      const disambiguateRules = [];
      disambiguateRules.push(disambiguateRule20);
      return runDisambiguator(disambiguateRules, word);
    };

    // RULE 21
    function disambiguateRule21a(word) {
      // Rule 21a : perV -> per-V
      const matches = word.match(/^per([aiueo])(.*)$/);
      if (matches) {
        return matches[1] + matches[2];
      }
    }
    function disambiguateRule21b(word) {
      // Rule 21b : perV -> pe-rV
      const matches = word.match(/^pe(r[aiueo])(.*)$/);
      if (matches) {
        return matches[1] + matches[2];
      }
    }
    PrefixRules.DisambiguatorPrefixRule21 = function (word) {
      // Push rule 21
      const disambiguateRules = [];
      disambiguateRules.push(disambiguateRule21a);
      disambiguateRules.push(disambiguateRule21b);
      return runDisambiguator(disambiguateRules, word);
    };

    // RULE 23
    function disambiguateRule23(word) {
      // Rule 23 : perCAP -> per-CAP where C != 'r' AND P != 'er'
      const matches = word.match(/^per([bcdfghjklmnpqrstvwxyz])([a-z])(.*)$/);
      if (matches) {
        if (matches[3].match(/^er(.*)$/)) {
          return;
        }
        return matches[1] + matches[2] + matches[3];
      }
    }
    PrefixRules.DisambiguatorPrefixRule23 = function (word) {
      // Push rule 23
      const disambiguateRules = [];
      disambiguateRules.push(disambiguateRule23);
      return runDisambiguator(disambiguateRules, word);
    };

    // RULE 24
    function disambiguateRule24(word) {
      // Rule 24 : perCAerV -> per-CAerV where C != 'r'
      const matches = word.match(/^per([bcdfghjklmnpqrstvwxyz])([a-z])er([aiueo])(.*)$/);
      if (matches) {
        if (matches[1] === 'r') {
          return;
        }
        return matches[1] + matches[2] + 'er' + matches[3] + matches[4];
      }
    }
    PrefixRules.DisambiguatorPrefixRule24 = function (word) {
      // Push rule 24
      const disambiguateRules = [];
      disambiguateRules.push(disambiguateRule24);
      return runDisambiguator(disambiguateRules, word);
    };

    // RULE 25
    function disambiguateRule25(word) {
      // Rule 25 : pem{b|f|v} -> pem-{b|f|v}
      const matches = word.match(/^pem([bfv])(.*)$/);
      if (matches) {
        return matches[1] + matches[2];
      }
    }
    PrefixRules.DisambiguatorPrefixRule25 = function (word) {
      // Push rule 25
      const disambiguateRules = [];
      disambiguateRules.push(disambiguateRule25);
      return runDisambiguator(disambiguateRules, word);
    };

    // RULE 26
    function disambiguateRule26a(word) {
      // Rule 26a : pem{rV|V} -> pe-m{rV|V}
      const matches = word.match(/^pem([aiueo])(.*)$/);
      if (matches) {
        return 'm' + matches[1] + matches[2];
      }
    }
    function disambiguateRule26b(word) {
      // Rule 26b : pem{rV|V} -> pe-p{rV|V}
      const matches = word.match(/^pem([aiueo])(.*)$/);
      if (matches) {
        return 'p' + matches[1] + matches[2];
      }
    }
    PrefixRules.DisambiguatorPrefixRule26 = function (word) {
      // Push rule 26
      const disambiguateRules = [];
      disambiguateRules.push(disambiguateRule26a);
      disambiguateRules.push(disambiguateRule26b);
      return runDisambiguator(disambiguateRules, word);
    };

    // RULE 27
    function disambiguateRule27(word) {
      // Rule 27 : pen{c|d|j|s|t|z} -> pen-{c|d|j|s|t|z}
      const matches = word.match(/^pen([cdjstz])(.*)$/);
      if (matches) {
        return matches[1] + matches[2];
      }
    }
    PrefixRules.DisambiguatorPrefixRule27 = function (word) {
      // Push rule 27
      const disambiguateRules = [];
      disambiguateRules.push(disambiguateRule27);
      return runDisambiguator(disambiguateRules, word);
    };

    // RULE 28
    function disambiguateRule28a(word) {
      // Rule 28a : pen{V} -> pe-n{V}
      const matches = word.match(/^pen([aiueo])(.*)$/);
      if (matches) {
        return 'n' + matches[1] + matches[2];
      }
    }
    function disambiguateRule28b(word) {
      // Rule 28b : pen{V} -> pe-t{V}
      const matches = word.match(/^pen([aiueo])(.*)$/);
      if (matches) {
        return 't' + matches[1] + matches[2];
      }
    }
    PrefixRules.DisambiguatorPrefixRule28 = function (word) {
      // Push rule 28
      const disambiguateRules = [];
      disambiguateRules.push(disambiguateRule28a);
      disambiguateRules.push(disambiguateRule28b);
      return runDisambiguator(disambiguateRules, word);
    };

    // RULE 29
    function disambiguateRule29(word) {
      // Rule 29 by ECS : pengC -> peng-C
      const matches = word.match(/^peng([bcdfghjklmnpqrstvwxyz])(.*)$/);
      if (matches) {
        return matches[1] + matches[2];
      }
    }
    PrefixRules.DisambiguatorPrefixRule29 = function (word) {
      // Push rule 29
      const disambiguateRules = [];
      disambiguateRules.push(disambiguateRule29);
      return runDisambiguator(disambiguateRules, word);
    };

    // RULE 30
    function disambiguateRule30a(word) {
      // Rule 30a : pengV -> peng-V
      const matches = word.match(/^peng([aiueo])(.*)$/);
      if (matches) {
        return matches[1] + matches[2];
      }
    }
    function disambiguateRule30b(word) {
      // Rule 30b : pengV -> peng-kV
      const matches = word.match(/^peng([aiueo])(.*)$/);
      if (matches) {
        return 'k' + matches[1] + matches[2];
      }
    }
    function disambiguateRule30c(word) {
      // Rule 30c : pengV -> pengV- where V = 'e'
      const matches = word.match(/^penge(.*)$/);
      if (matches) {
        return matches[1];
      }
    }
    PrefixRules.DisambiguatorPrefixRule30 = function (word) {
      // Push rule 30
      const disambiguateRules = [];
      disambiguateRules.push(disambiguateRule30a);
      disambiguateRules.push(disambiguateRule30b);
      disambiguateRules.push(disambiguateRule30c);
      return runDisambiguator(disambiguateRules, word);
    };

    // RULE 31
    function disambiguateRule31a(word) {
      // Rule 31a : penyV -> pe-nyV
      const matches = word.match(/^peny([aiueo])(.*)$/);
      if (matches) {
        return 'ny' + matches[1] + matches[2];
      }
    }
    function disambiguateRule31b(word) {
      // Original Rule 31 : penyV -> peny-sV
      const matches = word.match(/^peny([aiueo])(.*)$/);
      if (matches) {
        return 's' + matches[1] + matches[2];
      }
    }
    PrefixRules.DisambiguatorPrefixRule31 = function (word) {
      // Push rule 31
      const disambiguateRules = [];
      disambiguateRules.push(disambiguateRule31a);
      disambiguateRules.push(disambiguateRule31b);
      return runDisambiguator(disambiguateRules, word);
    };

    // RULE 32
    function disambiguateRule32(word) {
      // Rule 32 : pelV -> pe-lV except pelajar -> ajar
      if (word === 'pelajar') {
        return 'ajar';
      }
      const matches = word.match(/^pe(l[aiueo])(.*)/);
      if (matches) {
        return matches[1] + matches[2];
      }
    }
    PrefixRules.DisambiguatorPrefixRule32 = function (word) {
      // Push rule 32
      const disambiguateRules = [];
      disambiguateRules.push(disambiguateRule32);
      return runDisambiguator(disambiguateRules, word);
    };

    // RULE 34
    function disambiguateRule34(word) {
      // Rule 34 : peCP -> pe-CP where C != {r|w|y|l|m|n} and P != 'er'
      const matches = word.match(/^pe([bcdfghjklmnpqrstvwxyz])(.*)$/);
      if (matches) {
        if (matches[2].match(/^er(.*)$/)) {
          return;
        }
        return matches[1] + matches[2];
      }
    }
    PrefixRules.DisambiguatorPrefixRule34 = function (word) {
      // Push rule 34
      const disambiguateRules = [];
      disambiguateRules.push(disambiguateRule34);
      return runDisambiguator(disambiguateRules, word);
    };

    // RULE 35
    function disambiguateRule35(word) {
      // Rule 35 : terC1erC2 -> ter-C1erC2 where C1 != {r}
      const matches = word.match(/^ter([bcdfghjkpqstvxz])(er[bcdfghjklmnpqrstvwxyz])(.*)$/);
      if (matches) {
        return matches[1] + matches[2] + matches[3];
      }
    }
    PrefixRules.DisambiguatorPrefixRule35 = function (word) {
      // Push rule 35
      const disambiguateRules = [];
      disambiguateRules.push(disambiguateRule35);
      return runDisambiguator(disambiguateRules, word);
    };

    // RULE 36
    function disambiguateRule36(word) {
      // Rule 36 : peC1erC2 -> pe-C1erC2 where C1 != {r|w|y|l|m|n}
      const matches = word.match(/^pe([bcdfghjkpqstvxz])(er[bcdfghjklmnpqrstvwxyz])(.*)$/);
      if (matches) {
        return matches[1] + matches[2] + matches[3];
      }
    }
    PrefixRules.DisambiguatorPrefixRule36 = function (word) {
      // Push rule 36
      const disambiguateRules = [];
      disambiguateRules.push(disambiguateRule36);
      return runDisambiguator(disambiguateRules, word);
    };

    // RULE 37
    function disambiguateRule37a(word) {
      // Rule 37a : CerV -> CerV
      const matches = word.match(/^([bcdfghjklmnpqrstvwxyz])(er[aiueo])(.*)$/);
      if (matches) {
        return matches[1] + matches[2] + matches[3];
      }
    }
    function disambiguateRule37b(word) {
      // Rule 37b : CerV -> CV
      const matches = word.match(/^([bcdfghjklmnpqrstvwxyz])er([aiueo])(.*)$/);
      if (matches) {
        return matches[1] + matches[2] + matches[3];
      }
    }
    PrefixRules.DisambiguatorPrefixRule37 = function (word) {
      // Push rule 37
      const disambiguateRules = [];
      disambiguateRules.push(disambiguateRule37a);
      disambiguateRules.push(disambiguateRule37b);
      return runDisambiguator(disambiguateRules, word);
    };

    // RULE 38
    function disambiguateRule38a(word) {
      // Rule 38a : CelV -> CelV
      const matches = word.match(/^([bcdfghjklmnpqrstvwxyz])(el[aiueo])(.*)$/);
      if (matches) {
        return matches[1] + matches[2] + matches[3];
      }
    }
    function disambiguateRule38b(word) {
      // Rule 38b : CelV -> CV
      const matches = word.match(/^([bcdfghjklmnpqrstvwxyz])el([aiueo])(.*)$/);
      if (matches) {
        return matches[1] + matches[2] + matches[3];
      }
    }
    PrefixRules.DisambiguatorPrefixRule38 = function (word) {
      // Push rule 38
      const disambiguateRules = [];
      disambiguateRules.push(disambiguateRule38a);
      disambiguateRules.push(disambiguateRule38b);
      return runDisambiguator(disambiguateRules, word);
    };

    // RULE 39
    function disambiguateRule39a(word) {
      // Rule 39a : CemV -> CemV
      const matches = word.match(/^([bcdfghjklmnpqrstvwxyz])(em[aiueo])(.*)$/);
      if (matches) {
        return matches[1] + matches[2] + matches[3];
      }
    }
    function disambiguateRule39b(word) {
      // Rule 39b : CemV -> CV
      const matches = word.match(/^([bcdfghjklmnpqrstvwxyz])em([aiueo])(.*)$/);
      if (matches) {
        return matches[1] + matches[2] + matches[3];
      }
    }
    PrefixRules.DisambiguatorPrefixRule39 = function (word) {
      // Push rule 39
      const disambiguateRules = [];
      disambiguateRules.push(disambiguateRule39a);
      disambiguateRules.push(disambiguateRule39b);
      return runDisambiguator(disambiguateRules, word);
    };

    // RULE 40
    function disambiguateRule40a(word) {
      // Rule 40a : CinV -> CinV
      const matches = word.match(/^([bcdfghjklmnpqrstvwxyz])(in[aiueo])(.*)$/);
      if (matches) {
        return matches[1] + matches[2] + matches[3];
      }
    }
    function disambiguateRule40b(word) {
      // Rule 40b : CinV -> CV
      const matches = word.match(/^([bcdfghjklmnpqrstvwxyz])in([aiueo])(.*)$/);
      if (matches) {
        return matches[1] + matches[2] + matches[3];
      }
    }
    PrefixRules.DisambiguatorPrefixRule40 = function (word) {
      // Push rule 40
      const disambiguateRules = [];
      disambiguateRules.push(disambiguateRule40a);
      disambiguateRules.push(disambiguateRule40b);
      return runDisambiguator(disambiguateRules, word);
    };

    // RULE 41
    function disambiguateRule41(word) {
      // Rule 41 : kuA -> ku-A
      const matches = word.match(/^ku(.*)$/);
      if (matches) {
        return matches[1];
      }
    }
    PrefixRules.DisambiguatorPrefixRule41 = function (word) {
      // Push rule 41
      const disambiguateRules = [];
      disambiguateRules.push(disambiguateRule41);
      return runDisambiguator(disambiguateRules, word);
    };

    // RULE 42
    function disambiguateRule42(word) {
      // Rule 42 : kauA -> kau-A
      const matches = word.match(/^kau(.*)$/);
      if (matches) {
        return matches[1];
      }
    }
    PrefixRules.DisambiguatorPrefixRule42 = function (word) {
      // Push rule 42
      const disambiguateRules = [];
      disambiguateRules.push(disambiguateRule42);
      return runDisambiguator(disambiguateRules, word);
    };
  }
  prefix_rules = PrefixRules;

  // Initalize prefix rules array
  const rules = [];
  const pr = new PrefixRules();

  // Push all rules
  rules.push(pr.RemovePlainPrefix);
  rules.push(pr.DisambiguatorPrefixRule1);
  rules.push(pr.DisambiguatorPrefixRule2);
  rules.push(pr.DisambiguatorPrefixRule3);
  rules.push(pr.DisambiguatorPrefixRule4);
  rules.push(pr.DisambiguatorPrefixRule5);
  rules.push(pr.DisambiguatorPrefixRule6);
  rules.push(pr.DisambiguatorPrefixRule7);
  rules.push(pr.DisambiguatorPrefixRule8);
  rules.push(pr.DisambiguatorPrefixRule9);
  rules.push(pr.DisambiguatorPrefixRule10);
  rules.push(pr.DisambiguatorPrefixRule11);
  rules.push(pr.DisambiguatorPrefixRule12);
  rules.push(pr.DisambiguatorPrefixRule13);
  rules.push(pr.DisambiguatorPrefixRule14);
  rules.push(pr.DisambiguatorPrefixRule15);
  rules.push(pr.DisambiguatorPrefixRule16);
  rules.push(pr.DisambiguatorPrefixRule17);
  rules.push(pr.DisambiguatorPrefixRule18);
  rules.push(pr.DisambiguatorPrefixRule19);
  rules.push(pr.DisambiguatorPrefixRule20);
  rules.push(pr.DisambiguatorPrefixRule21);
  rules.push(pr.DisambiguatorPrefixRule23);
  rules.push(pr.DisambiguatorPrefixRule24);
  rules.push(pr.DisambiguatorPrefixRule25);
  rules.push(pr.DisambiguatorPrefixRule26);
  rules.push(pr.DisambiguatorPrefixRule27);
  rules.push(pr.DisambiguatorPrefixRule28);
  rules.push(pr.DisambiguatorPrefixRule29);
  rules.push(pr.DisambiguatorPrefixRule30);
  rules.push(pr.DisambiguatorPrefixRule31);
  rules.push(pr.DisambiguatorPrefixRule32);
  rules.push(pr.DisambiguatorPrefixRule34);
  rules.push(pr.DisambiguatorPrefixRule35);
  rules.push(pr.DisambiguatorPrefixRule36);
  rules.push(pr.DisambiguatorPrefixRule37);
  rules.push(pr.DisambiguatorPrefixRule38);
  rules.push(pr.DisambiguatorPrefixRule39);
  rules.push(pr.DisambiguatorPrefixRule40);
  rules.push(pr.DisambiguatorPrefixRule41);
  rules.push(pr.DisambiguatorPrefixRule42);
  PrefixRules.rules = rules;
  return prefix_rules;
}

/*
Copyright (c) 2017, Alif Bhaskoro, Andy Librian, R. Kukuh (Reimplemented from https://github.com/sastrawi/sastrawi)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/
var stemmer_id;
var hasRequiredStemmer_id;
function requireStemmer_id() {
  if (hasRequiredStemmer_id) return stemmer_id;
  hasRequiredStemmer_id = 1;
  const BaseStemmer = requireBase_stemmer_id();
  const stemmer = new BaseStemmer();

  // Dictionary
  const dictionary = loadDictionary();

  // Rules
  const SuffixRules = requireSuffix_rules();
  const PrefixRules = requirePrefix_rules();
  const suffixRules = SuffixRules.rules;
  const prefixRules = PrefixRules.rules;

  // Removals
  let removals = null;

  // Words
  let originalWord = null;
  let currentWord = null;
  stemmer_id = stemmer;

  // perform full stemming algorithm on a single word
  stemmer.stem = function (token) {
    // Cache stemmer not yet implemented
    // Set to lowercase
    token = token.toLowerCase();

    // Initiate everything
    removals = [];
    if (isPlural(token)) {
      return stemPluralWord(token);
    } else {
      return stemSingularWord(token);
    }
  };

  // Stem for plural word
  function stemPluralWord(pluralWord) {
    let matches = pluralWord.match(/^(.*)-(.*)$/);
    if (!matches) {
      return pluralWord;
    }
    const words = [matches[1], matches[2]];

    // malaikat-malaikat-nya -> malaikat malaikat-nya
    const suffix = words[1];
    const suffixes = ['ku', 'mu', 'nya', 'lah', 'kah', 'tah', 'pun'];
    matches = words[0].match(/^(.*)-(.*)$/);
    if (suffixes.indexOf(suffix) !== -1 && matches) {
      words[0] = matches[1];
      words[1] = matches[2] + '-' + suffix;
    }

    // berbalas-balasan -> balas
    const rootWord1 = stemSingularWord(words[0]);
    let rootWord2 = stemSingularWord(words[1]);

    // meniru-nirukan -> tiru
    if (!find(words[1]) && rootWord2 === words[1]) {
      rootWord2 = stemSingularWord('me' + words[1]);
    }
    if (rootWord1 === rootWord2) {
      return rootWord1;
    } else {
      return pluralWord;
    }
  }

  // Stem for singular word
  function stemSingularWord(word) {
    originalWord = word; // Save the original word for reverting later
    currentWord = word;

    // Step 1
    if (currentWord.length > 3) {
      // Step 2-5
      stemmingProcess();
    }

    // Step 6
    if (find(currentWord)) {
      return currentWord;
    } else {
      return originalWord;
    }
  }

  // Return true if word is in plural form ex: gelas-gelas, else false
  function isPlural(token) {
    const matches = token.match(/^(.*)-(ku|mu|nya|lah|kah|tah|pun)$/);
    if (matches) {
      return matches[1].search('-') !== -1;
    }
    return token.search('-') !== -1;
  }

  // Find certain word in dictionary
  function find(word) {
    return dictionary.has(word);
  }
  function loadDictionary() {
    const fin = require$$3;
    return new Set(fin.filter(Boolean));
  }

  // Stemming from step 2-5
  function stemmingProcess() {
    if (find(currentWord)) {
      return;
    }

    // Confix Stripping
    // Try to remove prefixes first before suffixes if the specification is met
    if (precedenceAdjustmentSpecification(originalWord)) {
      // Step 4, 5
      removePrefixes();
      if (find(currentWord)) {
        return;
      }

      // Step 2, 3
      removeSuffixes();
      if (find(currentWord)) {
        return;
      } else {
        // if the trial is failed, restore the original word
        // and continue to normal rule precedence (suffix first, prefix afterwards)
        currentWord = originalWord;
        removals = [];
      }
    }

    // Step 2, 3
    removeSuffixes();
    if (find(currentWord)) {
      return;
    }

    // Step 4, 5
    removePrefixes();
    if (find(currentWord)) {
      return;
    }

    // ECS Loop Restore Prefixes
    loopRestorePrefixes();
  }

  // Remove Suffixes
  function removeSuffixes() {
    for (const i in suffixRules) {
      const resultObj = suffixRules[i](currentWord);

      // Add result to variable
      if (resultObj.removal !== undefined) {
        removals.push(resultObj.removal);
      }
      currentWord = resultObj.currentWord;
      if (find(currentWord)) {
        return currentWord;
      }
    }
  }

  // Remove Prefixes
  function removePrefixes() {
    for (let i = 0; i < 3; i++) {
      checkPrefixRules();
      if (find(currentWord)) {
        return currentWord;
      }
    }
  }
  function checkPrefixRules() {
    const removalCount = removals.length;
    let j = 0;
    for (j = 0; j < prefixRules.length; j++) {
      const resultObj = prefixRules[j](currentWord);

      // Add result to variable
      if (resultObj.removal !== undefined) {
        removals.push(resultObj.removal);
      }
      currentWord = resultObj.currentWord;
      if (find(currentWord)) {
        return currentWord;
      }
      if (removals.length > removalCount) {
        return;
      }
    }
  }

  // Loop Restore Prefixes
  function loopRestorePrefixes() {
    restorePrefix();
    const reversedRemovals = removals.reverse();
    const tempCurrentWord = currentWord;
    for (const i in reversedRemovals) {
      const currentRemoval = reversedRemovals[i];
      if (!isSuffixRemovals(currentRemoval)) {
        continue;
      }
      if (currentRemoval.getRemovedPart() === 'kan') {
        currentWord = currentRemoval.getResult() + 'k';

        // Step 4, 5
        removePrefixes();
        if (find(currentWord)) {
          return;
        }
        currentWord = currentRemoval.getResult() + 'kan';
      } else {
        currentWord = currentRemoval.getOriginalWord();
      }

      // Step 4, 5
      removePrefixes();
      if (find(currentWord)) {
        return;
      }
      currentWord = tempCurrentWord;
    }
  }
  function isSuffixRemovals(removal) {
    const type = removal.getAffixType();
    if (type === 'DS' || type === 'PP' || type === 'P') {
      return true;
    }
    return false;
  }
  function restorePrefix() {
    for (let i = 0; i < removals.length; i++) {
      currentWord = removals[i].getOriginalWord();
      // break
    }
    for (let i = 0; i < removals.length; i++) {
      if (removals[i].getAffixType() === 'DP') {
        removals.splice(i, 1);
        i--;
      }
    }
  }

  // Check if word require precedence adjustment or not
  // Adjustment means remove prefix then suffix instead of remove suffix then prefix
  function precedenceAdjustmentSpecification(word) {
    const regexRules = [/^be(.*)lah$/, /^be(.*)an$/, /^me(.*)i$/, /^di(.*)i$/, /^pe(.*)i$/, /^ter(.*)i$/];
    for (const i in regexRules) {
      if (word.match(regexRules[i])) {
        return true;
      }
    }
    return false;
  }

  // exports for tests
  stemmer.isPlural = isPlural;
  stemmer.dictionary = Array.from(dictionary);
  stemmer.a = suffixRules[0];
  return stemmer_id;
}

/*
Copyright (c) 2011, Chris Umbel

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/
var hasRequiredStemmers;
function requireStemmers() {
  if (hasRequiredStemmers) return stemmers;
  hasRequiredStemmers = 1;
  stemmers.PorterStemmer = requirePorter_stemmer();
  stemmers.PorterStemmerFa = requirePorter_stemmer_fa();
  stemmers.PorterStemmerFr = requirePorter_stemmer_fr();
  stemmers.CarryStemmerFr = requireCarry();
  stemmers.PorterStemmerDe = requirePorter_stemmer_de();
  stemmers.PorterStemmerUk = requirePorter_stemmer_uk();
  stemmers.PorterStemmerRu = requirePorter_stemmer_ru();
  stemmers.PorterStemmerEs = requirePorter_stemmer_es();
  stemmers.PorterStemmerIt = requirePorter_stemmer_it();
  stemmers.PorterStemmerNo = requirePorter_stemmer_no();
  stemmers.PorterStemmerSv = requirePorter_stemmer_sv();
  stemmers.PorterStemmerPt = requirePorter_stemmer_pt();
  stemmers.PorterStemmerNl = requirePorter_stemmer_nl();
  stemmers.LancasterStemmer = requireLancaster_stemmer();
  stemmers.StemmerJa = requireStemmer_ja();
  stemmers.StemmerId = requireStemmer_id();
  stemmers.Token = requireToken();
  return stemmers;
}

var stemmersExports = requireStemmers();

function getStemmer(language) {
  switch (language) {
    case 'fr':
      return stemmersExports.PorterStemmerFr;
    case 'de':
      return stemmersExports.PorterStemmerDe;
    case 'es':
      return stemmersExports.PorterStemmerEs;
    case 'it':
      return stemmersExports.PorterStemmerIt;
    case 'no':
      return stemmersExports.PorterStemmerNo;
    case 'sv':
      return stemmersExports.PorterStemmerSv;
    case 'pt':
      return stemmersExports.PorterStemmerPt;
    case 'nl':
      return stemmersExports.PorterStemmerNl;
    case 'ru':
      return stemmersExports.PorterStemmerRu;
    case 'uk':
      return stemmersExports.PorterStemmerUk;
    case 'fa':
      return stemmersExports.PorterStemmerFa;
    case 'ja':
      return stemmersExports.StemmerJa;
    case 'id':
      return stemmersExports.StemmerId;
    case 'en':
    default:
      return stemmersExports.PorterStemmer;
  }
}

function bind(fn, thisArg) {
  return function wrap() {
    return fn.apply(thisArg, arguments);
  };
}

// utils is a library of generic helper functions non-specific to axios

const {
  toString
} = Object.prototype;
const {
  getPrototypeOf
} = Object;
const kindOf = (cache => thing => {
  const str = toString.call(thing);
  return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
})(Object.create(null));
const kindOfTest = type => {
  type = type.toLowerCase();
  return thing => kindOf(thing) === type;
};
const typeOfTest = type => thing => typeof thing === type;

/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 *
 * @returns {boolean} True if value is an Array, otherwise false
 */
const {
  isArray
} = Array;

/**
 * Determine if a value is undefined
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if the value is undefined, otherwise false
 */
const isUndefined = typeOfTest('undefined');

/**
 * Determine if a value is a Buffer
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a Buffer, otherwise false
 */
function isBuffer(val) {
  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && isFunction(val.constructor.isBuffer) && val.constructor.isBuffer(val);
}

/**
 * Determine if a value is an ArrayBuffer
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */
const isArrayBuffer = kindOfTest('ArrayBuffer');

/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */
function isArrayBufferView(val) {
  let result;
  if (typeof ArrayBuffer !== 'undefined' && ArrayBuffer.isView) {
    result = ArrayBuffer.isView(val);
  } else {
    result = val && val.buffer && isArrayBuffer(val.buffer);
  }
  return result;
}

/**
 * Determine if a value is a String
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a String, otherwise false
 */
const isString = typeOfTest('string');

/**
 * Determine if a value is a Function
 *
 * @param {*} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */
const isFunction = typeOfTest('function');

/**
 * Determine if a value is a Number
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a Number, otherwise false
 */
const isNumber = typeOfTest('number');

/**
 * Determine if a value is an Object
 *
 * @param {*} thing The value to test
 *
 * @returns {boolean} True if value is an Object, otherwise false
 */
const isObject = thing => thing !== null && typeof thing === 'object';

/**
 * Determine if a value is a Boolean
 *
 * @param {*} thing The value to test
 * @returns {boolean} True if value is a Boolean, otherwise false
 */
const isBoolean = thing => thing === true || thing === false;

/**
 * Determine if a value is a plain Object
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a plain Object, otherwise false
 */
const isPlainObject = val => {
  if (kindOf(val) !== 'object') {
    return false;
  }
  const prototype = getPrototypeOf(val);
  return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in val) && !(Symbol.iterator in val);
};

/**
 * Determine if a value is a Date
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a Date, otherwise false
 */
const isDate = kindOfTest('Date');

/**
 * Determine if a value is a File
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a File, otherwise false
 */
const isFile = kindOfTest('File');

/**
 * Determine if a value is a Blob
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a Blob, otherwise false
 */
const isBlob = kindOfTest('Blob');

/**
 * Determine if a value is a FileList
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a File, otherwise false
 */
const isFileList = kindOfTest('FileList');

/**
 * Determine if a value is a Stream
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a Stream, otherwise false
 */
const isStream = val => isObject(val) && isFunction(val.pipe);

/**
 * Determine if a value is a FormData
 *
 * @param {*} thing The value to test
 *
 * @returns {boolean} True if value is an FormData, otherwise false
 */
const isFormData = thing => {
  let kind;
  return thing && (typeof FormData === 'function' && thing instanceof FormData || isFunction(thing.append) && ((kind = kindOf(thing)) === 'formdata' ||
  // detect form-data instance
  kind === 'object' && isFunction(thing.toString) && thing.toString() === '[object FormData]'));
};

/**
 * Determine if a value is a URLSearchParams object
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */
const isURLSearchParams = kindOfTest('URLSearchParams');
const [isReadableStream, isRequest, isResponse, isHeaders] = ['ReadableStream', 'Request', 'Response', 'Headers'].map(kindOfTest);

/**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 *
 * @returns {String} The String freed of excess whitespace
 */
const trim = str => str.trim ? str.trim() : str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, '');

/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 *
 * @param {Boolean} [allOwnKeys = false]
 * @returns {any}
 */
function forEach(obj, fn, {
  allOwnKeys = false
} = {}) {
  // Don't bother if no value provided
  if (obj === null || typeof obj === 'undefined') {
    return;
  }
  let i;
  let l;

  // Force an array if not already something iterable
  if (typeof obj !== 'object') {
    /*eslint no-param-reassign:0*/
    obj = [obj];
  }
  if (isArray(obj)) {
    // Iterate over array values
    for (i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    // Iterate over object keys
    const keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);
    const len = keys.length;
    let key;
    for (i = 0; i < len; i++) {
      key = keys[i];
      fn.call(null, obj[key], key, obj);
    }
  }
}
function findKey(obj, key) {
  key = key.toLowerCase();
  const keys = Object.keys(obj);
  let i = keys.length;
  let _key;
  while (i-- > 0) {
    _key = keys[i];
    if (key === _key.toLowerCase()) {
      return _key;
    }
  }
  return null;
}
const _global = (() => {
  /*eslint no-undef:0*/
  if (typeof globalThis !== "undefined") return globalThis;
  return typeof self !== "undefined" ? self : typeof window !== 'undefined' ? window : global;
})();
const isContextDefined = context => !isUndefined(context) && context !== _global;

/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 *
 * @returns {Object} Result of all merge properties
 */
function merge(/* obj1, obj2, obj3, ... */
) {
  const {
    caseless
  } = isContextDefined(this) && this || {};
  const result = {};
  const assignValue = (val, key) => {
    const targetKey = caseless && findKey(result, key) || key;
    if (isPlainObject(result[targetKey]) && isPlainObject(val)) {
      result[targetKey] = merge(result[targetKey], val);
    } else if (isPlainObject(val)) {
      result[targetKey] = merge({}, val);
    } else if (isArray(val)) {
      result[targetKey] = val.slice();
    } else {
      result[targetKey] = val;
    }
  };
  for (let i = 0, l = arguments.length; i < l; i++) {
    arguments[i] && forEach(arguments[i], assignValue);
  }
  return result;
}

/**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 *
 * @param {Boolean} [allOwnKeys]
 * @returns {Object} The resulting value of object a
 */
const extend = (a, b, thisArg, {
  allOwnKeys
} = {}) => {
  forEach(b, (val, key) => {
    if (thisArg && isFunction(val)) {
      a[key] = bind(val, thisArg);
    } else {
      a[key] = val;
    }
  }, {
    allOwnKeys
  });
  return a;
};

/**
 * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
 *
 * @param {string} content with BOM
 *
 * @returns {string} content value without BOM
 */
const stripBOM = content => {
  if (content.charCodeAt(0) === 0xFEFF) {
    content = content.slice(1);
  }
  return content;
};

/**
 * Inherit the prototype methods from one constructor into another
 * @param {function} constructor
 * @param {function} superConstructor
 * @param {object} [props]
 * @param {object} [descriptors]
 *
 * @returns {void}
 */
const inherits = (constructor, superConstructor, props, descriptors) => {
  constructor.prototype = Object.create(superConstructor.prototype, descriptors);
  constructor.prototype.constructor = constructor;
  Object.defineProperty(constructor, 'super', {
    value: superConstructor.prototype
  });
  props && Object.assign(constructor.prototype, props);
};

/**
 * Resolve object with deep prototype chain to a flat object
 * @param {Object} sourceObj source object
 * @param {Object} [destObj]
 * @param {Function|Boolean} [filter]
 * @param {Function} [propFilter]
 *
 * @returns {Object}
 */
const toFlatObject = (sourceObj, destObj, filter, propFilter) => {
  let props;
  let i;
  let prop;
  const merged = {};
  destObj = destObj || {};
  // eslint-disable-next-line no-eq-null,eqeqeq
  if (sourceObj == null) return destObj;
  do {
    props = Object.getOwnPropertyNames(sourceObj);
    i = props.length;
    while (i-- > 0) {
      prop = props[i];
      if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {
        destObj[prop] = sourceObj[prop];
        merged[prop] = true;
      }
    }
    sourceObj = filter !== false && getPrototypeOf(sourceObj);
  } while (sourceObj && (!filter || filter(sourceObj, destObj)) && sourceObj !== Object.prototype);
  return destObj;
};

/**
 * Determines whether a string ends with the characters of a specified string
 *
 * @param {String} str
 * @param {String} searchString
 * @param {Number} [position= 0]
 *
 * @returns {boolean}
 */
const endsWith = (str, searchString, position) => {
  str = String(str);
  if (position === undefined || position > str.length) {
    position = str.length;
  }
  position -= searchString.length;
  const lastIndex = str.indexOf(searchString, position);
  return lastIndex !== -1 && lastIndex === position;
};

/**
 * Returns new array from array like object or null if failed
 *
 * @param {*} [thing]
 *
 * @returns {?Array}
 */
const toArray = thing => {
  if (!thing) return null;
  if (isArray(thing)) return thing;
  let i = thing.length;
  if (!isNumber(i)) return null;
  const arr = new Array(i);
  while (i-- > 0) {
    arr[i] = thing[i];
  }
  return arr;
};

/**
 * Checking if the Uint8Array exists and if it does, it returns a function that checks if the
 * thing passed in is an instance of Uint8Array
 *
 * @param {TypedArray}
 *
 * @returns {Array}
 */
// eslint-disable-next-line func-names
const isTypedArray = (TypedArray => {
  // eslint-disable-next-line func-names
  return thing => {
    return TypedArray && thing instanceof TypedArray;
  };
})(typeof Uint8Array !== 'undefined' && getPrototypeOf(Uint8Array));

/**
 * For each entry in the object, call the function with the key and value.
 *
 * @param {Object<any, any>} obj - The object to iterate over.
 * @param {Function} fn - The function to call for each entry.
 *
 * @returns {void}
 */
const forEachEntry = (obj, fn) => {
  const generator = obj && obj[Symbol.iterator];
  const iterator = generator.call(obj);
  let result;
  while ((result = iterator.next()) && !result.done) {
    const pair = result.value;
    fn.call(obj, pair[0], pair[1]);
  }
};

/**
 * It takes a regular expression and a string, and returns an array of all the matches
 *
 * @param {string} regExp - The regular expression to match against.
 * @param {string} str - The string to search.
 *
 * @returns {Array<boolean>}
 */
const matchAll = (regExp, str) => {
  let matches;
  const arr = [];
  while ((matches = regExp.exec(str)) !== null) {
    arr.push(matches);
  }
  return arr;
};

/* Checking if the kindOfTest function returns true when passed an HTMLFormElement. */
const isHTMLForm = kindOfTest('HTMLFormElement');
const toCamelCase = str => {
  return str.toLowerCase().replace(/[-_\s]([a-z\d])(\w*)/g, function replacer(m, p1, p2) {
    return p1.toUpperCase() + p2;
  });
};

/* Creating a function that will check if an object has a property. */
const hasOwnProperty = (({
  hasOwnProperty
}) => (obj, prop) => hasOwnProperty.call(obj, prop))(Object.prototype);

/**
 * Determine if a value is a RegExp object
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a RegExp object, otherwise false
 */
const isRegExp = kindOfTest('RegExp');
const reduceDescriptors = (obj, reducer) => {
  const descriptors = Object.getOwnPropertyDescriptors(obj);
  const reducedDescriptors = {};
  forEach(descriptors, (descriptor, name) => {
    let ret;
    if ((ret = reducer(descriptor, name, obj)) !== false) {
      reducedDescriptors[name] = ret || descriptor;
    }
  });
  Object.defineProperties(obj, reducedDescriptors);
};

/**
 * Makes all methods read-only
 * @param {Object} obj
 */

const freezeMethods = obj => {
  reduceDescriptors(obj, (descriptor, name) => {
    // skip restricted props in strict mode
    if (isFunction(obj) && ['arguments', 'caller', 'callee'].indexOf(name) !== -1) {
      return false;
    }
    const value = obj[name];
    if (!isFunction(value)) return;
    descriptor.enumerable = false;
    if ('writable' in descriptor) {
      descriptor.writable = false;
      return;
    }
    if (!descriptor.set) {
      descriptor.set = () => {
        throw Error('Can not rewrite read-only method \'' + name + '\'');
      };
    }
  });
};
const toObjectSet = (arrayOrString, delimiter) => {
  const obj = {};
  const define = arr => {
    arr.forEach(value => {
      obj[value] = true;
    });
  };
  isArray(arrayOrString) ? define(arrayOrString) : define(String(arrayOrString).split(delimiter));
  return obj;
};
const noop = () => {};
const toFiniteNumber = (value, defaultValue) => {
  return value != null && Number.isFinite(value = +value) ? value : defaultValue;
};
const ALPHA = 'abcdefghijklmnopqrstuvwxyz';
const DIGIT = '0123456789';
const ALPHABET = {
  DIGIT,
  ALPHA,
  ALPHA_DIGIT: ALPHA + ALPHA.toUpperCase() + DIGIT
};
const generateString = (size = 16, alphabet = ALPHABET.ALPHA_DIGIT) => {
  let str = '';
  const {
    length
  } = alphabet;
  while (size--) {
    str += alphabet[Math.random() * length | 0];
  }
  return str;
};

/**
 * If the thing is a FormData object, return true, otherwise return false.
 *
 * @param {unknown} thing - The thing to check.
 *
 * @returns {boolean}
 */
function isSpecCompliantForm(thing) {
  return !!(thing && isFunction(thing.append) && thing[Symbol.toStringTag] === 'FormData' && thing[Symbol.iterator]);
}
const toJSONObject = obj => {
  const stack = new Array(10);
  const visit = (source, i) => {
    if (isObject(source)) {
      if (stack.indexOf(source) >= 0) {
        return;
      }
      if (!('toJSON' in source)) {
        stack[i] = source;
        const target = isArray(source) ? [] : {};
        forEach(source, (value, key) => {
          const reducedValue = visit(value, i + 1);
          !isUndefined(reducedValue) && (target[key] = reducedValue);
        });
        stack[i] = undefined;
        return target;
      }
    }
    return source;
  };
  return visit(obj, 0);
};
const isAsyncFn = kindOfTest('AsyncFunction');
const isThenable = thing => thing && (isObject(thing) || isFunction(thing)) && isFunction(thing.then) && isFunction(thing.catch);

// original code
// https://github.com/DigitalBrainJS/AxiosPromise/blob/16deab13710ec09779922131f3fa5954320f83ab/lib/utils.js#L11-L34

const _setImmediate = ((setImmediateSupported, postMessageSupported) => {
  if (setImmediateSupported) {
    return setImmediate;
  }
  return postMessageSupported ? ((token, callbacks) => {
    _global.addEventListener("message", ({
      source,
      data
    }) => {
      if (source === _global && data === token) {
        callbacks.length && callbacks.shift()();
      }
    }, false);
    return cb => {
      callbacks.push(cb);
      _global.postMessage(token, "*");
    };
  })(`axios@${Math.random()}`, []) : cb => setTimeout(cb);
})(typeof setImmediate === 'function', isFunction(_global.postMessage));
const asap = typeof queueMicrotask !== 'undefined' ? queueMicrotask.bind(_global) : typeof process !== 'undefined' && process.nextTick || _setImmediate;

// *********************

var utils$1 = {
  isArray,
  isArrayBuffer,
  isBuffer,
  isFormData,
  isArrayBufferView,
  isString,
  isNumber,
  isBoolean,
  isObject,
  isPlainObject,
  isReadableStream,
  isRequest,
  isResponse,
  isHeaders,
  isUndefined,
  isDate,
  isFile,
  isBlob,
  isRegExp,
  isFunction,
  isStream,
  isURLSearchParams,
  isTypedArray,
  isFileList,
  forEach,
  merge,
  extend,
  trim,
  stripBOM,
  inherits,
  toFlatObject,
  kindOf,
  kindOfTest,
  endsWith,
  toArray,
  forEachEntry,
  matchAll,
  isHTMLForm,
  hasOwnProperty,
  hasOwnProp: hasOwnProperty,
  // an alias to avoid ESLint no-prototype-builtins detection
  reduceDescriptors,
  freezeMethods,
  toObjectSet,
  toCamelCase,
  noop,
  toFiniteNumber,
  findKey,
  global: _global,
  isContextDefined,
  ALPHABET,
  generateString,
  isSpecCompliantForm,
  toJSONObject,
  isAsyncFn,
  isThenable,
  setImmediate: _setImmediate,
  asap
};

/**
 * Create an Error with the specified message, config, error code, request and response.
 *
 * @param {string} message The error message.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [config] The config.
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 *
 * @returns {Error} The created error.
 */
function AxiosError$1(message, code, config, request, response) {
  Error.call(this);
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, this.constructor);
  } else {
    this.stack = new Error().stack;
  }
  this.message = message;
  this.name = 'AxiosError';
  code && (this.code = code);
  config && (this.config = config);
  request && (this.request = request);
  if (response) {
    this.response = response;
    this.status = response.status ? response.status : null;
  }
}
utils$1.inherits(AxiosError$1, Error, {
  toJSON: function toJSON() {
    return {
      // Standard
      message: this.message,
      name: this.name,
      // Microsoft
      description: this.description,
      number: this.number,
      // Mozilla
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      // Axios
      config: utils$1.toJSONObject(this.config),
      code: this.code,
      status: this.status
    };
  }
});
const prototype$1 = AxiosError$1.prototype;
const descriptors = {};
['ERR_BAD_OPTION_VALUE', 'ERR_BAD_OPTION', 'ECONNABORTED', 'ETIMEDOUT', 'ERR_NETWORK', 'ERR_FR_TOO_MANY_REDIRECTS', 'ERR_DEPRECATED', 'ERR_BAD_RESPONSE', 'ERR_BAD_REQUEST', 'ERR_CANCELED', 'ERR_NOT_SUPPORT', 'ERR_INVALID_URL'
// eslint-disable-next-line func-names
].forEach(code => {
  descriptors[code] = {
    value: code
  };
});
Object.defineProperties(AxiosError$1, descriptors);
Object.defineProperty(prototype$1, 'isAxiosError', {
  value: true
});

// eslint-disable-next-line func-names
AxiosError$1.from = (error, code, config, request, response, customProps) => {
  const axiosError = Object.create(prototype$1);
  utils$1.toFlatObject(error, axiosError, function filter(obj) {
    return obj !== Error.prototype;
  }, prop => {
    return prop !== 'isAxiosError';
  });
  AxiosError$1.call(axiosError, error.message, code, config, request, response);
  axiosError.cause = error;
  axiosError.name = error.name;
  customProps && Object.assign(axiosError, customProps);
  return axiosError;
};

var delayed_stream;
var hasRequiredDelayed_stream;
function requireDelayed_stream() {
  if (hasRequiredDelayed_stream) return delayed_stream;
  hasRequiredDelayed_stream = 1;
  var Stream = stream.Stream;
  var util = require$$1;
  delayed_stream = DelayedStream;
  function DelayedStream() {
    this.source = null;
    this.dataSize = 0;
    this.maxDataSize = 1024 * 1024;
    this.pauseStream = true;
    this._maxDataSizeExceeded = false;
    this._released = false;
    this._bufferedEvents = [];
  }
  util.inherits(DelayedStream, Stream);
  DelayedStream.create = function (source, options) {
    var delayedStream = new this();
    options = options || {};
    for (var option in options) {
      delayedStream[option] = options[option];
    }
    delayedStream.source = source;
    var realEmit = source.emit;
    source.emit = function () {
      delayedStream._handleEmit(arguments);
      return realEmit.apply(source, arguments);
    };
    source.on('error', function () {});
    if (delayedStream.pauseStream) {
      source.pause();
    }
    return delayedStream;
  };
  Object.defineProperty(DelayedStream.prototype, 'readable', {
    configurable: true,
    enumerable: true,
    get: function () {
      return this.source.readable;
    }
  });
  DelayedStream.prototype.setEncoding = function () {
    return this.source.setEncoding.apply(this.source, arguments);
  };
  DelayedStream.prototype.resume = function () {
    if (!this._released) {
      this.release();
    }
    this.source.resume();
  };
  DelayedStream.prototype.pause = function () {
    this.source.pause();
  };
  DelayedStream.prototype.release = function () {
    this._released = true;
    this._bufferedEvents.forEach(function (args) {
      this.emit.apply(this, args);
    }.bind(this));
    this._bufferedEvents = [];
  };
  DelayedStream.prototype.pipe = function () {
    var r = Stream.prototype.pipe.apply(this, arguments);
    this.resume();
    return r;
  };
  DelayedStream.prototype._handleEmit = function (args) {
    if (this._released) {
      this.emit.apply(this, args);
      return;
    }
    if (args[0] === 'data') {
      this.dataSize += args[1].length;
      this._checkIfMaxDataSizeExceeded();
    }
    this._bufferedEvents.push(args);
  };
  DelayedStream.prototype._checkIfMaxDataSizeExceeded = function () {
    if (this._maxDataSizeExceeded) {
      return;
    }
    if (this.dataSize <= this.maxDataSize) {
      return;
    }
    this._maxDataSizeExceeded = true;
    var message = 'DelayedStream#maxDataSize of ' + this.maxDataSize + ' bytes exceeded.';
    this.emit('error', new Error(message));
  };
  return delayed_stream;
}

var combined_stream;
var hasRequiredCombined_stream;
function requireCombined_stream() {
  if (hasRequiredCombined_stream) return combined_stream;
  hasRequiredCombined_stream = 1;
  var util = require$$1;
  var Stream = stream.Stream;
  var DelayedStream = requireDelayed_stream();
  combined_stream = CombinedStream;
  function CombinedStream() {
    this.writable = false;
    this.readable = true;
    this.dataSize = 0;
    this.maxDataSize = 2 * 1024 * 1024;
    this.pauseStreams = true;
    this._released = false;
    this._streams = [];
    this._currentStream = null;
    this._insideLoop = false;
    this._pendingNext = false;
  }
  util.inherits(CombinedStream, Stream);
  CombinedStream.create = function (options) {
    var combinedStream = new this();
    options = options || {};
    for (var option in options) {
      combinedStream[option] = options[option];
    }
    return combinedStream;
  };
  CombinedStream.isStreamLike = function (stream) {
    return typeof stream !== 'function' && typeof stream !== 'string' && typeof stream !== 'boolean' && typeof stream !== 'number' && !Buffer.isBuffer(stream);
  };
  CombinedStream.prototype.append = function (stream) {
    var isStreamLike = CombinedStream.isStreamLike(stream);
    if (isStreamLike) {
      if (!(stream instanceof DelayedStream)) {
        var newStream = DelayedStream.create(stream, {
          maxDataSize: Infinity,
          pauseStream: this.pauseStreams
        });
        stream.on('data', this._checkDataSize.bind(this));
        stream = newStream;
      }
      this._handleErrors(stream);
      if (this.pauseStreams) {
        stream.pause();
      }
    }
    this._streams.push(stream);
    return this;
  };
  CombinedStream.prototype.pipe = function (dest, options) {
    Stream.prototype.pipe.call(this, dest, options);
    this.resume();
    return dest;
  };
  CombinedStream.prototype._getNext = function () {
    this._currentStream = null;
    if (this._insideLoop) {
      this._pendingNext = true;
      return; // defer call
    }
    this._insideLoop = true;
    try {
      do {
        this._pendingNext = false;
        this._realGetNext();
      } while (this._pendingNext);
    } finally {
      this._insideLoop = false;
    }
  };
  CombinedStream.prototype._realGetNext = function () {
    var stream = this._streams.shift();
    if (typeof stream == 'undefined') {
      this.end();
      return;
    }
    if (typeof stream !== 'function') {
      this._pipeNext(stream);
      return;
    }
    var getStream = stream;
    getStream(function (stream) {
      var isStreamLike = CombinedStream.isStreamLike(stream);
      if (isStreamLike) {
        stream.on('data', this._checkDataSize.bind(this));
        this._handleErrors(stream);
      }
      this._pipeNext(stream);
    }.bind(this));
  };
  CombinedStream.prototype._pipeNext = function (stream) {
    this._currentStream = stream;
    var isStreamLike = CombinedStream.isStreamLike(stream);
    if (isStreamLike) {
      stream.on('end', this._getNext.bind(this));
      stream.pipe(this, {
        end: false
      });
      return;
    }
    var value = stream;
    this.write(value);
    this._getNext();
  };
  CombinedStream.prototype._handleErrors = function (stream) {
    var self = this;
    stream.on('error', function (err) {
      self._emitError(err);
    });
  };
  CombinedStream.prototype.write = function (data) {
    this.emit('data', data);
  };
  CombinedStream.prototype.pause = function () {
    if (!this.pauseStreams) {
      return;
    }
    if (this.pauseStreams && this._currentStream && typeof this._currentStream.pause == 'function') this._currentStream.pause();
    this.emit('pause');
  };
  CombinedStream.prototype.resume = function () {
    if (!this._released) {
      this._released = true;
      this.writable = true;
      this._getNext();
    }
    if (this.pauseStreams && this._currentStream && typeof this._currentStream.resume == 'function') this._currentStream.resume();
    this.emit('resume');
  };
  CombinedStream.prototype.end = function () {
    this._reset();
    this.emit('end');
  };
  CombinedStream.prototype.destroy = function () {
    this._reset();
    this.emit('close');
  };
  CombinedStream.prototype._reset = function () {
    this.writable = false;
    this._streams = [];
    this._currentStream = null;
  };
  CombinedStream.prototype._checkDataSize = function () {
    this._updateDataSize();
    if (this.dataSize <= this.maxDataSize) {
      return;
    }
    var message = 'DelayedStream#maxDataSize of ' + this.maxDataSize + ' bytes exceeded.';
    this._emitError(new Error(message));
  };
  CombinedStream.prototype._updateDataSize = function () {
    this.dataSize = 0;
    var self = this;
    this._streams.forEach(function (stream) {
      if (!stream.dataSize) {
        return;
      }
      self.dataSize += stream.dataSize;
    });
    if (this._currentStream && this._currentStream.dataSize) {
      this.dataSize += this._currentStream.dataSize;
    }
  };
  CombinedStream.prototype._emitError = function (err) {
    this._reset();
    this.emit('error', err);
  };
  return combined_stream;
}

var mimeTypes = {};

var require$$0 = {
	"application/1d-interleaved-parityfec": {
	source: "iana"
},
	"application/3gpdash-qoe-report+xml": {
	source: "iana",
	charset: "UTF-8",
	compressible: true
},
	"application/3gpp-ims+xml": {
	source: "iana",
	compressible: true
},
	"application/3gpphal+json": {
	source: "iana",
	compressible: true
},
	"application/3gpphalforms+json": {
	source: "iana",
	compressible: true
},
	"application/a2l": {
	source: "iana"
},
	"application/ace+cbor": {
	source: "iana"
},
	"application/activemessage": {
	source: "iana"
},
	"application/activity+json": {
	source: "iana",
	compressible: true
},
	"application/alto-costmap+json": {
	source: "iana",
	compressible: true
},
	"application/alto-costmapfilter+json": {
	source: "iana",
	compressible: true
},
	"application/alto-directory+json": {
	source: "iana",
	compressible: true
},
	"application/alto-endpointcost+json": {
	source: "iana",
	compressible: true
},
	"application/alto-endpointcostparams+json": {
	source: "iana",
	compressible: true
},
	"application/alto-endpointprop+json": {
	source: "iana",
	compressible: true
},
	"application/alto-endpointpropparams+json": {
	source: "iana",
	compressible: true
},
	"application/alto-error+json": {
	source: "iana",
	compressible: true
},
	"application/alto-networkmap+json": {
	source: "iana",
	compressible: true
},
	"application/alto-networkmapfilter+json": {
	source: "iana",
	compressible: true
},
	"application/alto-updatestreamcontrol+json": {
	source: "iana",
	compressible: true
},
	"application/alto-updatestreamparams+json": {
	source: "iana",
	compressible: true
},
	"application/aml": {
	source: "iana"
},
	"application/andrew-inset": {
	source: "iana",
	extensions: [
		"ez"
	]
},
	"application/applefile": {
	source: "iana"
},
	"application/applixware": {
	source: "apache",
	extensions: [
		"aw"
	]
},
	"application/at+jwt": {
	source: "iana"
},
	"application/atf": {
	source: "iana"
},
	"application/atfx": {
	source: "iana"
},
	"application/atom+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"atom"
	]
},
	"application/atomcat+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"atomcat"
	]
},
	"application/atomdeleted+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"atomdeleted"
	]
},
	"application/atomicmail": {
	source: "iana"
},
	"application/atomsvc+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"atomsvc"
	]
},
	"application/atsc-dwd+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"dwd"
	]
},
	"application/atsc-dynamic-event-message": {
	source: "iana"
},
	"application/atsc-held+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"held"
	]
},
	"application/atsc-rdt+json": {
	source: "iana",
	compressible: true
},
	"application/atsc-rsat+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"rsat"
	]
},
	"application/atxml": {
	source: "iana"
},
	"application/auth-policy+xml": {
	source: "iana",
	compressible: true
},
	"application/bacnet-xdd+zip": {
	source: "iana",
	compressible: false
},
	"application/batch-smtp": {
	source: "iana"
},
	"application/bdoc": {
	compressible: false,
	extensions: [
		"bdoc"
	]
},
	"application/beep+xml": {
	source: "iana",
	charset: "UTF-8",
	compressible: true
},
	"application/calendar+json": {
	source: "iana",
	compressible: true
},
	"application/calendar+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"xcs"
	]
},
	"application/call-completion": {
	source: "iana"
},
	"application/cals-1840": {
	source: "iana"
},
	"application/captive+json": {
	source: "iana",
	compressible: true
},
	"application/cbor": {
	source: "iana"
},
	"application/cbor-seq": {
	source: "iana"
},
	"application/cccex": {
	source: "iana"
},
	"application/ccmp+xml": {
	source: "iana",
	compressible: true
},
	"application/ccxml+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"ccxml"
	]
},
	"application/cdfx+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"cdfx"
	]
},
	"application/cdmi-capability": {
	source: "iana",
	extensions: [
		"cdmia"
	]
},
	"application/cdmi-container": {
	source: "iana",
	extensions: [
		"cdmic"
	]
},
	"application/cdmi-domain": {
	source: "iana",
	extensions: [
		"cdmid"
	]
},
	"application/cdmi-object": {
	source: "iana",
	extensions: [
		"cdmio"
	]
},
	"application/cdmi-queue": {
	source: "iana",
	extensions: [
		"cdmiq"
	]
},
	"application/cdni": {
	source: "iana"
},
	"application/cea": {
	source: "iana"
},
	"application/cea-2018+xml": {
	source: "iana",
	compressible: true
},
	"application/cellml+xml": {
	source: "iana",
	compressible: true
},
	"application/cfw": {
	source: "iana"
},
	"application/city+json": {
	source: "iana",
	compressible: true
},
	"application/clr": {
	source: "iana"
},
	"application/clue+xml": {
	source: "iana",
	compressible: true
},
	"application/clue_info+xml": {
	source: "iana",
	compressible: true
},
	"application/cms": {
	source: "iana"
},
	"application/cnrp+xml": {
	source: "iana",
	compressible: true
},
	"application/coap-group+json": {
	source: "iana",
	compressible: true
},
	"application/coap-payload": {
	source: "iana"
},
	"application/commonground": {
	source: "iana"
},
	"application/conference-info+xml": {
	source: "iana",
	compressible: true
},
	"application/cose": {
	source: "iana"
},
	"application/cose-key": {
	source: "iana"
},
	"application/cose-key-set": {
	source: "iana"
},
	"application/cpl+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"cpl"
	]
},
	"application/csrattrs": {
	source: "iana"
},
	"application/csta+xml": {
	source: "iana",
	compressible: true
},
	"application/cstadata+xml": {
	source: "iana",
	compressible: true
},
	"application/csvm+json": {
	source: "iana",
	compressible: true
},
	"application/cu-seeme": {
	source: "apache",
	extensions: [
		"cu"
	]
},
	"application/cwt": {
	source: "iana"
},
	"application/cybercash": {
	source: "iana"
},
	"application/dart": {
	compressible: true
},
	"application/dash+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"mpd"
	]
},
	"application/dash-patch+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"mpp"
	]
},
	"application/dashdelta": {
	source: "iana"
},
	"application/davmount+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"davmount"
	]
},
	"application/dca-rft": {
	source: "iana"
},
	"application/dcd": {
	source: "iana"
},
	"application/dec-dx": {
	source: "iana"
},
	"application/dialog-info+xml": {
	source: "iana",
	compressible: true
},
	"application/dicom": {
	source: "iana"
},
	"application/dicom+json": {
	source: "iana",
	compressible: true
},
	"application/dicom+xml": {
	source: "iana",
	compressible: true
},
	"application/dii": {
	source: "iana"
},
	"application/dit": {
	source: "iana"
},
	"application/dns": {
	source: "iana"
},
	"application/dns+json": {
	source: "iana",
	compressible: true
},
	"application/dns-message": {
	source: "iana"
},
	"application/docbook+xml": {
	source: "apache",
	compressible: true,
	extensions: [
		"dbk"
	]
},
	"application/dots+cbor": {
	source: "iana"
},
	"application/dskpp+xml": {
	source: "iana",
	compressible: true
},
	"application/dssc+der": {
	source: "iana",
	extensions: [
		"dssc"
	]
},
	"application/dssc+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"xdssc"
	]
},
	"application/dvcs": {
	source: "iana"
},
	"application/ecmascript": {
	source: "iana",
	compressible: true,
	extensions: [
		"es",
		"ecma"
	]
},
	"application/edi-consent": {
	source: "iana"
},
	"application/edi-x12": {
	source: "iana",
	compressible: false
},
	"application/edifact": {
	source: "iana",
	compressible: false
},
	"application/efi": {
	source: "iana"
},
	"application/elm+json": {
	source: "iana",
	charset: "UTF-8",
	compressible: true
},
	"application/elm+xml": {
	source: "iana",
	compressible: true
},
	"application/emergencycalldata.cap+xml": {
	source: "iana",
	charset: "UTF-8",
	compressible: true
},
	"application/emergencycalldata.comment+xml": {
	source: "iana",
	compressible: true
},
	"application/emergencycalldata.control+xml": {
	source: "iana",
	compressible: true
},
	"application/emergencycalldata.deviceinfo+xml": {
	source: "iana",
	compressible: true
},
	"application/emergencycalldata.ecall.msd": {
	source: "iana"
},
	"application/emergencycalldata.providerinfo+xml": {
	source: "iana",
	compressible: true
},
	"application/emergencycalldata.serviceinfo+xml": {
	source: "iana",
	compressible: true
},
	"application/emergencycalldata.subscriberinfo+xml": {
	source: "iana",
	compressible: true
},
	"application/emergencycalldata.veds+xml": {
	source: "iana",
	compressible: true
},
	"application/emma+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"emma"
	]
},
	"application/emotionml+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"emotionml"
	]
},
	"application/encaprtp": {
	source: "iana"
},
	"application/epp+xml": {
	source: "iana",
	compressible: true
},
	"application/epub+zip": {
	source: "iana",
	compressible: false,
	extensions: [
		"epub"
	]
},
	"application/eshop": {
	source: "iana"
},
	"application/exi": {
	source: "iana",
	extensions: [
		"exi"
	]
},
	"application/expect-ct-report+json": {
	source: "iana",
	compressible: true
},
	"application/express": {
	source: "iana",
	extensions: [
		"exp"
	]
},
	"application/fastinfoset": {
	source: "iana"
},
	"application/fastsoap": {
	source: "iana"
},
	"application/fdt+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"fdt"
	]
},
	"application/fhir+json": {
	source: "iana",
	charset: "UTF-8",
	compressible: true
},
	"application/fhir+xml": {
	source: "iana",
	charset: "UTF-8",
	compressible: true
},
	"application/fido.trusted-apps+json": {
	compressible: true
},
	"application/fits": {
	source: "iana"
},
	"application/flexfec": {
	source: "iana"
},
	"application/font-sfnt": {
	source: "iana"
},
	"application/font-tdpfr": {
	source: "iana",
	extensions: [
		"pfr"
	]
},
	"application/font-woff": {
	source: "iana",
	compressible: false
},
	"application/framework-attributes+xml": {
	source: "iana",
	compressible: true
},
	"application/geo+json": {
	source: "iana",
	compressible: true,
	extensions: [
		"geojson"
	]
},
	"application/geo+json-seq": {
	source: "iana"
},
	"application/geopackage+sqlite3": {
	source: "iana"
},
	"application/geoxacml+xml": {
	source: "iana",
	compressible: true
},
	"application/gltf-buffer": {
	source: "iana"
},
	"application/gml+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"gml"
	]
},
	"application/gpx+xml": {
	source: "apache",
	compressible: true,
	extensions: [
		"gpx"
	]
},
	"application/gxf": {
	source: "apache",
	extensions: [
		"gxf"
	]
},
	"application/gzip": {
	source: "iana",
	compressible: false,
	extensions: [
		"gz"
	]
},
	"application/h224": {
	source: "iana"
},
	"application/held+xml": {
	source: "iana",
	compressible: true
},
	"application/hjson": {
	extensions: [
		"hjson"
	]
},
	"application/http": {
	source: "iana"
},
	"application/hyperstudio": {
	source: "iana",
	extensions: [
		"stk"
	]
},
	"application/ibe-key-request+xml": {
	source: "iana",
	compressible: true
},
	"application/ibe-pkg-reply+xml": {
	source: "iana",
	compressible: true
},
	"application/ibe-pp-data": {
	source: "iana"
},
	"application/iges": {
	source: "iana"
},
	"application/im-iscomposing+xml": {
	source: "iana",
	charset: "UTF-8",
	compressible: true
},
	"application/index": {
	source: "iana"
},
	"application/index.cmd": {
	source: "iana"
},
	"application/index.obj": {
	source: "iana"
},
	"application/index.response": {
	source: "iana"
},
	"application/index.vnd": {
	source: "iana"
},
	"application/inkml+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"ink",
		"inkml"
	]
},
	"application/iotp": {
	source: "iana"
},
	"application/ipfix": {
	source: "iana",
	extensions: [
		"ipfix"
	]
},
	"application/ipp": {
	source: "iana"
},
	"application/isup": {
	source: "iana"
},
	"application/its+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"its"
	]
},
	"application/java-archive": {
	source: "apache",
	compressible: false,
	extensions: [
		"jar",
		"war",
		"ear"
	]
},
	"application/java-serialized-object": {
	source: "apache",
	compressible: false,
	extensions: [
		"ser"
	]
},
	"application/java-vm": {
	source: "apache",
	compressible: false,
	extensions: [
		"class"
	]
},
	"application/javascript": {
	source: "iana",
	charset: "UTF-8",
	compressible: true,
	extensions: [
		"js",
		"mjs"
	]
},
	"application/jf2feed+json": {
	source: "iana",
	compressible: true
},
	"application/jose": {
	source: "iana"
},
	"application/jose+json": {
	source: "iana",
	compressible: true
},
	"application/jrd+json": {
	source: "iana",
	compressible: true
},
	"application/jscalendar+json": {
	source: "iana",
	compressible: true
},
	"application/json": {
	source: "iana",
	charset: "UTF-8",
	compressible: true,
	extensions: [
		"json",
		"map"
	]
},
	"application/json-patch+json": {
	source: "iana",
	compressible: true
},
	"application/json-seq": {
	source: "iana"
},
	"application/json5": {
	extensions: [
		"json5"
	]
},
	"application/jsonml+json": {
	source: "apache",
	compressible: true,
	extensions: [
		"jsonml"
	]
},
	"application/jwk+json": {
	source: "iana",
	compressible: true
},
	"application/jwk-set+json": {
	source: "iana",
	compressible: true
},
	"application/jwt": {
	source: "iana"
},
	"application/kpml-request+xml": {
	source: "iana",
	compressible: true
},
	"application/kpml-response+xml": {
	source: "iana",
	compressible: true
},
	"application/ld+json": {
	source: "iana",
	compressible: true,
	extensions: [
		"jsonld"
	]
},
	"application/lgr+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"lgr"
	]
},
	"application/link-format": {
	source: "iana"
},
	"application/load-control+xml": {
	source: "iana",
	compressible: true
},
	"application/lost+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"lostxml"
	]
},
	"application/lostsync+xml": {
	source: "iana",
	compressible: true
},
	"application/lpf+zip": {
	source: "iana",
	compressible: false
},
	"application/lxf": {
	source: "iana"
},
	"application/mac-binhex40": {
	source: "iana",
	extensions: [
		"hqx"
	]
},
	"application/mac-compactpro": {
	source: "apache",
	extensions: [
		"cpt"
	]
},
	"application/macwriteii": {
	source: "iana"
},
	"application/mads+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"mads"
	]
},
	"application/manifest+json": {
	source: "iana",
	charset: "UTF-8",
	compressible: true,
	extensions: [
		"webmanifest"
	]
},
	"application/marc": {
	source: "iana",
	extensions: [
		"mrc"
	]
},
	"application/marcxml+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"mrcx"
	]
},
	"application/mathematica": {
	source: "iana",
	extensions: [
		"ma",
		"nb",
		"mb"
	]
},
	"application/mathml+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"mathml"
	]
},
	"application/mathml-content+xml": {
	source: "iana",
	compressible: true
},
	"application/mathml-presentation+xml": {
	source: "iana",
	compressible: true
},
	"application/mbms-associated-procedure-description+xml": {
	source: "iana",
	compressible: true
},
	"application/mbms-deregister+xml": {
	source: "iana",
	compressible: true
},
	"application/mbms-envelope+xml": {
	source: "iana",
	compressible: true
},
	"application/mbms-msk+xml": {
	source: "iana",
	compressible: true
},
	"application/mbms-msk-response+xml": {
	source: "iana",
	compressible: true
},
	"application/mbms-protection-description+xml": {
	source: "iana",
	compressible: true
},
	"application/mbms-reception-report+xml": {
	source: "iana",
	compressible: true
},
	"application/mbms-register+xml": {
	source: "iana",
	compressible: true
},
	"application/mbms-register-response+xml": {
	source: "iana",
	compressible: true
},
	"application/mbms-schedule+xml": {
	source: "iana",
	compressible: true
},
	"application/mbms-user-service-description+xml": {
	source: "iana",
	compressible: true
},
	"application/mbox": {
	source: "iana",
	extensions: [
		"mbox"
	]
},
	"application/media-policy-dataset+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"mpf"
	]
},
	"application/media_control+xml": {
	source: "iana",
	compressible: true
},
	"application/mediaservercontrol+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"mscml"
	]
},
	"application/merge-patch+json": {
	source: "iana",
	compressible: true
},
	"application/metalink+xml": {
	source: "apache",
	compressible: true,
	extensions: [
		"metalink"
	]
},
	"application/metalink4+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"meta4"
	]
},
	"application/mets+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"mets"
	]
},
	"application/mf4": {
	source: "iana"
},
	"application/mikey": {
	source: "iana"
},
	"application/mipc": {
	source: "iana"
},
	"application/missing-blocks+cbor-seq": {
	source: "iana"
},
	"application/mmt-aei+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"maei"
	]
},
	"application/mmt-usd+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"musd"
	]
},
	"application/mods+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"mods"
	]
},
	"application/moss-keys": {
	source: "iana"
},
	"application/moss-signature": {
	source: "iana"
},
	"application/mosskey-data": {
	source: "iana"
},
	"application/mosskey-request": {
	source: "iana"
},
	"application/mp21": {
	source: "iana",
	extensions: [
		"m21",
		"mp21"
	]
},
	"application/mp4": {
	source: "iana",
	extensions: [
		"mp4s",
		"m4p"
	]
},
	"application/mpeg4-generic": {
	source: "iana"
},
	"application/mpeg4-iod": {
	source: "iana"
},
	"application/mpeg4-iod-xmt": {
	source: "iana"
},
	"application/mrb-consumer+xml": {
	source: "iana",
	compressible: true
},
	"application/mrb-publish+xml": {
	source: "iana",
	compressible: true
},
	"application/msc-ivr+xml": {
	source: "iana",
	charset: "UTF-8",
	compressible: true
},
	"application/msc-mixer+xml": {
	source: "iana",
	charset: "UTF-8",
	compressible: true
},
	"application/msword": {
	source: "iana",
	compressible: false,
	extensions: [
		"doc",
		"dot"
	]
},
	"application/mud+json": {
	source: "iana",
	compressible: true
},
	"application/multipart-core": {
	source: "iana"
},
	"application/mxf": {
	source: "iana",
	extensions: [
		"mxf"
	]
},
	"application/n-quads": {
	source: "iana",
	extensions: [
		"nq"
	]
},
	"application/n-triples": {
	source: "iana",
	extensions: [
		"nt"
	]
},
	"application/nasdata": {
	source: "iana"
},
	"application/news-checkgroups": {
	source: "iana",
	charset: "US-ASCII"
},
	"application/news-groupinfo": {
	source: "iana",
	charset: "US-ASCII"
},
	"application/news-transmission": {
	source: "iana"
},
	"application/nlsml+xml": {
	source: "iana",
	compressible: true
},
	"application/node": {
	source: "iana",
	extensions: [
		"cjs"
	]
},
	"application/nss": {
	source: "iana"
},
	"application/oauth-authz-req+jwt": {
	source: "iana"
},
	"application/oblivious-dns-message": {
	source: "iana"
},
	"application/ocsp-request": {
	source: "iana"
},
	"application/ocsp-response": {
	source: "iana"
},
	"application/octet-stream": {
	source: "iana",
	compressible: false,
	extensions: [
		"bin",
		"dms",
		"lrf",
		"mar",
		"so",
		"dist",
		"distz",
		"pkg",
		"bpk",
		"dump",
		"elc",
		"deploy",
		"exe",
		"dll",
		"deb",
		"dmg",
		"iso",
		"img",
		"msi",
		"msp",
		"msm",
		"buffer"
	]
},
	"application/oda": {
	source: "iana",
	extensions: [
		"oda"
	]
},
	"application/odm+xml": {
	source: "iana",
	compressible: true
},
	"application/odx": {
	source: "iana"
},
	"application/oebps-package+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"opf"
	]
},
	"application/ogg": {
	source: "iana",
	compressible: false,
	extensions: [
		"ogx"
	]
},
	"application/omdoc+xml": {
	source: "apache",
	compressible: true,
	extensions: [
		"omdoc"
	]
},
	"application/onenote": {
	source: "apache",
	extensions: [
		"onetoc",
		"onetoc2",
		"onetmp",
		"onepkg"
	]
},
	"application/opc-nodeset+xml": {
	source: "iana",
	compressible: true
},
	"application/oscore": {
	source: "iana"
},
	"application/oxps": {
	source: "iana",
	extensions: [
		"oxps"
	]
},
	"application/p21": {
	source: "iana"
},
	"application/p21+zip": {
	source: "iana",
	compressible: false
},
	"application/p2p-overlay+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"relo"
	]
},
	"application/parityfec": {
	source: "iana"
},
	"application/passport": {
	source: "iana"
},
	"application/patch-ops-error+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"xer"
	]
},
	"application/pdf": {
	source: "iana",
	compressible: false,
	extensions: [
		"pdf"
	]
},
	"application/pdx": {
	source: "iana"
},
	"application/pem-certificate-chain": {
	source: "iana"
},
	"application/pgp-encrypted": {
	source: "iana",
	compressible: false,
	extensions: [
		"pgp"
	]
},
	"application/pgp-keys": {
	source: "iana",
	extensions: [
		"asc"
	]
},
	"application/pgp-signature": {
	source: "iana",
	extensions: [
		"asc",
		"sig"
	]
},
	"application/pics-rules": {
	source: "apache",
	extensions: [
		"prf"
	]
},
	"application/pidf+xml": {
	source: "iana",
	charset: "UTF-8",
	compressible: true
},
	"application/pidf-diff+xml": {
	source: "iana",
	charset: "UTF-8",
	compressible: true
},
	"application/pkcs10": {
	source: "iana",
	extensions: [
		"p10"
	]
},
	"application/pkcs12": {
	source: "iana"
},
	"application/pkcs7-mime": {
	source: "iana",
	extensions: [
		"p7m",
		"p7c"
	]
},
	"application/pkcs7-signature": {
	source: "iana",
	extensions: [
		"p7s"
	]
},
	"application/pkcs8": {
	source: "iana",
	extensions: [
		"p8"
	]
},
	"application/pkcs8-encrypted": {
	source: "iana"
},
	"application/pkix-attr-cert": {
	source: "iana",
	extensions: [
		"ac"
	]
},
	"application/pkix-cert": {
	source: "iana",
	extensions: [
		"cer"
	]
},
	"application/pkix-crl": {
	source: "iana",
	extensions: [
		"crl"
	]
},
	"application/pkix-pkipath": {
	source: "iana",
	extensions: [
		"pkipath"
	]
},
	"application/pkixcmp": {
	source: "iana",
	extensions: [
		"pki"
	]
},
	"application/pls+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"pls"
	]
},
	"application/poc-settings+xml": {
	source: "iana",
	charset: "UTF-8",
	compressible: true
},
	"application/postscript": {
	source: "iana",
	compressible: true,
	extensions: [
		"ai",
		"eps",
		"ps"
	]
},
	"application/ppsp-tracker+json": {
	source: "iana",
	compressible: true
},
	"application/problem+json": {
	source: "iana",
	compressible: true
},
	"application/problem+xml": {
	source: "iana",
	compressible: true
},
	"application/provenance+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"provx"
	]
},
	"application/prs.alvestrand.titrax-sheet": {
	source: "iana"
},
	"application/prs.cww": {
	source: "iana",
	extensions: [
		"cww"
	]
},
	"application/prs.cyn": {
	source: "iana",
	charset: "7-BIT"
},
	"application/prs.hpub+zip": {
	source: "iana",
	compressible: false
},
	"application/prs.nprend": {
	source: "iana"
},
	"application/prs.plucker": {
	source: "iana"
},
	"application/prs.rdf-xml-crypt": {
	source: "iana"
},
	"application/prs.xsf+xml": {
	source: "iana",
	compressible: true
},
	"application/pskc+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"pskcxml"
	]
},
	"application/pvd+json": {
	source: "iana",
	compressible: true
},
	"application/qsig": {
	source: "iana"
},
	"application/raml+yaml": {
	compressible: true,
	extensions: [
		"raml"
	]
},
	"application/raptorfec": {
	source: "iana"
},
	"application/rdap+json": {
	source: "iana",
	compressible: true
},
	"application/rdf+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"rdf",
		"owl"
	]
},
	"application/reginfo+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"rif"
	]
},
	"application/relax-ng-compact-syntax": {
	source: "iana",
	extensions: [
		"rnc"
	]
},
	"application/remote-printing": {
	source: "iana"
},
	"application/reputon+json": {
	source: "iana",
	compressible: true
},
	"application/resource-lists+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"rl"
	]
},
	"application/resource-lists-diff+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"rld"
	]
},
	"application/rfc+xml": {
	source: "iana",
	compressible: true
},
	"application/riscos": {
	source: "iana"
},
	"application/rlmi+xml": {
	source: "iana",
	compressible: true
},
	"application/rls-services+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"rs"
	]
},
	"application/route-apd+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"rapd"
	]
},
	"application/route-s-tsid+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"sls"
	]
},
	"application/route-usd+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"rusd"
	]
},
	"application/rpki-ghostbusters": {
	source: "iana",
	extensions: [
		"gbr"
	]
},
	"application/rpki-manifest": {
	source: "iana",
	extensions: [
		"mft"
	]
},
	"application/rpki-publication": {
	source: "iana"
},
	"application/rpki-roa": {
	source: "iana",
	extensions: [
		"roa"
	]
},
	"application/rpki-updown": {
	source: "iana"
},
	"application/rsd+xml": {
	source: "apache",
	compressible: true,
	extensions: [
		"rsd"
	]
},
	"application/rss+xml": {
	source: "apache",
	compressible: true,
	extensions: [
		"rss"
	]
},
	"application/rtf": {
	source: "iana",
	compressible: true,
	extensions: [
		"rtf"
	]
},
	"application/rtploopback": {
	source: "iana"
},
	"application/rtx": {
	source: "iana"
},
	"application/samlassertion+xml": {
	source: "iana",
	compressible: true
},
	"application/samlmetadata+xml": {
	source: "iana",
	compressible: true
},
	"application/sarif+json": {
	source: "iana",
	compressible: true
},
	"application/sarif-external-properties+json": {
	source: "iana",
	compressible: true
},
	"application/sbe": {
	source: "iana"
},
	"application/sbml+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"sbml"
	]
},
	"application/scaip+xml": {
	source: "iana",
	compressible: true
},
	"application/scim+json": {
	source: "iana",
	compressible: true
},
	"application/scvp-cv-request": {
	source: "iana",
	extensions: [
		"scq"
	]
},
	"application/scvp-cv-response": {
	source: "iana",
	extensions: [
		"scs"
	]
},
	"application/scvp-vp-request": {
	source: "iana",
	extensions: [
		"spq"
	]
},
	"application/scvp-vp-response": {
	source: "iana",
	extensions: [
		"spp"
	]
},
	"application/sdp": {
	source: "iana",
	extensions: [
		"sdp"
	]
},
	"application/secevent+jwt": {
	source: "iana"
},
	"application/senml+cbor": {
	source: "iana"
},
	"application/senml+json": {
	source: "iana",
	compressible: true
},
	"application/senml+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"senmlx"
	]
},
	"application/senml-etch+cbor": {
	source: "iana"
},
	"application/senml-etch+json": {
	source: "iana",
	compressible: true
},
	"application/senml-exi": {
	source: "iana"
},
	"application/sensml+cbor": {
	source: "iana"
},
	"application/sensml+json": {
	source: "iana",
	compressible: true
},
	"application/sensml+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"sensmlx"
	]
},
	"application/sensml-exi": {
	source: "iana"
},
	"application/sep+xml": {
	source: "iana",
	compressible: true
},
	"application/sep-exi": {
	source: "iana"
},
	"application/session-info": {
	source: "iana"
},
	"application/set-payment": {
	source: "iana"
},
	"application/set-payment-initiation": {
	source: "iana",
	extensions: [
		"setpay"
	]
},
	"application/set-registration": {
	source: "iana"
},
	"application/set-registration-initiation": {
	source: "iana",
	extensions: [
		"setreg"
	]
},
	"application/sgml": {
	source: "iana"
},
	"application/sgml-open-catalog": {
	source: "iana"
},
	"application/shf+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"shf"
	]
},
	"application/sieve": {
	source: "iana",
	extensions: [
		"siv",
		"sieve"
	]
},
	"application/simple-filter+xml": {
	source: "iana",
	compressible: true
},
	"application/simple-message-summary": {
	source: "iana"
},
	"application/simplesymbolcontainer": {
	source: "iana"
},
	"application/sipc": {
	source: "iana"
},
	"application/slate": {
	source: "iana"
},
	"application/smil": {
	source: "iana"
},
	"application/smil+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"smi",
		"smil"
	]
},
	"application/smpte336m": {
	source: "iana"
},
	"application/soap+fastinfoset": {
	source: "iana"
},
	"application/soap+xml": {
	source: "iana",
	compressible: true
},
	"application/sparql-query": {
	source: "iana",
	extensions: [
		"rq"
	]
},
	"application/sparql-results+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"srx"
	]
},
	"application/spdx+json": {
	source: "iana",
	compressible: true
},
	"application/spirits-event+xml": {
	source: "iana",
	compressible: true
},
	"application/sql": {
	source: "iana"
},
	"application/srgs": {
	source: "iana",
	extensions: [
		"gram"
	]
},
	"application/srgs+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"grxml"
	]
},
	"application/sru+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"sru"
	]
},
	"application/ssdl+xml": {
	source: "apache",
	compressible: true,
	extensions: [
		"ssdl"
	]
},
	"application/ssml+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"ssml"
	]
},
	"application/stix+json": {
	source: "iana",
	compressible: true
},
	"application/swid+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"swidtag"
	]
},
	"application/tamp-apex-update": {
	source: "iana"
},
	"application/tamp-apex-update-confirm": {
	source: "iana"
},
	"application/tamp-community-update": {
	source: "iana"
},
	"application/tamp-community-update-confirm": {
	source: "iana"
},
	"application/tamp-error": {
	source: "iana"
},
	"application/tamp-sequence-adjust": {
	source: "iana"
},
	"application/tamp-sequence-adjust-confirm": {
	source: "iana"
},
	"application/tamp-status-query": {
	source: "iana"
},
	"application/tamp-status-response": {
	source: "iana"
},
	"application/tamp-update": {
	source: "iana"
},
	"application/tamp-update-confirm": {
	source: "iana"
},
	"application/tar": {
	compressible: true
},
	"application/taxii+json": {
	source: "iana",
	compressible: true
},
	"application/td+json": {
	source: "iana",
	compressible: true
},
	"application/tei+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"tei",
		"teicorpus"
	]
},
	"application/tetra_isi": {
	source: "iana"
},
	"application/thraud+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"tfi"
	]
},
	"application/timestamp-query": {
	source: "iana"
},
	"application/timestamp-reply": {
	source: "iana"
},
	"application/timestamped-data": {
	source: "iana",
	extensions: [
		"tsd"
	]
},
	"application/tlsrpt+gzip": {
	source: "iana"
},
	"application/tlsrpt+json": {
	source: "iana",
	compressible: true
},
	"application/tnauthlist": {
	source: "iana"
},
	"application/token-introspection+jwt": {
	source: "iana"
},
	"application/toml": {
	compressible: true,
	extensions: [
		"toml"
	]
},
	"application/trickle-ice-sdpfrag": {
	source: "iana"
},
	"application/trig": {
	source: "iana",
	extensions: [
		"trig"
	]
},
	"application/ttml+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"ttml"
	]
},
	"application/tve-trigger": {
	source: "iana"
},
	"application/tzif": {
	source: "iana"
},
	"application/tzif-leap": {
	source: "iana"
},
	"application/ubjson": {
	compressible: false,
	extensions: [
		"ubj"
	]
},
	"application/ulpfec": {
	source: "iana"
},
	"application/urc-grpsheet+xml": {
	source: "iana",
	compressible: true
},
	"application/urc-ressheet+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"rsheet"
	]
},
	"application/urc-targetdesc+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"td"
	]
},
	"application/urc-uisocketdesc+xml": {
	source: "iana",
	compressible: true
},
	"application/vcard+json": {
	source: "iana",
	compressible: true
},
	"application/vcard+xml": {
	source: "iana",
	compressible: true
},
	"application/vemmi": {
	source: "iana"
},
	"application/vividence.scriptfile": {
	source: "apache"
},
	"application/vnd.1000minds.decision-model+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"1km"
	]
},
	"application/vnd.3gpp-prose+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp-prose-pc3ch+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp-v2x-local-service-information": {
	source: "iana"
},
	"application/vnd.3gpp.5gnas": {
	source: "iana"
},
	"application/vnd.3gpp.access-transfer-events+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp.bsf+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp.gmop+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp.gtpc": {
	source: "iana"
},
	"application/vnd.3gpp.interworking-data": {
	source: "iana"
},
	"application/vnd.3gpp.lpp": {
	source: "iana"
},
	"application/vnd.3gpp.mc-signalling-ear": {
	source: "iana"
},
	"application/vnd.3gpp.mcdata-affiliation-command+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp.mcdata-info+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp.mcdata-payload": {
	source: "iana"
},
	"application/vnd.3gpp.mcdata-service-config+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp.mcdata-signalling": {
	source: "iana"
},
	"application/vnd.3gpp.mcdata-ue-config+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp.mcdata-user-profile+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp.mcptt-affiliation-command+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp.mcptt-floor-request+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp.mcptt-info+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp.mcptt-location-info+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp.mcptt-mbms-usage-info+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp.mcptt-service-config+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp.mcptt-signed+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp.mcptt-ue-config+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp.mcptt-ue-init-config+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp.mcptt-user-profile+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp.mcvideo-affiliation-command+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp.mcvideo-affiliation-info+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp.mcvideo-info+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp.mcvideo-location-info+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp.mcvideo-mbms-usage-info+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp.mcvideo-service-config+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp.mcvideo-transmission-request+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp.mcvideo-ue-config+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp.mcvideo-user-profile+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp.mid-call+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp.ngap": {
	source: "iana"
},
	"application/vnd.3gpp.pfcp": {
	source: "iana"
},
	"application/vnd.3gpp.pic-bw-large": {
	source: "iana",
	extensions: [
		"plb"
	]
},
	"application/vnd.3gpp.pic-bw-small": {
	source: "iana",
	extensions: [
		"psb"
	]
},
	"application/vnd.3gpp.pic-bw-var": {
	source: "iana",
	extensions: [
		"pvb"
	]
},
	"application/vnd.3gpp.s1ap": {
	source: "iana"
},
	"application/vnd.3gpp.sms": {
	source: "iana"
},
	"application/vnd.3gpp.sms+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp.srvcc-ext+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp.srvcc-info+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp.state-and-event-info+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp.ussd+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp2.bcmcsinfo+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp2.sms": {
	source: "iana"
},
	"application/vnd.3gpp2.tcap": {
	source: "iana",
	extensions: [
		"tcap"
	]
},
	"application/vnd.3lightssoftware.imagescal": {
	source: "iana"
},
	"application/vnd.3m.post-it-notes": {
	source: "iana",
	extensions: [
		"pwn"
	]
},
	"application/vnd.accpac.simply.aso": {
	source: "iana",
	extensions: [
		"aso"
	]
},
	"application/vnd.accpac.simply.imp": {
	source: "iana",
	extensions: [
		"imp"
	]
},
	"application/vnd.acucobol": {
	source: "iana",
	extensions: [
		"acu"
	]
},
	"application/vnd.acucorp": {
	source: "iana",
	extensions: [
		"atc",
		"acutc"
	]
},
	"application/vnd.adobe.air-application-installer-package+zip": {
	source: "apache",
	compressible: false,
	extensions: [
		"air"
	]
},
	"application/vnd.adobe.flash.movie": {
	source: "iana"
},
	"application/vnd.adobe.formscentral.fcdt": {
	source: "iana",
	extensions: [
		"fcdt"
	]
},
	"application/vnd.adobe.fxp": {
	source: "iana",
	extensions: [
		"fxp",
		"fxpl"
	]
},
	"application/vnd.adobe.partial-upload": {
	source: "iana"
},
	"application/vnd.adobe.xdp+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"xdp"
	]
},
	"application/vnd.adobe.xfdf": {
	source: "iana",
	extensions: [
		"xfdf"
	]
},
	"application/vnd.aether.imp": {
	source: "iana"
},
	"application/vnd.afpc.afplinedata": {
	source: "iana"
},
	"application/vnd.afpc.afplinedata-pagedef": {
	source: "iana"
},
	"application/vnd.afpc.cmoca-cmresource": {
	source: "iana"
},
	"application/vnd.afpc.foca-charset": {
	source: "iana"
},
	"application/vnd.afpc.foca-codedfont": {
	source: "iana"
},
	"application/vnd.afpc.foca-codepage": {
	source: "iana"
},
	"application/vnd.afpc.modca": {
	source: "iana"
},
	"application/vnd.afpc.modca-cmtable": {
	source: "iana"
},
	"application/vnd.afpc.modca-formdef": {
	source: "iana"
},
	"application/vnd.afpc.modca-mediummap": {
	source: "iana"
},
	"application/vnd.afpc.modca-objectcontainer": {
	source: "iana"
},
	"application/vnd.afpc.modca-overlay": {
	source: "iana"
},
	"application/vnd.afpc.modca-pagesegment": {
	source: "iana"
},
	"application/vnd.age": {
	source: "iana",
	extensions: [
		"age"
	]
},
	"application/vnd.ah-barcode": {
	source: "iana"
},
	"application/vnd.ahead.space": {
	source: "iana",
	extensions: [
		"ahead"
	]
},
	"application/vnd.airzip.filesecure.azf": {
	source: "iana",
	extensions: [
		"azf"
	]
},
	"application/vnd.airzip.filesecure.azs": {
	source: "iana",
	extensions: [
		"azs"
	]
},
	"application/vnd.amadeus+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.amazon.ebook": {
	source: "apache",
	extensions: [
		"azw"
	]
},
	"application/vnd.amazon.mobi8-ebook": {
	source: "iana"
},
	"application/vnd.americandynamics.acc": {
	source: "iana",
	extensions: [
		"acc"
	]
},
	"application/vnd.amiga.ami": {
	source: "iana",
	extensions: [
		"ami"
	]
},
	"application/vnd.amundsen.maze+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.android.ota": {
	source: "iana"
},
	"application/vnd.android.package-archive": {
	source: "apache",
	compressible: false,
	extensions: [
		"apk"
	]
},
	"application/vnd.anki": {
	source: "iana"
},
	"application/vnd.anser-web-certificate-issue-initiation": {
	source: "iana",
	extensions: [
		"cii"
	]
},
	"application/vnd.anser-web-funds-transfer-initiation": {
	source: "apache",
	extensions: [
		"fti"
	]
},
	"application/vnd.antix.game-component": {
	source: "iana",
	extensions: [
		"atx"
	]
},
	"application/vnd.apache.arrow.file": {
	source: "iana"
},
	"application/vnd.apache.arrow.stream": {
	source: "iana"
},
	"application/vnd.apache.thrift.binary": {
	source: "iana"
},
	"application/vnd.apache.thrift.compact": {
	source: "iana"
},
	"application/vnd.apache.thrift.json": {
	source: "iana"
},
	"application/vnd.api+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.aplextor.warrp+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.apothekende.reservation+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.apple.installer+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"mpkg"
	]
},
	"application/vnd.apple.keynote": {
	source: "iana",
	extensions: [
		"key"
	]
},
	"application/vnd.apple.mpegurl": {
	source: "iana",
	extensions: [
		"m3u8"
	]
},
	"application/vnd.apple.numbers": {
	source: "iana",
	extensions: [
		"numbers"
	]
},
	"application/vnd.apple.pages": {
	source: "iana",
	extensions: [
		"pages"
	]
},
	"application/vnd.apple.pkpass": {
	compressible: false,
	extensions: [
		"pkpass"
	]
},
	"application/vnd.arastra.swi": {
	source: "iana"
},
	"application/vnd.aristanetworks.swi": {
	source: "iana",
	extensions: [
		"swi"
	]
},
	"application/vnd.artisan+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.artsquare": {
	source: "iana"
},
	"application/vnd.astraea-software.iota": {
	source: "iana",
	extensions: [
		"iota"
	]
},
	"application/vnd.audiograph": {
	source: "iana",
	extensions: [
		"aep"
	]
},
	"application/vnd.autopackage": {
	source: "iana"
},
	"application/vnd.avalon+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.avistar+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.balsamiq.bmml+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"bmml"
	]
},
	"application/vnd.balsamiq.bmpr": {
	source: "iana"
},
	"application/vnd.banana-accounting": {
	source: "iana"
},
	"application/vnd.bbf.usp.error": {
	source: "iana"
},
	"application/vnd.bbf.usp.msg": {
	source: "iana"
},
	"application/vnd.bbf.usp.msg+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.bekitzur-stech+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.bint.med-content": {
	source: "iana"
},
	"application/vnd.biopax.rdf+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.blink-idb-value-wrapper": {
	source: "iana"
},
	"application/vnd.blueice.multipass": {
	source: "iana",
	extensions: [
		"mpm"
	]
},
	"application/vnd.bluetooth.ep.oob": {
	source: "iana"
},
	"application/vnd.bluetooth.le.oob": {
	source: "iana"
},
	"application/vnd.bmi": {
	source: "iana",
	extensions: [
		"bmi"
	]
},
	"application/vnd.bpf": {
	source: "iana"
},
	"application/vnd.bpf3": {
	source: "iana"
},
	"application/vnd.businessobjects": {
	source: "iana",
	extensions: [
		"rep"
	]
},
	"application/vnd.byu.uapi+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.cab-jscript": {
	source: "iana"
},
	"application/vnd.canon-cpdl": {
	source: "iana"
},
	"application/vnd.canon-lips": {
	source: "iana"
},
	"application/vnd.capasystems-pg+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.cendio.thinlinc.clientconf": {
	source: "iana"
},
	"application/vnd.century-systems.tcp_stream": {
	source: "iana"
},
	"application/vnd.chemdraw+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"cdxml"
	]
},
	"application/vnd.chess-pgn": {
	source: "iana"
},
	"application/vnd.chipnuts.karaoke-mmd": {
	source: "iana",
	extensions: [
		"mmd"
	]
},
	"application/vnd.ciedi": {
	source: "iana"
},
	"application/vnd.cinderella": {
	source: "iana",
	extensions: [
		"cdy"
	]
},
	"application/vnd.cirpack.isdn-ext": {
	source: "iana"
},
	"application/vnd.citationstyles.style+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"csl"
	]
},
	"application/vnd.claymore": {
	source: "iana",
	extensions: [
		"cla"
	]
},
	"application/vnd.cloanto.rp9": {
	source: "iana",
	extensions: [
		"rp9"
	]
},
	"application/vnd.clonk.c4group": {
	source: "iana",
	extensions: [
		"c4g",
		"c4d",
		"c4f",
		"c4p",
		"c4u"
	]
},
	"application/vnd.cluetrust.cartomobile-config": {
	source: "iana",
	extensions: [
		"c11amc"
	]
},
	"application/vnd.cluetrust.cartomobile-config-pkg": {
	source: "iana",
	extensions: [
		"c11amz"
	]
},
	"application/vnd.coffeescript": {
	source: "iana"
},
	"application/vnd.collabio.xodocuments.document": {
	source: "iana"
},
	"application/vnd.collabio.xodocuments.document-template": {
	source: "iana"
},
	"application/vnd.collabio.xodocuments.presentation": {
	source: "iana"
},
	"application/vnd.collabio.xodocuments.presentation-template": {
	source: "iana"
},
	"application/vnd.collabio.xodocuments.spreadsheet": {
	source: "iana"
},
	"application/vnd.collabio.xodocuments.spreadsheet-template": {
	source: "iana"
},
	"application/vnd.collection+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.collection.doc+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.collection.next+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.comicbook+zip": {
	source: "iana",
	compressible: false
},
	"application/vnd.comicbook-rar": {
	source: "iana"
},
	"application/vnd.commerce-battelle": {
	source: "iana"
},
	"application/vnd.commonspace": {
	source: "iana",
	extensions: [
		"csp"
	]
},
	"application/vnd.contact.cmsg": {
	source: "iana",
	extensions: [
		"cdbcmsg"
	]
},
	"application/vnd.coreos.ignition+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.cosmocaller": {
	source: "iana",
	extensions: [
		"cmc"
	]
},
	"application/vnd.crick.clicker": {
	source: "iana",
	extensions: [
		"clkx"
	]
},
	"application/vnd.crick.clicker.keyboard": {
	source: "iana",
	extensions: [
		"clkk"
	]
},
	"application/vnd.crick.clicker.palette": {
	source: "iana",
	extensions: [
		"clkp"
	]
},
	"application/vnd.crick.clicker.template": {
	source: "iana",
	extensions: [
		"clkt"
	]
},
	"application/vnd.crick.clicker.wordbank": {
	source: "iana",
	extensions: [
		"clkw"
	]
},
	"application/vnd.criticaltools.wbs+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"wbs"
	]
},
	"application/vnd.cryptii.pipe+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.crypto-shade-file": {
	source: "iana"
},
	"application/vnd.cryptomator.encrypted": {
	source: "iana"
},
	"application/vnd.cryptomator.vault": {
	source: "iana"
},
	"application/vnd.ctc-posml": {
	source: "iana",
	extensions: [
		"pml"
	]
},
	"application/vnd.ctct.ws+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.cups-pdf": {
	source: "iana"
},
	"application/vnd.cups-postscript": {
	source: "iana"
},
	"application/vnd.cups-ppd": {
	source: "iana",
	extensions: [
		"ppd"
	]
},
	"application/vnd.cups-raster": {
	source: "iana"
},
	"application/vnd.cups-raw": {
	source: "iana"
},
	"application/vnd.curl": {
	source: "iana"
},
	"application/vnd.curl.car": {
	source: "apache",
	extensions: [
		"car"
	]
},
	"application/vnd.curl.pcurl": {
	source: "apache",
	extensions: [
		"pcurl"
	]
},
	"application/vnd.cyan.dean.root+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.cybank": {
	source: "iana"
},
	"application/vnd.cyclonedx+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.cyclonedx+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.d2l.coursepackage1p0+zip": {
	source: "iana",
	compressible: false
},
	"application/vnd.d3m-dataset": {
	source: "iana"
},
	"application/vnd.d3m-problem": {
	source: "iana"
},
	"application/vnd.dart": {
	source: "iana",
	compressible: true,
	extensions: [
		"dart"
	]
},
	"application/vnd.data-vision.rdz": {
	source: "iana",
	extensions: [
		"rdz"
	]
},
	"application/vnd.datapackage+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.dataresource+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.dbf": {
	source: "iana",
	extensions: [
		"dbf"
	]
},
	"application/vnd.debian.binary-package": {
	source: "iana"
},
	"application/vnd.dece.data": {
	source: "iana",
	extensions: [
		"uvf",
		"uvvf",
		"uvd",
		"uvvd"
	]
},
	"application/vnd.dece.ttml+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"uvt",
		"uvvt"
	]
},
	"application/vnd.dece.unspecified": {
	source: "iana",
	extensions: [
		"uvx",
		"uvvx"
	]
},
	"application/vnd.dece.zip": {
	source: "iana",
	extensions: [
		"uvz",
		"uvvz"
	]
},
	"application/vnd.denovo.fcselayout-link": {
	source: "iana",
	extensions: [
		"fe_launch"
	]
},
	"application/vnd.desmume.movie": {
	source: "iana"
},
	"application/vnd.dir-bi.plate-dl-nosuffix": {
	source: "iana"
},
	"application/vnd.dm.delegation+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.dna": {
	source: "iana",
	extensions: [
		"dna"
	]
},
	"application/vnd.document+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.dolby.mlp": {
	source: "apache",
	extensions: [
		"mlp"
	]
},
	"application/vnd.dolby.mobile.1": {
	source: "iana"
},
	"application/vnd.dolby.mobile.2": {
	source: "iana"
},
	"application/vnd.doremir.scorecloud-binary-document": {
	source: "iana"
},
	"application/vnd.dpgraph": {
	source: "iana",
	extensions: [
		"dpg"
	]
},
	"application/vnd.dreamfactory": {
	source: "iana",
	extensions: [
		"dfac"
	]
},
	"application/vnd.drive+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.ds-keypoint": {
	source: "apache",
	extensions: [
		"kpxx"
	]
},
	"application/vnd.dtg.local": {
	source: "iana"
},
	"application/vnd.dtg.local.flash": {
	source: "iana"
},
	"application/vnd.dtg.local.html": {
	source: "iana"
},
	"application/vnd.dvb.ait": {
	source: "iana",
	extensions: [
		"ait"
	]
},
	"application/vnd.dvb.dvbisl+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.dvb.dvbj": {
	source: "iana"
},
	"application/vnd.dvb.esgcontainer": {
	source: "iana"
},
	"application/vnd.dvb.ipdcdftnotifaccess": {
	source: "iana"
},
	"application/vnd.dvb.ipdcesgaccess": {
	source: "iana"
},
	"application/vnd.dvb.ipdcesgaccess2": {
	source: "iana"
},
	"application/vnd.dvb.ipdcesgpdd": {
	source: "iana"
},
	"application/vnd.dvb.ipdcroaming": {
	source: "iana"
},
	"application/vnd.dvb.iptv.alfec-base": {
	source: "iana"
},
	"application/vnd.dvb.iptv.alfec-enhancement": {
	source: "iana"
},
	"application/vnd.dvb.notif-aggregate-root+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.dvb.notif-container+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.dvb.notif-generic+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.dvb.notif-ia-msglist+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.dvb.notif-ia-registration-request+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.dvb.notif-ia-registration-response+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.dvb.notif-init+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.dvb.pfr": {
	source: "iana"
},
	"application/vnd.dvb.service": {
	source: "iana",
	extensions: [
		"svc"
	]
},
	"application/vnd.dxr": {
	source: "iana"
},
	"application/vnd.dynageo": {
	source: "iana",
	extensions: [
		"geo"
	]
},
	"application/vnd.dzr": {
	source: "iana"
},
	"application/vnd.easykaraoke.cdgdownload": {
	source: "iana"
},
	"application/vnd.ecdis-update": {
	source: "iana"
},
	"application/vnd.ecip.rlp": {
	source: "iana"
},
	"application/vnd.eclipse.ditto+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.ecowin.chart": {
	source: "iana",
	extensions: [
		"mag"
	]
},
	"application/vnd.ecowin.filerequest": {
	source: "iana"
},
	"application/vnd.ecowin.fileupdate": {
	source: "iana"
},
	"application/vnd.ecowin.series": {
	source: "iana"
},
	"application/vnd.ecowin.seriesrequest": {
	source: "iana"
},
	"application/vnd.ecowin.seriesupdate": {
	source: "iana"
},
	"application/vnd.efi.img": {
	source: "iana"
},
	"application/vnd.efi.iso": {
	source: "iana"
},
	"application/vnd.emclient.accessrequest+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.enliven": {
	source: "iana",
	extensions: [
		"nml"
	]
},
	"application/vnd.enphase.envoy": {
	source: "iana"
},
	"application/vnd.eprints.data+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.epson.esf": {
	source: "iana",
	extensions: [
		"esf"
	]
},
	"application/vnd.epson.msf": {
	source: "iana",
	extensions: [
		"msf"
	]
},
	"application/vnd.epson.quickanime": {
	source: "iana",
	extensions: [
		"qam"
	]
},
	"application/vnd.epson.salt": {
	source: "iana",
	extensions: [
		"slt"
	]
},
	"application/vnd.epson.ssf": {
	source: "iana",
	extensions: [
		"ssf"
	]
},
	"application/vnd.ericsson.quickcall": {
	source: "iana"
},
	"application/vnd.espass-espass+zip": {
	source: "iana",
	compressible: false
},
	"application/vnd.eszigno3+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"es3",
		"et3"
	]
},
	"application/vnd.etsi.aoc+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.etsi.asic-e+zip": {
	source: "iana",
	compressible: false
},
	"application/vnd.etsi.asic-s+zip": {
	source: "iana",
	compressible: false
},
	"application/vnd.etsi.cug+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.etsi.iptvcommand+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.etsi.iptvdiscovery+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.etsi.iptvprofile+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.etsi.iptvsad-bc+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.etsi.iptvsad-cod+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.etsi.iptvsad-npvr+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.etsi.iptvservice+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.etsi.iptvsync+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.etsi.iptvueprofile+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.etsi.mcid+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.etsi.mheg5": {
	source: "iana"
},
	"application/vnd.etsi.overload-control-policy-dataset+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.etsi.pstn+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.etsi.sci+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.etsi.simservs+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.etsi.timestamp-token": {
	source: "iana"
},
	"application/vnd.etsi.tsl+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.etsi.tsl.der": {
	source: "iana"
},
	"application/vnd.eu.kasparian.car+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.eudora.data": {
	source: "iana"
},
	"application/vnd.evolv.ecig.profile": {
	source: "iana"
},
	"application/vnd.evolv.ecig.settings": {
	source: "iana"
},
	"application/vnd.evolv.ecig.theme": {
	source: "iana"
},
	"application/vnd.exstream-empower+zip": {
	source: "iana",
	compressible: false
},
	"application/vnd.exstream-package": {
	source: "iana"
},
	"application/vnd.ezpix-album": {
	source: "iana",
	extensions: [
		"ez2"
	]
},
	"application/vnd.ezpix-package": {
	source: "iana",
	extensions: [
		"ez3"
	]
},
	"application/vnd.f-secure.mobile": {
	source: "iana"
},
	"application/vnd.familysearch.gedcom+zip": {
	source: "iana",
	compressible: false
},
	"application/vnd.fastcopy-disk-image": {
	source: "iana"
},
	"application/vnd.fdf": {
	source: "iana",
	extensions: [
		"fdf"
	]
},
	"application/vnd.fdsn.mseed": {
	source: "iana",
	extensions: [
		"mseed"
	]
},
	"application/vnd.fdsn.seed": {
	source: "iana",
	extensions: [
		"seed",
		"dataless"
	]
},
	"application/vnd.ffsns": {
	source: "iana"
},
	"application/vnd.ficlab.flb+zip": {
	source: "iana",
	compressible: false
},
	"application/vnd.filmit.zfc": {
	source: "iana"
},
	"application/vnd.fints": {
	source: "iana"
},
	"application/vnd.firemonkeys.cloudcell": {
	source: "iana"
},
	"application/vnd.flographit": {
	source: "iana",
	extensions: [
		"gph"
	]
},
	"application/vnd.fluxtime.clip": {
	source: "iana",
	extensions: [
		"ftc"
	]
},
	"application/vnd.font-fontforge-sfd": {
	source: "iana"
},
	"application/vnd.framemaker": {
	source: "iana",
	extensions: [
		"fm",
		"frame",
		"maker",
		"book"
	]
},
	"application/vnd.frogans.fnc": {
	source: "iana",
	extensions: [
		"fnc"
	]
},
	"application/vnd.frogans.ltf": {
	source: "iana",
	extensions: [
		"ltf"
	]
},
	"application/vnd.fsc.weblaunch": {
	source: "iana",
	extensions: [
		"fsc"
	]
},
	"application/vnd.fujifilm.fb.docuworks": {
	source: "iana"
},
	"application/vnd.fujifilm.fb.docuworks.binder": {
	source: "iana"
},
	"application/vnd.fujifilm.fb.docuworks.container": {
	source: "iana"
},
	"application/vnd.fujifilm.fb.jfi+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.fujitsu.oasys": {
	source: "iana",
	extensions: [
		"oas"
	]
},
	"application/vnd.fujitsu.oasys2": {
	source: "iana",
	extensions: [
		"oa2"
	]
},
	"application/vnd.fujitsu.oasys3": {
	source: "iana",
	extensions: [
		"oa3"
	]
},
	"application/vnd.fujitsu.oasysgp": {
	source: "iana",
	extensions: [
		"fg5"
	]
},
	"application/vnd.fujitsu.oasysprs": {
	source: "iana",
	extensions: [
		"bh2"
	]
},
	"application/vnd.fujixerox.art-ex": {
	source: "iana"
},
	"application/vnd.fujixerox.art4": {
	source: "iana"
},
	"application/vnd.fujixerox.ddd": {
	source: "iana",
	extensions: [
		"ddd"
	]
},
	"application/vnd.fujixerox.docuworks": {
	source: "iana",
	extensions: [
		"xdw"
	]
},
	"application/vnd.fujixerox.docuworks.binder": {
	source: "iana",
	extensions: [
		"xbd"
	]
},
	"application/vnd.fujixerox.docuworks.container": {
	source: "iana"
},
	"application/vnd.fujixerox.hbpl": {
	source: "iana"
},
	"application/vnd.fut-misnet": {
	source: "iana"
},
	"application/vnd.futoin+cbor": {
	source: "iana"
},
	"application/vnd.futoin+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.fuzzysheet": {
	source: "iana",
	extensions: [
		"fzs"
	]
},
	"application/vnd.genomatix.tuxedo": {
	source: "iana",
	extensions: [
		"txd"
	]
},
	"application/vnd.gentics.grd+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.geo+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.geocube+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.geogebra.file": {
	source: "iana",
	extensions: [
		"ggb"
	]
},
	"application/vnd.geogebra.slides": {
	source: "iana"
},
	"application/vnd.geogebra.tool": {
	source: "iana",
	extensions: [
		"ggt"
	]
},
	"application/vnd.geometry-explorer": {
	source: "iana",
	extensions: [
		"gex",
		"gre"
	]
},
	"application/vnd.geonext": {
	source: "iana",
	extensions: [
		"gxt"
	]
},
	"application/vnd.geoplan": {
	source: "iana",
	extensions: [
		"g2w"
	]
},
	"application/vnd.geospace": {
	source: "iana",
	extensions: [
		"g3w"
	]
},
	"application/vnd.gerber": {
	source: "iana"
},
	"application/vnd.globalplatform.card-content-mgt": {
	source: "iana"
},
	"application/vnd.globalplatform.card-content-mgt-response": {
	source: "iana"
},
	"application/vnd.gmx": {
	source: "iana",
	extensions: [
		"gmx"
	]
},
	"application/vnd.google-apps.document": {
	compressible: false,
	extensions: [
		"gdoc"
	]
},
	"application/vnd.google-apps.presentation": {
	compressible: false,
	extensions: [
		"gslides"
	]
},
	"application/vnd.google-apps.spreadsheet": {
	compressible: false,
	extensions: [
		"gsheet"
	]
},
	"application/vnd.google-earth.kml+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"kml"
	]
},
	"application/vnd.google-earth.kmz": {
	source: "iana",
	compressible: false,
	extensions: [
		"kmz"
	]
},
	"application/vnd.gov.sk.e-form+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.gov.sk.e-form+zip": {
	source: "iana",
	compressible: false
},
	"application/vnd.gov.sk.xmldatacontainer+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.grafeq": {
	source: "iana",
	extensions: [
		"gqf",
		"gqs"
	]
},
	"application/vnd.gridmp": {
	source: "iana"
},
	"application/vnd.groove-account": {
	source: "iana",
	extensions: [
		"gac"
	]
},
	"application/vnd.groove-help": {
	source: "iana",
	extensions: [
		"ghf"
	]
},
	"application/vnd.groove-identity-message": {
	source: "iana",
	extensions: [
		"gim"
	]
},
	"application/vnd.groove-injector": {
	source: "iana",
	extensions: [
		"grv"
	]
},
	"application/vnd.groove-tool-message": {
	source: "iana",
	extensions: [
		"gtm"
	]
},
	"application/vnd.groove-tool-template": {
	source: "iana",
	extensions: [
		"tpl"
	]
},
	"application/vnd.groove-vcard": {
	source: "iana",
	extensions: [
		"vcg"
	]
},
	"application/vnd.hal+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.hal+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"hal"
	]
},
	"application/vnd.handheld-entertainment+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"zmm"
	]
},
	"application/vnd.hbci": {
	source: "iana",
	extensions: [
		"hbci"
	]
},
	"application/vnd.hc+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.hcl-bireports": {
	source: "iana"
},
	"application/vnd.hdt": {
	source: "iana"
},
	"application/vnd.heroku+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.hhe.lesson-player": {
	source: "iana",
	extensions: [
		"les"
	]
},
	"application/vnd.hl7cda+xml": {
	source: "iana",
	charset: "UTF-8",
	compressible: true
},
	"application/vnd.hl7v2+xml": {
	source: "iana",
	charset: "UTF-8",
	compressible: true
},
	"application/vnd.hp-hpgl": {
	source: "iana",
	extensions: [
		"hpgl"
	]
},
	"application/vnd.hp-hpid": {
	source: "iana",
	extensions: [
		"hpid"
	]
},
	"application/vnd.hp-hps": {
	source: "iana",
	extensions: [
		"hps"
	]
},
	"application/vnd.hp-jlyt": {
	source: "iana",
	extensions: [
		"jlt"
	]
},
	"application/vnd.hp-pcl": {
	source: "iana",
	extensions: [
		"pcl"
	]
},
	"application/vnd.hp-pclxl": {
	source: "iana",
	extensions: [
		"pclxl"
	]
},
	"application/vnd.httphone": {
	source: "iana"
},
	"application/vnd.hydrostatix.sof-data": {
	source: "iana",
	extensions: [
		"sfd-hdstx"
	]
},
	"application/vnd.hyper+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.hyper-item+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.hyperdrive+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.hzn-3d-crossword": {
	source: "iana"
},
	"application/vnd.ibm.afplinedata": {
	source: "iana"
},
	"application/vnd.ibm.electronic-media": {
	source: "iana"
},
	"application/vnd.ibm.minipay": {
	source: "iana",
	extensions: [
		"mpy"
	]
},
	"application/vnd.ibm.modcap": {
	source: "iana",
	extensions: [
		"afp",
		"listafp",
		"list3820"
	]
},
	"application/vnd.ibm.rights-management": {
	source: "iana",
	extensions: [
		"irm"
	]
},
	"application/vnd.ibm.secure-container": {
	source: "iana",
	extensions: [
		"sc"
	]
},
	"application/vnd.iccprofile": {
	source: "iana",
	extensions: [
		"icc",
		"icm"
	]
},
	"application/vnd.ieee.1905": {
	source: "iana"
},
	"application/vnd.igloader": {
	source: "iana",
	extensions: [
		"igl"
	]
},
	"application/vnd.imagemeter.folder+zip": {
	source: "iana",
	compressible: false
},
	"application/vnd.imagemeter.image+zip": {
	source: "iana",
	compressible: false
},
	"application/vnd.immervision-ivp": {
	source: "iana",
	extensions: [
		"ivp"
	]
},
	"application/vnd.immervision-ivu": {
	source: "iana",
	extensions: [
		"ivu"
	]
},
	"application/vnd.ims.imsccv1p1": {
	source: "iana"
},
	"application/vnd.ims.imsccv1p2": {
	source: "iana"
},
	"application/vnd.ims.imsccv1p3": {
	source: "iana"
},
	"application/vnd.ims.lis.v2.result+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.ims.lti.v2.toolconsumerprofile+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.ims.lti.v2.toolproxy+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.ims.lti.v2.toolproxy.id+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.ims.lti.v2.toolsettings+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.ims.lti.v2.toolsettings.simple+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.informedcontrol.rms+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.informix-visionary": {
	source: "iana"
},
	"application/vnd.infotech.project": {
	source: "iana"
},
	"application/vnd.infotech.project+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.innopath.wamp.notification": {
	source: "iana"
},
	"application/vnd.insors.igm": {
	source: "iana",
	extensions: [
		"igm"
	]
},
	"application/vnd.intercon.formnet": {
	source: "iana",
	extensions: [
		"xpw",
		"xpx"
	]
},
	"application/vnd.intergeo": {
	source: "iana",
	extensions: [
		"i2g"
	]
},
	"application/vnd.intertrust.digibox": {
	source: "iana"
},
	"application/vnd.intertrust.nncp": {
	source: "iana"
},
	"application/vnd.intu.qbo": {
	source: "iana",
	extensions: [
		"qbo"
	]
},
	"application/vnd.intu.qfx": {
	source: "iana",
	extensions: [
		"qfx"
	]
},
	"application/vnd.iptc.g2.catalogitem+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.iptc.g2.conceptitem+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.iptc.g2.knowledgeitem+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.iptc.g2.newsitem+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.iptc.g2.newsmessage+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.iptc.g2.packageitem+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.iptc.g2.planningitem+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.ipunplugged.rcprofile": {
	source: "iana",
	extensions: [
		"rcprofile"
	]
},
	"application/vnd.irepository.package+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"irp"
	]
},
	"application/vnd.is-xpr": {
	source: "iana",
	extensions: [
		"xpr"
	]
},
	"application/vnd.isac.fcs": {
	source: "iana",
	extensions: [
		"fcs"
	]
},
	"application/vnd.iso11783-10+zip": {
	source: "iana",
	compressible: false
},
	"application/vnd.jam": {
	source: "iana",
	extensions: [
		"jam"
	]
},
	"application/vnd.japannet-directory-service": {
	source: "iana"
},
	"application/vnd.japannet-jpnstore-wakeup": {
	source: "iana"
},
	"application/vnd.japannet-payment-wakeup": {
	source: "iana"
},
	"application/vnd.japannet-registration": {
	source: "iana"
},
	"application/vnd.japannet-registration-wakeup": {
	source: "iana"
},
	"application/vnd.japannet-setstore-wakeup": {
	source: "iana"
},
	"application/vnd.japannet-verification": {
	source: "iana"
},
	"application/vnd.japannet-verification-wakeup": {
	source: "iana"
},
	"application/vnd.jcp.javame.midlet-rms": {
	source: "iana",
	extensions: [
		"rms"
	]
},
	"application/vnd.jisp": {
	source: "iana",
	extensions: [
		"jisp"
	]
},
	"application/vnd.joost.joda-archive": {
	source: "iana",
	extensions: [
		"joda"
	]
},
	"application/vnd.jsk.isdn-ngn": {
	source: "iana"
},
	"application/vnd.kahootz": {
	source: "iana",
	extensions: [
		"ktz",
		"ktr"
	]
},
	"application/vnd.kde.karbon": {
	source: "iana",
	extensions: [
		"karbon"
	]
},
	"application/vnd.kde.kchart": {
	source: "iana",
	extensions: [
		"chrt"
	]
},
	"application/vnd.kde.kformula": {
	source: "iana",
	extensions: [
		"kfo"
	]
},
	"application/vnd.kde.kivio": {
	source: "iana",
	extensions: [
		"flw"
	]
},
	"application/vnd.kde.kontour": {
	source: "iana",
	extensions: [
		"kon"
	]
},
	"application/vnd.kde.kpresenter": {
	source: "iana",
	extensions: [
		"kpr",
		"kpt"
	]
},
	"application/vnd.kde.kspread": {
	source: "iana",
	extensions: [
		"ksp"
	]
},
	"application/vnd.kde.kword": {
	source: "iana",
	extensions: [
		"kwd",
		"kwt"
	]
},
	"application/vnd.kenameaapp": {
	source: "iana",
	extensions: [
		"htke"
	]
},
	"application/vnd.kidspiration": {
	source: "iana",
	extensions: [
		"kia"
	]
},
	"application/vnd.kinar": {
	source: "iana",
	extensions: [
		"kne",
		"knp"
	]
},
	"application/vnd.koan": {
	source: "iana",
	extensions: [
		"skp",
		"skd",
		"skt",
		"skm"
	]
},
	"application/vnd.kodak-descriptor": {
	source: "iana",
	extensions: [
		"sse"
	]
},
	"application/vnd.las": {
	source: "iana"
},
	"application/vnd.las.las+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.las.las+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"lasxml"
	]
},
	"application/vnd.laszip": {
	source: "iana"
},
	"application/vnd.leap+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.liberty-request+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.llamagraphics.life-balance.desktop": {
	source: "iana",
	extensions: [
		"lbd"
	]
},
	"application/vnd.llamagraphics.life-balance.exchange+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"lbe"
	]
},
	"application/vnd.logipipe.circuit+zip": {
	source: "iana",
	compressible: false
},
	"application/vnd.loom": {
	source: "iana"
},
	"application/vnd.lotus-1-2-3": {
	source: "iana",
	extensions: [
		"123"
	]
},
	"application/vnd.lotus-approach": {
	source: "iana",
	extensions: [
		"apr"
	]
},
	"application/vnd.lotus-freelance": {
	source: "iana",
	extensions: [
		"pre"
	]
},
	"application/vnd.lotus-notes": {
	source: "iana",
	extensions: [
		"nsf"
	]
},
	"application/vnd.lotus-organizer": {
	source: "iana",
	extensions: [
		"org"
	]
},
	"application/vnd.lotus-screencam": {
	source: "iana",
	extensions: [
		"scm"
	]
},
	"application/vnd.lotus-wordpro": {
	source: "iana",
	extensions: [
		"lwp"
	]
},
	"application/vnd.macports.portpkg": {
	source: "iana",
	extensions: [
		"portpkg"
	]
},
	"application/vnd.mapbox-vector-tile": {
	source: "iana",
	extensions: [
		"mvt"
	]
},
	"application/vnd.marlin.drm.actiontoken+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.marlin.drm.conftoken+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.marlin.drm.license+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.marlin.drm.mdcf": {
	source: "iana"
},
	"application/vnd.mason+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.maxar.archive.3tz+zip": {
	source: "iana",
	compressible: false
},
	"application/vnd.maxmind.maxmind-db": {
	source: "iana"
},
	"application/vnd.mcd": {
	source: "iana",
	extensions: [
		"mcd"
	]
},
	"application/vnd.medcalcdata": {
	source: "iana",
	extensions: [
		"mc1"
	]
},
	"application/vnd.mediastation.cdkey": {
	source: "iana",
	extensions: [
		"cdkey"
	]
},
	"application/vnd.meridian-slingshot": {
	source: "iana"
},
	"application/vnd.mfer": {
	source: "iana",
	extensions: [
		"mwf"
	]
},
	"application/vnd.mfmp": {
	source: "iana",
	extensions: [
		"mfm"
	]
},
	"application/vnd.micro+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.micrografx.flo": {
	source: "iana",
	extensions: [
		"flo"
	]
},
	"application/vnd.micrografx.igx": {
	source: "iana",
	extensions: [
		"igx"
	]
},
	"application/vnd.microsoft.portable-executable": {
	source: "iana"
},
	"application/vnd.microsoft.windows.thumbnail-cache": {
	source: "iana"
},
	"application/vnd.miele+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.mif": {
	source: "iana",
	extensions: [
		"mif"
	]
},
	"application/vnd.minisoft-hp3000-save": {
	source: "iana"
},
	"application/vnd.mitsubishi.misty-guard.trustweb": {
	source: "iana"
},
	"application/vnd.mobius.daf": {
	source: "iana",
	extensions: [
		"daf"
	]
},
	"application/vnd.mobius.dis": {
	source: "iana",
	extensions: [
		"dis"
	]
},
	"application/vnd.mobius.mbk": {
	source: "iana",
	extensions: [
		"mbk"
	]
},
	"application/vnd.mobius.mqy": {
	source: "iana",
	extensions: [
		"mqy"
	]
},
	"application/vnd.mobius.msl": {
	source: "iana",
	extensions: [
		"msl"
	]
},
	"application/vnd.mobius.plc": {
	source: "iana",
	extensions: [
		"plc"
	]
},
	"application/vnd.mobius.txf": {
	source: "iana",
	extensions: [
		"txf"
	]
},
	"application/vnd.mophun.application": {
	source: "iana",
	extensions: [
		"mpn"
	]
},
	"application/vnd.mophun.certificate": {
	source: "iana",
	extensions: [
		"mpc"
	]
},
	"application/vnd.motorola.flexsuite": {
	source: "iana"
},
	"application/vnd.motorola.flexsuite.adsi": {
	source: "iana"
},
	"application/vnd.motorola.flexsuite.fis": {
	source: "iana"
},
	"application/vnd.motorola.flexsuite.gotap": {
	source: "iana"
},
	"application/vnd.motorola.flexsuite.kmr": {
	source: "iana"
},
	"application/vnd.motorola.flexsuite.ttc": {
	source: "iana"
},
	"application/vnd.motorola.flexsuite.wem": {
	source: "iana"
},
	"application/vnd.motorola.iprm": {
	source: "iana"
},
	"application/vnd.mozilla.xul+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"xul"
	]
},
	"application/vnd.ms-3mfdocument": {
	source: "iana"
},
	"application/vnd.ms-artgalry": {
	source: "iana",
	extensions: [
		"cil"
	]
},
	"application/vnd.ms-asf": {
	source: "iana"
},
	"application/vnd.ms-cab-compressed": {
	source: "iana",
	extensions: [
		"cab"
	]
},
	"application/vnd.ms-color.iccprofile": {
	source: "apache"
},
	"application/vnd.ms-excel": {
	source: "iana",
	compressible: false,
	extensions: [
		"xls",
		"xlm",
		"xla",
		"xlc",
		"xlt",
		"xlw"
	]
},
	"application/vnd.ms-excel.addin.macroenabled.12": {
	source: "iana",
	extensions: [
		"xlam"
	]
},
	"application/vnd.ms-excel.sheet.binary.macroenabled.12": {
	source: "iana",
	extensions: [
		"xlsb"
	]
},
	"application/vnd.ms-excel.sheet.macroenabled.12": {
	source: "iana",
	extensions: [
		"xlsm"
	]
},
	"application/vnd.ms-excel.template.macroenabled.12": {
	source: "iana",
	extensions: [
		"xltm"
	]
},
	"application/vnd.ms-fontobject": {
	source: "iana",
	compressible: true,
	extensions: [
		"eot"
	]
},
	"application/vnd.ms-htmlhelp": {
	source: "iana",
	extensions: [
		"chm"
	]
},
	"application/vnd.ms-ims": {
	source: "iana",
	extensions: [
		"ims"
	]
},
	"application/vnd.ms-lrm": {
	source: "iana",
	extensions: [
		"lrm"
	]
},
	"application/vnd.ms-office.activex+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.ms-officetheme": {
	source: "iana",
	extensions: [
		"thmx"
	]
},
	"application/vnd.ms-opentype": {
	source: "apache",
	compressible: true
},
	"application/vnd.ms-outlook": {
	compressible: false,
	extensions: [
		"msg"
	]
},
	"application/vnd.ms-package.obfuscated-opentype": {
	source: "apache"
},
	"application/vnd.ms-pki.seccat": {
	source: "apache",
	extensions: [
		"cat"
	]
},
	"application/vnd.ms-pki.stl": {
	source: "apache",
	extensions: [
		"stl"
	]
},
	"application/vnd.ms-playready.initiator+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.ms-powerpoint": {
	source: "iana",
	compressible: false,
	extensions: [
		"ppt",
		"pps",
		"pot"
	]
},
	"application/vnd.ms-powerpoint.addin.macroenabled.12": {
	source: "iana",
	extensions: [
		"ppam"
	]
},
	"application/vnd.ms-powerpoint.presentation.macroenabled.12": {
	source: "iana",
	extensions: [
		"pptm"
	]
},
	"application/vnd.ms-powerpoint.slide.macroenabled.12": {
	source: "iana",
	extensions: [
		"sldm"
	]
},
	"application/vnd.ms-powerpoint.slideshow.macroenabled.12": {
	source: "iana",
	extensions: [
		"ppsm"
	]
},
	"application/vnd.ms-powerpoint.template.macroenabled.12": {
	source: "iana",
	extensions: [
		"potm"
	]
},
	"application/vnd.ms-printdevicecapabilities+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.ms-printing.printticket+xml": {
	source: "apache",
	compressible: true
},
	"application/vnd.ms-printschematicket+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.ms-project": {
	source: "iana",
	extensions: [
		"mpp",
		"mpt"
	]
},
	"application/vnd.ms-tnef": {
	source: "iana"
},
	"application/vnd.ms-windows.devicepairing": {
	source: "iana"
},
	"application/vnd.ms-windows.nwprinting.oob": {
	source: "iana"
},
	"application/vnd.ms-windows.printerpairing": {
	source: "iana"
},
	"application/vnd.ms-windows.wsd.oob": {
	source: "iana"
},
	"application/vnd.ms-wmdrm.lic-chlg-req": {
	source: "iana"
},
	"application/vnd.ms-wmdrm.lic-resp": {
	source: "iana"
},
	"application/vnd.ms-wmdrm.meter-chlg-req": {
	source: "iana"
},
	"application/vnd.ms-wmdrm.meter-resp": {
	source: "iana"
},
	"application/vnd.ms-word.document.macroenabled.12": {
	source: "iana",
	extensions: [
		"docm"
	]
},
	"application/vnd.ms-word.template.macroenabled.12": {
	source: "iana",
	extensions: [
		"dotm"
	]
},
	"application/vnd.ms-works": {
	source: "iana",
	extensions: [
		"wps",
		"wks",
		"wcm",
		"wdb"
	]
},
	"application/vnd.ms-wpl": {
	source: "iana",
	extensions: [
		"wpl"
	]
},
	"application/vnd.ms-xpsdocument": {
	source: "iana",
	compressible: false,
	extensions: [
		"xps"
	]
},
	"application/vnd.msa-disk-image": {
	source: "iana"
},
	"application/vnd.mseq": {
	source: "iana",
	extensions: [
		"mseq"
	]
},
	"application/vnd.msign": {
	source: "iana"
},
	"application/vnd.multiad.creator": {
	source: "iana"
},
	"application/vnd.multiad.creator.cif": {
	source: "iana"
},
	"application/vnd.music-niff": {
	source: "iana"
},
	"application/vnd.musician": {
	source: "iana",
	extensions: [
		"mus"
	]
},
	"application/vnd.muvee.style": {
	source: "iana",
	extensions: [
		"msty"
	]
},
	"application/vnd.mynfc": {
	source: "iana",
	extensions: [
		"taglet"
	]
},
	"application/vnd.nacamar.ybrid+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.ncd.control": {
	source: "iana"
},
	"application/vnd.ncd.reference": {
	source: "iana"
},
	"application/vnd.nearst.inv+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.nebumind.line": {
	source: "iana"
},
	"application/vnd.nervana": {
	source: "iana"
},
	"application/vnd.netfpx": {
	source: "iana"
},
	"application/vnd.neurolanguage.nlu": {
	source: "iana",
	extensions: [
		"nlu"
	]
},
	"application/vnd.nimn": {
	source: "iana"
},
	"application/vnd.nintendo.nitro.rom": {
	source: "iana"
},
	"application/vnd.nintendo.snes.rom": {
	source: "iana"
},
	"application/vnd.nitf": {
	source: "iana",
	extensions: [
		"ntf",
		"nitf"
	]
},
	"application/vnd.noblenet-directory": {
	source: "iana",
	extensions: [
		"nnd"
	]
},
	"application/vnd.noblenet-sealer": {
	source: "iana",
	extensions: [
		"nns"
	]
},
	"application/vnd.noblenet-web": {
	source: "iana",
	extensions: [
		"nnw"
	]
},
	"application/vnd.nokia.catalogs": {
	source: "iana"
},
	"application/vnd.nokia.conml+wbxml": {
	source: "iana"
},
	"application/vnd.nokia.conml+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.nokia.iptv.config+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.nokia.isds-radio-presets": {
	source: "iana"
},
	"application/vnd.nokia.landmark+wbxml": {
	source: "iana"
},
	"application/vnd.nokia.landmark+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.nokia.landmarkcollection+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.nokia.n-gage.ac+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"ac"
	]
},
	"application/vnd.nokia.n-gage.data": {
	source: "iana",
	extensions: [
		"ngdat"
	]
},
	"application/vnd.nokia.n-gage.symbian.install": {
	source: "iana",
	extensions: [
		"n-gage"
	]
},
	"application/vnd.nokia.ncd": {
	source: "iana"
},
	"application/vnd.nokia.pcd+wbxml": {
	source: "iana"
},
	"application/vnd.nokia.pcd+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.nokia.radio-preset": {
	source: "iana",
	extensions: [
		"rpst"
	]
},
	"application/vnd.nokia.radio-presets": {
	source: "iana",
	extensions: [
		"rpss"
	]
},
	"application/vnd.novadigm.edm": {
	source: "iana",
	extensions: [
		"edm"
	]
},
	"application/vnd.novadigm.edx": {
	source: "iana",
	extensions: [
		"edx"
	]
},
	"application/vnd.novadigm.ext": {
	source: "iana",
	extensions: [
		"ext"
	]
},
	"application/vnd.ntt-local.content-share": {
	source: "iana"
},
	"application/vnd.ntt-local.file-transfer": {
	source: "iana"
},
	"application/vnd.ntt-local.ogw_remote-access": {
	source: "iana"
},
	"application/vnd.ntt-local.sip-ta_remote": {
	source: "iana"
},
	"application/vnd.ntt-local.sip-ta_tcp_stream": {
	source: "iana"
},
	"application/vnd.oasis.opendocument.chart": {
	source: "iana",
	extensions: [
		"odc"
	]
},
	"application/vnd.oasis.opendocument.chart-template": {
	source: "iana",
	extensions: [
		"otc"
	]
},
	"application/vnd.oasis.opendocument.database": {
	source: "iana",
	extensions: [
		"odb"
	]
},
	"application/vnd.oasis.opendocument.formula": {
	source: "iana",
	extensions: [
		"odf"
	]
},
	"application/vnd.oasis.opendocument.formula-template": {
	source: "iana",
	extensions: [
		"odft"
	]
},
	"application/vnd.oasis.opendocument.graphics": {
	source: "iana",
	compressible: false,
	extensions: [
		"odg"
	]
},
	"application/vnd.oasis.opendocument.graphics-template": {
	source: "iana",
	extensions: [
		"otg"
	]
},
	"application/vnd.oasis.opendocument.image": {
	source: "iana",
	extensions: [
		"odi"
	]
},
	"application/vnd.oasis.opendocument.image-template": {
	source: "iana",
	extensions: [
		"oti"
	]
},
	"application/vnd.oasis.opendocument.presentation": {
	source: "iana",
	compressible: false,
	extensions: [
		"odp"
	]
},
	"application/vnd.oasis.opendocument.presentation-template": {
	source: "iana",
	extensions: [
		"otp"
	]
},
	"application/vnd.oasis.opendocument.spreadsheet": {
	source: "iana",
	compressible: false,
	extensions: [
		"ods"
	]
},
	"application/vnd.oasis.opendocument.spreadsheet-template": {
	source: "iana",
	extensions: [
		"ots"
	]
},
	"application/vnd.oasis.opendocument.text": {
	source: "iana",
	compressible: false,
	extensions: [
		"odt"
	]
},
	"application/vnd.oasis.opendocument.text-master": {
	source: "iana",
	extensions: [
		"odm"
	]
},
	"application/vnd.oasis.opendocument.text-template": {
	source: "iana",
	extensions: [
		"ott"
	]
},
	"application/vnd.oasis.opendocument.text-web": {
	source: "iana",
	extensions: [
		"oth"
	]
},
	"application/vnd.obn": {
	source: "iana"
},
	"application/vnd.ocf+cbor": {
	source: "iana"
},
	"application/vnd.oci.image.manifest.v1+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.oftn.l10n+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.oipf.contentaccessdownload+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.oipf.contentaccessstreaming+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.oipf.cspg-hexbinary": {
	source: "iana"
},
	"application/vnd.oipf.dae.svg+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.oipf.dae.xhtml+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.oipf.mippvcontrolmessage+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.oipf.pae.gem": {
	source: "iana"
},
	"application/vnd.oipf.spdiscovery+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.oipf.spdlist+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.oipf.ueprofile+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.oipf.userprofile+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.olpc-sugar": {
	source: "iana",
	extensions: [
		"xo"
	]
},
	"application/vnd.oma-scws-config": {
	source: "iana"
},
	"application/vnd.oma-scws-http-request": {
	source: "iana"
},
	"application/vnd.oma-scws-http-response": {
	source: "iana"
},
	"application/vnd.oma.bcast.associated-procedure-parameter+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.oma.bcast.drm-trigger+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.oma.bcast.imd+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.oma.bcast.ltkm": {
	source: "iana"
},
	"application/vnd.oma.bcast.notification+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.oma.bcast.provisioningtrigger": {
	source: "iana"
},
	"application/vnd.oma.bcast.sgboot": {
	source: "iana"
},
	"application/vnd.oma.bcast.sgdd+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.oma.bcast.sgdu": {
	source: "iana"
},
	"application/vnd.oma.bcast.simple-symbol-container": {
	source: "iana"
},
	"application/vnd.oma.bcast.smartcard-trigger+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.oma.bcast.sprov+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.oma.bcast.stkm": {
	source: "iana"
},
	"application/vnd.oma.cab-address-book+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.oma.cab-feature-handler+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.oma.cab-pcc+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.oma.cab-subs-invite+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.oma.cab-user-prefs+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.oma.dcd": {
	source: "iana"
},
	"application/vnd.oma.dcdc": {
	source: "iana"
},
	"application/vnd.oma.dd2+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"dd2"
	]
},
	"application/vnd.oma.drm.risd+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.oma.group-usage-list+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.oma.lwm2m+cbor": {
	source: "iana"
},
	"application/vnd.oma.lwm2m+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.oma.lwm2m+tlv": {
	source: "iana"
},
	"application/vnd.oma.pal+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.oma.poc.detailed-progress-report+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.oma.poc.final-report+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.oma.poc.groups+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.oma.poc.invocation-descriptor+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.oma.poc.optimized-progress-report+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.oma.push": {
	source: "iana"
},
	"application/vnd.oma.scidm.messages+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.oma.xcap-directory+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.omads-email+xml": {
	source: "iana",
	charset: "UTF-8",
	compressible: true
},
	"application/vnd.omads-file+xml": {
	source: "iana",
	charset: "UTF-8",
	compressible: true
},
	"application/vnd.omads-folder+xml": {
	source: "iana",
	charset: "UTF-8",
	compressible: true
},
	"application/vnd.omaloc-supl-init": {
	source: "iana"
},
	"application/vnd.onepager": {
	source: "iana"
},
	"application/vnd.onepagertamp": {
	source: "iana"
},
	"application/vnd.onepagertamx": {
	source: "iana"
},
	"application/vnd.onepagertat": {
	source: "iana"
},
	"application/vnd.onepagertatp": {
	source: "iana"
},
	"application/vnd.onepagertatx": {
	source: "iana"
},
	"application/vnd.openblox.game+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"obgx"
	]
},
	"application/vnd.openblox.game-binary": {
	source: "iana"
},
	"application/vnd.openeye.oeb": {
	source: "iana"
},
	"application/vnd.openofficeorg.extension": {
	source: "apache",
	extensions: [
		"oxt"
	]
},
	"application/vnd.openstreetmap.data+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"osm"
	]
},
	"application/vnd.opentimestamps.ots": {
	source: "iana"
},
	"application/vnd.openxmlformats-officedocument.custom-properties+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.customxmlproperties+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.drawing+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.drawingml.chart+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.drawingml.diagramcolors+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.drawingml.diagramdata+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.drawingml.diagramlayout+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.drawingml.diagramstyle+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.extended-properties+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.presentationml.commentauthors+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.presentationml.comments+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.presentationml.handoutmaster+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.presentationml.notesmaster+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.presentationml.notesslide+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.presentationml.presentation": {
	source: "iana",
	compressible: false,
	extensions: [
		"pptx"
	]
},
	"application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.presentationml.presprops+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.presentationml.slide": {
	source: "iana",
	extensions: [
		"sldx"
	]
},
	"application/vnd.openxmlformats-officedocument.presentationml.slide+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.presentationml.slidelayout+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.presentationml.slidemaster+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.presentationml.slideshow": {
	source: "iana",
	extensions: [
		"ppsx"
	]
},
	"application/vnd.openxmlformats-officedocument.presentationml.slideshow.main+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.presentationml.slideupdateinfo+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.presentationml.tablestyles+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.presentationml.tags+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.presentationml.template": {
	source: "iana",
	extensions: [
		"potx"
	]
},
	"application/vnd.openxmlformats-officedocument.presentationml.template.main+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.presentationml.viewprops+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.spreadsheetml.calcchain+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.spreadsheetml.externallink+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcachedefinition+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcacherecords+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.spreadsheetml.pivottable+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.spreadsheetml.querytable+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionheaders+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.spreadsheetml.sharedstrings+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": {
	source: "iana",
	compressible: false,
	extensions: [
		"xlsx"
	]
},
	"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.spreadsheetml.sheetmetadata+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.spreadsheetml.tablesinglecells+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.spreadsheetml.template": {
	source: "iana",
	extensions: [
		"xltx"
	]
},
	"application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.spreadsheetml.usernames+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.spreadsheetml.volatiledependencies+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.theme+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.themeoverride+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.vmldrawing": {
	source: "iana"
},
	"application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.wordprocessingml.document": {
	source: "iana",
	compressible: false,
	extensions: [
		"docx"
	]
},
	"application/vnd.openxmlformats-officedocument.wordprocessingml.document.glossary+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.wordprocessingml.fonttable+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.wordprocessingml.template": {
	source: "iana",
	extensions: [
		"dotx"
	]
},
	"application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.wordprocessingml.websettings+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-package.core-properties+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-package.relationships+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.oracle.resource+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.orange.indata": {
	source: "iana"
},
	"application/vnd.osa.netdeploy": {
	source: "iana"
},
	"application/vnd.osgeo.mapguide.package": {
	source: "iana",
	extensions: [
		"mgp"
	]
},
	"application/vnd.osgi.bundle": {
	source: "iana"
},
	"application/vnd.osgi.dp": {
	source: "iana",
	extensions: [
		"dp"
	]
},
	"application/vnd.osgi.subsystem": {
	source: "iana",
	extensions: [
		"esa"
	]
},
	"application/vnd.otps.ct-kip+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.oxli.countgraph": {
	source: "iana"
},
	"application/vnd.pagerduty+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.palm": {
	source: "iana",
	extensions: [
		"pdb",
		"pqa",
		"oprc"
	]
},
	"application/vnd.panoply": {
	source: "iana"
},
	"application/vnd.paos.xml": {
	source: "iana"
},
	"application/vnd.patentdive": {
	source: "iana"
},
	"application/vnd.patientecommsdoc": {
	source: "iana"
},
	"application/vnd.pawaafile": {
	source: "iana",
	extensions: [
		"paw"
	]
},
	"application/vnd.pcos": {
	source: "iana"
},
	"application/vnd.pg.format": {
	source: "iana",
	extensions: [
		"str"
	]
},
	"application/vnd.pg.osasli": {
	source: "iana",
	extensions: [
		"ei6"
	]
},
	"application/vnd.piaccess.application-licence": {
	source: "iana"
},
	"application/vnd.picsel": {
	source: "iana",
	extensions: [
		"efif"
	]
},
	"application/vnd.pmi.widget": {
	source: "iana",
	extensions: [
		"wg"
	]
},
	"application/vnd.poc.group-advertisement+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.pocketlearn": {
	source: "iana",
	extensions: [
		"plf"
	]
},
	"application/vnd.powerbuilder6": {
	source: "iana",
	extensions: [
		"pbd"
	]
},
	"application/vnd.powerbuilder6-s": {
	source: "iana"
},
	"application/vnd.powerbuilder7": {
	source: "iana"
},
	"application/vnd.powerbuilder7-s": {
	source: "iana"
},
	"application/vnd.powerbuilder75": {
	source: "iana"
},
	"application/vnd.powerbuilder75-s": {
	source: "iana"
},
	"application/vnd.preminet": {
	source: "iana"
},
	"application/vnd.previewsystems.box": {
	source: "iana",
	extensions: [
		"box"
	]
},
	"application/vnd.proteus.magazine": {
	source: "iana",
	extensions: [
		"mgz"
	]
},
	"application/vnd.psfs": {
	source: "iana"
},
	"application/vnd.publishare-delta-tree": {
	source: "iana",
	extensions: [
		"qps"
	]
},
	"application/vnd.pvi.ptid1": {
	source: "iana",
	extensions: [
		"ptid"
	]
},
	"application/vnd.pwg-multiplexed": {
	source: "iana"
},
	"application/vnd.pwg-xhtml-print+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.qualcomm.brew-app-res": {
	source: "iana"
},
	"application/vnd.quarantainenet": {
	source: "iana"
},
	"application/vnd.quark.quarkxpress": {
	source: "iana",
	extensions: [
		"qxd",
		"qxt",
		"qwd",
		"qwt",
		"qxl",
		"qxb"
	]
},
	"application/vnd.quobject-quoxdocument": {
	source: "iana"
},
	"application/vnd.radisys.moml+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.radisys.msml+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.radisys.msml-audit+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.radisys.msml-audit-conf+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.radisys.msml-audit-conn+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.radisys.msml-audit-dialog+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.radisys.msml-audit-stream+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.radisys.msml-conf+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.radisys.msml-dialog+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.radisys.msml-dialog-base+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.radisys.msml-dialog-fax-detect+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.radisys.msml-dialog-fax-sendrecv+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.radisys.msml-dialog-group+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.radisys.msml-dialog-speech+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.radisys.msml-dialog-transform+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.rainstor.data": {
	source: "iana"
},
	"application/vnd.rapid": {
	source: "iana"
},
	"application/vnd.rar": {
	source: "iana",
	extensions: [
		"rar"
	]
},
	"application/vnd.realvnc.bed": {
	source: "iana",
	extensions: [
		"bed"
	]
},
	"application/vnd.recordare.musicxml": {
	source: "iana",
	extensions: [
		"mxl"
	]
},
	"application/vnd.recordare.musicxml+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"musicxml"
	]
},
	"application/vnd.renlearn.rlprint": {
	source: "iana"
},
	"application/vnd.resilient.logic": {
	source: "iana"
},
	"application/vnd.restful+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.rig.cryptonote": {
	source: "iana",
	extensions: [
		"cryptonote"
	]
},
	"application/vnd.rim.cod": {
	source: "apache",
	extensions: [
		"cod"
	]
},
	"application/vnd.rn-realmedia": {
	source: "apache",
	extensions: [
		"rm"
	]
},
	"application/vnd.rn-realmedia-vbr": {
	source: "apache",
	extensions: [
		"rmvb"
	]
},
	"application/vnd.route66.link66+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"link66"
	]
},
	"application/vnd.rs-274x": {
	source: "iana"
},
	"application/vnd.ruckus.download": {
	source: "iana"
},
	"application/vnd.s3sms": {
	source: "iana"
},
	"application/vnd.sailingtracker.track": {
	source: "iana",
	extensions: [
		"st"
	]
},
	"application/vnd.sar": {
	source: "iana"
},
	"application/vnd.sbm.cid": {
	source: "iana"
},
	"application/vnd.sbm.mid2": {
	source: "iana"
},
	"application/vnd.scribus": {
	source: "iana"
},
	"application/vnd.sealed.3df": {
	source: "iana"
},
	"application/vnd.sealed.csf": {
	source: "iana"
},
	"application/vnd.sealed.doc": {
	source: "iana"
},
	"application/vnd.sealed.eml": {
	source: "iana"
},
	"application/vnd.sealed.mht": {
	source: "iana"
},
	"application/vnd.sealed.net": {
	source: "iana"
},
	"application/vnd.sealed.ppt": {
	source: "iana"
},
	"application/vnd.sealed.tiff": {
	source: "iana"
},
	"application/vnd.sealed.xls": {
	source: "iana"
},
	"application/vnd.sealedmedia.softseal.html": {
	source: "iana"
},
	"application/vnd.sealedmedia.softseal.pdf": {
	source: "iana"
},
	"application/vnd.seemail": {
	source: "iana",
	extensions: [
		"see"
	]
},
	"application/vnd.seis+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.sema": {
	source: "iana",
	extensions: [
		"sema"
	]
},
	"application/vnd.semd": {
	source: "iana",
	extensions: [
		"semd"
	]
},
	"application/vnd.semf": {
	source: "iana",
	extensions: [
		"semf"
	]
},
	"application/vnd.shade-save-file": {
	source: "iana"
},
	"application/vnd.shana.informed.formdata": {
	source: "iana",
	extensions: [
		"ifm"
	]
},
	"application/vnd.shana.informed.formtemplate": {
	source: "iana",
	extensions: [
		"itp"
	]
},
	"application/vnd.shana.informed.interchange": {
	source: "iana",
	extensions: [
		"iif"
	]
},
	"application/vnd.shana.informed.package": {
	source: "iana",
	extensions: [
		"ipk"
	]
},
	"application/vnd.shootproof+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.shopkick+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.shp": {
	source: "iana"
},
	"application/vnd.shx": {
	source: "iana"
},
	"application/vnd.sigrok.session": {
	source: "iana"
},
	"application/vnd.simtech-mindmapper": {
	source: "iana",
	extensions: [
		"twd",
		"twds"
	]
},
	"application/vnd.siren+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.smaf": {
	source: "iana",
	extensions: [
		"mmf"
	]
},
	"application/vnd.smart.notebook": {
	source: "iana"
},
	"application/vnd.smart.teacher": {
	source: "iana",
	extensions: [
		"teacher"
	]
},
	"application/vnd.snesdev-page-table": {
	source: "iana"
},
	"application/vnd.software602.filler.form+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"fo"
	]
},
	"application/vnd.software602.filler.form-xml-zip": {
	source: "iana"
},
	"application/vnd.solent.sdkm+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"sdkm",
		"sdkd"
	]
},
	"application/vnd.spotfire.dxp": {
	source: "iana",
	extensions: [
		"dxp"
	]
},
	"application/vnd.spotfire.sfs": {
	source: "iana",
	extensions: [
		"sfs"
	]
},
	"application/vnd.sqlite3": {
	source: "iana"
},
	"application/vnd.sss-cod": {
	source: "iana"
},
	"application/vnd.sss-dtf": {
	source: "iana"
},
	"application/vnd.sss-ntf": {
	source: "iana"
},
	"application/vnd.stardivision.calc": {
	source: "apache",
	extensions: [
		"sdc"
	]
},
	"application/vnd.stardivision.draw": {
	source: "apache",
	extensions: [
		"sda"
	]
},
	"application/vnd.stardivision.impress": {
	source: "apache",
	extensions: [
		"sdd"
	]
},
	"application/vnd.stardivision.math": {
	source: "apache",
	extensions: [
		"smf"
	]
},
	"application/vnd.stardivision.writer": {
	source: "apache",
	extensions: [
		"sdw",
		"vor"
	]
},
	"application/vnd.stardivision.writer-global": {
	source: "apache",
	extensions: [
		"sgl"
	]
},
	"application/vnd.stepmania.package": {
	source: "iana",
	extensions: [
		"smzip"
	]
},
	"application/vnd.stepmania.stepchart": {
	source: "iana",
	extensions: [
		"sm"
	]
},
	"application/vnd.street-stream": {
	source: "iana"
},
	"application/vnd.sun.wadl+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"wadl"
	]
},
	"application/vnd.sun.xml.calc": {
	source: "apache",
	extensions: [
		"sxc"
	]
},
	"application/vnd.sun.xml.calc.template": {
	source: "apache",
	extensions: [
		"stc"
	]
},
	"application/vnd.sun.xml.draw": {
	source: "apache",
	extensions: [
		"sxd"
	]
},
	"application/vnd.sun.xml.draw.template": {
	source: "apache",
	extensions: [
		"std"
	]
},
	"application/vnd.sun.xml.impress": {
	source: "apache",
	extensions: [
		"sxi"
	]
},
	"application/vnd.sun.xml.impress.template": {
	source: "apache",
	extensions: [
		"sti"
	]
},
	"application/vnd.sun.xml.math": {
	source: "apache",
	extensions: [
		"sxm"
	]
},
	"application/vnd.sun.xml.writer": {
	source: "apache",
	extensions: [
		"sxw"
	]
},
	"application/vnd.sun.xml.writer.global": {
	source: "apache",
	extensions: [
		"sxg"
	]
},
	"application/vnd.sun.xml.writer.template": {
	source: "apache",
	extensions: [
		"stw"
	]
},
	"application/vnd.sus-calendar": {
	source: "iana",
	extensions: [
		"sus",
		"susp"
	]
},
	"application/vnd.svd": {
	source: "iana",
	extensions: [
		"svd"
	]
},
	"application/vnd.swiftview-ics": {
	source: "iana"
},
	"application/vnd.sycle+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.syft+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.symbian.install": {
	source: "apache",
	extensions: [
		"sis",
		"sisx"
	]
},
	"application/vnd.syncml+xml": {
	source: "iana",
	charset: "UTF-8",
	compressible: true,
	extensions: [
		"xsm"
	]
},
	"application/vnd.syncml.dm+wbxml": {
	source: "iana",
	charset: "UTF-8",
	extensions: [
		"bdm"
	]
},
	"application/vnd.syncml.dm+xml": {
	source: "iana",
	charset: "UTF-8",
	compressible: true,
	extensions: [
		"xdm"
	]
},
	"application/vnd.syncml.dm.notification": {
	source: "iana"
},
	"application/vnd.syncml.dmddf+wbxml": {
	source: "iana"
},
	"application/vnd.syncml.dmddf+xml": {
	source: "iana",
	charset: "UTF-8",
	compressible: true,
	extensions: [
		"ddf"
	]
},
	"application/vnd.syncml.dmtnds+wbxml": {
	source: "iana"
},
	"application/vnd.syncml.dmtnds+xml": {
	source: "iana",
	charset: "UTF-8",
	compressible: true
},
	"application/vnd.syncml.ds.notification": {
	source: "iana"
},
	"application/vnd.tableschema+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.tao.intent-module-archive": {
	source: "iana",
	extensions: [
		"tao"
	]
},
	"application/vnd.tcpdump.pcap": {
	source: "iana",
	extensions: [
		"pcap",
		"cap",
		"dmp"
	]
},
	"application/vnd.think-cell.ppttc+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.tmd.mediaflex.api+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.tml": {
	source: "iana"
},
	"application/vnd.tmobile-livetv": {
	source: "iana",
	extensions: [
		"tmo"
	]
},
	"application/vnd.tri.onesource": {
	source: "iana"
},
	"application/vnd.trid.tpt": {
	source: "iana",
	extensions: [
		"tpt"
	]
},
	"application/vnd.triscape.mxs": {
	source: "iana",
	extensions: [
		"mxs"
	]
},
	"application/vnd.trueapp": {
	source: "iana",
	extensions: [
		"tra"
	]
},
	"application/vnd.truedoc": {
	source: "iana"
},
	"application/vnd.ubisoft.webplayer": {
	source: "iana"
},
	"application/vnd.ufdl": {
	source: "iana",
	extensions: [
		"ufd",
		"ufdl"
	]
},
	"application/vnd.uiq.theme": {
	source: "iana",
	extensions: [
		"utz"
	]
},
	"application/vnd.umajin": {
	source: "iana",
	extensions: [
		"umj"
	]
},
	"application/vnd.unity": {
	source: "iana",
	extensions: [
		"unityweb"
	]
},
	"application/vnd.uoml+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"uoml"
	]
},
	"application/vnd.uplanet.alert": {
	source: "iana"
},
	"application/vnd.uplanet.alert-wbxml": {
	source: "iana"
},
	"application/vnd.uplanet.bearer-choice": {
	source: "iana"
},
	"application/vnd.uplanet.bearer-choice-wbxml": {
	source: "iana"
},
	"application/vnd.uplanet.cacheop": {
	source: "iana"
},
	"application/vnd.uplanet.cacheop-wbxml": {
	source: "iana"
},
	"application/vnd.uplanet.channel": {
	source: "iana"
},
	"application/vnd.uplanet.channel-wbxml": {
	source: "iana"
},
	"application/vnd.uplanet.list": {
	source: "iana"
},
	"application/vnd.uplanet.list-wbxml": {
	source: "iana"
},
	"application/vnd.uplanet.listcmd": {
	source: "iana"
},
	"application/vnd.uplanet.listcmd-wbxml": {
	source: "iana"
},
	"application/vnd.uplanet.signal": {
	source: "iana"
},
	"application/vnd.uri-map": {
	source: "iana"
},
	"application/vnd.valve.source.material": {
	source: "iana"
},
	"application/vnd.vcx": {
	source: "iana",
	extensions: [
		"vcx"
	]
},
	"application/vnd.vd-study": {
	source: "iana"
},
	"application/vnd.vectorworks": {
	source: "iana"
},
	"application/vnd.vel+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.verimatrix.vcas": {
	source: "iana"
},
	"application/vnd.veritone.aion+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.veryant.thin": {
	source: "iana"
},
	"application/vnd.ves.encrypted": {
	source: "iana"
},
	"application/vnd.vidsoft.vidconference": {
	source: "iana"
},
	"application/vnd.visio": {
	source: "iana",
	extensions: [
		"vsd",
		"vst",
		"vss",
		"vsw"
	]
},
	"application/vnd.visionary": {
	source: "iana",
	extensions: [
		"vis"
	]
},
	"application/vnd.vividence.scriptfile": {
	source: "iana"
},
	"application/vnd.vsf": {
	source: "iana",
	extensions: [
		"vsf"
	]
},
	"application/vnd.wap.sic": {
	source: "iana"
},
	"application/vnd.wap.slc": {
	source: "iana"
},
	"application/vnd.wap.wbxml": {
	source: "iana",
	charset: "UTF-8",
	extensions: [
		"wbxml"
	]
},
	"application/vnd.wap.wmlc": {
	source: "iana",
	extensions: [
		"wmlc"
	]
},
	"application/vnd.wap.wmlscriptc": {
	source: "iana",
	extensions: [
		"wmlsc"
	]
},
	"application/vnd.webturbo": {
	source: "iana",
	extensions: [
		"wtb"
	]
},
	"application/vnd.wfa.dpp": {
	source: "iana"
},
	"application/vnd.wfa.p2p": {
	source: "iana"
},
	"application/vnd.wfa.wsc": {
	source: "iana"
},
	"application/vnd.windows.devicepairing": {
	source: "iana"
},
	"application/vnd.wmc": {
	source: "iana"
},
	"application/vnd.wmf.bootstrap": {
	source: "iana"
},
	"application/vnd.wolfram.mathematica": {
	source: "iana"
},
	"application/vnd.wolfram.mathematica.package": {
	source: "iana"
},
	"application/vnd.wolfram.player": {
	source: "iana",
	extensions: [
		"nbp"
	]
},
	"application/vnd.wordperfect": {
	source: "iana",
	extensions: [
		"wpd"
	]
},
	"application/vnd.wqd": {
	source: "iana",
	extensions: [
		"wqd"
	]
},
	"application/vnd.wrq-hp3000-labelled": {
	source: "iana"
},
	"application/vnd.wt.stf": {
	source: "iana",
	extensions: [
		"stf"
	]
},
	"application/vnd.wv.csp+wbxml": {
	source: "iana"
},
	"application/vnd.wv.csp+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.wv.ssp+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.xacml+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.xara": {
	source: "iana",
	extensions: [
		"xar"
	]
},
	"application/vnd.xfdl": {
	source: "iana",
	extensions: [
		"xfdl"
	]
},
	"application/vnd.xfdl.webform": {
	source: "iana"
},
	"application/vnd.xmi+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.xmpie.cpkg": {
	source: "iana"
},
	"application/vnd.xmpie.dpkg": {
	source: "iana"
},
	"application/vnd.xmpie.plan": {
	source: "iana"
},
	"application/vnd.xmpie.ppkg": {
	source: "iana"
},
	"application/vnd.xmpie.xlim": {
	source: "iana"
},
	"application/vnd.yamaha.hv-dic": {
	source: "iana",
	extensions: [
		"hvd"
	]
},
	"application/vnd.yamaha.hv-script": {
	source: "iana",
	extensions: [
		"hvs"
	]
},
	"application/vnd.yamaha.hv-voice": {
	source: "iana",
	extensions: [
		"hvp"
	]
},
	"application/vnd.yamaha.openscoreformat": {
	source: "iana",
	extensions: [
		"osf"
	]
},
	"application/vnd.yamaha.openscoreformat.osfpvg+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"osfpvg"
	]
},
	"application/vnd.yamaha.remote-setup": {
	source: "iana"
},
	"application/vnd.yamaha.smaf-audio": {
	source: "iana",
	extensions: [
		"saf"
	]
},
	"application/vnd.yamaha.smaf-phrase": {
	source: "iana",
	extensions: [
		"spf"
	]
},
	"application/vnd.yamaha.through-ngn": {
	source: "iana"
},
	"application/vnd.yamaha.tunnel-udpencap": {
	source: "iana"
},
	"application/vnd.yaoweme": {
	source: "iana"
},
	"application/vnd.yellowriver-custom-menu": {
	source: "iana",
	extensions: [
		"cmp"
	]
},
	"application/vnd.youtube.yt": {
	source: "iana"
},
	"application/vnd.zul": {
	source: "iana",
	extensions: [
		"zir",
		"zirz"
	]
},
	"application/vnd.zzazz.deck+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"zaz"
	]
},
	"application/voicexml+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"vxml"
	]
},
	"application/voucher-cms+json": {
	source: "iana",
	compressible: true
},
	"application/vq-rtcpxr": {
	source: "iana"
},
	"application/wasm": {
	source: "iana",
	compressible: true,
	extensions: [
		"wasm"
	]
},
	"application/watcherinfo+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"wif"
	]
},
	"application/webpush-options+json": {
	source: "iana",
	compressible: true
},
	"application/whoispp-query": {
	source: "iana"
},
	"application/whoispp-response": {
	source: "iana"
},
	"application/widget": {
	source: "iana",
	extensions: [
		"wgt"
	]
},
	"application/winhlp": {
	source: "apache",
	extensions: [
		"hlp"
	]
},
	"application/wita": {
	source: "iana"
},
	"application/wordperfect5.1": {
	source: "iana"
},
	"application/wsdl+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"wsdl"
	]
},
	"application/wspolicy+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"wspolicy"
	]
},
	"application/x-7z-compressed": {
	source: "apache",
	compressible: false,
	extensions: [
		"7z"
	]
},
	"application/x-abiword": {
	source: "apache",
	extensions: [
		"abw"
	]
},
	"application/x-ace-compressed": {
	source: "apache",
	extensions: [
		"ace"
	]
},
	"application/x-amf": {
	source: "apache"
},
	"application/x-apple-diskimage": {
	source: "apache",
	extensions: [
		"dmg"
	]
},
	"application/x-arj": {
	compressible: false,
	extensions: [
		"arj"
	]
},
	"application/x-authorware-bin": {
	source: "apache",
	extensions: [
		"aab",
		"x32",
		"u32",
		"vox"
	]
},
	"application/x-authorware-map": {
	source: "apache",
	extensions: [
		"aam"
	]
},
	"application/x-authorware-seg": {
	source: "apache",
	extensions: [
		"aas"
	]
},
	"application/x-bcpio": {
	source: "apache",
	extensions: [
		"bcpio"
	]
},
	"application/x-bdoc": {
	compressible: false,
	extensions: [
		"bdoc"
	]
},
	"application/x-bittorrent": {
	source: "apache",
	extensions: [
		"torrent"
	]
},
	"application/x-blorb": {
	source: "apache",
	extensions: [
		"blb",
		"blorb"
	]
},
	"application/x-bzip": {
	source: "apache",
	compressible: false,
	extensions: [
		"bz"
	]
},
	"application/x-bzip2": {
	source: "apache",
	compressible: false,
	extensions: [
		"bz2",
		"boz"
	]
},
	"application/x-cbr": {
	source: "apache",
	extensions: [
		"cbr",
		"cba",
		"cbt",
		"cbz",
		"cb7"
	]
},
	"application/x-cdlink": {
	source: "apache",
	extensions: [
		"vcd"
	]
},
	"application/x-cfs-compressed": {
	source: "apache",
	extensions: [
		"cfs"
	]
},
	"application/x-chat": {
	source: "apache",
	extensions: [
		"chat"
	]
},
	"application/x-chess-pgn": {
	source: "apache",
	extensions: [
		"pgn"
	]
},
	"application/x-chrome-extension": {
	extensions: [
		"crx"
	]
},
	"application/x-cocoa": {
	source: "nginx",
	extensions: [
		"cco"
	]
},
	"application/x-compress": {
	source: "apache"
},
	"application/x-conference": {
	source: "apache",
	extensions: [
		"nsc"
	]
},
	"application/x-cpio": {
	source: "apache",
	extensions: [
		"cpio"
	]
},
	"application/x-csh": {
	source: "apache",
	extensions: [
		"csh"
	]
},
	"application/x-deb": {
	compressible: false
},
	"application/x-debian-package": {
	source: "apache",
	extensions: [
		"deb",
		"udeb"
	]
},
	"application/x-dgc-compressed": {
	source: "apache",
	extensions: [
		"dgc"
	]
},
	"application/x-director": {
	source: "apache",
	extensions: [
		"dir",
		"dcr",
		"dxr",
		"cst",
		"cct",
		"cxt",
		"w3d",
		"fgd",
		"swa"
	]
},
	"application/x-doom": {
	source: "apache",
	extensions: [
		"wad"
	]
},
	"application/x-dtbncx+xml": {
	source: "apache",
	compressible: true,
	extensions: [
		"ncx"
	]
},
	"application/x-dtbook+xml": {
	source: "apache",
	compressible: true,
	extensions: [
		"dtb"
	]
},
	"application/x-dtbresource+xml": {
	source: "apache",
	compressible: true,
	extensions: [
		"res"
	]
},
	"application/x-dvi": {
	source: "apache",
	compressible: false,
	extensions: [
		"dvi"
	]
},
	"application/x-envoy": {
	source: "apache",
	extensions: [
		"evy"
	]
},
	"application/x-eva": {
	source: "apache",
	extensions: [
		"eva"
	]
},
	"application/x-font-bdf": {
	source: "apache",
	extensions: [
		"bdf"
	]
},
	"application/x-font-dos": {
	source: "apache"
},
	"application/x-font-framemaker": {
	source: "apache"
},
	"application/x-font-ghostscript": {
	source: "apache",
	extensions: [
		"gsf"
	]
},
	"application/x-font-libgrx": {
	source: "apache"
},
	"application/x-font-linux-psf": {
	source: "apache",
	extensions: [
		"psf"
	]
},
	"application/x-font-pcf": {
	source: "apache",
	extensions: [
		"pcf"
	]
},
	"application/x-font-snf": {
	source: "apache",
	extensions: [
		"snf"
	]
},
	"application/x-font-speedo": {
	source: "apache"
},
	"application/x-font-sunos-news": {
	source: "apache"
},
	"application/x-font-type1": {
	source: "apache",
	extensions: [
		"pfa",
		"pfb",
		"pfm",
		"afm"
	]
},
	"application/x-font-vfont": {
	source: "apache"
},
	"application/x-freearc": {
	source: "apache",
	extensions: [
		"arc"
	]
},
	"application/x-futuresplash": {
	source: "apache",
	extensions: [
		"spl"
	]
},
	"application/x-gca-compressed": {
	source: "apache",
	extensions: [
		"gca"
	]
},
	"application/x-glulx": {
	source: "apache",
	extensions: [
		"ulx"
	]
},
	"application/x-gnumeric": {
	source: "apache",
	extensions: [
		"gnumeric"
	]
},
	"application/x-gramps-xml": {
	source: "apache",
	extensions: [
		"gramps"
	]
},
	"application/x-gtar": {
	source: "apache",
	extensions: [
		"gtar"
	]
},
	"application/x-gzip": {
	source: "apache"
},
	"application/x-hdf": {
	source: "apache",
	extensions: [
		"hdf"
	]
},
	"application/x-httpd-php": {
	compressible: true,
	extensions: [
		"php"
	]
},
	"application/x-install-instructions": {
	source: "apache",
	extensions: [
		"install"
	]
},
	"application/x-iso9660-image": {
	source: "apache",
	extensions: [
		"iso"
	]
},
	"application/x-iwork-keynote-sffkey": {
	extensions: [
		"key"
	]
},
	"application/x-iwork-numbers-sffnumbers": {
	extensions: [
		"numbers"
	]
},
	"application/x-iwork-pages-sffpages": {
	extensions: [
		"pages"
	]
},
	"application/x-java-archive-diff": {
	source: "nginx",
	extensions: [
		"jardiff"
	]
},
	"application/x-java-jnlp-file": {
	source: "apache",
	compressible: false,
	extensions: [
		"jnlp"
	]
},
	"application/x-javascript": {
	compressible: true
},
	"application/x-keepass2": {
	extensions: [
		"kdbx"
	]
},
	"application/x-latex": {
	source: "apache",
	compressible: false,
	extensions: [
		"latex"
	]
},
	"application/x-lua-bytecode": {
	extensions: [
		"luac"
	]
},
	"application/x-lzh-compressed": {
	source: "apache",
	extensions: [
		"lzh",
		"lha"
	]
},
	"application/x-makeself": {
	source: "nginx",
	extensions: [
		"run"
	]
},
	"application/x-mie": {
	source: "apache",
	extensions: [
		"mie"
	]
},
	"application/x-mobipocket-ebook": {
	source: "apache",
	extensions: [
		"prc",
		"mobi"
	]
},
	"application/x-mpegurl": {
	compressible: false
},
	"application/x-ms-application": {
	source: "apache",
	extensions: [
		"application"
	]
},
	"application/x-ms-shortcut": {
	source: "apache",
	extensions: [
		"lnk"
	]
},
	"application/x-ms-wmd": {
	source: "apache",
	extensions: [
		"wmd"
	]
},
	"application/x-ms-wmz": {
	source: "apache",
	extensions: [
		"wmz"
	]
},
	"application/x-ms-xbap": {
	source: "apache",
	extensions: [
		"xbap"
	]
},
	"application/x-msaccess": {
	source: "apache",
	extensions: [
		"mdb"
	]
},
	"application/x-msbinder": {
	source: "apache",
	extensions: [
		"obd"
	]
},
	"application/x-mscardfile": {
	source: "apache",
	extensions: [
		"crd"
	]
},
	"application/x-msclip": {
	source: "apache",
	extensions: [
		"clp"
	]
},
	"application/x-msdos-program": {
	extensions: [
		"exe"
	]
},
	"application/x-msdownload": {
	source: "apache",
	extensions: [
		"exe",
		"dll",
		"com",
		"bat",
		"msi"
	]
},
	"application/x-msmediaview": {
	source: "apache",
	extensions: [
		"mvb",
		"m13",
		"m14"
	]
},
	"application/x-msmetafile": {
	source: "apache",
	extensions: [
		"wmf",
		"wmz",
		"emf",
		"emz"
	]
},
	"application/x-msmoney": {
	source: "apache",
	extensions: [
		"mny"
	]
},
	"application/x-mspublisher": {
	source: "apache",
	extensions: [
		"pub"
	]
},
	"application/x-msschedule": {
	source: "apache",
	extensions: [
		"scd"
	]
},
	"application/x-msterminal": {
	source: "apache",
	extensions: [
		"trm"
	]
},
	"application/x-mswrite": {
	source: "apache",
	extensions: [
		"wri"
	]
},
	"application/x-netcdf": {
	source: "apache",
	extensions: [
		"nc",
		"cdf"
	]
},
	"application/x-ns-proxy-autoconfig": {
	compressible: true,
	extensions: [
		"pac"
	]
},
	"application/x-nzb": {
	source: "apache",
	extensions: [
		"nzb"
	]
},
	"application/x-perl": {
	source: "nginx",
	extensions: [
		"pl",
		"pm"
	]
},
	"application/x-pilot": {
	source: "nginx",
	extensions: [
		"prc",
		"pdb"
	]
},
	"application/x-pkcs12": {
	source: "apache",
	compressible: false,
	extensions: [
		"p12",
		"pfx"
	]
},
	"application/x-pkcs7-certificates": {
	source: "apache",
	extensions: [
		"p7b",
		"spc"
	]
},
	"application/x-pkcs7-certreqresp": {
	source: "apache",
	extensions: [
		"p7r"
	]
},
	"application/x-pki-message": {
	source: "iana"
},
	"application/x-rar-compressed": {
	source: "apache",
	compressible: false,
	extensions: [
		"rar"
	]
},
	"application/x-redhat-package-manager": {
	source: "nginx",
	extensions: [
		"rpm"
	]
},
	"application/x-research-info-systems": {
	source: "apache",
	extensions: [
		"ris"
	]
},
	"application/x-sea": {
	source: "nginx",
	extensions: [
		"sea"
	]
},
	"application/x-sh": {
	source: "apache",
	compressible: true,
	extensions: [
		"sh"
	]
},
	"application/x-shar": {
	source: "apache",
	extensions: [
		"shar"
	]
},
	"application/x-shockwave-flash": {
	source: "apache",
	compressible: false,
	extensions: [
		"swf"
	]
},
	"application/x-silverlight-app": {
	source: "apache",
	extensions: [
		"xap"
	]
},
	"application/x-sql": {
	source: "apache",
	extensions: [
		"sql"
	]
},
	"application/x-stuffit": {
	source: "apache",
	compressible: false,
	extensions: [
		"sit"
	]
},
	"application/x-stuffitx": {
	source: "apache",
	extensions: [
		"sitx"
	]
},
	"application/x-subrip": {
	source: "apache",
	extensions: [
		"srt"
	]
},
	"application/x-sv4cpio": {
	source: "apache",
	extensions: [
		"sv4cpio"
	]
},
	"application/x-sv4crc": {
	source: "apache",
	extensions: [
		"sv4crc"
	]
},
	"application/x-t3vm-image": {
	source: "apache",
	extensions: [
		"t3"
	]
},
	"application/x-tads": {
	source: "apache",
	extensions: [
		"gam"
	]
},
	"application/x-tar": {
	source: "apache",
	compressible: true,
	extensions: [
		"tar"
	]
},
	"application/x-tcl": {
	source: "apache",
	extensions: [
		"tcl",
		"tk"
	]
},
	"application/x-tex": {
	source: "apache",
	extensions: [
		"tex"
	]
},
	"application/x-tex-tfm": {
	source: "apache",
	extensions: [
		"tfm"
	]
},
	"application/x-texinfo": {
	source: "apache",
	extensions: [
		"texinfo",
		"texi"
	]
},
	"application/x-tgif": {
	source: "apache",
	extensions: [
		"obj"
	]
},
	"application/x-ustar": {
	source: "apache",
	extensions: [
		"ustar"
	]
},
	"application/x-virtualbox-hdd": {
	compressible: true,
	extensions: [
		"hdd"
	]
},
	"application/x-virtualbox-ova": {
	compressible: true,
	extensions: [
		"ova"
	]
},
	"application/x-virtualbox-ovf": {
	compressible: true,
	extensions: [
		"ovf"
	]
},
	"application/x-virtualbox-vbox": {
	compressible: true,
	extensions: [
		"vbox"
	]
},
	"application/x-virtualbox-vbox-extpack": {
	compressible: false,
	extensions: [
		"vbox-extpack"
	]
},
	"application/x-virtualbox-vdi": {
	compressible: true,
	extensions: [
		"vdi"
	]
},
	"application/x-virtualbox-vhd": {
	compressible: true,
	extensions: [
		"vhd"
	]
},
	"application/x-virtualbox-vmdk": {
	compressible: true,
	extensions: [
		"vmdk"
	]
},
	"application/x-wais-source": {
	source: "apache",
	extensions: [
		"src"
	]
},
	"application/x-web-app-manifest+json": {
	compressible: true,
	extensions: [
		"webapp"
	]
},
	"application/x-www-form-urlencoded": {
	source: "iana",
	compressible: true
},
	"application/x-x509-ca-cert": {
	source: "iana",
	extensions: [
		"der",
		"crt",
		"pem"
	]
},
	"application/x-x509-ca-ra-cert": {
	source: "iana"
},
	"application/x-x509-next-ca-cert": {
	source: "iana"
},
	"application/x-xfig": {
	source: "apache",
	extensions: [
		"fig"
	]
},
	"application/x-xliff+xml": {
	source: "apache",
	compressible: true,
	extensions: [
		"xlf"
	]
},
	"application/x-xpinstall": {
	source: "apache",
	compressible: false,
	extensions: [
		"xpi"
	]
},
	"application/x-xz": {
	source: "apache",
	extensions: [
		"xz"
	]
},
	"application/x-zmachine": {
	source: "apache",
	extensions: [
		"z1",
		"z2",
		"z3",
		"z4",
		"z5",
		"z6",
		"z7",
		"z8"
	]
},
	"application/x400-bp": {
	source: "iana"
},
	"application/xacml+xml": {
	source: "iana",
	compressible: true
},
	"application/xaml+xml": {
	source: "apache",
	compressible: true,
	extensions: [
		"xaml"
	]
},
	"application/xcap-att+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"xav"
	]
},
	"application/xcap-caps+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"xca"
	]
},
	"application/xcap-diff+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"xdf"
	]
},
	"application/xcap-el+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"xel"
	]
},
	"application/xcap-error+xml": {
	source: "iana",
	compressible: true
},
	"application/xcap-ns+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"xns"
	]
},
	"application/xcon-conference-info+xml": {
	source: "iana",
	compressible: true
},
	"application/xcon-conference-info-diff+xml": {
	source: "iana",
	compressible: true
},
	"application/xenc+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"xenc"
	]
},
	"application/xhtml+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"xhtml",
		"xht"
	]
},
	"application/xhtml-voice+xml": {
	source: "apache",
	compressible: true
},
	"application/xliff+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"xlf"
	]
},
	"application/xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"xml",
		"xsl",
		"xsd",
		"rng"
	]
},
	"application/xml-dtd": {
	source: "iana",
	compressible: true,
	extensions: [
		"dtd"
	]
},
	"application/xml-external-parsed-entity": {
	source: "iana"
},
	"application/xml-patch+xml": {
	source: "iana",
	compressible: true
},
	"application/xmpp+xml": {
	source: "iana",
	compressible: true
},
	"application/xop+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"xop"
	]
},
	"application/xproc+xml": {
	source: "apache",
	compressible: true,
	extensions: [
		"xpl"
	]
},
	"application/xslt+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"xsl",
		"xslt"
	]
},
	"application/xspf+xml": {
	source: "apache",
	compressible: true,
	extensions: [
		"xspf"
	]
},
	"application/xv+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"mxml",
		"xhvml",
		"xvml",
		"xvm"
	]
},
	"application/yang": {
	source: "iana",
	extensions: [
		"yang"
	]
},
	"application/yang-data+json": {
	source: "iana",
	compressible: true
},
	"application/yang-data+xml": {
	source: "iana",
	compressible: true
},
	"application/yang-patch+json": {
	source: "iana",
	compressible: true
},
	"application/yang-patch+xml": {
	source: "iana",
	compressible: true
},
	"application/yin+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"yin"
	]
},
	"application/zip": {
	source: "iana",
	compressible: false,
	extensions: [
		"zip"
	]
},
	"application/zlib": {
	source: "iana"
},
	"application/zstd": {
	source: "iana"
},
	"audio/1d-interleaved-parityfec": {
	source: "iana"
},
	"audio/32kadpcm": {
	source: "iana"
},
	"audio/3gpp": {
	source: "iana",
	compressible: false,
	extensions: [
		"3gpp"
	]
},
	"audio/3gpp2": {
	source: "iana"
},
	"audio/aac": {
	source: "iana"
},
	"audio/ac3": {
	source: "iana"
},
	"audio/adpcm": {
	source: "apache",
	extensions: [
		"adp"
	]
},
	"audio/amr": {
	source: "iana",
	extensions: [
		"amr"
	]
},
	"audio/amr-wb": {
	source: "iana"
},
	"audio/amr-wb+": {
	source: "iana"
},
	"audio/aptx": {
	source: "iana"
},
	"audio/asc": {
	source: "iana"
},
	"audio/atrac-advanced-lossless": {
	source: "iana"
},
	"audio/atrac-x": {
	source: "iana"
},
	"audio/atrac3": {
	source: "iana"
},
	"audio/basic": {
	source: "iana",
	compressible: false,
	extensions: [
		"au",
		"snd"
	]
},
	"audio/bv16": {
	source: "iana"
},
	"audio/bv32": {
	source: "iana"
},
	"audio/clearmode": {
	source: "iana"
},
	"audio/cn": {
	source: "iana"
},
	"audio/dat12": {
	source: "iana"
},
	"audio/dls": {
	source: "iana"
},
	"audio/dsr-es201108": {
	source: "iana"
},
	"audio/dsr-es202050": {
	source: "iana"
},
	"audio/dsr-es202211": {
	source: "iana"
},
	"audio/dsr-es202212": {
	source: "iana"
},
	"audio/dv": {
	source: "iana"
},
	"audio/dvi4": {
	source: "iana"
},
	"audio/eac3": {
	source: "iana"
},
	"audio/encaprtp": {
	source: "iana"
},
	"audio/evrc": {
	source: "iana"
},
	"audio/evrc-qcp": {
	source: "iana"
},
	"audio/evrc0": {
	source: "iana"
},
	"audio/evrc1": {
	source: "iana"
},
	"audio/evrcb": {
	source: "iana"
},
	"audio/evrcb0": {
	source: "iana"
},
	"audio/evrcb1": {
	source: "iana"
},
	"audio/evrcnw": {
	source: "iana"
},
	"audio/evrcnw0": {
	source: "iana"
},
	"audio/evrcnw1": {
	source: "iana"
},
	"audio/evrcwb": {
	source: "iana"
},
	"audio/evrcwb0": {
	source: "iana"
},
	"audio/evrcwb1": {
	source: "iana"
},
	"audio/evs": {
	source: "iana"
},
	"audio/flexfec": {
	source: "iana"
},
	"audio/fwdred": {
	source: "iana"
},
	"audio/g711-0": {
	source: "iana"
},
	"audio/g719": {
	source: "iana"
},
	"audio/g722": {
	source: "iana"
},
	"audio/g7221": {
	source: "iana"
},
	"audio/g723": {
	source: "iana"
},
	"audio/g726-16": {
	source: "iana"
},
	"audio/g726-24": {
	source: "iana"
},
	"audio/g726-32": {
	source: "iana"
},
	"audio/g726-40": {
	source: "iana"
},
	"audio/g728": {
	source: "iana"
},
	"audio/g729": {
	source: "iana"
},
	"audio/g7291": {
	source: "iana"
},
	"audio/g729d": {
	source: "iana"
},
	"audio/g729e": {
	source: "iana"
},
	"audio/gsm": {
	source: "iana"
},
	"audio/gsm-efr": {
	source: "iana"
},
	"audio/gsm-hr-08": {
	source: "iana"
},
	"audio/ilbc": {
	source: "iana"
},
	"audio/ip-mr_v2.5": {
	source: "iana"
},
	"audio/isac": {
	source: "apache"
},
	"audio/l16": {
	source: "iana"
},
	"audio/l20": {
	source: "iana"
},
	"audio/l24": {
	source: "iana",
	compressible: false
},
	"audio/l8": {
	source: "iana"
},
	"audio/lpc": {
	source: "iana"
},
	"audio/melp": {
	source: "iana"
},
	"audio/melp1200": {
	source: "iana"
},
	"audio/melp2400": {
	source: "iana"
},
	"audio/melp600": {
	source: "iana"
},
	"audio/mhas": {
	source: "iana"
},
	"audio/midi": {
	source: "apache",
	extensions: [
		"mid",
		"midi",
		"kar",
		"rmi"
	]
},
	"audio/mobile-xmf": {
	source: "iana",
	extensions: [
		"mxmf"
	]
},
	"audio/mp3": {
	compressible: false,
	extensions: [
		"mp3"
	]
},
	"audio/mp4": {
	source: "iana",
	compressible: false,
	extensions: [
		"m4a",
		"mp4a"
	]
},
	"audio/mp4a-latm": {
	source: "iana"
},
	"audio/mpa": {
	source: "iana"
},
	"audio/mpa-robust": {
	source: "iana"
},
	"audio/mpeg": {
	source: "iana",
	compressible: false,
	extensions: [
		"mpga",
		"mp2",
		"mp2a",
		"mp3",
		"m2a",
		"m3a"
	]
},
	"audio/mpeg4-generic": {
	source: "iana"
},
	"audio/musepack": {
	source: "apache"
},
	"audio/ogg": {
	source: "iana",
	compressible: false,
	extensions: [
		"oga",
		"ogg",
		"spx",
		"opus"
	]
},
	"audio/opus": {
	source: "iana"
},
	"audio/parityfec": {
	source: "iana"
},
	"audio/pcma": {
	source: "iana"
},
	"audio/pcma-wb": {
	source: "iana"
},
	"audio/pcmu": {
	source: "iana"
},
	"audio/pcmu-wb": {
	source: "iana"
},
	"audio/prs.sid": {
	source: "iana"
},
	"audio/qcelp": {
	source: "iana"
},
	"audio/raptorfec": {
	source: "iana"
},
	"audio/red": {
	source: "iana"
},
	"audio/rtp-enc-aescm128": {
	source: "iana"
},
	"audio/rtp-midi": {
	source: "iana"
},
	"audio/rtploopback": {
	source: "iana"
},
	"audio/rtx": {
	source: "iana"
},
	"audio/s3m": {
	source: "apache",
	extensions: [
		"s3m"
	]
},
	"audio/scip": {
	source: "iana"
},
	"audio/silk": {
	source: "apache",
	extensions: [
		"sil"
	]
},
	"audio/smv": {
	source: "iana"
},
	"audio/smv-qcp": {
	source: "iana"
},
	"audio/smv0": {
	source: "iana"
},
	"audio/sofa": {
	source: "iana"
},
	"audio/sp-midi": {
	source: "iana"
},
	"audio/speex": {
	source: "iana"
},
	"audio/t140c": {
	source: "iana"
},
	"audio/t38": {
	source: "iana"
},
	"audio/telephone-event": {
	source: "iana"
},
	"audio/tetra_acelp": {
	source: "iana"
},
	"audio/tetra_acelp_bb": {
	source: "iana"
},
	"audio/tone": {
	source: "iana"
},
	"audio/tsvcis": {
	source: "iana"
},
	"audio/uemclip": {
	source: "iana"
},
	"audio/ulpfec": {
	source: "iana"
},
	"audio/usac": {
	source: "iana"
},
	"audio/vdvi": {
	source: "iana"
},
	"audio/vmr-wb": {
	source: "iana"
},
	"audio/vnd.3gpp.iufp": {
	source: "iana"
},
	"audio/vnd.4sb": {
	source: "iana"
},
	"audio/vnd.audiokoz": {
	source: "iana"
},
	"audio/vnd.celp": {
	source: "iana"
},
	"audio/vnd.cisco.nse": {
	source: "iana"
},
	"audio/vnd.cmles.radio-events": {
	source: "iana"
},
	"audio/vnd.cns.anp1": {
	source: "iana"
},
	"audio/vnd.cns.inf1": {
	source: "iana"
},
	"audio/vnd.dece.audio": {
	source: "iana",
	extensions: [
		"uva",
		"uvva"
	]
},
	"audio/vnd.digital-winds": {
	source: "iana",
	extensions: [
		"eol"
	]
},
	"audio/vnd.dlna.adts": {
	source: "iana"
},
	"audio/vnd.dolby.heaac.1": {
	source: "iana"
},
	"audio/vnd.dolby.heaac.2": {
	source: "iana"
},
	"audio/vnd.dolby.mlp": {
	source: "iana"
},
	"audio/vnd.dolby.mps": {
	source: "iana"
},
	"audio/vnd.dolby.pl2": {
	source: "iana"
},
	"audio/vnd.dolby.pl2x": {
	source: "iana"
},
	"audio/vnd.dolby.pl2z": {
	source: "iana"
},
	"audio/vnd.dolby.pulse.1": {
	source: "iana"
},
	"audio/vnd.dra": {
	source: "iana",
	extensions: [
		"dra"
	]
},
	"audio/vnd.dts": {
	source: "iana",
	extensions: [
		"dts"
	]
},
	"audio/vnd.dts.hd": {
	source: "iana",
	extensions: [
		"dtshd"
	]
},
	"audio/vnd.dts.uhd": {
	source: "iana"
},
	"audio/vnd.dvb.file": {
	source: "iana"
},
	"audio/vnd.everad.plj": {
	source: "iana"
},
	"audio/vnd.hns.audio": {
	source: "iana"
},
	"audio/vnd.lucent.voice": {
	source: "iana",
	extensions: [
		"lvp"
	]
},
	"audio/vnd.ms-playready.media.pya": {
	source: "iana",
	extensions: [
		"pya"
	]
},
	"audio/vnd.nokia.mobile-xmf": {
	source: "iana"
},
	"audio/vnd.nortel.vbk": {
	source: "iana"
},
	"audio/vnd.nuera.ecelp4800": {
	source: "iana",
	extensions: [
		"ecelp4800"
	]
},
	"audio/vnd.nuera.ecelp7470": {
	source: "iana",
	extensions: [
		"ecelp7470"
	]
},
	"audio/vnd.nuera.ecelp9600": {
	source: "iana",
	extensions: [
		"ecelp9600"
	]
},
	"audio/vnd.octel.sbc": {
	source: "iana"
},
	"audio/vnd.presonus.multitrack": {
	source: "iana"
},
	"audio/vnd.qcelp": {
	source: "iana"
},
	"audio/vnd.rhetorex.32kadpcm": {
	source: "iana"
},
	"audio/vnd.rip": {
	source: "iana",
	extensions: [
		"rip"
	]
},
	"audio/vnd.rn-realaudio": {
	compressible: false
},
	"audio/vnd.sealedmedia.softseal.mpeg": {
	source: "iana"
},
	"audio/vnd.vmx.cvsd": {
	source: "iana"
},
	"audio/vnd.wave": {
	compressible: false
},
	"audio/vorbis": {
	source: "iana",
	compressible: false
},
	"audio/vorbis-config": {
	source: "iana"
},
	"audio/wav": {
	compressible: false,
	extensions: [
		"wav"
	]
},
	"audio/wave": {
	compressible: false,
	extensions: [
		"wav"
	]
},
	"audio/webm": {
	source: "apache",
	compressible: false,
	extensions: [
		"weba"
	]
},
	"audio/x-aac": {
	source: "apache",
	compressible: false,
	extensions: [
		"aac"
	]
},
	"audio/x-aiff": {
	source: "apache",
	extensions: [
		"aif",
		"aiff",
		"aifc"
	]
},
	"audio/x-caf": {
	source: "apache",
	compressible: false,
	extensions: [
		"caf"
	]
},
	"audio/x-flac": {
	source: "apache",
	extensions: [
		"flac"
	]
},
	"audio/x-m4a": {
	source: "nginx",
	extensions: [
		"m4a"
	]
},
	"audio/x-matroska": {
	source: "apache",
	extensions: [
		"mka"
	]
},
	"audio/x-mpegurl": {
	source: "apache",
	extensions: [
		"m3u"
	]
},
	"audio/x-ms-wax": {
	source: "apache",
	extensions: [
		"wax"
	]
},
	"audio/x-ms-wma": {
	source: "apache",
	extensions: [
		"wma"
	]
},
	"audio/x-pn-realaudio": {
	source: "apache",
	extensions: [
		"ram",
		"ra"
	]
},
	"audio/x-pn-realaudio-plugin": {
	source: "apache",
	extensions: [
		"rmp"
	]
},
	"audio/x-realaudio": {
	source: "nginx",
	extensions: [
		"ra"
	]
},
	"audio/x-tta": {
	source: "apache"
},
	"audio/x-wav": {
	source: "apache",
	extensions: [
		"wav"
	]
},
	"audio/xm": {
	source: "apache",
	extensions: [
		"xm"
	]
},
	"chemical/x-cdx": {
	source: "apache",
	extensions: [
		"cdx"
	]
},
	"chemical/x-cif": {
	source: "apache",
	extensions: [
		"cif"
	]
},
	"chemical/x-cmdf": {
	source: "apache",
	extensions: [
		"cmdf"
	]
},
	"chemical/x-cml": {
	source: "apache",
	extensions: [
		"cml"
	]
},
	"chemical/x-csml": {
	source: "apache",
	extensions: [
		"csml"
	]
},
	"chemical/x-pdb": {
	source: "apache"
},
	"chemical/x-xyz": {
	source: "apache",
	extensions: [
		"xyz"
	]
},
	"font/collection": {
	source: "iana",
	extensions: [
		"ttc"
	]
},
	"font/otf": {
	source: "iana",
	compressible: true,
	extensions: [
		"otf"
	]
},
	"font/sfnt": {
	source: "iana"
},
	"font/ttf": {
	source: "iana",
	compressible: true,
	extensions: [
		"ttf"
	]
},
	"font/woff": {
	source: "iana",
	extensions: [
		"woff"
	]
},
	"font/woff2": {
	source: "iana",
	extensions: [
		"woff2"
	]
},
	"image/aces": {
	source: "iana",
	extensions: [
		"exr"
	]
},
	"image/apng": {
	compressible: false,
	extensions: [
		"apng"
	]
},
	"image/avci": {
	source: "iana",
	extensions: [
		"avci"
	]
},
	"image/avcs": {
	source: "iana",
	extensions: [
		"avcs"
	]
},
	"image/avif": {
	source: "iana",
	compressible: false,
	extensions: [
		"avif"
	]
},
	"image/bmp": {
	source: "iana",
	compressible: true,
	extensions: [
		"bmp"
	]
},
	"image/cgm": {
	source: "iana",
	extensions: [
		"cgm"
	]
},
	"image/dicom-rle": {
	source: "iana",
	extensions: [
		"drle"
	]
},
	"image/emf": {
	source: "iana",
	extensions: [
		"emf"
	]
},
	"image/fits": {
	source: "iana",
	extensions: [
		"fits"
	]
},
	"image/g3fax": {
	source: "iana",
	extensions: [
		"g3"
	]
},
	"image/gif": {
	source: "iana",
	compressible: false,
	extensions: [
		"gif"
	]
},
	"image/heic": {
	source: "iana",
	extensions: [
		"heic"
	]
},
	"image/heic-sequence": {
	source: "iana",
	extensions: [
		"heics"
	]
},
	"image/heif": {
	source: "iana",
	extensions: [
		"heif"
	]
},
	"image/heif-sequence": {
	source: "iana",
	extensions: [
		"heifs"
	]
},
	"image/hej2k": {
	source: "iana",
	extensions: [
		"hej2"
	]
},
	"image/hsj2": {
	source: "iana",
	extensions: [
		"hsj2"
	]
},
	"image/ief": {
	source: "iana",
	extensions: [
		"ief"
	]
},
	"image/jls": {
	source: "iana",
	extensions: [
		"jls"
	]
},
	"image/jp2": {
	source: "iana",
	compressible: false,
	extensions: [
		"jp2",
		"jpg2"
	]
},
	"image/jpeg": {
	source: "iana",
	compressible: false,
	extensions: [
		"jpeg",
		"jpg",
		"jpe"
	]
},
	"image/jph": {
	source: "iana",
	extensions: [
		"jph"
	]
},
	"image/jphc": {
	source: "iana",
	extensions: [
		"jhc"
	]
},
	"image/jpm": {
	source: "iana",
	compressible: false,
	extensions: [
		"jpm"
	]
},
	"image/jpx": {
	source: "iana",
	compressible: false,
	extensions: [
		"jpx",
		"jpf"
	]
},
	"image/jxr": {
	source: "iana",
	extensions: [
		"jxr"
	]
},
	"image/jxra": {
	source: "iana",
	extensions: [
		"jxra"
	]
},
	"image/jxrs": {
	source: "iana",
	extensions: [
		"jxrs"
	]
},
	"image/jxs": {
	source: "iana",
	extensions: [
		"jxs"
	]
},
	"image/jxsc": {
	source: "iana",
	extensions: [
		"jxsc"
	]
},
	"image/jxsi": {
	source: "iana",
	extensions: [
		"jxsi"
	]
},
	"image/jxss": {
	source: "iana",
	extensions: [
		"jxss"
	]
},
	"image/ktx": {
	source: "iana",
	extensions: [
		"ktx"
	]
},
	"image/ktx2": {
	source: "iana",
	extensions: [
		"ktx2"
	]
},
	"image/naplps": {
	source: "iana"
},
	"image/pjpeg": {
	compressible: false
},
	"image/png": {
	source: "iana",
	compressible: false,
	extensions: [
		"png"
	]
},
	"image/prs.btif": {
	source: "iana",
	extensions: [
		"btif"
	]
},
	"image/prs.pti": {
	source: "iana",
	extensions: [
		"pti"
	]
},
	"image/pwg-raster": {
	source: "iana"
},
	"image/sgi": {
	source: "apache",
	extensions: [
		"sgi"
	]
},
	"image/svg+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"svg",
		"svgz"
	]
},
	"image/t38": {
	source: "iana",
	extensions: [
		"t38"
	]
},
	"image/tiff": {
	source: "iana",
	compressible: false,
	extensions: [
		"tif",
		"tiff"
	]
},
	"image/tiff-fx": {
	source: "iana",
	extensions: [
		"tfx"
	]
},
	"image/vnd.adobe.photoshop": {
	source: "iana",
	compressible: true,
	extensions: [
		"psd"
	]
},
	"image/vnd.airzip.accelerator.azv": {
	source: "iana",
	extensions: [
		"azv"
	]
},
	"image/vnd.cns.inf2": {
	source: "iana"
},
	"image/vnd.dece.graphic": {
	source: "iana",
	extensions: [
		"uvi",
		"uvvi",
		"uvg",
		"uvvg"
	]
},
	"image/vnd.djvu": {
	source: "iana",
	extensions: [
		"djvu",
		"djv"
	]
},
	"image/vnd.dvb.subtitle": {
	source: "iana",
	extensions: [
		"sub"
	]
},
	"image/vnd.dwg": {
	source: "iana",
	extensions: [
		"dwg"
	]
},
	"image/vnd.dxf": {
	source: "iana",
	extensions: [
		"dxf"
	]
},
	"image/vnd.fastbidsheet": {
	source: "iana",
	extensions: [
		"fbs"
	]
},
	"image/vnd.fpx": {
	source: "iana",
	extensions: [
		"fpx"
	]
},
	"image/vnd.fst": {
	source: "iana",
	extensions: [
		"fst"
	]
},
	"image/vnd.fujixerox.edmics-mmr": {
	source: "iana",
	extensions: [
		"mmr"
	]
},
	"image/vnd.fujixerox.edmics-rlc": {
	source: "iana",
	extensions: [
		"rlc"
	]
},
	"image/vnd.globalgraphics.pgb": {
	source: "iana"
},
	"image/vnd.microsoft.icon": {
	source: "iana",
	compressible: true,
	extensions: [
		"ico"
	]
},
	"image/vnd.mix": {
	source: "iana"
},
	"image/vnd.mozilla.apng": {
	source: "iana"
},
	"image/vnd.ms-dds": {
	compressible: true,
	extensions: [
		"dds"
	]
},
	"image/vnd.ms-modi": {
	source: "iana",
	extensions: [
		"mdi"
	]
},
	"image/vnd.ms-photo": {
	source: "apache",
	extensions: [
		"wdp"
	]
},
	"image/vnd.net-fpx": {
	source: "iana",
	extensions: [
		"npx"
	]
},
	"image/vnd.pco.b16": {
	source: "iana",
	extensions: [
		"b16"
	]
},
	"image/vnd.radiance": {
	source: "iana"
},
	"image/vnd.sealed.png": {
	source: "iana"
},
	"image/vnd.sealedmedia.softseal.gif": {
	source: "iana"
},
	"image/vnd.sealedmedia.softseal.jpg": {
	source: "iana"
},
	"image/vnd.svf": {
	source: "iana"
},
	"image/vnd.tencent.tap": {
	source: "iana",
	extensions: [
		"tap"
	]
},
	"image/vnd.valve.source.texture": {
	source: "iana",
	extensions: [
		"vtf"
	]
},
	"image/vnd.wap.wbmp": {
	source: "iana",
	extensions: [
		"wbmp"
	]
},
	"image/vnd.xiff": {
	source: "iana",
	extensions: [
		"xif"
	]
},
	"image/vnd.zbrush.pcx": {
	source: "iana",
	extensions: [
		"pcx"
	]
},
	"image/webp": {
	source: "apache",
	extensions: [
		"webp"
	]
},
	"image/wmf": {
	source: "iana",
	extensions: [
		"wmf"
	]
},
	"image/x-3ds": {
	source: "apache",
	extensions: [
		"3ds"
	]
},
	"image/x-cmu-raster": {
	source: "apache",
	extensions: [
		"ras"
	]
},
	"image/x-cmx": {
	source: "apache",
	extensions: [
		"cmx"
	]
},
	"image/x-freehand": {
	source: "apache",
	extensions: [
		"fh",
		"fhc",
		"fh4",
		"fh5",
		"fh7"
	]
},
	"image/x-icon": {
	source: "apache",
	compressible: true,
	extensions: [
		"ico"
	]
},
	"image/x-jng": {
	source: "nginx",
	extensions: [
		"jng"
	]
},
	"image/x-mrsid-image": {
	source: "apache",
	extensions: [
		"sid"
	]
},
	"image/x-ms-bmp": {
	source: "nginx",
	compressible: true,
	extensions: [
		"bmp"
	]
},
	"image/x-pcx": {
	source: "apache",
	extensions: [
		"pcx"
	]
},
	"image/x-pict": {
	source: "apache",
	extensions: [
		"pic",
		"pct"
	]
},
	"image/x-portable-anymap": {
	source: "apache",
	extensions: [
		"pnm"
	]
},
	"image/x-portable-bitmap": {
	source: "apache",
	extensions: [
		"pbm"
	]
},
	"image/x-portable-graymap": {
	source: "apache",
	extensions: [
		"pgm"
	]
},
	"image/x-portable-pixmap": {
	source: "apache",
	extensions: [
		"ppm"
	]
},
	"image/x-rgb": {
	source: "apache",
	extensions: [
		"rgb"
	]
},
	"image/x-tga": {
	source: "apache",
	extensions: [
		"tga"
	]
},
	"image/x-xbitmap": {
	source: "apache",
	extensions: [
		"xbm"
	]
},
	"image/x-xcf": {
	compressible: false
},
	"image/x-xpixmap": {
	source: "apache",
	extensions: [
		"xpm"
	]
},
	"image/x-xwindowdump": {
	source: "apache",
	extensions: [
		"xwd"
	]
},
	"message/cpim": {
	source: "iana"
},
	"message/delivery-status": {
	source: "iana"
},
	"message/disposition-notification": {
	source: "iana",
	extensions: [
		"disposition-notification"
	]
},
	"message/external-body": {
	source: "iana"
},
	"message/feedback-report": {
	source: "iana"
},
	"message/global": {
	source: "iana",
	extensions: [
		"u8msg"
	]
},
	"message/global-delivery-status": {
	source: "iana",
	extensions: [
		"u8dsn"
	]
},
	"message/global-disposition-notification": {
	source: "iana",
	extensions: [
		"u8mdn"
	]
},
	"message/global-headers": {
	source: "iana",
	extensions: [
		"u8hdr"
	]
},
	"message/http": {
	source: "iana",
	compressible: false
},
	"message/imdn+xml": {
	source: "iana",
	compressible: true
},
	"message/news": {
	source: "iana"
},
	"message/partial": {
	source: "iana",
	compressible: false
},
	"message/rfc822": {
	source: "iana",
	compressible: true,
	extensions: [
		"eml",
		"mime"
	]
},
	"message/s-http": {
	source: "iana"
},
	"message/sip": {
	source: "iana"
},
	"message/sipfrag": {
	source: "iana"
},
	"message/tracking-status": {
	source: "iana"
},
	"message/vnd.si.simp": {
	source: "iana"
},
	"message/vnd.wfa.wsc": {
	source: "iana",
	extensions: [
		"wsc"
	]
},
	"model/3mf": {
	source: "iana",
	extensions: [
		"3mf"
	]
},
	"model/e57": {
	source: "iana"
},
	"model/gltf+json": {
	source: "iana",
	compressible: true,
	extensions: [
		"gltf"
	]
},
	"model/gltf-binary": {
	source: "iana",
	compressible: true,
	extensions: [
		"glb"
	]
},
	"model/iges": {
	source: "iana",
	compressible: false,
	extensions: [
		"igs",
		"iges"
	]
},
	"model/mesh": {
	source: "iana",
	compressible: false,
	extensions: [
		"msh",
		"mesh",
		"silo"
	]
},
	"model/mtl": {
	source: "iana",
	extensions: [
		"mtl"
	]
},
	"model/obj": {
	source: "iana",
	extensions: [
		"obj"
	]
},
	"model/step": {
	source: "iana"
},
	"model/step+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"stpx"
	]
},
	"model/step+zip": {
	source: "iana",
	compressible: false,
	extensions: [
		"stpz"
	]
},
	"model/step-xml+zip": {
	source: "iana",
	compressible: false,
	extensions: [
		"stpxz"
	]
},
	"model/stl": {
	source: "iana",
	extensions: [
		"stl"
	]
},
	"model/vnd.collada+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"dae"
	]
},
	"model/vnd.dwf": {
	source: "iana",
	extensions: [
		"dwf"
	]
},
	"model/vnd.flatland.3dml": {
	source: "iana"
},
	"model/vnd.gdl": {
	source: "iana",
	extensions: [
		"gdl"
	]
},
	"model/vnd.gs-gdl": {
	source: "apache"
},
	"model/vnd.gs.gdl": {
	source: "iana"
},
	"model/vnd.gtw": {
	source: "iana",
	extensions: [
		"gtw"
	]
},
	"model/vnd.moml+xml": {
	source: "iana",
	compressible: true
},
	"model/vnd.mts": {
	source: "iana",
	extensions: [
		"mts"
	]
},
	"model/vnd.opengex": {
	source: "iana",
	extensions: [
		"ogex"
	]
},
	"model/vnd.parasolid.transmit.binary": {
	source: "iana",
	extensions: [
		"x_b"
	]
},
	"model/vnd.parasolid.transmit.text": {
	source: "iana",
	extensions: [
		"x_t"
	]
},
	"model/vnd.pytha.pyox": {
	source: "iana"
},
	"model/vnd.rosette.annotated-data-model": {
	source: "iana"
},
	"model/vnd.sap.vds": {
	source: "iana",
	extensions: [
		"vds"
	]
},
	"model/vnd.usdz+zip": {
	source: "iana",
	compressible: false,
	extensions: [
		"usdz"
	]
},
	"model/vnd.valve.source.compiled-map": {
	source: "iana",
	extensions: [
		"bsp"
	]
},
	"model/vnd.vtu": {
	source: "iana",
	extensions: [
		"vtu"
	]
},
	"model/vrml": {
	source: "iana",
	compressible: false,
	extensions: [
		"wrl",
		"vrml"
	]
},
	"model/x3d+binary": {
	source: "apache",
	compressible: false,
	extensions: [
		"x3db",
		"x3dbz"
	]
},
	"model/x3d+fastinfoset": {
	source: "iana",
	extensions: [
		"x3db"
	]
},
	"model/x3d+vrml": {
	source: "apache",
	compressible: false,
	extensions: [
		"x3dv",
		"x3dvz"
	]
},
	"model/x3d+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"x3d",
		"x3dz"
	]
},
	"model/x3d-vrml": {
	source: "iana",
	extensions: [
		"x3dv"
	]
},
	"multipart/alternative": {
	source: "iana",
	compressible: false
},
	"multipart/appledouble": {
	source: "iana"
},
	"multipart/byteranges": {
	source: "iana"
},
	"multipart/digest": {
	source: "iana"
},
	"multipart/encrypted": {
	source: "iana",
	compressible: false
},
	"multipart/form-data": {
	source: "iana",
	compressible: false
},
	"multipart/header-set": {
	source: "iana"
},
	"multipart/mixed": {
	source: "iana"
},
	"multipart/multilingual": {
	source: "iana"
},
	"multipart/parallel": {
	source: "iana"
},
	"multipart/related": {
	source: "iana",
	compressible: false
},
	"multipart/report": {
	source: "iana"
},
	"multipart/signed": {
	source: "iana",
	compressible: false
},
	"multipart/vnd.bint.med-plus": {
	source: "iana"
},
	"multipart/voice-message": {
	source: "iana"
},
	"multipart/x-mixed-replace": {
	source: "iana"
},
	"text/1d-interleaved-parityfec": {
	source: "iana"
},
	"text/cache-manifest": {
	source: "iana",
	compressible: true,
	extensions: [
		"appcache",
		"manifest"
	]
},
	"text/calendar": {
	source: "iana",
	extensions: [
		"ics",
		"ifb"
	]
},
	"text/calender": {
	compressible: true
},
	"text/cmd": {
	compressible: true
},
	"text/coffeescript": {
	extensions: [
		"coffee",
		"litcoffee"
	]
},
	"text/cql": {
	source: "iana"
},
	"text/cql-expression": {
	source: "iana"
},
	"text/cql-identifier": {
	source: "iana"
},
	"text/css": {
	source: "iana",
	charset: "UTF-8",
	compressible: true,
	extensions: [
		"css"
	]
},
	"text/csv": {
	source: "iana",
	compressible: true,
	extensions: [
		"csv"
	]
},
	"text/csv-schema": {
	source: "iana"
},
	"text/directory": {
	source: "iana"
},
	"text/dns": {
	source: "iana"
},
	"text/ecmascript": {
	source: "iana"
},
	"text/encaprtp": {
	source: "iana"
},
	"text/enriched": {
	source: "iana"
},
	"text/fhirpath": {
	source: "iana"
},
	"text/flexfec": {
	source: "iana"
},
	"text/fwdred": {
	source: "iana"
},
	"text/gff3": {
	source: "iana"
},
	"text/grammar-ref-list": {
	source: "iana"
},
	"text/html": {
	source: "iana",
	compressible: true,
	extensions: [
		"html",
		"htm",
		"shtml"
	]
},
	"text/jade": {
	extensions: [
		"jade"
	]
},
	"text/javascript": {
	source: "iana",
	compressible: true
},
	"text/jcr-cnd": {
	source: "iana"
},
	"text/jsx": {
	compressible: true,
	extensions: [
		"jsx"
	]
},
	"text/less": {
	compressible: true,
	extensions: [
		"less"
	]
},
	"text/markdown": {
	source: "iana",
	compressible: true,
	extensions: [
		"markdown",
		"md"
	]
},
	"text/mathml": {
	source: "nginx",
	extensions: [
		"mml"
	]
},
	"text/mdx": {
	compressible: true,
	extensions: [
		"mdx"
	]
},
	"text/mizar": {
	source: "iana"
},
	"text/n3": {
	source: "iana",
	charset: "UTF-8",
	compressible: true,
	extensions: [
		"n3"
	]
},
	"text/parameters": {
	source: "iana",
	charset: "UTF-8"
},
	"text/parityfec": {
	source: "iana"
},
	"text/plain": {
	source: "iana",
	compressible: true,
	extensions: [
		"txt",
		"text",
		"conf",
		"def",
		"list",
		"log",
		"in",
		"ini"
	]
},
	"text/provenance-notation": {
	source: "iana",
	charset: "UTF-8"
},
	"text/prs.fallenstein.rst": {
	source: "iana"
},
	"text/prs.lines.tag": {
	source: "iana",
	extensions: [
		"dsc"
	]
},
	"text/prs.prop.logic": {
	source: "iana"
},
	"text/raptorfec": {
	source: "iana"
},
	"text/red": {
	source: "iana"
},
	"text/rfc822-headers": {
	source: "iana"
},
	"text/richtext": {
	source: "iana",
	compressible: true,
	extensions: [
		"rtx"
	]
},
	"text/rtf": {
	source: "iana",
	compressible: true,
	extensions: [
		"rtf"
	]
},
	"text/rtp-enc-aescm128": {
	source: "iana"
},
	"text/rtploopback": {
	source: "iana"
},
	"text/rtx": {
	source: "iana"
},
	"text/sgml": {
	source: "iana",
	extensions: [
		"sgml",
		"sgm"
	]
},
	"text/shaclc": {
	source: "iana"
},
	"text/shex": {
	source: "iana",
	extensions: [
		"shex"
	]
},
	"text/slim": {
	extensions: [
		"slim",
		"slm"
	]
},
	"text/spdx": {
	source: "iana",
	extensions: [
		"spdx"
	]
},
	"text/strings": {
	source: "iana"
},
	"text/stylus": {
	extensions: [
		"stylus",
		"styl"
	]
},
	"text/t140": {
	source: "iana"
},
	"text/tab-separated-values": {
	source: "iana",
	compressible: true,
	extensions: [
		"tsv"
	]
},
	"text/troff": {
	source: "iana",
	extensions: [
		"t",
		"tr",
		"roff",
		"man",
		"me",
		"ms"
	]
},
	"text/turtle": {
	source: "iana",
	charset: "UTF-8",
	extensions: [
		"ttl"
	]
},
	"text/ulpfec": {
	source: "iana"
},
	"text/uri-list": {
	source: "iana",
	compressible: true,
	extensions: [
		"uri",
		"uris",
		"urls"
	]
},
	"text/vcard": {
	source: "iana",
	compressible: true,
	extensions: [
		"vcard"
	]
},
	"text/vnd.a": {
	source: "iana"
},
	"text/vnd.abc": {
	source: "iana"
},
	"text/vnd.ascii-art": {
	source: "iana"
},
	"text/vnd.curl": {
	source: "iana",
	extensions: [
		"curl"
	]
},
	"text/vnd.curl.dcurl": {
	source: "apache",
	extensions: [
		"dcurl"
	]
},
	"text/vnd.curl.mcurl": {
	source: "apache",
	extensions: [
		"mcurl"
	]
},
	"text/vnd.curl.scurl": {
	source: "apache",
	extensions: [
		"scurl"
	]
},
	"text/vnd.debian.copyright": {
	source: "iana",
	charset: "UTF-8"
},
	"text/vnd.dmclientscript": {
	source: "iana"
},
	"text/vnd.dvb.subtitle": {
	source: "iana",
	extensions: [
		"sub"
	]
},
	"text/vnd.esmertec.theme-descriptor": {
	source: "iana",
	charset: "UTF-8"
},
	"text/vnd.familysearch.gedcom": {
	source: "iana",
	extensions: [
		"ged"
	]
},
	"text/vnd.ficlab.flt": {
	source: "iana"
},
	"text/vnd.fly": {
	source: "iana",
	extensions: [
		"fly"
	]
},
	"text/vnd.fmi.flexstor": {
	source: "iana",
	extensions: [
		"flx"
	]
},
	"text/vnd.gml": {
	source: "iana"
},
	"text/vnd.graphviz": {
	source: "iana",
	extensions: [
		"gv"
	]
},
	"text/vnd.hans": {
	source: "iana"
},
	"text/vnd.hgl": {
	source: "iana"
},
	"text/vnd.in3d.3dml": {
	source: "iana",
	extensions: [
		"3dml"
	]
},
	"text/vnd.in3d.spot": {
	source: "iana",
	extensions: [
		"spot"
	]
},
	"text/vnd.iptc.newsml": {
	source: "iana"
},
	"text/vnd.iptc.nitf": {
	source: "iana"
},
	"text/vnd.latex-z": {
	source: "iana"
},
	"text/vnd.motorola.reflex": {
	source: "iana"
},
	"text/vnd.ms-mediapackage": {
	source: "iana"
},
	"text/vnd.net2phone.commcenter.command": {
	source: "iana"
},
	"text/vnd.radisys.msml-basic-layout": {
	source: "iana"
},
	"text/vnd.senx.warpscript": {
	source: "iana"
},
	"text/vnd.si.uricatalogue": {
	source: "iana"
},
	"text/vnd.sosi": {
	source: "iana"
},
	"text/vnd.sun.j2me.app-descriptor": {
	source: "iana",
	charset: "UTF-8",
	extensions: [
		"jad"
	]
},
	"text/vnd.trolltech.linguist": {
	source: "iana",
	charset: "UTF-8"
},
	"text/vnd.wap.si": {
	source: "iana"
},
	"text/vnd.wap.sl": {
	source: "iana"
},
	"text/vnd.wap.wml": {
	source: "iana",
	extensions: [
		"wml"
	]
},
	"text/vnd.wap.wmlscript": {
	source: "iana",
	extensions: [
		"wmls"
	]
},
	"text/vtt": {
	source: "iana",
	charset: "UTF-8",
	compressible: true,
	extensions: [
		"vtt"
	]
},
	"text/x-asm": {
	source: "apache",
	extensions: [
		"s",
		"asm"
	]
},
	"text/x-c": {
	source: "apache",
	extensions: [
		"c",
		"cc",
		"cxx",
		"cpp",
		"h",
		"hh",
		"dic"
	]
},
	"text/x-component": {
	source: "nginx",
	extensions: [
		"htc"
	]
},
	"text/x-fortran": {
	source: "apache",
	extensions: [
		"f",
		"for",
		"f77",
		"f90"
	]
},
	"text/x-gwt-rpc": {
	compressible: true
},
	"text/x-handlebars-template": {
	extensions: [
		"hbs"
	]
},
	"text/x-java-source": {
	source: "apache",
	extensions: [
		"java"
	]
},
	"text/x-jquery-tmpl": {
	compressible: true
},
	"text/x-lua": {
	extensions: [
		"lua"
	]
},
	"text/x-markdown": {
	compressible: true,
	extensions: [
		"mkd"
	]
},
	"text/x-nfo": {
	source: "apache",
	extensions: [
		"nfo"
	]
},
	"text/x-opml": {
	source: "apache",
	extensions: [
		"opml"
	]
},
	"text/x-org": {
	compressible: true,
	extensions: [
		"org"
	]
},
	"text/x-pascal": {
	source: "apache",
	extensions: [
		"p",
		"pas"
	]
},
	"text/x-processing": {
	compressible: true,
	extensions: [
		"pde"
	]
},
	"text/x-sass": {
	extensions: [
		"sass"
	]
},
	"text/x-scss": {
	extensions: [
		"scss"
	]
},
	"text/x-setext": {
	source: "apache",
	extensions: [
		"etx"
	]
},
	"text/x-sfv": {
	source: "apache",
	extensions: [
		"sfv"
	]
},
	"text/x-suse-ymp": {
	compressible: true,
	extensions: [
		"ymp"
	]
},
	"text/x-uuencode": {
	source: "apache",
	extensions: [
		"uu"
	]
},
	"text/x-vcalendar": {
	source: "apache",
	extensions: [
		"vcs"
	]
},
	"text/x-vcard": {
	source: "apache",
	extensions: [
		"vcf"
	]
},
	"text/xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"xml"
	]
},
	"text/xml-external-parsed-entity": {
	source: "iana"
},
	"text/yaml": {
	compressible: true,
	extensions: [
		"yaml",
		"yml"
	]
},
	"video/1d-interleaved-parityfec": {
	source: "iana"
},
	"video/3gpp": {
	source: "iana",
	extensions: [
		"3gp",
		"3gpp"
	]
},
	"video/3gpp-tt": {
	source: "iana"
},
	"video/3gpp2": {
	source: "iana",
	extensions: [
		"3g2"
	]
},
	"video/av1": {
	source: "iana"
},
	"video/bmpeg": {
	source: "iana"
},
	"video/bt656": {
	source: "iana"
},
	"video/celb": {
	source: "iana"
},
	"video/dv": {
	source: "iana"
},
	"video/encaprtp": {
	source: "iana"
},
	"video/ffv1": {
	source: "iana"
},
	"video/flexfec": {
	source: "iana"
},
	"video/h261": {
	source: "iana",
	extensions: [
		"h261"
	]
},
	"video/h263": {
	source: "iana",
	extensions: [
		"h263"
	]
},
	"video/h263-1998": {
	source: "iana"
},
	"video/h263-2000": {
	source: "iana"
},
	"video/h264": {
	source: "iana",
	extensions: [
		"h264"
	]
},
	"video/h264-rcdo": {
	source: "iana"
},
	"video/h264-svc": {
	source: "iana"
},
	"video/h265": {
	source: "iana"
},
	"video/iso.segment": {
	source: "iana",
	extensions: [
		"m4s"
	]
},
	"video/jpeg": {
	source: "iana",
	extensions: [
		"jpgv"
	]
},
	"video/jpeg2000": {
	source: "iana"
},
	"video/jpm": {
	source: "apache",
	extensions: [
		"jpm",
		"jpgm"
	]
},
	"video/jxsv": {
	source: "iana"
},
	"video/mj2": {
	source: "iana",
	extensions: [
		"mj2",
		"mjp2"
	]
},
	"video/mp1s": {
	source: "iana"
},
	"video/mp2p": {
	source: "iana"
},
	"video/mp2t": {
	source: "iana",
	extensions: [
		"ts"
	]
},
	"video/mp4": {
	source: "iana",
	compressible: false,
	extensions: [
		"mp4",
		"mp4v",
		"mpg4"
	]
},
	"video/mp4v-es": {
	source: "iana"
},
	"video/mpeg": {
	source: "iana",
	compressible: false,
	extensions: [
		"mpeg",
		"mpg",
		"mpe",
		"m1v",
		"m2v"
	]
},
	"video/mpeg4-generic": {
	source: "iana"
},
	"video/mpv": {
	source: "iana"
},
	"video/nv": {
	source: "iana"
},
	"video/ogg": {
	source: "iana",
	compressible: false,
	extensions: [
		"ogv"
	]
},
	"video/parityfec": {
	source: "iana"
},
	"video/pointer": {
	source: "iana"
},
	"video/quicktime": {
	source: "iana",
	compressible: false,
	extensions: [
		"qt",
		"mov"
	]
},
	"video/raptorfec": {
	source: "iana"
},
	"video/raw": {
	source: "iana"
},
	"video/rtp-enc-aescm128": {
	source: "iana"
},
	"video/rtploopback": {
	source: "iana"
},
	"video/rtx": {
	source: "iana"
},
	"video/scip": {
	source: "iana"
},
	"video/smpte291": {
	source: "iana"
},
	"video/smpte292m": {
	source: "iana"
},
	"video/ulpfec": {
	source: "iana"
},
	"video/vc1": {
	source: "iana"
},
	"video/vc2": {
	source: "iana"
},
	"video/vnd.cctv": {
	source: "iana"
},
	"video/vnd.dece.hd": {
	source: "iana",
	extensions: [
		"uvh",
		"uvvh"
	]
},
	"video/vnd.dece.mobile": {
	source: "iana",
	extensions: [
		"uvm",
		"uvvm"
	]
},
	"video/vnd.dece.mp4": {
	source: "iana"
},
	"video/vnd.dece.pd": {
	source: "iana",
	extensions: [
		"uvp",
		"uvvp"
	]
},
	"video/vnd.dece.sd": {
	source: "iana",
	extensions: [
		"uvs",
		"uvvs"
	]
},
	"video/vnd.dece.video": {
	source: "iana",
	extensions: [
		"uvv",
		"uvvv"
	]
},
	"video/vnd.directv.mpeg": {
	source: "iana"
},
	"video/vnd.directv.mpeg-tts": {
	source: "iana"
},
	"video/vnd.dlna.mpeg-tts": {
	source: "iana"
},
	"video/vnd.dvb.file": {
	source: "iana",
	extensions: [
		"dvb"
	]
},
	"video/vnd.fvt": {
	source: "iana",
	extensions: [
		"fvt"
	]
},
	"video/vnd.hns.video": {
	source: "iana"
},
	"video/vnd.iptvforum.1dparityfec-1010": {
	source: "iana"
},
	"video/vnd.iptvforum.1dparityfec-2005": {
	source: "iana"
},
	"video/vnd.iptvforum.2dparityfec-1010": {
	source: "iana"
},
	"video/vnd.iptvforum.2dparityfec-2005": {
	source: "iana"
},
	"video/vnd.iptvforum.ttsavc": {
	source: "iana"
},
	"video/vnd.iptvforum.ttsmpeg2": {
	source: "iana"
},
	"video/vnd.motorola.video": {
	source: "iana"
},
	"video/vnd.motorola.videop": {
	source: "iana"
},
	"video/vnd.mpegurl": {
	source: "iana",
	extensions: [
		"mxu",
		"m4u"
	]
},
	"video/vnd.ms-playready.media.pyv": {
	source: "iana",
	extensions: [
		"pyv"
	]
},
	"video/vnd.nokia.interleaved-multimedia": {
	source: "iana"
},
	"video/vnd.nokia.mp4vr": {
	source: "iana"
},
	"video/vnd.nokia.videovoip": {
	source: "iana"
},
	"video/vnd.objectvideo": {
	source: "iana"
},
	"video/vnd.radgamettools.bink": {
	source: "iana"
},
	"video/vnd.radgamettools.smacker": {
	source: "iana"
},
	"video/vnd.sealed.mpeg1": {
	source: "iana"
},
	"video/vnd.sealed.mpeg4": {
	source: "iana"
},
	"video/vnd.sealed.swf": {
	source: "iana"
},
	"video/vnd.sealedmedia.softseal.mov": {
	source: "iana"
},
	"video/vnd.uvvu.mp4": {
	source: "iana",
	extensions: [
		"uvu",
		"uvvu"
	]
},
	"video/vnd.vivo": {
	source: "iana",
	extensions: [
		"viv"
	]
},
	"video/vnd.youtube.yt": {
	source: "iana"
},
	"video/vp8": {
	source: "iana"
},
	"video/vp9": {
	source: "iana"
},
	"video/webm": {
	source: "apache",
	compressible: false,
	extensions: [
		"webm"
	]
},
	"video/x-f4v": {
	source: "apache",
	extensions: [
		"f4v"
	]
},
	"video/x-fli": {
	source: "apache",
	extensions: [
		"fli"
	]
},
	"video/x-flv": {
	source: "apache",
	compressible: false,
	extensions: [
		"flv"
	]
},
	"video/x-m4v": {
	source: "apache",
	extensions: [
		"m4v"
	]
},
	"video/x-matroska": {
	source: "apache",
	compressible: false,
	extensions: [
		"mkv",
		"mk3d",
		"mks"
	]
},
	"video/x-mng": {
	source: "apache",
	extensions: [
		"mng"
	]
},
	"video/x-ms-asf": {
	source: "apache",
	extensions: [
		"asf",
		"asx"
	]
},
	"video/x-ms-vob": {
	source: "apache",
	extensions: [
		"vob"
	]
},
	"video/x-ms-wm": {
	source: "apache",
	extensions: [
		"wm"
	]
},
	"video/x-ms-wmv": {
	source: "apache",
	compressible: false,
	extensions: [
		"wmv"
	]
},
	"video/x-ms-wmx": {
	source: "apache",
	extensions: [
		"wmx"
	]
},
	"video/x-ms-wvx": {
	source: "apache",
	extensions: [
		"wvx"
	]
},
	"video/x-msvideo": {
	source: "apache",
	extensions: [
		"avi"
	]
},
	"video/x-sgi-movie": {
	source: "apache",
	extensions: [
		"movie"
	]
},
	"video/x-smv": {
	source: "apache",
	extensions: [
		"smv"
	]
},
	"x-conference/x-cooltalk": {
	source: "apache",
	extensions: [
		"ice"
	]
},
	"x-shader/x-fragment": {
	compressible: true
},
	"x-shader/x-vertex": {
	compressible: true
}
};

/*!
 * mime-db
 * Copyright(c) 2014 Jonathan Ong
 * Copyright(c) 2015-2022 Douglas Christopher Wilson
 * MIT Licensed
 */
var mimeDb;
var hasRequiredMimeDb;
function requireMimeDb() {
  if (hasRequiredMimeDb) return mimeDb;
  hasRequiredMimeDb = 1;
  /**
   * Module exports.
   */

  mimeDb = require$$0;
  return mimeDb;
}

/*!
 * mime-types
 * Copyright(c) 2014 Jonathan Ong
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */
var hasRequiredMimeTypes;
function requireMimeTypes() {
  if (hasRequiredMimeTypes) return mimeTypes;
  hasRequiredMimeTypes = 1;
  (function (exports) {

    /**
     * Module dependencies.
     * @private
     */
    var db = requireMimeDb();
    var extname = path.extname;

    /**
     * Module variables.
     * @private
     */

    var EXTRACT_TYPE_REGEXP = /^\s*([^;\s]*)(?:;|\s|$)/;
    var TEXT_TYPE_REGEXP = /^text\//i;

    /**
     * Module exports.
     * @public
     */

    exports.charset = charset;
    exports.charsets = {
      lookup: charset
    };
    exports.contentType = contentType;
    exports.extension = extension;
    exports.extensions = Object.create(null);
    exports.lookup = lookup;
    exports.types = Object.create(null);

    // Populate the extensions/types maps
    populateMaps(exports.extensions, exports.types);

    /**
     * Get the default charset for a MIME type.
     *
     * @param {string} type
     * @return {boolean|string}
     */

    function charset(type) {
      if (!type || typeof type !== 'string') {
        return false;
      }

      // TODO: use media-typer
      var match = EXTRACT_TYPE_REGEXP.exec(type);
      var mime = match && db[match[1].toLowerCase()];
      if (mime && mime.charset) {
        return mime.charset;
      }

      // default text/* to utf-8
      if (match && TEXT_TYPE_REGEXP.test(match[1])) {
        return 'UTF-8';
      }
      return false;
    }

    /**
     * Create a full Content-Type header given a MIME type or extension.
     *
     * @param {string} str
     * @return {boolean|string}
     */

    function contentType(str) {
      // TODO: should this even be in this module?
      if (!str || typeof str !== 'string') {
        return false;
      }
      var mime = str.indexOf('/') === -1 ? exports.lookup(str) : str;
      if (!mime) {
        return false;
      }

      // TODO: use content-type or other module
      if (mime.indexOf('charset') === -1) {
        var charset = exports.charset(mime);
        if (charset) mime += '; charset=' + charset.toLowerCase();
      }
      return mime;
    }

    /**
     * Get the default extension for a MIME type.
     *
     * @param {string} type
     * @return {boolean|string}
     */

    function extension(type) {
      if (!type || typeof type !== 'string') {
        return false;
      }

      // TODO: use media-typer
      var match = EXTRACT_TYPE_REGEXP.exec(type);

      // get extensions
      var exts = match && exports.extensions[match[1].toLowerCase()];
      if (!exts || !exts.length) {
        return false;
      }
      return exts[0];
    }

    /**
     * Lookup the MIME type for a file path/extension.
     *
     * @param {string} path
     * @return {boolean|string}
     */

    function lookup(path) {
      if (!path || typeof path !== 'string') {
        return false;
      }

      // get the extension ("ext" or ".ext" or full path)
      var extension = extname('x.' + path).toLowerCase().substr(1);
      if (!extension) {
        return false;
      }
      return exports.types[extension] || false;
    }

    /**
     * Populate the extensions and types maps.
     * @private
     */

    function populateMaps(extensions, types) {
      // source preference (least -> most)
      var preference = ['nginx', 'apache', undefined, 'iana'];
      Object.keys(db).forEach(function forEachMimeType(type) {
        var mime = db[type];
        var exts = mime.extensions;
        if (!exts || !exts.length) {
          return;
        }

        // mime -> extensions
        extensions[type] = exts;

        // extension -> mime
        for (var i = 0; i < exts.length; i++) {
          var extension = exts[i];
          if (types[extension]) {
            var from = preference.indexOf(db[types[extension]].source);
            var to = preference.indexOf(mime.source);
            if (types[extension] !== 'application/octet-stream' && (from > to || from === to && types[extension].substr(0, 12) === 'application/')) {
              // skip the remapping
              continue;
            }
          }

          // set the extension -> mime
          types[extension] = type;
        }
      });
    }
  })(mimeTypes);
  return mimeTypes;
}

var defer_1;
var hasRequiredDefer;
function requireDefer() {
  if (hasRequiredDefer) return defer_1;
  hasRequiredDefer = 1;
  defer_1 = defer;

  /**
   * Runs provided function on next iteration of the event loop
   *
   * @param {function} fn - function to run
   */
  function defer(fn) {
    var nextTick = typeof setImmediate == 'function' ? setImmediate : typeof process == 'object' && typeof process.nextTick == 'function' ? process.nextTick : null;
    if (nextTick) {
      nextTick(fn);
    } else {
      setTimeout(fn, 0);
    }
  }
  return defer_1;
}

var async_1;
var hasRequiredAsync;
function requireAsync() {
  if (hasRequiredAsync) return async_1;
  hasRequiredAsync = 1;
  var defer = requireDefer();

  // API
  async_1 = async;

  /**
   * Runs provided callback asynchronously
   * even if callback itself is not
   *
   * @param   {function} callback - callback to invoke
   * @returns {function} - augmented callback
   */
  function async(callback) {
    var isAsync = false;

    // check if async happened
    defer(function () {
      isAsync = true;
    });
    return function async_callback(err, result) {
      if (isAsync) {
        callback(err, result);
      } else {
        defer(function nextTick_callback() {
          callback(err, result);
        });
      }
    };
  }
  return async_1;
}

var abort_1;
var hasRequiredAbort;
function requireAbort() {
  if (hasRequiredAbort) return abort_1;
  hasRequiredAbort = 1;
  // API
  abort_1 = abort;

  /**
   * Aborts leftover active jobs
   *
   * @param {object} state - current state object
   */
  function abort(state) {
    Object.keys(state.jobs).forEach(clean.bind(state));

    // reset leftover jobs
    state.jobs = {};
  }

  /**
   * Cleans up leftover job by invoking abort function for the provided job id
   *
   * @this  state
   * @param {string|number} key - job id to abort
   */
  function clean(key) {
    if (typeof this.jobs[key] == 'function') {
      this.jobs[key]();
    }
  }
  return abort_1;
}

var iterate_1;
var hasRequiredIterate;
function requireIterate() {
  if (hasRequiredIterate) return iterate_1;
  hasRequiredIterate = 1;
  var async = requireAsync(),
    abort = requireAbort();

  // API
  iterate_1 = iterate;

  /**
   * Iterates over each job object
   *
   * @param {array|object} list - array or object (named list) to iterate over
   * @param {function} iterator - iterator to run
   * @param {object} state - current job status
   * @param {function} callback - invoked when all elements processed
   */
  function iterate(list, iterator, state, callback) {
    // store current index
    var key = state['keyedList'] ? state['keyedList'][state.index] : state.index;
    state.jobs[key] = runJob(iterator, key, list[key], function (error, output) {
      // don't repeat yourself
      // skip secondary callbacks
      if (!(key in state.jobs)) {
        return;
      }

      // clean up jobs
      delete state.jobs[key];
      if (error) {
        // don't process rest of the results
        // stop still active jobs
        // and reset the list
        abort(state);
      } else {
        state.results[key] = output;
      }

      // return salvaged results
      callback(error, state.results);
    });
  }

  /**
   * Runs iterator over provided job element
   *
   * @param   {function} iterator - iterator to invoke
   * @param   {string|number} key - key/index of the element in the list of jobs
   * @param   {mixed} item - job description
   * @param   {function} callback - invoked after iterator is done with the job
   * @returns {function|mixed} - job abort function or something else
   */
  function runJob(iterator, key, item, callback) {
    var aborter;

    // allow shortcut if iterator expects only two arguments
    if (iterator.length == 2) {
      aborter = iterator(item, async(callback));
    }
    // otherwise go with full three arguments
    else {
      aborter = iterator(item, key, async(callback));
    }
    return aborter;
  }
  return iterate_1;
}

var state_1;
var hasRequiredState;
function requireState() {
  if (hasRequiredState) return state_1;
  hasRequiredState = 1;
  // API
  state_1 = state;

  /**
   * Creates initial state object
   * for iteration over list
   *
   * @param   {array|object} list - list to iterate over
   * @param   {function|null} sortMethod - function to use for keys sort,
   *                                     or `null` to keep them as is
   * @returns {object} - initial state object
   */
  function state(list, sortMethod) {
    var isNamedList = !Array.isArray(list),
      initState = {
        index: 0,
        keyedList: isNamedList || sortMethod ? Object.keys(list) : null,
        jobs: {},
        results: isNamedList ? {} : [],
        size: isNamedList ? Object.keys(list).length : list.length
      };
    if (sortMethod) {
      // sort array keys based on it's values
      // sort object's keys just on own merit
      initState.keyedList.sort(isNamedList ? sortMethod : function (a, b) {
        return sortMethod(list[a], list[b]);
      });
    }
    return initState;
  }
  return state_1;
}

var terminator_1;
var hasRequiredTerminator;
function requireTerminator() {
  if (hasRequiredTerminator) return terminator_1;
  hasRequiredTerminator = 1;
  var abort = requireAbort(),
    async = requireAsync();

  // API
  terminator_1 = terminator;

  /**
   * Terminates jobs in the attached state context
   *
   * @this  AsyncKitState#
   * @param {function} callback - final callback to invoke after termination
   */
  function terminator(callback) {
    if (!Object.keys(this.jobs).length) {
      return;
    }

    // fast forward iteration index
    this.index = this.size;

    // abort jobs
    abort(this);

    // send back results we have so far
    async(callback)(null, this.results);
  }
  return terminator_1;
}

var parallel_1;
var hasRequiredParallel;
function requireParallel() {
  if (hasRequiredParallel) return parallel_1;
  hasRequiredParallel = 1;
  var iterate = requireIterate(),
    initState = requireState(),
    terminator = requireTerminator();

  // Public API
  parallel_1 = parallel;

  /**
   * Runs iterator over provided array elements in parallel
   *
   * @param   {array|object} list - array or object (named list) to iterate over
   * @param   {function} iterator - iterator to run
   * @param   {function} callback - invoked when all elements processed
   * @returns {function} - jobs terminator
   */
  function parallel(list, iterator, callback) {
    var state = initState(list);
    while (state.index < (state['keyedList'] || list).length) {
      iterate(list, iterator, state, function (error, result) {
        if (error) {
          callback(error, result);
          return;
        }

        // looks like it's the last one
        if (Object.keys(state.jobs).length === 0) {
          callback(null, state.results);
          return;
        }
      });
      state.index++;
    }
    return terminator.bind(state, callback);
  }
  return parallel_1;
}

var serialOrdered = {exports: {}};

var hasRequiredSerialOrdered;
function requireSerialOrdered() {
  if (hasRequiredSerialOrdered) return serialOrdered.exports;
  hasRequiredSerialOrdered = 1;
  var iterate = requireIterate(),
    initState = requireState(),
    terminator = requireTerminator();

  // Public API
  serialOrdered.exports = serialOrdered$1;
  // sorting helpers
  serialOrdered.exports.ascending = ascending;
  serialOrdered.exports.descending = descending;

  /**
   * Runs iterator over provided sorted array elements in series
   *
   * @param   {array|object} list - array or object (named list) to iterate over
   * @param   {function} iterator - iterator to run
   * @param   {function} sortMethod - custom sort function
   * @param   {function} callback - invoked when all elements processed
   * @returns {function} - jobs terminator
   */
  function serialOrdered$1(list, iterator, sortMethod, callback) {
    var state = initState(list, sortMethod);
    iterate(list, iterator, state, function iteratorHandler(error, result) {
      if (error) {
        callback(error, result);
        return;
      }
      state.index++;

      // are we there yet?
      if (state.index < (state['keyedList'] || list).length) {
        iterate(list, iterator, state, iteratorHandler);
        return;
      }

      // done here
      callback(null, state.results);
    });
    return terminator.bind(state, callback);
  }

  /*
   * -- Sort methods
   */

  /**
   * sort helper to sort array elements in ascending order
   *
   * @param   {mixed} a - an item to compare
   * @param   {mixed} b - an item to compare
   * @returns {number} - comparison result
   */
  function ascending(a, b) {
    return a < b ? -1 : a > b ? 1 : 0;
  }

  /**
   * sort helper to sort array elements in descending order
   *
   * @param   {mixed} a - an item to compare
   * @param   {mixed} b - an item to compare
   * @returns {number} - comparison result
   */
  function descending(a, b) {
    return -1 * ascending(a, b);
  }
  return serialOrdered.exports;
}

var serial_1;
var hasRequiredSerial;
function requireSerial() {
  if (hasRequiredSerial) return serial_1;
  hasRequiredSerial = 1;
  var serialOrdered = requireSerialOrdered();

  // Public API
  serial_1 = serial;

  /**
   * Runs iterator over provided array elements in series
   *
   * @param   {array|object} list - array or object (named list) to iterate over
   * @param   {function} iterator - iterator to run
   * @param   {function} callback - invoked when all elements processed
   * @returns {function} - jobs terminator
   */
  function serial(list, iterator, callback) {
    return serialOrdered(list, iterator, null, callback);
  }
  return serial_1;
}

var asynckit;
var hasRequiredAsynckit;
function requireAsynckit() {
  if (hasRequiredAsynckit) return asynckit;
  hasRequiredAsynckit = 1;
  asynckit = {
    parallel: requireParallel(),
    serial: requireSerial(),
    serialOrdered: requireSerialOrdered()
  };
  return asynckit;
}

var esObjectAtoms;
var hasRequiredEsObjectAtoms;
function requireEsObjectAtoms() {
  if (hasRequiredEsObjectAtoms) return esObjectAtoms;
  hasRequiredEsObjectAtoms = 1;

  /** @type {import('.')} */
  esObjectAtoms = Object;
  return esObjectAtoms;
}

var esErrors;
var hasRequiredEsErrors;
function requireEsErrors() {
  if (hasRequiredEsErrors) return esErrors;
  hasRequiredEsErrors = 1;

  /** @type {import('.')} */
  esErrors = Error;
  return esErrors;
}

var _eval;
var hasRequired_eval;
function require_eval() {
  if (hasRequired_eval) return _eval;
  hasRequired_eval = 1;

  /** @type {import('./eval')} */
  _eval = EvalError;
  return _eval;
}

var range;
var hasRequiredRange;
function requireRange() {
  if (hasRequiredRange) return range;
  hasRequiredRange = 1;

  /** @type {import('./range')} */
  range = RangeError;
  return range;
}

var ref;
var hasRequiredRef;
function requireRef() {
  if (hasRequiredRef) return ref;
  hasRequiredRef = 1;

  /** @type {import('./ref')} */
  ref = ReferenceError;
  return ref;
}

var syntax;
var hasRequiredSyntax;
function requireSyntax() {
  if (hasRequiredSyntax) return syntax;
  hasRequiredSyntax = 1;

  /** @type {import('./syntax')} */
  syntax = SyntaxError;
  return syntax;
}

var type;
var hasRequiredType;
function requireType() {
  if (hasRequiredType) return type;
  hasRequiredType = 1;

  /** @type {import('./type')} */
  type = TypeError;
  return type;
}

var uri;
var hasRequiredUri;
function requireUri() {
  if (hasRequiredUri) return uri;
  hasRequiredUri = 1;

  /** @type {import('./uri')} */
  uri = URIError;
  return uri;
}

var abs;
var hasRequiredAbs;
function requireAbs() {
  if (hasRequiredAbs) return abs;
  hasRequiredAbs = 1;

  /** @type {import('./abs')} */
  abs = Math.abs;
  return abs;
}

var floor;
var hasRequiredFloor;
function requireFloor() {
  if (hasRequiredFloor) return floor;
  hasRequiredFloor = 1;

  /** @type {import('./floor')} */
  floor = Math.floor;
  return floor;
}

var max;
var hasRequiredMax;
function requireMax() {
  if (hasRequiredMax) return max;
  hasRequiredMax = 1;

  /** @type {import('./max')} */
  max = Math.max;
  return max;
}

var min;
var hasRequiredMin;
function requireMin() {
  if (hasRequiredMin) return min;
  hasRequiredMin = 1;

  /** @type {import('./min')} */
  min = Math.min;
  return min;
}

var pow;
var hasRequiredPow;
function requirePow() {
  if (hasRequiredPow) return pow;
  hasRequiredPow = 1;

  /** @type {import('./pow')} */
  pow = Math.pow;
  return pow;
}

var round;
var hasRequiredRound;
function requireRound() {
  if (hasRequiredRound) return round;
  hasRequiredRound = 1;

  /** @type {import('./round')} */
  round = Math.round;
  return round;
}

var _isNaN;
var hasRequired_isNaN;
function require_isNaN() {
  if (hasRequired_isNaN) return _isNaN;
  hasRequired_isNaN = 1;

  /** @type {import('./isNaN')} */
  _isNaN = Number.isNaN || function isNaN(a) {
    return a !== a;
  };
  return _isNaN;
}

var sign;
var hasRequiredSign;
function requireSign() {
  if (hasRequiredSign) return sign;
  hasRequiredSign = 1;
  var $isNaN = /*@__PURE__*/require_isNaN();

  /** @type {import('./sign')} */
  sign = function sign(number) {
    if ($isNaN(number) || number === 0) {
      return number;
    }
    return number < 0 ? -1 : 1;
  };
  return sign;
}

var gOPD;
var hasRequiredGOPD;
function requireGOPD() {
  if (hasRequiredGOPD) return gOPD;
  hasRequiredGOPD = 1;

  /** @type {import('./gOPD')} */
  gOPD = Object.getOwnPropertyDescriptor;
  return gOPD;
}

var gopd;
var hasRequiredGopd;
function requireGopd() {
  if (hasRequiredGopd) return gopd;
  hasRequiredGopd = 1;

  /** @type {import('.')} */
  var $gOPD = /*@__PURE__*/requireGOPD();
  if ($gOPD) {
    try {
      $gOPD([], 'length');
    } catch (e) {
      // IE 8 has a broken gOPD
      $gOPD = null;
    }
  }
  gopd = $gOPD;
  return gopd;
}

var esDefineProperty;
var hasRequiredEsDefineProperty;
function requireEsDefineProperty() {
  if (hasRequiredEsDefineProperty) return esDefineProperty;
  hasRequiredEsDefineProperty = 1;

  /** @type {import('.')} */
  var $defineProperty = Object.defineProperty || false;
  if ($defineProperty) {
    try {
      $defineProperty({}, 'a', {
        value: 1
      });
    } catch (e) {
      // IE 8 has a broken defineProperty
      $defineProperty = false;
    }
  }
  esDefineProperty = $defineProperty;
  return esDefineProperty;
}

var shams$1;
var hasRequiredShams$1;
function requireShams$1() {
  if (hasRequiredShams$1) return shams$1;
  hasRequiredShams$1 = 1;

  /** @type {import('./shams')} */
  /* eslint complexity: [2, 18], max-statements: [2, 33] */
  shams$1 = function hasSymbols() {
    if (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') {
      return false;
    }
    if (typeof Symbol.iterator === 'symbol') {
      return true;
    }

    /** @type {{ [k in symbol]?: unknown }} */
    var obj = {};
    var sym = Symbol('test');
    var symObj = Object(sym);
    if (typeof sym === 'string') {
      return false;
    }
    if (Object.prototype.toString.call(sym) !== '[object Symbol]') {
      return false;
    }
    if (Object.prototype.toString.call(symObj) !== '[object Symbol]') {
      return false;
    }

    // temp disabled per https://github.com/ljharb/object.assign/issues/17
    // if (sym instanceof Symbol) { return false; }
    // temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4
    // if (!(symObj instanceof Symbol)) { return false; }

    // if (typeof Symbol.prototype.toString !== 'function') { return false; }
    // if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }

    var symVal = 42;
    obj[sym] = symVal;
    for (var _ in obj) {
      return false;
    } // eslint-disable-line no-restricted-syntax, no-unreachable-loop
    if (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) {
      return false;
    }
    if (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) {
      return false;
    }
    var syms = Object.getOwnPropertySymbols(obj);
    if (syms.length !== 1 || syms[0] !== sym) {
      return false;
    }
    if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) {
      return false;
    }
    if (typeof Object.getOwnPropertyDescriptor === 'function') {
      // eslint-disable-next-line no-extra-parens
      var descriptor = /** @type {PropertyDescriptor} */Object.getOwnPropertyDescriptor(obj, sym);
      if (descriptor.value !== symVal || descriptor.enumerable !== true) {
        return false;
      }
    }
    return true;
  };
  return shams$1;
}

var hasSymbols;
var hasRequiredHasSymbols;
function requireHasSymbols() {
  if (hasRequiredHasSymbols) return hasSymbols;
  hasRequiredHasSymbols = 1;
  var origSymbol = typeof Symbol !== 'undefined' && Symbol;
  var hasSymbolSham = requireShams$1();

  /** @type {import('.')} */
  hasSymbols = function hasNativeSymbols() {
    if (typeof origSymbol !== 'function') {
      return false;
    }
    if (typeof Symbol !== 'function') {
      return false;
    }
    if (typeof origSymbol('foo') !== 'symbol') {
      return false;
    }
    if (typeof Symbol('bar') !== 'symbol') {
      return false;
    }
    return hasSymbolSham();
  };
  return hasSymbols;
}

var Reflect_getPrototypeOf;
var hasRequiredReflect_getPrototypeOf;
function requireReflect_getPrototypeOf() {
  if (hasRequiredReflect_getPrototypeOf) return Reflect_getPrototypeOf;
  hasRequiredReflect_getPrototypeOf = 1;

  /** @type {import('./Reflect.getPrototypeOf')} */
  Reflect_getPrototypeOf = typeof Reflect !== 'undefined' && Reflect.getPrototypeOf || null;
  return Reflect_getPrototypeOf;
}

var Object_getPrototypeOf;
var hasRequiredObject_getPrototypeOf;
function requireObject_getPrototypeOf() {
  if (hasRequiredObject_getPrototypeOf) return Object_getPrototypeOf;
  hasRequiredObject_getPrototypeOf = 1;
  var $Object = /*@__PURE__*/requireEsObjectAtoms();

  /** @type {import('./Object.getPrototypeOf')} */
  Object_getPrototypeOf = $Object.getPrototypeOf || null;
  return Object_getPrototypeOf;
}

var implementation;
var hasRequiredImplementation;
function requireImplementation() {
  if (hasRequiredImplementation) return implementation;
  hasRequiredImplementation = 1;

  /* eslint no-invalid-this: 1 */

  var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
  var toStr = Object.prototype.toString;
  var max = Math.max;
  var funcType = '[object Function]';
  var concatty = function concatty(a, b) {
    var arr = [];
    for (var i = 0; i < a.length; i += 1) {
      arr[i] = a[i];
    }
    for (var j = 0; j < b.length; j += 1) {
      arr[j + a.length] = b[j];
    }
    return arr;
  };
  var slicy = function slicy(arrLike, offset) {
    var arr = [];
    for (var i = offset, j = 0; i < arrLike.length; i += 1, j += 1) {
      arr[j] = arrLike[i];
    }
    return arr;
  };
  var joiny = function (arr, joiner) {
    var str = '';
    for (var i = 0; i < arr.length; i += 1) {
      str += arr[i];
      if (i + 1 < arr.length) {
        str += joiner;
      }
    }
    return str;
  };
  implementation = function bind(that) {
    var target = this;
    if (typeof target !== 'function' || toStr.apply(target) !== funcType) {
      throw new TypeError(ERROR_MESSAGE + target);
    }
    var args = slicy(arguments, 1);
    var bound;
    var binder = function () {
      if (this instanceof bound) {
        var result = target.apply(this, concatty(args, arguments));
        if (Object(result) === result) {
          return result;
        }
        return this;
      }
      return target.apply(that, concatty(args, arguments));
    };
    var boundLength = max(0, target.length - args.length);
    var boundArgs = [];
    for (var i = 0; i < boundLength; i++) {
      boundArgs[i] = '$' + i;
    }
    bound = Function('binder', 'return function (' + joiny(boundArgs, ',') + '){ return binder.apply(this,arguments); }')(binder);
    if (target.prototype) {
      var Empty = function Empty() {};
      Empty.prototype = target.prototype;
      bound.prototype = new Empty();
      Empty.prototype = null;
    }
    return bound;
  };
  return implementation;
}

var functionBind;
var hasRequiredFunctionBind;
function requireFunctionBind() {
  if (hasRequiredFunctionBind) return functionBind;
  hasRequiredFunctionBind = 1;
  var implementation = requireImplementation();
  functionBind = Function.prototype.bind || implementation;
  return functionBind;
}

var functionCall;
var hasRequiredFunctionCall;
function requireFunctionCall() {
  if (hasRequiredFunctionCall) return functionCall;
  hasRequiredFunctionCall = 1;

  /** @type {import('./functionCall')} */
  functionCall = Function.prototype.call;
  return functionCall;
}

var functionApply;
var hasRequiredFunctionApply;
function requireFunctionApply() {
  if (hasRequiredFunctionApply) return functionApply;
  hasRequiredFunctionApply = 1;

  /** @type {import('./functionApply')} */
  functionApply = Function.prototype.apply;
  return functionApply;
}

var reflectApply;
var hasRequiredReflectApply;
function requireReflectApply() {
  if (hasRequiredReflectApply) return reflectApply;
  hasRequiredReflectApply = 1;

  /** @type {import('./reflectApply')} */
  reflectApply = typeof Reflect !== 'undefined' && Reflect && Reflect.apply;
  return reflectApply;
}

var actualApply;
var hasRequiredActualApply;
function requireActualApply() {
  if (hasRequiredActualApply) return actualApply;
  hasRequiredActualApply = 1;
  var bind = requireFunctionBind();
  var $apply = requireFunctionApply();
  var $call = requireFunctionCall();
  var $reflectApply = requireReflectApply();

  /** @type {import('./actualApply')} */
  actualApply = $reflectApply || bind.call($call, $apply);
  return actualApply;
}

var callBindApplyHelpers;
var hasRequiredCallBindApplyHelpers;
function requireCallBindApplyHelpers() {
  if (hasRequiredCallBindApplyHelpers) return callBindApplyHelpers;
  hasRequiredCallBindApplyHelpers = 1;
  var bind = requireFunctionBind();
  var $TypeError = /*@__PURE__*/requireType();
  var $call = requireFunctionCall();
  var $actualApply = requireActualApply();

  /** @type {(args: [Function, thisArg?: unknown, ...args: unknown[]]) => Function} TODO FIXME, find a way to use import('.') */
  callBindApplyHelpers = function callBindBasic(args) {
    if (args.length < 1 || typeof args[0] !== 'function') {
      throw new $TypeError('a function is required');
    }
    return $actualApply(bind, $call, args);
  };
  return callBindApplyHelpers;
}

var get;
var hasRequiredGet;
function requireGet() {
  if (hasRequiredGet) return get;
  hasRequiredGet = 1;
  var callBind = requireCallBindApplyHelpers();
  var gOPD = /*@__PURE__*/requireGopd();
  var hasProtoAccessor;
  try {
    // eslint-disable-next-line no-extra-parens, no-proto
    hasProtoAccessor = /** @type {{ __proto__?: typeof Array.prototype }} */[].__proto__ === Array.prototype;
  } catch (e) {
    if (!e || typeof e !== 'object' || !('code' in e) || e.code !== 'ERR_PROTO_ACCESS') {
      throw e;
    }
  }

  // eslint-disable-next-line no-extra-parens
  var desc = !!hasProtoAccessor && gOPD && gOPD(Object.prototype, /** @type {keyof typeof Object.prototype} */'__proto__');
  var $Object = Object;
  var $getPrototypeOf = $Object.getPrototypeOf;

  /** @type {import('./get')} */
  get = desc && typeof desc.get === 'function' ? callBind([desc.get]) : typeof $getPrototypeOf === 'function' ? /** @type {import('./get')} */function getDunder(value) {
    // eslint-disable-next-line eqeqeq
    return $getPrototypeOf(value == null ? value : $Object(value));
  } : false;
  return get;
}

var getProto;
var hasRequiredGetProto;
function requireGetProto() {
  if (hasRequiredGetProto) return getProto;
  hasRequiredGetProto = 1;
  var reflectGetProto = requireReflect_getPrototypeOf();
  var originalGetProto = requireObject_getPrototypeOf();
  var getDunderProto = /*@__PURE__*/requireGet();

  /** @type {import('.')} */
  getProto = reflectGetProto ? function getProto(O) {
    // @ts-expect-error TS can't narrow inside a closure, for some reason
    return reflectGetProto(O);
  } : originalGetProto ? function getProto(O) {
    if (!O || typeof O !== 'object' && typeof O !== 'function') {
      throw new TypeError('getProto: not an object');
    }
    // @ts-expect-error TS can't narrow inside a closure, for some reason
    return originalGetProto(O);
  } : getDunderProto ? function getProto(O) {
    // @ts-expect-error TS can't narrow inside a closure, for some reason
    return getDunderProto(O);
  } : null;
  return getProto;
}

var hasown;
var hasRequiredHasown;
function requireHasown() {
  if (hasRequiredHasown) return hasown;
  hasRequiredHasown = 1;
  var call = Function.prototype.call;
  var $hasOwn = Object.prototype.hasOwnProperty;
  var bind = requireFunctionBind();

  /** @type {import('.')} */
  hasown = bind.call(call, $hasOwn);
  return hasown;
}

var getIntrinsic;
var hasRequiredGetIntrinsic;
function requireGetIntrinsic() {
  if (hasRequiredGetIntrinsic) return getIntrinsic;
  hasRequiredGetIntrinsic = 1;
  var undefined$1;
  var $Object = /*@__PURE__*/requireEsObjectAtoms();
  var $Error = /*@__PURE__*/requireEsErrors();
  var $EvalError = /*@__PURE__*/require_eval();
  var $RangeError = /*@__PURE__*/requireRange();
  var $ReferenceError = /*@__PURE__*/requireRef();
  var $SyntaxError = /*@__PURE__*/requireSyntax();
  var $TypeError = /*@__PURE__*/requireType();
  var $URIError = /*@__PURE__*/requireUri();
  var abs = /*@__PURE__*/requireAbs();
  var floor = /*@__PURE__*/requireFloor();
  var max = /*@__PURE__*/requireMax();
  var min = /*@__PURE__*/requireMin();
  var pow = /*@__PURE__*/requirePow();
  var round = /*@__PURE__*/requireRound();
  var sign = /*@__PURE__*/requireSign();
  var $Function = Function;

  // eslint-disable-next-line consistent-return
  var getEvalledConstructor = function (expressionSyntax) {
    try {
      return $Function('"use strict"; return (' + expressionSyntax + ').constructor;')();
    } catch (e) {}
  };
  var $gOPD = /*@__PURE__*/requireGopd();
  var $defineProperty = /*@__PURE__*/requireEsDefineProperty();
  var throwTypeError = function () {
    throw new $TypeError();
  };
  var ThrowTypeError = $gOPD ? function () {
    try {
      // eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties
      arguments.callee; // IE 8 does not throw here
      return throwTypeError;
    } catch (calleeThrows) {
      try {
        // IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')
        return $gOPD(arguments, 'callee').get;
      } catch (gOPDthrows) {
        return throwTypeError;
      }
    }
  }() : throwTypeError;
  var hasSymbols = requireHasSymbols()();
  var getProto = requireGetProto();
  var $ObjectGPO = requireObject_getPrototypeOf();
  var $ReflectGPO = requireReflect_getPrototypeOf();
  var $apply = requireFunctionApply();
  var $call = requireFunctionCall();
  var needsEval = {};
  var TypedArray = typeof Uint8Array === 'undefined' || !getProto ? undefined$1 : getProto(Uint8Array);
  var INTRINSICS = {
    __proto__: null,
    '%AggregateError%': typeof AggregateError === 'undefined' ? undefined$1 : AggregateError,
    '%Array%': Array,
    '%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined$1 : ArrayBuffer,
    '%ArrayIteratorPrototype%': hasSymbols && getProto ? getProto([][Symbol.iterator]()) : undefined$1,
    '%AsyncFromSyncIteratorPrototype%': undefined$1,
    '%AsyncFunction%': needsEval,
    '%AsyncGenerator%': needsEval,
    '%AsyncGeneratorFunction%': needsEval,
    '%AsyncIteratorPrototype%': needsEval,
    '%Atomics%': typeof Atomics === 'undefined' ? undefined$1 : Atomics,
    '%BigInt%': typeof BigInt === 'undefined' ? undefined$1 : BigInt,
    '%BigInt64Array%': typeof BigInt64Array === 'undefined' ? undefined$1 : BigInt64Array,
    '%BigUint64Array%': typeof BigUint64Array === 'undefined' ? undefined$1 : BigUint64Array,
    '%Boolean%': Boolean,
    '%DataView%': typeof DataView === 'undefined' ? undefined$1 : DataView,
    '%Date%': Date,
    '%decodeURI%': decodeURI,
    '%decodeURIComponent%': decodeURIComponent,
    '%encodeURI%': encodeURI,
    '%encodeURIComponent%': encodeURIComponent,
    '%Error%': $Error,
    '%eval%': eval,
    // eslint-disable-line no-eval
    '%EvalError%': $EvalError,
    '%Float16Array%': typeof Float16Array === 'undefined' ? undefined$1 : Float16Array,
    '%Float32Array%': typeof Float32Array === 'undefined' ? undefined$1 : Float32Array,
    '%Float64Array%': typeof Float64Array === 'undefined' ? undefined$1 : Float64Array,
    '%FinalizationRegistry%': typeof FinalizationRegistry === 'undefined' ? undefined$1 : FinalizationRegistry,
    '%Function%': $Function,
    '%GeneratorFunction%': needsEval,
    '%Int8Array%': typeof Int8Array === 'undefined' ? undefined$1 : Int8Array,
    '%Int16Array%': typeof Int16Array === 'undefined' ? undefined$1 : Int16Array,
    '%Int32Array%': typeof Int32Array === 'undefined' ? undefined$1 : Int32Array,
    '%isFinite%': isFinite,
    '%isNaN%': isNaN,
    '%IteratorPrototype%': hasSymbols && getProto ? getProto(getProto([][Symbol.iterator]())) : undefined$1,
    '%JSON%': typeof JSON === 'object' ? JSON : undefined$1,
    '%Map%': typeof Map === 'undefined' ? undefined$1 : Map,
    '%MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols || !getProto ? undefined$1 : getProto(new Map()[Symbol.iterator]()),
    '%Math%': Math,
    '%Number%': Number,
    '%Object%': $Object,
    '%Object.getOwnPropertyDescriptor%': $gOPD,
    '%parseFloat%': parseFloat,
    '%parseInt%': parseInt,
    '%Promise%': typeof Promise === 'undefined' ? undefined$1 : Promise,
    '%Proxy%': typeof Proxy === 'undefined' ? undefined$1 : Proxy,
    '%RangeError%': $RangeError,
    '%ReferenceError%': $ReferenceError,
    '%Reflect%': typeof Reflect === 'undefined' ? undefined$1 : Reflect,
    '%RegExp%': RegExp,
    '%Set%': typeof Set === 'undefined' ? undefined$1 : Set,
    '%SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols || !getProto ? undefined$1 : getProto(new Set()[Symbol.iterator]()),
    '%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined$1 : SharedArrayBuffer,
    '%String%': String,
    '%StringIteratorPrototype%': hasSymbols && getProto ? getProto(''[Symbol.iterator]()) : undefined$1,
    '%Symbol%': hasSymbols ? Symbol : undefined$1,
    '%SyntaxError%': $SyntaxError,
    '%ThrowTypeError%': ThrowTypeError,
    '%TypedArray%': TypedArray,
    '%TypeError%': $TypeError,
    '%Uint8Array%': typeof Uint8Array === 'undefined' ? undefined$1 : Uint8Array,
    '%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined$1 : Uint8ClampedArray,
    '%Uint16Array%': typeof Uint16Array === 'undefined' ? undefined$1 : Uint16Array,
    '%Uint32Array%': typeof Uint32Array === 'undefined' ? undefined$1 : Uint32Array,
    '%URIError%': $URIError,
    '%WeakMap%': typeof WeakMap === 'undefined' ? undefined$1 : WeakMap,
    '%WeakRef%': typeof WeakRef === 'undefined' ? undefined$1 : WeakRef,
    '%WeakSet%': typeof WeakSet === 'undefined' ? undefined$1 : WeakSet,
    '%Function.prototype.call%': $call,
    '%Function.prototype.apply%': $apply,
    '%Object.defineProperty%': $defineProperty,
    '%Object.getPrototypeOf%': $ObjectGPO,
    '%Math.abs%': abs,
    '%Math.floor%': floor,
    '%Math.max%': max,
    '%Math.min%': min,
    '%Math.pow%': pow,
    '%Math.round%': round,
    '%Math.sign%': sign,
    '%Reflect.getPrototypeOf%': $ReflectGPO
  };
  if (getProto) {
    try {
      null.error; // eslint-disable-line no-unused-expressions
    } catch (e) {
      // https://github.com/tc39/proposal-shadowrealm/pull/384#issuecomment-1364264229
      var errorProto = getProto(getProto(e));
      INTRINSICS['%Error.prototype%'] = errorProto;
    }
  }
  var doEval = function doEval(name) {
    var value;
    if (name === '%AsyncFunction%') {
      value = getEvalledConstructor('async function () {}');
    } else if (name === '%GeneratorFunction%') {
      value = getEvalledConstructor('function* () {}');
    } else if (name === '%AsyncGeneratorFunction%') {
      value = getEvalledConstructor('async function* () {}');
    } else if (name === '%AsyncGenerator%') {
      var fn = doEval('%AsyncGeneratorFunction%');
      if (fn) {
        value = fn.prototype;
      }
    } else if (name === '%AsyncIteratorPrototype%') {
      var gen = doEval('%AsyncGenerator%');
      if (gen && getProto) {
        value = getProto(gen.prototype);
      }
    }
    INTRINSICS[name] = value;
    return value;
  };
  var LEGACY_ALIASES = {
    __proto__: null,
    '%ArrayBufferPrototype%': ['ArrayBuffer', 'prototype'],
    '%ArrayPrototype%': ['Array', 'prototype'],
    '%ArrayProto_entries%': ['Array', 'prototype', 'entries'],
    '%ArrayProto_forEach%': ['Array', 'prototype', 'forEach'],
    '%ArrayProto_keys%': ['Array', 'prototype', 'keys'],
    '%ArrayProto_values%': ['Array', 'prototype', 'values'],
    '%AsyncFunctionPrototype%': ['AsyncFunction', 'prototype'],
    '%AsyncGenerator%': ['AsyncGeneratorFunction', 'prototype'],
    '%AsyncGeneratorPrototype%': ['AsyncGeneratorFunction', 'prototype', 'prototype'],
    '%BooleanPrototype%': ['Boolean', 'prototype'],
    '%DataViewPrototype%': ['DataView', 'prototype'],
    '%DatePrototype%': ['Date', 'prototype'],
    '%ErrorPrototype%': ['Error', 'prototype'],
    '%EvalErrorPrototype%': ['EvalError', 'prototype'],
    '%Float32ArrayPrototype%': ['Float32Array', 'prototype'],
    '%Float64ArrayPrototype%': ['Float64Array', 'prototype'],
    '%FunctionPrototype%': ['Function', 'prototype'],
    '%Generator%': ['GeneratorFunction', 'prototype'],
    '%GeneratorPrototype%': ['GeneratorFunction', 'prototype', 'prototype'],
    '%Int8ArrayPrototype%': ['Int8Array', 'prototype'],
    '%Int16ArrayPrototype%': ['Int16Array', 'prototype'],
    '%Int32ArrayPrototype%': ['Int32Array', 'prototype'],
    '%JSONParse%': ['JSON', 'parse'],
    '%JSONStringify%': ['JSON', 'stringify'],
    '%MapPrototype%': ['Map', 'prototype'],
    '%NumberPrototype%': ['Number', 'prototype'],
    '%ObjectPrototype%': ['Object', 'prototype'],
    '%ObjProto_toString%': ['Object', 'prototype', 'toString'],
    '%ObjProto_valueOf%': ['Object', 'prototype', 'valueOf'],
    '%PromisePrototype%': ['Promise', 'prototype'],
    '%PromiseProto_then%': ['Promise', 'prototype', 'then'],
    '%Promise_all%': ['Promise', 'all'],
    '%Promise_reject%': ['Promise', 'reject'],
    '%Promise_resolve%': ['Promise', 'resolve'],
    '%RangeErrorPrototype%': ['RangeError', 'prototype'],
    '%ReferenceErrorPrototype%': ['ReferenceError', 'prototype'],
    '%RegExpPrototype%': ['RegExp', 'prototype'],
    '%SetPrototype%': ['Set', 'prototype'],
    '%SharedArrayBufferPrototype%': ['SharedArrayBuffer', 'prototype'],
    '%StringPrototype%': ['String', 'prototype'],
    '%SymbolPrototype%': ['Symbol', 'prototype'],
    '%SyntaxErrorPrototype%': ['SyntaxError', 'prototype'],
    '%TypedArrayPrototype%': ['TypedArray', 'prototype'],
    '%TypeErrorPrototype%': ['TypeError', 'prototype'],
    '%Uint8ArrayPrototype%': ['Uint8Array', 'prototype'],
    '%Uint8ClampedArrayPrototype%': ['Uint8ClampedArray', 'prototype'],
    '%Uint16ArrayPrototype%': ['Uint16Array', 'prototype'],
    '%Uint32ArrayPrototype%': ['Uint32Array', 'prototype'],
    '%URIErrorPrototype%': ['URIError', 'prototype'],
    '%WeakMapPrototype%': ['WeakMap', 'prototype'],
    '%WeakSetPrototype%': ['WeakSet', 'prototype']
  };
  var bind = requireFunctionBind();
  var hasOwn = /*@__PURE__*/requireHasown();
  var $concat = bind.call($call, Array.prototype.concat);
  var $spliceApply = bind.call($apply, Array.prototype.splice);
  var $replace = bind.call($call, String.prototype.replace);
  var $strSlice = bind.call($call, String.prototype.slice);
  var $exec = bind.call($call, RegExp.prototype.exec);

  /* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */
  var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
  var reEscapeChar = /\\(\\)?/g; /** Used to match backslashes in property paths. */
  var stringToPath = function stringToPath(string) {
    var first = $strSlice(string, 0, 1);
    var last = $strSlice(string, -1);
    if (first === '%' && last !== '%') {
      throw new $SyntaxError('invalid intrinsic syntax, expected closing `%`');
    } else if (last === '%' && first !== '%') {
      throw new $SyntaxError('invalid intrinsic syntax, expected opening `%`');
    }
    var result = [];
    $replace(string, rePropName, function (match, number, quote, subString) {
      result[result.length] = quote ? $replace(subString, reEscapeChar, '$1') : number || match;
    });
    return result;
  };
  /* end adaptation */

  var getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {
    var intrinsicName = name;
    var alias;
    if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
      alias = LEGACY_ALIASES[intrinsicName];
      intrinsicName = '%' + alias[0] + '%';
    }
    if (hasOwn(INTRINSICS, intrinsicName)) {
      var value = INTRINSICS[intrinsicName];
      if (value === needsEval) {
        value = doEval(intrinsicName);
      }
      if (typeof value === 'undefined' && !allowMissing) {
        throw new $TypeError('intrinsic ' + name + ' exists, but is not available. Please file an issue!');
      }
      return {
        alias: alias,
        name: intrinsicName,
        value: value
      };
    }
    throw new $SyntaxError('intrinsic ' + name + ' does not exist!');
  };
  getIntrinsic = function GetIntrinsic(name, allowMissing) {
    if (typeof name !== 'string' || name.length === 0) {
      throw new $TypeError('intrinsic name must be a non-empty string');
    }
    if (arguments.length > 1 && typeof allowMissing !== 'boolean') {
      throw new $TypeError('"allowMissing" argument must be a boolean');
    }
    if ($exec(/^%?[^%]*%?$/, name) === null) {
      throw new $SyntaxError('`%` may not be present anywhere but at the beginning and end of the intrinsic name');
    }
    var parts = stringToPath(name);
    var intrinsicBaseName = parts.length > 0 ? parts[0] : '';
    var intrinsic = getBaseIntrinsic('%' + intrinsicBaseName + '%', allowMissing);
    var intrinsicRealName = intrinsic.name;
    var value = intrinsic.value;
    var skipFurtherCaching = false;
    var alias = intrinsic.alias;
    if (alias) {
      intrinsicBaseName = alias[0];
      $spliceApply(parts, $concat([0, 1], alias));
    }
    for (var i = 1, isOwn = true; i < parts.length; i += 1) {
      var part = parts[i];
      var first = $strSlice(part, 0, 1);
      var last = $strSlice(part, -1);
      if ((first === '"' || first === "'" || first === '`' || last === '"' || last === "'" || last === '`') && first !== last) {
        throw new $SyntaxError('property names with quotes must have matching quotes');
      }
      if (part === 'constructor' || !isOwn) {
        skipFurtherCaching = true;
      }
      intrinsicBaseName += '.' + part;
      intrinsicRealName = '%' + intrinsicBaseName + '%';
      if (hasOwn(INTRINSICS, intrinsicRealName)) {
        value = INTRINSICS[intrinsicRealName];
      } else if (value != null) {
        if (!(part in value)) {
          if (!allowMissing) {
            throw new $TypeError('base intrinsic for ' + name + ' exists, but the property is not available.');
          }
          return void 0;
        }
        if ($gOPD && i + 1 >= parts.length) {
          var desc = $gOPD(value, part);
          isOwn = !!desc;

          // By convention, when a data property is converted to an accessor
          // property to emulate a data property that does not suffer from
          // the override mistake, that accessor's getter is marked with
          // an `originalValue` property. Here, when we detect this, we
          // uphold the illusion by pretending to see that original data
          // property, i.e., returning the value rather than the getter
          // itself.
          if (isOwn && 'get' in desc && !('originalValue' in desc.get)) {
            value = desc.get;
          } else {
            value = value[part];
          }
        } else {
          isOwn = hasOwn(value, part);
          value = value[part];
        }
        if (isOwn && !skipFurtherCaching) {
          INTRINSICS[intrinsicRealName] = value;
        }
      }
    }
    return value;
  };
  return getIntrinsic;
}

var shams;
var hasRequiredShams;
function requireShams() {
  if (hasRequiredShams) return shams;
  hasRequiredShams = 1;
  var hasSymbols = requireShams$1();

  /** @type {import('.')} */
  shams = function hasToStringTagShams() {
    return hasSymbols() && !!Symbol.toStringTag;
  };
  return shams;
}

var esSetTostringtag;
var hasRequiredEsSetTostringtag;
function requireEsSetTostringtag() {
  if (hasRequiredEsSetTostringtag) return esSetTostringtag;
  hasRequiredEsSetTostringtag = 1;
  var GetIntrinsic = /*@__PURE__*/requireGetIntrinsic();
  var $defineProperty = GetIntrinsic('%Object.defineProperty%', true);
  var hasToStringTag = requireShams()();
  var hasOwn = /*@__PURE__*/requireHasown();
  var $TypeError = /*@__PURE__*/requireType();
  var toStringTag = hasToStringTag ? Symbol.toStringTag : null;

  /** @type {import('.')} */
  esSetTostringtag = function setToStringTag(object, value) {
    var overrideIfSet = arguments.length > 2 && !!arguments[2] && arguments[2].force;
    var nonConfigurable = arguments.length > 2 && !!arguments[2] && arguments[2].nonConfigurable;
    if (typeof overrideIfSet !== 'undefined' && typeof overrideIfSet !== 'boolean' || typeof nonConfigurable !== 'undefined' && typeof nonConfigurable !== 'boolean') {
      throw new $TypeError('if provided, the `overrideIfSet` and `nonConfigurable` options must be booleans');
    }
    if (toStringTag && (overrideIfSet || !hasOwn(object, toStringTag))) {
      if ($defineProperty) {
        $defineProperty(object, toStringTag, {
          configurable: !nonConfigurable,
          enumerable: false,
          value: value,
          writable: false
        });
      } else {
        object[toStringTag] = value; // eslint-disable-line no-param-reassign
      }
    }
  };
  return esSetTostringtag;
}

var populate;
var hasRequiredPopulate;
function requirePopulate() {
  if (hasRequiredPopulate) return populate;
  hasRequiredPopulate = 1;
  // populates missing values
  populate = function (dst, src) {
    Object.keys(src).forEach(function (prop) {
      dst[prop] = dst[prop] || src[prop];
    });
    return dst;
  };
  return populate;
}

var form_data;
var hasRequiredForm_data;
function requireForm_data() {
  if (hasRequiredForm_data) return form_data;
  hasRequiredForm_data = 1;
  var CombinedStream = requireCombined_stream();
  var util = require$$1;
  var path$1 = path;
  var http = require$$3$1;
  var https = require$$4;
  var parseUrl = require$$0$2.parse;
  var fs$1 = fs;
  var Stream = stream.Stream;
  var mime = requireMimeTypes();
  var asynckit = requireAsynckit();
  var setToStringTag = /*@__PURE__*/requireEsSetTostringtag();
  var populate = requirePopulate();

  // Public API
  form_data = FormData;

  // make it a Stream
  util.inherits(FormData, CombinedStream);

  /**
   * Create readable "multipart/form-data" streams.
   * Can be used to submit forms
   * and file uploads to other web applications.
   *
   * @constructor
   * @param {Object} options - Properties to be added/overriden for FormData and CombinedStream
   */
  function FormData(options) {
    if (!(this instanceof FormData)) {
      return new FormData(options);
    }
    this._overheadLength = 0;
    this._valueLength = 0;
    this._valuesToMeasure = [];
    CombinedStream.call(this);
    options = options || {};
    for (var option in options) {
      this[option] = options[option];
    }
  }
  FormData.LINE_BREAK = '\r\n';
  FormData.DEFAULT_CONTENT_TYPE = 'application/octet-stream';
  FormData.prototype.append = function (field, value, options) {
    options = options || {};

    // allow filename as single option
    if (typeof options == 'string') {
      options = {
        filename: options
      };
    }
    var append = CombinedStream.prototype.append.bind(this);

    // all that streamy business can't handle numbers
    if (typeof value == 'number') {
      value = '' + value;
    }

    // https://github.com/felixge/node-form-data/issues/38
    if (Array.isArray(value)) {
      // Please convert your array into string
      // the way web server expects it
      this._error(new Error('Arrays are not supported.'));
      return;
    }
    var header = this._multiPartHeader(field, value, options);
    var footer = this._multiPartFooter();
    append(header);
    append(value);
    append(footer);

    // pass along options.knownLength
    this._trackLength(header, value, options);
  };
  FormData.prototype._trackLength = function (header, value, options) {
    var valueLength = 0;

    // used w/ getLengthSync(), when length is known.
    // e.g. for streaming directly from a remote server,
    // w/ a known file a size, and not wanting to wait for
    // incoming file to finish to get its size.
    if (options.knownLength != null) {
      valueLength += +options.knownLength;
    } else if (Buffer.isBuffer(value)) {
      valueLength = value.length;
    } else if (typeof value === 'string') {
      valueLength = Buffer.byteLength(value);
    }
    this._valueLength += valueLength;

    // @check why add CRLF? does this account for custom/multiple CRLFs?
    this._overheadLength += Buffer.byteLength(header) + FormData.LINE_BREAK.length;

    // empty or either doesn't have path or not an http response or not a stream
    if (!value || !value.path && !(value.readable && Object.prototype.hasOwnProperty.call(value, 'httpVersion')) && !(value instanceof Stream)) {
      return;
    }

    // no need to bother with the length
    if (!options.knownLength) {
      this._valuesToMeasure.push(value);
    }
  };
  FormData.prototype._lengthRetriever = function (value, callback) {
    if (Object.prototype.hasOwnProperty.call(value, 'fd')) {
      // take read range into a account
      // `end` = Infinity –> read file till the end
      //
      // TODO: Looks like there is bug in Node fs.createReadStream
      // it doesn't respect `end` options without `start` options
      // Fix it when node fixes it.
      // https://github.com/joyent/node/issues/7819
      if (value.end != undefined && value.end != Infinity && value.start != undefined) {
        // when end specified
        // no need to calculate range
        // inclusive, starts with 0
        callback(null, value.end + 1 - (value.start ? value.start : 0));

        // not that fast snoopy
      } else {
        // still need to fetch file size from fs
        fs$1.stat(value.path, function (err, stat) {
          var fileSize;
          if (err) {
            callback(err);
            return;
          }

          // update final size based on the range options
          fileSize = stat.size - (value.start ? value.start : 0);
          callback(null, fileSize);
        });
      }

      // or http response
    } else if (Object.prototype.hasOwnProperty.call(value, 'httpVersion')) {
      callback(null, +value.headers['content-length']);

      // or request stream http://github.com/mikeal/request
    } else if (Object.prototype.hasOwnProperty.call(value, 'httpModule')) {
      // wait till response come back
      value.on('response', function (response) {
        value.pause();
        callback(null, +response.headers['content-length']);
      });
      value.resume();

      // something else
    } else {
      callback('Unknown stream');
    }
  };
  FormData.prototype._multiPartHeader = function (field, value, options) {
    // custom header specified (as string)?
    // it becomes responsible for boundary
    // (e.g. to handle extra CRLFs on .NET servers)
    if (typeof options.header == 'string') {
      return options.header;
    }
    var contentDisposition = this._getContentDisposition(value, options);
    var contentType = this._getContentType(value, options);
    var contents = '';
    var headers = {
      // add custom disposition as third element or keep it two elements if not
      'Content-Disposition': ['form-data', 'name="' + field + '"'].concat(contentDisposition || []),
      // if no content type. allow it to be empty array
      'Content-Type': [].concat(contentType || [])
    };

    // allow custom headers.
    if (typeof options.header == 'object') {
      populate(headers, options.header);
    }
    var header;
    for (var prop in headers) {
      if (Object.prototype.hasOwnProperty.call(headers, prop)) {
        header = headers[prop];

        // skip nullish headers.
        if (header == null) {
          continue;
        }

        // convert all headers to arrays.
        if (!Array.isArray(header)) {
          header = [header];
        }

        // add non-empty headers.
        if (header.length) {
          contents += prop + ': ' + header.join('; ') + FormData.LINE_BREAK;
        }
      }
    }
    return '--' + this.getBoundary() + FormData.LINE_BREAK + contents + FormData.LINE_BREAK;
  };
  FormData.prototype._getContentDisposition = function (value, options) {
    var filename, contentDisposition;
    if (typeof options.filepath === 'string') {
      // custom filepath for relative paths
      filename = path$1.normalize(options.filepath).replace(/\\/g, '/');
    } else if (options.filename || value.name || value.path) {
      // custom filename take precedence
      // formidable and the browser add a name property
      // fs- and request- streams have path property
      filename = path$1.basename(options.filename || value.name || value.path);
    } else if (value.readable && Object.prototype.hasOwnProperty.call(value, 'httpVersion')) {
      // or try http response
      filename = path$1.basename(value.client._httpMessage.path || '');
    }
    if (filename) {
      contentDisposition = 'filename="' + filename + '"';
    }
    return contentDisposition;
  };
  FormData.prototype._getContentType = function (value, options) {
    // use custom content-type above all
    var contentType = options.contentType;

    // or try `name` from formidable, browser
    if (!contentType && value.name) {
      contentType = mime.lookup(value.name);
    }

    // or try `path` from fs-, request- streams
    if (!contentType && value.path) {
      contentType = mime.lookup(value.path);
    }

    // or if it's http-reponse
    if (!contentType && value.readable && Object.prototype.hasOwnProperty.call(value, 'httpVersion')) {
      contentType = value.headers['content-type'];
    }

    // or guess it from the filepath or filename
    if (!contentType && (options.filepath || options.filename)) {
      contentType = mime.lookup(options.filepath || options.filename);
    }

    // fallback to the default content type if `value` is not simple value
    if (!contentType && typeof value == 'object') {
      contentType = FormData.DEFAULT_CONTENT_TYPE;
    }
    return contentType;
  };
  FormData.prototype._multiPartFooter = function () {
    return function (next) {
      var footer = FormData.LINE_BREAK;
      var lastPart = this._streams.length === 0;
      if (lastPart) {
        footer += this._lastBoundary();
      }
      next(footer);
    }.bind(this);
  };
  FormData.prototype._lastBoundary = function () {
    return '--' + this.getBoundary() + '--' + FormData.LINE_BREAK;
  };
  FormData.prototype.getHeaders = function (userHeaders) {
    var header;
    var formHeaders = {
      'content-type': 'multipart/form-data; boundary=' + this.getBoundary()
    };
    for (header in userHeaders) {
      if (Object.prototype.hasOwnProperty.call(userHeaders, header)) {
        formHeaders[header.toLowerCase()] = userHeaders[header];
      }
    }
    return formHeaders;
  };
  FormData.prototype.setBoundary = function (boundary) {
    this._boundary = boundary;
  };
  FormData.prototype.getBoundary = function () {
    if (!this._boundary) {
      this._generateBoundary();
    }
    return this._boundary;
  };
  FormData.prototype.getBuffer = function () {
    var dataBuffer = new Buffer.alloc(0);
    var boundary = this.getBoundary();

    // Create the form content. Add Line breaks to the end of data.
    for (var i = 0, len = this._streams.length; i < len; i++) {
      if (typeof this._streams[i] !== 'function') {
        // Add content to the buffer.
        if (Buffer.isBuffer(this._streams[i])) {
          dataBuffer = Buffer.concat([dataBuffer, this._streams[i]]);
        } else {
          dataBuffer = Buffer.concat([dataBuffer, Buffer.from(this._streams[i])]);
        }

        // Add break after content.
        if (typeof this._streams[i] !== 'string' || this._streams[i].substring(2, boundary.length + 2) !== boundary) {
          dataBuffer = Buffer.concat([dataBuffer, Buffer.from(FormData.LINE_BREAK)]);
        }
      }
    }

    // Add the footer and return the Buffer object.
    return Buffer.concat([dataBuffer, Buffer.from(this._lastBoundary())]);
  };
  FormData.prototype._generateBoundary = function () {
    // This generates a 50 character boundary similar to those used by Firefox.
    // They are optimized for boyer-moore parsing.
    var boundary = '--------------------------';
    for (var i = 0; i < 24; i++) {
      boundary += Math.floor(Math.random() * 10).toString(16);
    }
    this._boundary = boundary;
  };

  // Note: getLengthSync DOESN'T calculate streams length
  // As workaround one can calculate file size manually
  // and add it as knownLength option
  FormData.prototype.getLengthSync = function () {
    var knownLength = this._overheadLength + this._valueLength;

    // Don't get confused, there are 3 "internal" streams for each keyval pair
    // so it basically checks if there is any value added to the form
    if (this._streams.length) {
      knownLength += this._lastBoundary().length;
    }

    // https://github.com/form-data/form-data/issues/40
    if (!this.hasKnownLength()) {
      // Some async length retrievers are present
      // therefore synchronous length calculation is false.
      // Please use getLength(callback) to get proper length
      this._error(new Error('Cannot calculate proper length in synchronous way.'));
    }
    return knownLength;
  };

  // Public API to check if length of added values is known
  // https://github.com/form-data/form-data/issues/196
  // https://github.com/form-data/form-data/issues/262
  FormData.prototype.hasKnownLength = function () {
    var hasKnownLength = true;
    if (this._valuesToMeasure.length) {
      hasKnownLength = false;
    }
    return hasKnownLength;
  };
  FormData.prototype.getLength = function (cb) {
    var knownLength = this._overheadLength + this._valueLength;
    if (this._streams.length) {
      knownLength += this._lastBoundary().length;
    }
    if (!this._valuesToMeasure.length) {
      process.nextTick(cb.bind(this, null, knownLength));
      return;
    }
    asynckit.parallel(this._valuesToMeasure, this._lengthRetriever, function (err, values) {
      if (err) {
        cb(err);
        return;
      }
      values.forEach(function (length) {
        knownLength += length;
      });
      cb(null, knownLength);
    });
  };
  FormData.prototype.submit = function (params, cb) {
    var request,
      options,
      defaults = {
        method: 'post'
      };

    // parse provided url if it's string
    // or treat it as options object
    if (typeof params == 'string') {
      params = parseUrl(params);
      options = populate({
        port: params.port,
        path: params.pathname,
        host: params.hostname,
        protocol: params.protocol
      }, defaults);

      // use custom params
    } else {
      options = populate(params, defaults);
      // if no port provided use default one
      if (!options.port) {
        options.port = options.protocol == 'https:' ? 443 : 80;
      }
    }

    // put that good code in getHeaders to some use
    options.headers = this.getHeaders(params.headers);

    // https if specified, fallback to http in any other case
    if (options.protocol == 'https:') {
      request = https.request(options);
    } else {
      request = http.request(options);
    }

    // get content length and fire away
    this.getLength(function (err, length) {
      if (err && err !== 'Unknown stream') {
        this._error(err);
        return;
      }

      // add content length
      if (length) {
        request.setHeader('Content-Length', length);
      }
      this.pipe(request);
      if (cb) {
        var onResponse;
        var callback = function (error, responce) {
          request.removeListener('error', callback);
          request.removeListener('response', onResponse);
          return cb.call(this, error, responce);
        };
        onResponse = callback.bind(this, null);
        request.on('error', callback);
        request.on('response', onResponse);
      }
    }.bind(this));
    return request;
  };
  FormData.prototype._error = function (err) {
    if (!this.error) {
      this.error = err;
      this.pause();
      this.emit('error', err);
    }
  };
  FormData.prototype.toString = function () {
    return '[object FormData]';
  };
  setToStringTag(FormData, 'FormData');
  return form_data;
}

var form_dataExports = requireForm_data();
var FormData$1 = /*@__PURE__*/getDefaultExportFromCjs(form_dataExports);

/**
 * Determines if the given thing is a array or js object.
 *
 * @param {string} thing - The object or array to be visited.
 *
 * @returns {boolean}
 */
function isVisitable(thing) {
  return utils$1.isPlainObject(thing) || utils$1.isArray(thing);
}

/**
 * It removes the brackets from the end of a string
 *
 * @param {string} key - The key of the parameter.
 *
 * @returns {string} the key without the brackets.
 */
function removeBrackets(key) {
  return utils$1.endsWith(key, '[]') ? key.slice(0, -2) : key;
}

/**
 * It takes a path, a key, and a boolean, and returns a string
 *
 * @param {string} path - The path to the current key.
 * @param {string} key - The key of the current object being iterated over.
 * @param {string} dots - If true, the key will be rendered with dots instead of brackets.
 *
 * @returns {string} The path to the current key.
 */
function renderKey(path, key, dots) {
  if (!path) return key;
  return path.concat(key).map(function each(token, i) {
    // eslint-disable-next-line no-param-reassign
    token = removeBrackets(token);
    return !dots && i ? '[' + token + ']' : token;
  }).join(dots ? '.' : '');
}

/**
 * If the array is an array and none of its elements are visitable, then it's a flat array.
 *
 * @param {Array<any>} arr - The array to check
 *
 * @returns {boolean}
 */
function isFlatArray(arr) {
  return utils$1.isArray(arr) && !arr.some(isVisitable);
}
const predicates = utils$1.toFlatObject(utils$1, {}, null, function filter(prop) {
  return /^is[A-Z]/.test(prop);
});

/**
 * Convert a data object to FormData
 *
 * @param {Object} obj
 * @param {?Object} [formData]
 * @param {?Object} [options]
 * @param {Function} [options.visitor]
 * @param {Boolean} [options.metaTokens = true]
 * @param {Boolean} [options.dots = false]
 * @param {?Boolean} [options.indexes = false]
 *
 * @returns {Object}
 **/

/**
 * It converts an object into a FormData object
 *
 * @param {Object<any, any>} obj - The object to convert to form data.
 * @param {string} formData - The FormData object to append to.
 * @param {Object<string, any>} options
 *
 * @returns
 */
function toFormData$1(obj, formData, options) {
  if (!utils$1.isObject(obj)) {
    throw new TypeError('target must be an object');
  }

  // eslint-disable-next-line no-param-reassign
  formData = formData || new (FormData$1 || FormData)();

  // eslint-disable-next-line no-param-reassign
  options = utils$1.toFlatObject(options, {
    metaTokens: true,
    dots: false,
    indexes: false
  }, false, function defined(option, source) {
    // eslint-disable-next-line no-eq-null,eqeqeq
    return !utils$1.isUndefined(source[option]);
  });
  const metaTokens = options.metaTokens;
  // eslint-disable-next-line no-use-before-define
  const visitor = options.visitor || defaultVisitor;
  const dots = options.dots;
  const indexes = options.indexes;
  const _Blob = options.Blob || typeof Blob !== 'undefined' && Blob;
  const useBlob = _Blob && utils$1.isSpecCompliantForm(formData);
  if (!utils$1.isFunction(visitor)) {
    throw new TypeError('visitor must be a function');
  }
  function convertValue(value) {
    if (value === null) return '';
    if (utils$1.isDate(value)) {
      return value.toISOString();
    }
    if (!useBlob && utils$1.isBlob(value)) {
      throw new AxiosError$1('Blob is not supported. Use a Buffer instead.');
    }
    if (utils$1.isArrayBuffer(value) || utils$1.isTypedArray(value)) {
      return useBlob && typeof Blob === 'function' ? new Blob([value]) : Buffer.from(value);
    }
    return value;
  }

  /**
   * Default visitor.
   *
   * @param {*} value
   * @param {String|Number} key
   * @param {Array<String|Number>} path
   * @this {FormData}
   *
   * @returns {boolean} return true to visit the each prop of the value recursively
   */
  function defaultVisitor(value, key, path) {
    let arr = value;
    if (value && !path && typeof value === 'object') {
      if (utils$1.endsWith(key, '{}')) {
        // eslint-disable-next-line no-param-reassign
        key = metaTokens ? key : key.slice(0, -2);
        // eslint-disable-next-line no-param-reassign
        value = JSON.stringify(value);
      } else if (utils$1.isArray(value) && isFlatArray(value) || (utils$1.isFileList(value) || utils$1.endsWith(key, '[]')) && (arr = utils$1.toArray(value))) {
        // eslint-disable-next-line no-param-reassign
        key = removeBrackets(key);
        arr.forEach(function each(el, index) {
          !(utils$1.isUndefined(el) || el === null) && formData.append(
          // eslint-disable-next-line no-nested-ternary
          indexes === true ? renderKey([key], index, dots) : indexes === null ? key : key + '[]', convertValue(el));
        });
        return false;
      }
    }
    if (isVisitable(value)) {
      return true;
    }
    formData.append(renderKey(path, key, dots), convertValue(value));
    return false;
  }
  const stack = [];
  const exposedHelpers = Object.assign(predicates, {
    defaultVisitor,
    convertValue,
    isVisitable
  });
  function build(value, path) {
    if (utils$1.isUndefined(value)) return;
    if (stack.indexOf(value) !== -1) {
      throw Error('Circular reference detected in ' + path.join('.'));
    }
    stack.push(value);
    utils$1.forEach(value, function each(el, key) {
      const result = !(utils$1.isUndefined(el) || el === null) && visitor.call(formData, el, utils$1.isString(key) ? key.trim() : key, path, exposedHelpers);
      if (result === true) {
        build(el, path ? path.concat(key) : [key]);
      }
    });
    stack.pop();
  }
  if (!utils$1.isObject(obj)) {
    throw new TypeError('data must be an object');
  }
  build(obj);
  return formData;
}

/**
 * It encodes a string by replacing all characters that are not in the unreserved set with
 * their percent-encoded equivalents
 *
 * @param {string} str - The string to encode.
 *
 * @returns {string} The encoded string.
 */
function encode$1(str) {
  const charMap = {
    '!': '%21',
    "'": '%27',
    '(': '%28',
    ')': '%29',
    '~': '%7E',
    '%20': '+',
    '%00': '\x00'
  };
  return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match) {
    return charMap[match];
  });
}

/**
 * It takes a params object and converts it to a FormData object
 *
 * @param {Object<string, any>} params - The parameters to be converted to a FormData object.
 * @param {Object<string, any>} options - The options object passed to the Axios constructor.
 *
 * @returns {void}
 */
function AxiosURLSearchParams(params, options) {
  this._pairs = [];
  params && toFormData$1(params, this, options);
}
const prototype = AxiosURLSearchParams.prototype;
prototype.append = function append(name, value) {
  this._pairs.push([name, value]);
};
prototype.toString = function toString(encoder) {
  const _encode = encoder ? function (value) {
    return encoder.call(this, value, encode$1);
  } : encode$1;
  return this._pairs.map(function each(pair) {
    return _encode(pair[0]) + '=' + _encode(pair[1]);
  }, '').join('&');
};

/**
 * It replaces all instances of the characters `:`, `$`, `,`, `+`, `[`, and `]` with their
 * URI encoded counterparts
 *
 * @param {string} val The value to be encoded.
 *
 * @returns {string} The encoded value.
 */
function encode(val) {
  return encodeURIComponent(val).replace(/%3A/gi, ':').replace(/%24/g, '$').replace(/%2C/gi, ',').replace(/%20/g, '+').replace(/%5B/gi, '[').replace(/%5D/gi, ']');
}

/**
 * Build a URL by appending params to the end
 *
 * @param {string} url The base of the url (e.g., http://www.google.com)
 * @param {object} [params] The params to be appended
 * @param {?(object|Function)} options
 *
 * @returns {string} The formatted url
 */
function buildURL(url, params, options) {
  /*eslint no-param-reassign:0*/
  if (!params) {
    return url;
  }
  const _encode = options && options.encode || encode;
  if (utils$1.isFunction(options)) {
    options = {
      serialize: options
    };
  }
  const serializeFn = options && options.serialize;
  let serializedParams;
  if (serializeFn) {
    serializedParams = serializeFn(params, options);
  } else {
    serializedParams = utils$1.isURLSearchParams(params) ? params.toString() : new AxiosURLSearchParams(params, options).toString(_encode);
  }
  if (serializedParams) {
    const hashmarkIndex = url.indexOf("#");
    if (hashmarkIndex !== -1) {
      url = url.slice(0, hashmarkIndex);
    }
    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
  }
  return url;
}

class InterceptorManager {
  constructor() {
    this.handlers = [];
  }

  /**
   * Add a new interceptor to the stack
   *
   * @param {Function} fulfilled The function to handle `then` for a `Promise`
   * @param {Function} rejected The function to handle `reject` for a `Promise`
   *
   * @return {Number} An ID used to remove interceptor later
   */
  use(fulfilled, rejected, options) {
    this.handlers.push({
      fulfilled,
      rejected,
      synchronous: options ? options.synchronous : false,
      runWhen: options ? options.runWhen : null
    });
    return this.handlers.length - 1;
  }

  /**
   * Remove an interceptor from the stack
   *
   * @param {Number} id The ID that was returned by `use`
   *
   * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise
   */
  eject(id) {
    if (this.handlers[id]) {
      this.handlers[id] = null;
    }
  }

  /**
   * Clear all interceptors from the stack
   *
   * @returns {void}
   */
  clear() {
    if (this.handlers) {
      this.handlers = [];
    }
  }

  /**
   * Iterate over all the registered interceptors
   *
   * This method is particularly useful for skipping over any
   * interceptors that may have become `null` calling `eject`.
   *
   * @param {Function} fn The function to call for each interceptor
   *
   * @returns {void}
   */
  forEach(fn) {
    utils$1.forEach(this.handlers, function forEachHandler(h) {
      if (h !== null) {
        fn(h);
      }
    });
  }
}

var transitionalDefaults = {
  silentJSONParsing: true,
  forcedJSONParsing: true,
  clarifyTimeoutError: false
};

var URLSearchParams = require$$0$2.URLSearchParams;

var platform$1 = {
  isNode: true,
  classes: {
    URLSearchParams,
    FormData: FormData$1,
    Blob: typeof Blob !== 'undefined' && Blob || null
  },
  protocols: ['http', 'https', 'file', 'data']
};

const hasBrowserEnv = typeof window !== 'undefined' && typeof document !== 'undefined';
const _navigator = typeof navigator === 'object' && navigator || undefined;

/**
 * Determine if we're running in a standard browser environment
 *
 * This allows axios to run in a web worker, and react-native.
 * Both environments support XMLHttpRequest, but not fully standard globals.
 *
 * web workers:
 *  typeof window -> undefined
 *  typeof document -> undefined
 *
 * react-native:
 *  navigator.product -> 'ReactNative'
 * nativescript
 *  navigator.product -> 'NativeScript' or 'NS'
 *
 * @returns {boolean}
 */
const hasStandardBrowserEnv = hasBrowserEnv && (!_navigator || ['ReactNative', 'NativeScript', 'NS'].indexOf(_navigator.product) < 0);

/**
 * Determine if we're running in a standard browser webWorker environment
 *
 * Although the `isStandardBrowserEnv` method indicates that
 * `allows axios to run in a web worker`, the WebWorker will still be
 * filtered out due to its judgment standard
 * `typeof window !== 'undefined' && typeof document !== 'undefined'`.
 * This leads to a problem when axios post `FormData` in webWorker
 */
const hasStandardBrowserWebWorkerEnv = (() => {
  return typeof WorkerGlobalScope !== 'undefined' &&
  // eslint-disable-next-line no-undef
  self instanceof WorkerGlobalScope && typeof self.importScripts === 'function';
})();
const origin = hasBrowserEnv && window.location.href || 'http://localhost';

var utils = /*#__PURE__*/Object.freeze({
	__proto__: null,
	hasBrowserEnv: hasBrowserEnv,
	hasStandardBrowserEnv: hasStandardBrowserEnv,
	hasStandardBrowserWebWorkerEnv: hasStandardBrowserWebWorkerEnv,
	navigator: _navigator,
	origin: origin
});

var platform = {
  ...utils,
  ...platform$1
};

function toURLEncodedForm(data, options) {
  return toFormData$1(data, new platform.classes.URLSearchParams(), Object.assign({
    visitor: function (value, key, path, helpers) {
      if (platform.isNode && utils$1.isBuffer(value)) {
        this.append(key, value.toString('base64'));
        return false;
      }
      return helpers.defaultVisitor.apply(this, arguments);
    }
  }, options));
}

/**
 * It takes a string like `foo[x][y][z]` and returns an array like `['foo', 'x', 'y', 'z']
 *
 * @param {string} name - The name of the property to get.
 *
 * @returns An array of strings.
 */
function parsePropPath(name) {
  // foo[x][y][z]
  // foo.x.y.z
  // foo-x-y-z
  // foo x y z
  return utils$1.matchAll(/\w+|\[(\w*)]/g, name).map(match => {
    return match[0] === '[]' ? '' : match[1] || match[0];
  });
}

/**
 * Convert an array to an object.
 *
 * @param {Array<any>} arr - The array to convert to an object.
 *
 * @returns An object with the same keys and values as the array.
 */
function arrayToObject(arr) {
  const obj = {};
  const keys = Object.keys(arr);
  let i;
  const len = keys.length;
  let key;
  for (i = 0; i < len; i++) {
    key = keys[i];
    obj[key] = arr[key];
  }
  return obj;
}

/**
 * It takes a FormData object and returns a JavaScript object
 *
 * @param {string} formData The FormData object to convert to JSON.
 *
 * @returns {Object<string, any> | null} The converted object.
 */
function formDataToJSON(formData) {
  function buildPath(path, value, target, index) {
    let name = path[index++];
    if (name === '__proto__') return true;
    const isNumericKey = Number.isFinite(+name);
    const isLast = index >= path.length;
    name = !name && utils$1.isArray(target) ? target.length : name;
    if (isLast) {
      if (utils$1.hasOwnProp(target, name)) {
        target[name] = [target[name], value];
      } else {
        target[name] = value;
      }
      return !isNumericKey;
    }
    if (!target[name] || !utils$1.isObject(target[name])) {
      target[name] = [];
    }
    const result = buildPath(path, value, target[name], index);
    if (result && utils$1.isArray(target[name])) {
      target[name] = arrayToObject(target[name]);
    }
    return !isNumericKey;
  }
  if (utils$1.isFormData(formData) && utils$1.isFunction(formData.entries)) {
    const obj = {};
    utils$1.forEachEntry(formData, (name, value) => {
      buildPath(parsePropPath(name), value, obj, 0);
    });
    return obj;
  }
  return null;
}

/**
 * It takes a string, tries to parse it, and if it fails, it returns the stringified version
 * of the input
 *
 * @param {any} rawValue - The value to be stringified.
 * @param {Function} parser - A function that parses a string into a JavaScript object.
 * @param {Function} encoder - A function that takes a value and returns a string.
 *
 * @returns {string} A stringified version of the rawValue.
 */
function stringifySafely(rawValue, parser, encoder) {
  if (utils$1.isString(rawValue)) {
    try {
      (parser || JSON.parse)(rawValue);
      return utils$1.trim(rawValue);
    } catch (e) {
      if (e.name !== 'SyntaxError') {
        throw e;
      }
    }
  }
  return (encoder || JSON.stringify)(rawValue);
}
const defaults = {
  transitional: transitionalDefaults,
  adapter: ['xhr', 'http', 'fetch'],
  transformRequest: [function transformRequest(data, headers) {
    const contentType = headers.getContentType() || '';
    const hasJSONContentType = contentType.indexOf('application/json') > -1;
    const isObjectPayload = utils$1.isObject(data);
    if (isObjectPayload && utils$1.isHTMLForm(data)) {
      data = new FormData(data);
    }
    const isFormData = utils$1.isFormData(data);
    if (isFormData) {
      return hasJSONContentType ? JSON.stringify(formDataToJSON(data)) : data;
    }
    if (utils$1.isArrayBuffer(data) || utils$1.isBuffer(data) || utils$1.isStream(data) || utils$1.isFile(data) || utils$1.isBlob(data) || utils$1.isReadableStream(data)) {
      return data;
    }
    if (utils$1.isArrayBufferView(data)) {
      return data.buffer;
    }
    if (utils$1.isURLSearchParams(data)) {
      headers.setContentType('application/x-www-form-urlencoded;charset=utf-8', false);
      return data.toString();
    }
    let isFileList;
    if (isObjectPayload) {
      if (contentType.indexOf('application/x-www-form-urlencoded') > -1) {
        return toURLEncodedForm(data, this.formSerializer).toString();
      }
      if ((isFileList = utils$1.isFileList(data)) || contentType.indexOf('multipart/form-data') > -1) {
        const _FormData = this.env && this.env.FormData;
        return toFormData$1(isFileList ? {
          'files[]': data
        } : data, _FormData && new _FormData(), this.formSerializer);
      }
    }
    if (isObjectPayload || hasJSONContentType) {
      headers.setContentType('application/json', false);
      return stringifySafely(data);
    }
    return data;
  }],
  transformResponse: [function transformResponse(data) {
    const transitional = this.transitional || defaults.transitional;
    const forcedJSONParsing = transitional && transitional.forcedJSONParsing;
    const JSONRequested = this.responseType === 'json';
    if (utils$1.isResponse(data) || utils$1.isReadableStream(data)) {
      return data;
    }
    if (data && utils$1.isString(data) && (forcedJSONParsing && !this.responseType || JSONRequested)) {
      const silentJSONParsing = transitional && transitional.silentJSONParsing;
      const strictJSONParsing = !silentJSONParsing && JSONRequested;
      try {
        return JSON.parse(data);
      } catch (e) {
        if (strictJSONParsing) {
          if (e.name === 'SyntaxError') {
            throw AxiosError$1.from(e, AxiosError$1.ERR_BAD_RESPONSE, this, null, this.response);
          }
          throw e;
        }
      }
    }
    return data;
  }],
  /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */
  timeout: 0,
  xsrfCookieName: 'XSRF-TOKEN',
  xsrfHeaderName: 'X-XSRF-TOKEN',
  maxContentLength: -1,
  maxBodyLength: -1,
  env: {
    FormData: platform.classes.FormData,
    Blob: platform.classes.Blob
  },
  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  },
  headers: {
    common: {
      'Accept': 'application/json, text/plain, */*',
      'Content-Type': undefined
    }
  }
};
utils$1.forEach(['delete', 'get', 'head', 'post', 'put', 'patch'], method => {
  defaults.headers[method] = {};
});

// RawAxiosHeaders whose duplicates are ignored by node
// c.f. https://nodejs.org/api/http.html#http_message_headers
const ignoreDuplicateOf = utils$1.toObjectSet(['age', 'authorization', 'content-length', 'content-type', 'etag', 'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since', 'last-modified', 'location', 'max-forwards', 'proxy-authorization', 'referer', 'retry-after', 'user-agent']);

/**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} rawHeaders Headers needing to be parsed
 *
 * @returns {Object} Headers parsed into an object
 */
var parseHeaders = rawHeaders => {
  const parsed = {};
  let key;
  let val;
  let i;
  rawHeaders && rawHeaders.split('\n').forEach(function parser(line) {
    i = line.indexOf(':');
    key = line.substring(0, i).trim().toLowerCase();
    val = line.substring(i + 1).trim();
    if (!key || parsed[key] && ignoreDuplicateOf[key]) {
      return;
    }
    if (key === 'set-cookie') {
      if (parsed[key]) {
        parsed[key].push(val);
      } else {
        parsed[key] = [val];
      }
    } else {
      parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
    }
  });
  return parsed;
};

const $internals = Symbol('internals');
function normalizeHeader(header) {
  return header && String(header).trim().toLowerCase();
}
function normalizeValue(value) {
  if (value === false || value == null) {
    return value;
  }
  return utils$1.isArray(value) ? value.map(normalizeValue) : String(value);
}
function parseTokens(str) {
  const tokens = Object.create(null);
  const tokensRE = /([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;
  let match;
  while (match = tokensRE.exec(str)) {
    tokens[match[1]] = match[2];
  }
  return tokens;
}
const isValidHeaderName = str => /^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(str.trim());
function matchHeaderValue(context, value, header, filter, isHeaderNameFilter) {
  if (utils$1.isFunction(filter)) {
    return filter.call(this, value, header);
  }
  if (isHeaderNameFilter) {
    value = header;
  }
  if (!utils$1.isString(value)) return;
  if (utils$1.isString(filter)) {
    return value.indexOf(filter) !== -1;
  }
  if (utils$1.isRegExp(filter)) {
    return filter.test(value);
  }
}
function formatHeader(header) {
  return header.trim().toLowerCase().replace(/([a-z\d])(\w*)/g, (w, char, str) => {
    return char.toUpperCase() + str;
  });
}
function buildAccessors(obj, header) {
  const accessorName = utils$1.toCamelCase(' ' + header);
  ['get', 'set', 'has'].forEach(methodName => {
    Object.defineProperty(obj, methodName + accessorName, {
      value: function (arg1, arg2, arg3) {
        return this[methodName].call(this, header, arg1, arg2, arg3);
      },
      configurable: true
    });
  });
}
let AxiosHeaders$1 = class AxiosHeaders {
  constructor(headers) {
    headers && this.set(headers);
  }
  set(header, valueOrRewrite, rewrite) {
    const self = this;
    function setHeader(_value, _header, _rewrite) {
      const lHeader = normalizeHeader(_header);
      if (!lHeader) {
        throw new Error('header name must be a non-empty string');
      }
      const key = utils$1.findKey(self, lHeader);
      if (!key || self[key] === undefined || _rewrite === true || _rewrite === undefined && self[key] !== false) {
        self[key || _header] = normalizeValue(_value);
      }
    }
    const setHeaders = (headers, _rewrite) => utils$1.forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));
    if (utils$1.isPlainObject(header) || header instanceof this.constructor) {
      setHeaders(header, valueOrRewrite);
    } else if (utils$1.isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {
      setHeaders(parseHeaders(header), valueOrRewrite);
    } else if (utils$1.isHeaders(header)) {
      for (const [key, value] of header.entries()) {
        setHeader(value, key, rewrite);
      }
    } else {
      header != null && setHeader(valueOrRewrite, header, rewrite);
    }
    return this;
  }
  get(header, parser) {
    header = normalizeHeader(header);
    if (header) {
      const key = utils$1.findKey(this, header);
      if (key) {
        const value = this[key];
        if (!parser) {
          return value;
        }
        if (parser === true) {
          return parseTokens(value);
        }
        if (utils$1.isFunction(parser)) {
          return parser.call(this, value, key);
        }
        if (utils$1.isRegExp(parser)) {
          return parser.exec(value);
        }
        throw new TypeError('parser must be boolean|regexp|function');
      }
    }
  }
  has(header, matcher) {
    header = normalizeHeader(header);
    if (header) {
      const key = utils$1.findKey(this, header);
      return !!(key && this[key] !== undefined && (!matcher || matchHeaderValue(this, this[key], key, matcher)));
    }
    return false;
  }
  delete(header, matcher) {
    const self = this;
    let deleted = false;
    function deleteHeader(_header) {
      _header = normalizeHeader(_header);
      if (_header) {
        const key = utils$1.findKey(self, _header);
        if (key && (!matcher || matchHeaderValue(self, self[key], key, matcher))) {
          delete self[key];
          deleted = true;
        }
      }
    }
    if (utils$1.isArray(header)) {
      header.forEach(deleteHeader);
    } else {
      deleteHeader(header);
    }
    return deleted;
  }
  clear(matcher) {
    const keys = Object.keys(this);
    let i = keys.length;
    let deleted = false;
    while (i--) {
      const key = keys[i];
      if (!matcher || matchHeaderValue(this, this[key], key, matcher, true)) {
        delete this[key];
        deleted = true;
      }
    }
    return deleted;
  }
  normalize(format) {
    const self = this;
    const headers = {};
    utils$1.forEach(this, (value, header) => {
      const key = utils$1.findKey(headers, header);
      if (key) {
        self[key] = normalizeValue(value);
        delete self[header];
        return;
      }
      const normalized = format ? formatHeader(header) : String(header).trim();
      if (normalized !== header) {
        delete self[header];
      }
      self[normalized] = normalizeValue(value);
      headers[normalized] = true;
    });
    return this;
  }
  concat(...targets) {
    return this.constructor.concat(this, ...targets);
  }
  toJSON(asStrings) {
    const obj = Object.create(null);
    utils$1.forEach(this, (value, header) => {
      value != null && value !== false && (obj[header] = asStrings && utils$1.isArray(value) ? value.join(', ') : value);
    });
    return obj;
  }
  [Symbol.iterator]() {
    return Object.entries(this.toJSON())[Symbol.iterator]();
  }
  toString() {
    return Object.entries(this.toJSON()).map(([header, value]) => header + ': ' + value).join('\n');
  }
  get [Symbol.toStringTag]() {
    return 'AxiosHeaders';
  }
  static from(thing) {
    return thing instanceof this ? thing : new this(thing);
  }
  static concat(first, ...targets) {
    const computed = new this(first);
    targets.forEach(target => computed.set(target));
    return computed;
  }
  static accessor(header) {
    const internals = this[$internals] = this[$internals] = {
      accessors: {}
    };
    const accessors = internals.accessors;
    const prototype = this.prototype;
    function defineAccessor(_header) {
      const lHeader = normalizeHeader(_header);
      if (!accessors[lHeader]) {
        buildAccessors(prototype, _header);
        accessors[lHeader] = true;
      }
    }
    utils$1.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);
    return this;
  }
};
AxiosHeaders$1.accessor(['Content-Type', 'Content-Length', 'Accept', 'Accept-Encoding', 'User-Agent', 'Authorization']);

// reserved names hotfix
utils$1.reduceDescriptors(AxiosHeaders$1.prototype, ({
  value
}, key) => {
  let mapped = key[0].toUpperCase() + key.slice(1); // map `set` => `Set`
  return {
    get: () => value,
    set(headerValue) {
      this[mapped] = headerValue;
    }
  };
});
utils$1.freezeMethods(AxiosHeaders$1);

/**
 * Transform the data for a request or a response
 *
 * @param {Array|Function} fns A single function or Array of functions
 * @param {?Object} response The response object
 *
 * @returns {*} The resulting transformed data
 */
function transformData(fns, response) {
  const config = this || defaults;
  const context = response || config;
  const headers = AxiosHeaders$1.from(context.headers);
  let data = context.data;
  utils$1.forEach(fns, function transform(fn) {
    data = fn.call(config, data, headers.normalize(), response ? response.status : undefined);
  });
  headers.normalize();
  return data;
}

function isCancel$1(value) {
  return !!(value && value.__CANCEL__);
}

/**
 * A `CanceledError` is an object that is thrown when an operation is canceled.
 *
 * @param {string=} message The message.
 * @param {Object=} config The config.
 * @param {Object=} request The request.
 *
 * @returns {CanceledError} The created error.
 */
function CanceledError$1(message, config, request) {
  // eslint-disable-next-line no-eq-null,eqeqeq
  AxiosError$1.call(this, message == null ? 'canceled' : message, AxiosError$1.ERR_CANCELED, config, request);
  this.name = 'CanceledError';
}
utils$1.inherits(CanceledError$1, AxiosError$1, {
  __CANCEL__: true
});

/**
 * Resolve or reject a Promise based on response status.
 *
 * @param {Function} resolve A function that resolves the promise.
 * @param {Function} reject A function that rejects the promise.
 * @param {object} response The response.
 *
 * @returns {object} The response.
 */
function settle(resolve, reject, response) {
  const validateStatus = response.config.validateStatus;
  if (!response.status || !validateStatus || validateStatus(response.status)) {
    resolve(response);
  } else {
    reject(new AxiosError$1('Request failed with status code ' + response.status, [AxiosError$1.ERR_BAD_REQUEST, AxiosError$1.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4], response.config, response.request, response));
  }
}

/**
 * Determines whether the specified URL is absolute
 *
 * @param {string} url The URL to test
 *
 * @returns {boolean} True if the specified URL is absolute, otherwise false
 */
function isAbsoluteURL(url) {
  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
  // by any combination of letters, digits, plus, period, or hyphen.
  return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
}

/**
 * Creates a new URL by combining the specified URLs
 *
 * @param {string} baseURL The base URL
 * @param {string} relativeURL The relative URL
 *
 * @returns {string} The combined URL
 */
function combineURLs(baseURL, relativeURL) {
  return relativeURL ? baseURL.replace(/\/?\/$/, '') + '/' + relativeURL.replace(/^\/+/, '') : baseURL;
}

/**
 * Creates a new URL by combining the baseURL with the requestedURL,
 * only when the requestedURL is not already an absolute URL.
 * If the requestURL is absolute, this function returns the requestedURL untouched.
 *
 * @param {string} baseURL The base URL
 * @param {string} requestedURL Absolute or relative URL to combine
 *
 * @returns {string} The combined full path
 */
function buildFullPath(baseURL, requestedURL) {
  if (baseURL && !isAbsoluteURL(requestedURL)) {
    return combineURLs(baseURL, requestedURL);
  }
  return requestedURL;
}

var proxyFromEnv$1 = {};

var hasRequiredProxyFromEnv;
function requireProxyFromEnv() {
  if (hasRequiredProxyFromEnv) return proxyFromEnv$1;
  hasRequiredProxyFromEnv = 1;
  var parseUrl = require$$0$2.parse;
  var DEFAULT_PORTS = {
    ftp: 21,
    gopher: 70,
    http: 80,
    https: 443,
    ws: 80,
    wss: 443
  };
  var stringEndsWith = String.prototype.endsWith || function (s) {
    return s.length <= this.length && this.indexOf(s, this.length - s.length) !== -1;
  };

  /**
   * @param {string|object} url - The URL, or the result from url.parse.
   * @return {string} The URL of the proxy that should handle the request to the
   *  given URL. If no proxy is set, this will be an empty string.
   */
  function getProxyForUrl(url) {
    var parsedUrl = typeof url === 'string' ? parseUrl(url) : url || {};
    var proto = parsedUrl.protocol;
    var hostname = parsedUrl.host;
    var port = parsedUrl.port;
    if (typeof hostname !== 'string' || !hostname || typeof proto !== 'string') {
      return ''; // Don't proxy URLs without a valid scheme or host.
    }
    proto = proto.split(':', 1)[0];
    // Stripping ports in this way instead of using parsedUrl.hostname to make
    // sure that the brackets around IPv6 addresses are kept.
    hostname = hostname.replace(/:\d*$/, '');
    port = parseInt(port) || DEFAULT_PORTS[proto] || 0;
    if (!shouldProxy(hostname, port)) {
      return ''; // Don't proxy URLs that match NO_PROXY.
    }
    var proxy = getEnv('npm_config_' + proto + '_proxy') || getEnv(proto + '_proxy') || getEnv('npm_config_proxy') || getEnv('all_proxy');
    if (proxy && proxy.indexOf('://') === -1) {
      // Missing scheme in proxy, default to the requested URL's scheme.
      proxy = proto + '://' + proxy;
    }
    return proxy;
  }

  /**
   * Determines whether a given URL should be proxied.
   *
   * @param {string} hostname - The host name of the URL.
   * @param {number} port - The effective port of the URL.
   * @returns {boolean} Whether the given URL should be proxied.
   * @private
   */
  function shouldProxy(hostname, port) {
    var NO_PROXY = (getEnv('npm_config_no_proxy') || getEnv('no_proxy')).toLowerCase();
    if (!NO_PROXY) {
      return true; // Always proxy if NO_PROXY is not set.
    }
    if (NO_PROXY === '*') {
      return false; // Never proxy if wildcard is set.
    }
    return NO_PROXY.split(/[,\s]/).every(function (proxy) {
      if (!proxy) {
        return true; // Skip zero-length hosts.
      }
      var parsedProxy = proxy.match(/^(.+):(\d+)$/);
      var parsedProxyHostname = parsedProxy ? parsedProxy[1] : proxy;
      var parsedProxyPort = parsedProxy ? parseInt(parsedProxy[2]) : 0;
      if (parsedProxyPort && parsedProxyPort !== port) {
        return true; // Skip if ports don't match.
      }
      if (!/^[.*]/.test(parsedProxyHostname)) {
        // No wildcards, so stop proxying if there is an exact match.
        return hostname !== parsedProxyHostname;
      }
      if (parsedProxyHostname.charAt(0) === '*') {
        // Remove leading wildcard.
        parsedProxyHostname = parsedProxyHostname.slice(1);
      }
      // Stop proxying if the hostname ends with the no_proxy host.
      return !stringEndsWith.call(hostname, parsedProxyHostname);
    });
  }

  /**
   * Get the value for an environment variable.
   *
   * @param {string} key - The name of the environment variable.
   * @return {string} The value of the environment variable.
   * @private
   */
  function getEnv(key) {
    return process.env[key.toLowerCase()] || process.env[key.toUpperCase()] || '';
  }
  proxyFromEnv$1.getProxyForUrl = getProxyForUrl;
  return proxyFromEnv$1;
}

var proxyFromEnvExports = requireProxyFromEnv();
var proxyFromEnv = /*@__PURE__*/getDefaultExportFromCjs(proxyFromEnvExports);

var followRedirects$1 = {exports: {}};

var src = {exports: {}};

var browser = {exports: {}};

/**
 * Helpers.
 */
var ms;
var hasRequiredMs;
function requireMs() {
  if (hasRequiredMs) return ms;
  hasRequiredMs = 1;
  var s = 1000;
  var m = s * 60;
  var h = m * 60;
  var d = h * 24;
  var w = d * 7;
  var y = d * 365.25;

  /**
   * Parse or format the given `val`.
   *
   * Options:
   *
   *  - `long` verbose formatting [false]
   *
   * @param {String|Number} val
   * @param {Object} [options]
   * @throws {Error} throw an error if val is not a non-empty string or a number
   * @return {String|Number}
   * @api public
   */

  ms = function (val, options) {
    options = options || {};
    var type = typeof val;
    if (type === 'string' && val.length > 0) {
      return parse(val);
    } else if (type === 'number' && isFinite(val)) {
      return options.long ? fmtLong(val) : fmtShort(val);
    }
    throw new Error('val is not a non-empty string or a valid number. val=' + JSON.stringify(val));
  };

  /**
   * Parse the given `str` and return milliseconds.
   *
   * @param {String} str
   * @return {Number}
   * @api private
   */

  function parse(str) {
    str = String(str);
    if (str.length > 100) {
      return;
    }
    var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(str);
    if (!match) {
      return;
    }
    var n = parseFloat(match[1]);
    var type = (match[2] || 'ms').toLowerCase();
    switch (type) {
      case 'years':
      case 'year':
      case 'yrs':
      case 'yr':
      case 'y':
        return n * y;
      case 'weeks':
      case 'week':
      case 'w':
        return n * w;
      case 'days':
      case 'day':
      case 'd':
        return n * d;
      case 'hours':
      case 'hour':
      case 'hrs':
      case 'hr':
      case 'h':
        return n * h;
      case 'minutes':
      case 'minute':
      case 'mins':
      case 'min':
      case 'm':
        return n * m;
      case 'seconds':
      case 'second':
      case 'secs':
      case 'sec':
      case 's':
        return n * s;
      case 'milliseconds':
      case 'millisecond':
      case 'msecs':
      case 'msec':
      case 'ms':
        return n;
      default:
        return undefined;
    }
  }

  /**
   * Short format for `ms`.
   *
   * @param {Number} ms
   * @return {String}
   * @api private
   */

  function fmtShort(ms) {
    var msAbs = Math.abs(ms);
    if (msAbs >= d) {
      return Math.round(ms / d) + 'd';
    }
    if (msAbs >= h) {
      return Math.round(ms / h) + 'h';
    }
    if (msAbs >= m) {
      return Math.round(ms / m) + 'm';
    }
    if (msAbs >= s) {
      return Math.round(ms / s) + 's';
    }
    return ms + 'ms';
  }

  /**
   * Long format for `ms`.
   *
   * @param {Number} ms
   * @return {String}
   * @api private
   */

  function fmtLong(ms) {
    var msAbs = Math.abs(ms);
    if (msAbs >= d) {
      return plural(ms, msAbs, d, 'day');
    }
    if (msAbs >= h) {
      return plural(ms, msAbs, h, 'hour');
    }
    if (msAbs >= m) {
      return plural(ms, msAbs, m, 'minute');
    }
    if (msAbs >= s) {
      return plural(ms, msAbs, s, 'second');
    }
    return ms + ' ms';
  }

  /**
   * Pluralization helper.
   */

  function plural(ms, msAbs, n, name) {
    var isPlural = msAbs >= n * 1.5;
    return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');
  }
  return ms;
}

var common;
var hasRequiredCommon;
function requireCommon() {
  if (hasRequiredCommon) return common;
  hasRequiredCommon = 1;
  /**
   * This is the common logic for both the Node.js and web browser
   * implementations of `debug()`.
   */

  function setup(env) {
    createDebug.debug = createDebug;
    createDebug.default = createDebug;
    createDebug.coerce = coerce;
    createDebug.disable = disable;
    createDebug.enable = enable;
    createDebug.enabled = enabled;
    createDebug.humanize = requireMs();
    createDebug.destroy = destroy;
    Object.keys(env).forEach(key => {
      createDebug[key] = env[key];
    });

    /**
    * The currently active debug mode names, and names to skip.
    */

    createDebug.names = [];
    createDebug.skips = [];

    /**
    * Map of special "%n" handling functions, for the debug "format" argument.
    *
    * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
    */
    createDebug.formatters = {};

    /**
    * Selects a color for a debug namespace
    * @param {String} namespace The namespace string for the debug instance to be colored
    * @return {Number|String} An ANSI color code for the given namespace
    * @api private
    */
    function selectColor(namespace) {
      let hash = 0;
      for (let i = 0; i < namespace.length; i++) {
        hash = (hash << 5) - hash + namespace.charCodeAt(i);
        hash |= 0; // Convert to 32bit integer
      }
      return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
    }
    createDebug.selectColor = selectColor;

    /**
    * Create a debugger with the given `namespace`.
    *
    * @param {String} namespace
    * @return {Function}
    * @api public
    */
    function createDebug(namespace) {
      let prevTime;
      let enableOverride = null;
      let namespacesCache;
      let enabledCache;
      function debug(...args) {
        // Disabled?
        if (!debug.enabled) {
          return;
        }
        const self = debug;

        // Set `diff` timestamp
        const curr = Number(new Date());
        const ms = curr - (prevTime || curr);
        self.diff = ms;
        self.prev = prevTime;
        self.curr = curr;
        prevTime = curr;
        args[0] = createDebug.coerce(args[0]);
        if (typeof args[0] !== 'string') {
          // Anything else let's inspect with %O
          args.unshift('%O');
        }

        // Apply any `formatters` transformations
        let index = 0;
        args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
          // If we encounter an escaped % then don't increase the array index
          if (match === '%%') {
            return '%';
          }
          index++;
          const formatter = createDebug.formatters[format];
          if (typeof formatter === 'function') {
            const val = args[index];
            match = formatter.call(self, val);

            // Now we need to remove `args[index]` since it's inlined in the `format`
            args.splice(index, 1);
            index--;
          }
          return match;
        });

        // Apply env-specific formatting (colors, etc.)
        createDebug.formatArgs.call(self, args);
        const logFn = self.log || createDebug.log;
        logFn.apply(self, args);
      }
      debug.namespace = namespace;
      debug.useColors = createDebug.useColors();
      debug.color = createDebug.selectColor(namespace);
      debug.extend = extend;
      debug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.

      Object.defineProperty(debug, 'enabled', {
        enumerable: true,
        configurable: false,
        get: () => {
          if (enableOverride !== null) {
            return enableOverride;
          }
          if (namespacesCache !== createDebug.namespaces) {
            namespacesCache = createDebug.namespaces;
            enabledCache = createDebug.enabled(namespace);
          }
          return enabledCache;
        },
        set: v => {
          enableOverride = v;
        }
      });

      // Env-specific initialization logic for debug instances
      if (typeof createDebug.init === 'function') {
        createDebug.init(debug);
      }
      return debug;
    }
    function extend(namespace, delimiter) {
      const newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);
      newDebug.log = this.log;
      return newDebug;
    }

    /**
    * Enables a debug mode by namespaces. This can include modes
    * separated by a colon and wildcards.
    *
    * @param {String} namespaces
    * @api public
    */
    function enable(namespaces) {
      createDebug.save(namespaces);
      createDebug.namespaces = namespaces;
      createDebug.names = [];
      createDebug.skips = [];
      const split = (typeof namespaces === 'string' ? namespaces : '').trim().replace(' ', ',').split(',').filter(Boolean);
      for (const ns of split) {
        if (ns[0] === '-') {
          createDebug.skips.push(ns.slice(1));
        } else {
          createDebug.names.push(ns);
        }
      }
    }

    /**
     * Checks if the given string matches a namespace template, honoring
     * asterisks as wildcards.
     *
     * @param {String} search
     * @param {String} template
     * @return {Boolean}
     */
    function matchesTemplate(search, template) {
      let searchIndex = 0;
      let templateIndex = 0;
      let starIndex = -1;
      let matchIndex = 0;
      while (searchIndex < search.length) {
        if (templateIndex < template.length && (template[templateIndex] === search[searchIndex] || template[templateIndex] === '*')) {
          // Match character or proceed with wildcard
          if (template[templateIndex] === '*') {
            starIndex = templateIndex;
            matchIndex = searchIndex;
            templateIndex++; // Skip the '*'
          } else {
            searchIndex++;
            templateIndex++;
          }
        } else if (starIndex !== -1) {
          // eslint-disable-line no-negated-condition
          // Backtrack to the last '*' and try to match more characters
          templateIndex = starIndex + 1;
          matchIndex++;
          searchIndex = matchIndex;
        } else {
          return false; // No match
        }
      }

      // Handle trailing '*' in template
      while (templateIndex < template.length && template[templateIndex] === '*') {
        templateIndex++;
      }
      return templateIndex === template.length;
    }

    /**
    * Disable debug output.
    *
    * @return {String} namespaces
    * @api public
    */
    function disable() {
      const namespaces = [...createDebug.names, ...createDebug.skips.map(namespace => '-' + namespace)].join(',');
      createDebug.enable('');
      return namespaces;
    }

    /**
    * Returns true if the given mode name is enabled, false otherwise.
    *
    * @param {String} name
    * @return {Boolean}
    * @api public
    */
    function enabled(name) {
      for (const skip of createDebug.skips) {
        if (matchesTemplate(name, skip)) {
          return false;
        }
      }
      for (const ns of createDebug.names) {
        if (matchesTemplate(name, ns)) {
          return true;
        }
      }
      return false;
    }

    /**
    * Coerce `val`.
    *
    * @param {Mixed} val
    * @return {Mixed}
    * @api private
    */
    function coerce(val) {
      if (val instanceof Error) {
        return val.stack || val.message;
      }
      return val;
    }

    /**
    * XXX DO NOT USE. This is a temporary stub function.
    * XXX It WILL be removed in the next major release.
    */
    function destroy() {
      console.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');
    }
    createDebug.enable(createDebug.load());
    return createDebug;
  }
  common = setup;
  return common;
}

/* eslint-env browser */
var hasRequiredBrowser;
function requireBrowser() {
  if (hasRequiredBrowser) return browser.exports;
  hasRequiredBrowser = 1;
  (function (module, exports) {
    /**
     * This is the web browser implementation of `debug()`.
     */

    exports.formatArgs = formatArgs;
    exports.save = save;
    exports.load = load;
    exports.useColors = useColors;
    exports.storage = localstorage();
    exports.destroy = (() => {
      let warned = false;
      return () => {
        if (!warned) {
          warned = true;
          console.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');
        }
      };
    })();

    /**
     * Colors.
     */

    exports.colors = ['#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC', '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF', '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC', '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF', '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC', '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033', '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366', '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933', '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC', '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF', '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'];

    /**
     * Currently only WebKit-based Web Inspectors, Firefox >= v31,
     * and the Firebug extension (any Firefox version) are known
     * to support "%c" CSS customizations.
     *
     * TODO: add a `localStorage` variable to explicitly enable/disable colors
     */

    // eslint-disable-next-line complexity
    function useColors() {
      // NB: In an Electron preload script, document will be defined but not fully
      // initialized. Since we know we're in Chrome, we'll just detect this case
      // explicitly
      if (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {
        return true;
      }

      // Internet Explorer and Edge do not support colors.
      if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
        return false;
      }
      let m;

      // Is webkit? http://stackoverflow.com/a/16459606/376773
      // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
      // eslint-disable-next-line no-return-assign
      return typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance ||
      // Is firebug? http://stackoverflow.com/a/398120/376773
      typeof window !== 'undefined' && window.console && (window.console.firebug || window.console.exception && window.console.table) ||
      // Is firefox >= v31?
      // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
      typeof navigator !== 'undefined' && navigator.userAgent && (m = navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)) && parseInt(m[1], 10) >= 31 ||
      // Double check webkit in userAgent just in case we are in a worker
      typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
    }

    /**
     * Colorize log arguments if enabled.
     *
     * @api public
     */

    function formatArgs(args) {
      args[0] = (this.useColors ? '%c' : '') + this.namespace + (this.useColors ? ' %c' : ' ') + args[0] + (this.useColors ? '%c ' : ' ') + '+' + module.exports.humanize(this.diff);
      if (!this.useColors) {
        return;
      }
      const c = 'color: ' + this.color;
      args.splice(1, 0, c, 'color: inherit');

      // The final "%c" is somewhat tricky, because there could be other
      // arguments passed either before or after the %c, so we need to
      // figure out the correct index to insert the CSS into
      let index = 0;
      let lastC = 0;
      args[0].replace(/%[a-zA-Z%]/g, match => {
        if (match === '%%') {
          return;
        }
        index++;
        if (match === '%c') {
          // We only are interested in the *last* %c
          // (the user may have provided their own)
          lastC = index;
        }
      });
      args.splice(lastC, 0, c);
    }

    /**
     * Invokes `console.debug()` when available.
     * No-op when `console.debug` is not a "function".
     * If `console.debug` is not available, falls back
     * to `console.log`.
     *
     * @api public
     */
    exports.log = console.debug || console.log || (() => {});

    /**
     * Save `namespaces`.
     *
     * @param {String} namespaces
     * @api private
     */
    function save(namespaces) {
      try {
        if (namespaces) {
          exports.storage.setItem('debug', namespaces);
        } else {
          exports.storage.removeItem('debug');
        }
      } catch (error) {
        // Swallow
        // XXX (@Qix-) should we be logging these?
      }
    }

    /**
     * Load `namespaces`.
     *
     * @return {String} returns the previously persisted debug modes
     * @api private
     */
    function load() {
      let r;
      try {
        r = exports.storage.getItem('debug');
      } catch (error) {
        // Swallow
        // XXX (@Qix-) should we be logging these?
      }

      // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
      if (!r && typeof process !== 'undefined' && 'env' in process) {
        r = process.env.DEBUG;
      }
      return r;
    }

    /**
     * Localstorage attempts to return the localstorage.
     *
     * This is necessary because safari throws
     * when a user disables cookies/localstorage
     * and you attempt to access it.
     *
     * @return {LocalStorage}
     * @api private
     */

    function localstorage() {
      try {
        // TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context
        // The Browser also has localStorage in the global context.
        return localStorage;
      } catch (error) {
        // Swallow
        // XXX (@Qix-) should we be logging these?
      }
    }
    module.exports = requireCommon()(exports);
    const {
      formatters
    } = module.exports;

    /**
     * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
     */

    formatters.j = function (v) {
      try {
        return JSON.stringify(v);
      } catch (error) {
        return '[UnexpectedJSONParseError]: ' + error.message;
      }
    };
  })(browser, browser.exports);
  return browser.exports;
}

var node = {exports: {}};

var hasFlag;
var hasRequiredHasFlag;
function requireHasFlag() {
  if (hasRequiredHasFlag) return hasFlag;
  hasRequiredHasFlag = 1;
  hasFlag = (flag, argv = process.argv) => {
    const prefix = flag.startsWith('-') ? '' : flag.length === 1 ? '-' : '--';
    const position = argv.indexOf(prefix + flag);
    const terminatorPosition = argv.indexOf('--');
    return position !== -1 && (terminatorPosition === -1 || position < terminatorPosition);
  };
  return hasFlag;
}

var supportsColor_1;
var hasRequiredSupportsColor;
function requireSupportsColor() {
  if (hasRequiredSupportsColor) return supportsColor_1;
  hasRequiredSupportsColor = 1;
  const os = require$$0$3;
  const tty = require$$1$1;
  const hasFlag = requireHasFlag();
  const {
    env
  } = process;
  let forceColor;
  if (hasFlag('no-color') || hasFlag('no-colors') || hasFlag('color=false') || hasFlag('color=never')) {
    forceColor = 0;
  } else if (hasFlag('color') || hasFlag('colors') || hasFlag('color=true') || hasFlag('color=always')) {
    forceColor = 1;
  }
  if ('FORCE_COLOR' in env) {
    if (env.FORCE_COLOR === 'true') {
      forceColor = 1;
    } else if (env.FORCE_COLOR === 'false') {
      forceColor = 0;
    } else {
      forceColor = env.FORCE_COLOR.length === 0 ? 1 : Math.min(parseInt(env.FORCE_COLOR, 10), 3);
    }
  }
  function translateLevel(level) {
    if (level === 0) {
      return false;
    }
    return {
      level,
      hasBasic: true,
      has256: level >= 2,
      has16m: level >= 3
    };
  }
  function supportsColor(haveStream, streamIsTTY) {
    if (forceColor === 0) {
      return 0;
    }
    if (hasFlag('color=16m') || hasFlag('color=full') || hasFlag('color=truecolor')) {
      return 3;
    }
    if (hasFlag('color=256')) {
      return 2;
    }
    if (haveStream && !streamIsTTY && forceColor === undefined) {
      return 0;
    }
    const min = forceColor || 0;
    if (env.TERM === 'dumb') {
      return min;
    }
    if (process.platform === 'win32') {
      // Windows 10 build 10586 is the first Windows release that supports 256 colors.
      // Windows 10 build 14931 is the first release that supports 16m/TrueColor.
      const osRelease = os.release().split('.');
      if (Number(osRelease[0]) >= 10 && Number(osRelease[2]) >= 10586) {
        return Number(osRelease[2]) >= 14931 ? 3 : 2;
      }
      return 1;
    }
    if ('CI' in env) {
      if (['TRAVIS', 'CIRCLECI', 'APPVEYOR', 'GITLAB_CI', 'GITHUB_ACTIONS', 'BUILDKITE'].some(sign => sign in env) || env.CI_NAME === 'codeship') {
        return 1;
      }
      return min;
    }
    if ('TEAMCITY_VERSION' in env) {
      return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;
    }
    if (env.COLORTERM === 'truecolor') {
      return 3;
    }
    if ('TERM_PROGRAM' in env) {
      const version = parseInt((env.TERM_PROGRAM_VERSION || '').split('.')[0], 10);
      switch (env.TERM_PROGRAM) {
        case 'iTerm.app':
          return version >= 3 ? 3 : 2;
        case 'Apple_Terminal':
          return 2;
        // No default
      }
    }
    if (/-256(color)?$/i.test(env.TERM)) {
      return 2;
    }
    if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {
      return 1;
    }
    if ('COLORTERM' in env) {
      return 1;
    }
    return min;
  }
  function getSupportLevel(stream) {
    const level = supportsColor(stream, stream && stream.isTTY);
    return translateLevel(level);
  }
  supportsColor_1 = {
    supportsColor: getSupportLevel,
    stdout: translateLevel(supportsColor(true, tty.isatty(1))),
    stderr: translateLevel(supportsColor(true, tty.isatty(2)))
  };
  return supportsColor_1;
}

/**
 * Module dependencies.
 */
var hasRequiredNode;
function requireNode() {
  if (hasRequiredNode) return node.exports;
  hasRequiredNode = 1;
  (function (module, exports) {
    const tty = require$$1$1;
    const util = require$$1;

    /**
     * This is the Node.js implementation of `debug()`.
     */

    exports.init = init;
    exports.log = log;
    exports.formatArgs = formatArgs;
    exports.save = save;
    exports.load = load;
    exports.useColors = useColors;
    exports.destroy = util.deprecate(() => {}, 'Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');

    /**
     * Colors.
     */

    exports.colors = [6, 2, 3, 4, 5, 1];
    try {
      // Optional dependency (as in, doesn't need to be installed, NOT like optionalDependencies in package.json)
      // eslint-disable-next-line import/no-extraneous-dependencies
      const supportsColor = requireSupportsColor();
      if (supportsColor && (supportsColor.stderr || supportsColor).level >= 2) {
        exports.colors = [20, 21, 26, 27, 32, 33, 38, 39, 40, 41, 42, 43, 44, 45, 56, 57, 62, 63, 68, 69, 74, 75, 76, 77, 78, 79, 80, 81, 92, 93, 98, 99, 112, 113, 128, 129, 134, 135, 148, 149, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 178, 179, 184, 185, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 214, 215, 220, 221];
      }
    } catch (error) {
      // Swallow - we only care if `supports-color` is available; it doesn't have to be.
    }

    /**
     * Build up the default `inspectOpts` object from the environment variables.
     *
     *   $ DEBUG_COLORS=no DEBUG_DEPTH=10 DEBUG_SHOW_HIDDEN=enabled node script.js
     */

    exports.inspectOpts = Object.keys(process.env).filter(key => {
      return /^debug_/i.test(key);
    }).reduce((obj, key) => {
      // Camel-case
      const prop = key.substring(6).toLowerCase().replace(/_([a-z])/g, (_, k) => {
        return k.toUpperCase();
      });

      // Coerce string value into JS value
      let val = process.env[key];
      if (/^(yes|on|true|enabled)$/i.test(val)) {
        val = true;
      } else if (/^(no|off|false|disabled)$/i.test(val)) {
        val = false;
      } else if (val === 'null') {
        val = null;
      } else {
        val = Number(val);
      }
      obj[prop] = val;
      return obj;
    }, {});

    /**
     * Is stdout a TTY? Colored output is enabled when `true`.
     */

    function useColors() {
      return 'colors' in exports.inspectOpts ? Boolean(exports.inspectOpts.colors) : tty.isatty(process.stderr.fd);
    }

    /**
     * Adds ANSI color escape codes if enabled.
     *
     * @api public
     */

    function formatArgs(args) {
      const {
        namespace: name,
        useColors
      } = this;
      if (useColors) {
        const c = this.color;
        const colorCode = '\u001B[3' + (c < 8 ? c : '8;5;' + c);
        const prefix = `  ${colorCode};1m${name} \u001B[0m`;
        args[0] = prefix + args[0].split('\n').join('\n' + prefix);
        args.push(colorCode + 'm+' + module.exports.humanize(this.diff) + '\u001B[0m');
      } else {
        args[0] = getDate() + name + ' ' + args[0];
      }
    }
    function getDate() {
      if (exports.inspectOpts.hideDate) {
        return '';
      }
      return new Date().toISOString() + ' ';
    }

    /**
     * Invokes `util.formatWithOptions()` with the specified arguments and writes to stderr.
     */

    function log(...args) {
      return process.stderr.write(util.formatWithOptions(exports.inspectOpts, ...args) + '\n');
    }

    /**
     * Save `namespaces`.
     *
     * @param {String} namespaces
     * @api private
     */
    function save(namespaces) {
      if (namespaces) {
        process.env.DEBUG = namespaces;
      } else {
        // If you set a process.env field to null or undefined, it gets cast to the
        // string 'null' or 'undefined'. Just delete instead.
        delete process.env.DEBUG;
      }
    }

    /**
     * Load `namespaces`.
     *
     * @return {String} returns the previously persisted debug modes
     * @api private
     */

    function load() {
      return process.env.DEBUG;
    }

    /**
     * Init logic for `debug` instances.
     *
     * Create a new `inspectOpts` object in case `useColors` is set
     * differently for a particular `debug` instance.
     */

    function init(debug) {
      debug.inspectOpts = {};
      const keys = Object.keys(exports.inspectOpts);
      for (let i = 0; i < keys.length; i++) {
        debug.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];
      }
    }
    module.exports = requireCommon()(exports);
    const {
      formatters
    } = module.exports;

    /**
     * Map %o to `util.inspect()`, all on a single line.
     */

    formatters.o = function (v) {
      this.inspectOpts.colors = this.useColors;
      return util.inspect(v, this.inspectOpts).split('\n').map(str => str.trim()).join(' ');
    };

    /**
     * Map %O to `util.inspect()`, allowing multiple lines if needed.
     */

    formatters.O = function (v) {
      this.inspectOpts.colors = this.useColors;
      return util.inspect(v, this.inspectOpts);
    };
  })(node, node.exports);
  return node.exports;
}

/**
 * Detect Electron renderer / nwjs process, which is node, but we should
 * treat as a browser.
 */
var hasRequiredSrc;
function requireSrc() {
  if (hasRequiredSrc) return src.exports;
  hasRequiredSrc = 1;
  if (typeof process === 'undefined' || process.type === 'renderer' || process.browser === true || process.__nwjs) {
    src.exports = requireBrowser();
  } else {
    src.exports = requireNode();
  }
  return src.exports;
}

var debug_1;
var hasRequiredDebug;
function requireDebug() {
  if (hasRequiredDebug) return debug_1;
  hasRequiredDebug = 1;
  var debug;
  debug_1 = function () {
    if (!debug) {
      try {
        /* eslint global-require: off */
        debug = requireSrc()("follow-redirects");
      } catch (error) {/* */}
      if (typeof debug !== "function") {
        debug = function () {/* */};
      }
    }
    debug.apply(null, arguments);
  };
  return debug_1;
}

var hasRequiredFollowRedirects;
function requireFollowRedirects() {
  if (hasRequiredFollowRedirects) return followRedirects$1.exports;
  hasRequiredFollowRedirects = 1;
  var url = require$$0$2;
  var URL = url.URL;
  var http = require$$3$1;
  var https = require$$4;
  var Writable = stream.Writable;
  var assert = require$$4$1;
  var debug = requireDebug();

  // Preventive platform detection
  // istanbul ignore next
  (function detectUnsupportedEnvironment() {
    var looksLikeNode = typeof process !== "undefined";
    var looksLikeBrowser = typeof window !== "undefined" && typeof document !== "undefined";
    var looksLikeV8 = isFunction(Error.captureStackTrace);
    if (!looksLikeNode && (looksLikeBrowser || !looksLikeV8)) {
      console.warn("The follow-redirects package should be excluded from browser builds.");
    }
  })();

  // Whether to use the native URL object or the legacy url module
  var useNativeURL = false;
  try {
    assert(new URL(""));
  } catch (error) {
    useNativeURL = error.code === "ERR_INVALID_URL";
  }

  // URL fields to preserve in copy operations
  var preservedUrlFields = ["auth", "host", "hostname", "href", "path", "pathname", "port", "protocol", "query", "search", "hash"];

  // Create handlers that pass events from native requests
  var events = ["abort", "aborted", "connect", "error", "socket", "timeout"];
  var eventHandlers = Object.create(null);
  events.forEach(function (event) {
    eventHandlers[event] = function (arg1, arg2, arg3) {
      this._redirectable.emit(event, arg1, arg2, arg3);
    };
  });

  // Error types with codes
  var InvalidUrlError = createErrorType("ERR_INVALID_URL", "Invalid URL", TypeError);
  var RedirectionError = createErrorType("ERR_FR_REDIRECTION_FAILURE", "Redirected request failed");
  var TooManyRedirectsError = createErrorType("ERR_FR_TOO_MANY_REDIRECTS", "Maximum number of redirects exceeded", RedirectionError);
  var MaxBodyLengthExceededError = createErrorType("ERR_FR_MAX_BODY_LENGTH_EXCEEDED", "Request body larger than maxBodyLength limit");
  var WriteAfterEndError = createErrorType("ERR_STREAM_WRITE_AFTER_END", "write after end");

  // istanbul ignore next
  var destroy = Writable.prototype.destroy || noop;

  // An HTTP(S) request that can be redirected
  function RedirectableRequest(options, responseCallback) {
    // Initialize the request
    Writable.call(this);
    this._sanitizeOptions(options);
    this._options = options;
    this._ended = false;
    this._ending = false;
    this._redirectCount = 0;
    this._redirects = [];
    this._requestBodyLength = 0;
    this._requestBodyBuffers = [];

    // Attach a callback if passed
    if (responseCallback) {
      this.on("response", responseCallback);
    }

    // React to responses of native requests
    var self = this;
    this._onNativeResponse = function (response) {
      try {
        self._processResponse(response);
      } catch (cause) {
        self.emit("error", cause instanceof RedirectionError ? cause : new RedirectionError({
          cause: cause
        }));
      }
    };

    // Perform the first request
    this._performRequest();
  }
  RedirectableRequest.prototype = Object.create(Writable.prototype);
  RedirectableRequest.prototype.abort = function () {
    destroyRequest(this._currentRequest);
    this._currentRequest.abort();
    this.emit("abort");
  };
  RedirectableRequest.prototype.destroy = function (error) {
    destroyRequest(this._currentRequest, error);
    destroy.call(this, error);
    return this;
  };

  // Writes buffered data to the current native request
  RedirectableRequest.prototype.write = function (data, encoding, callback) {
    // Writing is not allowed if end has been called
    if (this._ending) {
      throw new WriteAfterEndError();
    }

    // Validate input and shift parameters if necessary
    if (!isString(data) && !isBuffer(data)) {
      throw new TypeError("data should be a string, Buffer or Uint8Array");
    }
    if (isFunction(encoding)) {
      callback = encoding;
      encoding = null;
    }

    // Ignore empty buffers, since writing them doesn't invoke the callback
    // https://github.com/nodejs/node/issues/22066
    if (data.length === 0) {
      if (callback) {
        callback();
      }
      return;
    }
    // Only write when we don't exceed the maximum body length
    if (this._requestBodyLength + data.length <= this._options.maxBodyLength) {
      this._requestBodyLength += data.length;
      this._requestBodyBuffers.push({
        data: data,
        encoding: encoding
      });
      this._currentRequest.write(data, encoding, callback);
    }
    // Error when we exceed the maximum body length
    else {
      this.emit("error", new MaxBodyLengthExceededError());
      this.abort();
    }
  };

  // Ends the current native request
  RedirectableRequest.prototype.end = function (data, encoding, callback) {
    // Shift parameters if necessary
    if (isFunction(data)) {
      callback = data;
      data = encoding = null;
    } else if (isFunction(encoding)) {
      callback = encoding;
      encoding = null;
    }

    // Write data if needed and end
    if (!data) {
      this._ended = this._ending = true;
      this._currentRequest.end(null, null, callback);
    } else {
      var self = this;
      var currentRequest = this._currentRequest;
      this.write(data, encoding, function () {
        self._ended = true;
        currentRequest.end(null, null, callback);
      });
      this._ending = true;
    }
  };

  // Sets a header value on the current native request
  RedirectableRequest.prototype.setHeader = function (name, value) {
    this._options.headers[name] = value;
    this._currentRequest.setHeader(name, value);
  };

  // Clears a header value on the current native request
  RedirectableRequest.prototype.removeHeader = function (name) {
    delete this._options.headers[name];
    this._currentRequest.removeHeader(name);
  };

  // Global timeout for all underlying requests
  RedirectableRequest.prototype.setTimeout = function (msecs, callback) {
    var self = this;

    // Destroys the socket on timeout
    function destroyOnTimeout(socket) {
      socket.setTimeout(msecs);
      socket.removeListener("timeout", socket.destroy);
      socket.addListener("timeout", socket.destroy);
    }

    // Sets up a timer to trigger a timeout event
    function startTimer(socket) {
      if (self._timeout) {
        clearTimeout(self._timeout);
      }
      self._timeout = setTimeout(function () {
        self.emit("timeout");
        clearTimer();
      }, msecs);
      destroyOnTimeout(socket);
    }

    // Stops a timeout from triggering
    function clearTimer() {
      // Clear the timeout
      if (self._timeout) {
        clearTimeout(self._timeout);
        self._timeout = null;
      }

      // Clean up all attached listeners
      self.removeListener("abort", clearTimer);
      self.removeListener("error", clearTimer);
      self.removeListener("response", clearTimer);
      self.removeListener("close", clearTimer);
      if (callback) {
        self.removeListener("timeout", callback);
      }
      if (!self.socket) {
        self._currentRequest.removeListener("socket", startTimer);
      }
    }

    // Attach callback if passed
    if (callback) {
      this.on("timeout", callback);
    }

    // Start the timer if or when the socket is opened
    if (this.socket) {
      startTimer(this.socket);
    } else {
      this._currentRequest.once("socket", startTimer);
    }

    // Clean up on events
    this.on("socket", destroyOnTimeout);
    this.on("abort", clearTimer);
    this.on("error", clearTimer);
    this.on("response", clearTimer);
    this.on("close", clearTimer);
    return this;
  };

  // Proxy all other public ClientRequest methods
  ["flushHeaders", "getHeader", "setNoDelay", "setSocketKeepAlive"].forEach(function (method) {
    RedirectableRequest.prototype[method] = function (a, b) {
      return this._currentRequest[method](a, b);
    };
  });

  // Proxy all public ClientRequest properties
  ["aborted", "connection", "socket"].forEach(function (property) {
    Object.defineProperty(RedirectableRequest.prototype, property, {
      get: function () {
        return this._currentRequest[property];
      }
    });
  });
  RedirectableRequest.prototype._sanitizeOptions = function (options) {
    // Ensure headers are always present
    if (!options.headers) {
      options.headers = {};
    }

    // Since http.request treats host as an alias of hostname,
    // but the url module interprets host as hostname plus port,
    // eliminate the host property to avoid confusion.
    if (options.host) {
      // Use hostname if set, because it has precedence
      if (!options.hostname) {
        options.hostname = options.host;
      }
      delete options.host;
    }

    // Complete the URL object when necessary
    if (!options.pathname && options.path) {
      var searchPos = options.path.indexOf("?");
      if (searchPos < 0) {
        options.pathname = options.path;
      } else {
        options.pathname = options.path.substring(0, searchPos);
        options.search = options.path.substring(searchPos);
      }
    }
  };

  // Executes the next native request (initial or redirect)
  RedirectableRequest.prototype._performRequest = function () {
    // Load the native protocol
    var protocol = this._options.protocol;
    var nativeProtocol = this._options.nativeProtocols[protocol];
    if (!nativeProtocol) {
      throw new TypeError("Unsupported protocol " + protocol);
    }

    // If specified, use the agent corresponding to the protocol
    // (HTTP and HTTPS use different types of agents)
    if (this._options.agents) {
      var scheme = protocol.slice(0, -1);
      this._options.agent = this._options.agents[scheme];
    }

    // Create the native request and set up its event handlers
    var request = this._currentRequest = nativeProtocol.request(this._options, this._onNativeResponse);
    request._redirectable = this;
    for (var event of events) {
      request.on(event, eventHandlers[event]);
    }

    // RFC7230§5.3.1: When making a request directly to an origin server, […]
    // a client MUST send only the absolute path […] as the request-target.
    this._currentUrl = /^\//.test(this._options.path) ? url.format(this._options) :
    // When making a request to a proxy, […]
    // a client MUST send the target URI in absolute-form […].
    this._options.path;

    // End a redirected request
    // (The first request must be ended explicitly with RedirectableRequest#end)
    if (this._isRedirect) {
      // Write the request entity and end
      var i = 0;
      var self = this;
      var buffers = this._requestBodyBuffers;
      (function writeNext(error) {
        // Only write if this request has not been redirected yet
        // istanbul ignore else
        if (request === self._currentRequest) {
          // Report any write errors
          // istanbul ignore if
          if (error) {
            self.emit("error", error);
          }
          // Write the next buffer if there are still left
          else if (i < buffers.length) {
            var buffer = buffers[i++];
            // istanbul ignore else
            if (!request.finished) {
              request.write(buffer.data, buffer.encoding, writeNext);
            }
          }
          // End the request if `end` has been called on us
          else if (self._ended) {
            request.end();
          }
        }
      })();
    }
  };

  // Processes a response from the current native request
  RedirectableRequest.prototype._processResponse = function (response) {
    // Store the redirected response
    var statusCode = response.statusCode;
    if (this._options.trackRedirects) {
      this._redirects.push({
        url: this._currentUrl,
        headers: response.headers,
        statusCode: statusCode
      });
    }

    // RFC7231§6.4: The 3xx (Redirection) class of status code indicates
    // that further action needs to be taken by the user agent in order to
    // fulfill the request. If a Location header field is provided,
    // the user agent MAY automatically redirect its request to the URI
    // referenced by the Location field value,
    // even if the specific status code is not understood.

    // If the response is not a redirect; return it as-is
    var location = response.headers.location;
    if (!location || this._options.followRedirects === false || statusCode < 300 || statusCode >= 400) {
      response.responseUrl = this._currentUrl;
      response.redirects = this._redirects;
      this.emit("response", response);

      // Clean up
      this._requestBodyBuffers = [];
      return;
    }

    // The response is a redirect, so abort the current request
    destroyRequest(this._currentRequest);
    // Discard the remainder of the response to avoid waiting for data
    response.destroy();

    // RFC7231§6.4: A client SHOULD detect and intervene
    // in cyclical redirections (i.e., "infinite" redirection loops).
    if (++this._redirectCount > this._options.maxRedirects) {
      throw new TooManyRedirectsError();
    }

    // Store the request headers if applicable
    var requestHeaders;
    var beforeRedirect = this._options.beforeRedirect;
    if (beforeRedirect) {
      requestHeaders = Object.assign({
        // The Host header was set by nativeProtocol.request
        Host: response.req.getHeader("host")
      }, this._options.headers);
    }

    // RFC7231§6.4: Automatic redirection needs to done with
    // care for methods not known to be safe, […]
    // RFC7231§6.4.2–3: For historical reasons, a user agent MAY change
    // the request method from POST to GET for the subsequent request.
    var method = this._options.method;
    if ((statusCode === 301 || statusCode === 302) && this._options.method === "POST" ||
    // RFC7231§6.4.4: The 303 (See Other) status code indicates that
    // the server is redirecting the user agent to a different resource […]
    // A user agent can perform a retrieval request targeting that URI
    // (a GET or HEAD request if using HTTP) […]
    statusCode === 303 && !/^(?:GET|HEAD)$/.test(this._options.method)) {
      this._options.method = "GET";
      // Drop a possible entity and headers related to it
      this._requestBodyBuffers = [];
      removeMatchingHeaders(/^content-/i, this._options.headers);
    }

    // Drop the Host header, as the redirect might lead to a different host
    var currentHostHeader = removeMatchingHeaders(/^host$/i, this._options.headers);

    // If the redirect is relative, carry over the host of the last request
    var currentUrlParts = parseUrl(this._currentUrl);
    var currentHost = currentHostHeader || currentUrlParts.host;
    var currentUrl = /^\w+:/.test(location) ? this._currentUrl : url.format(Object.assign(currentUrlParts, {
      host: currentHost
    }));

    // Create the redirected request
    var redirectUrl = resolveUrl(location, currentUrl);
    debug("redirecting to", redirectUrl.href);
    this._isRedirect = true;
    spreadUrlObject(redirectUrl, this._options);

    // Drop confidential headers when redirecting to a less secure protocol
    // or to a different domain that is not a superdomain
    if (redirectUrl.protocol !== currentUrlParts.protocol && redirectUrl.protocol !== "https:" || redirectUrl.host !== currentHost && !isSubdomain(redirectUrl.host, currentHost)) {
      removeMatchingHeaders(/^(?:(?:proxy-)?authorization|cookie)$/i, this._options.headers);
    }

    // Evaluate the beforeRedirect callback
    if (isFunction(beforeRedirect)) {
      var responseDetails = {
        headers: response.headers,
        statusCode: statusCode
      };
      var requestDetails = {
        url: currentUrl,
        method: method,
        headers: requestHeaders
      };
      beforeRedirect(this._options, responseDetails, requestDetails);
      this._sanitizeOptions(this._options);
    }

    // Perform the redirected request
    this._performRequest();
  };

  // Wraps the key/value object of protocols with redirect functionality
  function wrap(protocols) {
    // Default settings
    var exports = {
      maxRedirects: 21,
      maxBodyLength: 10 * 1024 * 1024
    };

    // Wrap each protocol
    var nativeProtocols = {};
    Object.keys(protocols).forEach(function (scheme) {
      var protocol = scheme + ":";
      var nativeProtocol = nativeProtocols[protocol] = protocols[scheme];
      var wrappedProtocol = exports[scheme] = Object.create(nativeProtocol);

      // Executes a request, following redirects
      function request(input, options, callback) {
        // Parse parameters, ensuring that input is an object
        if (isURL(input)) {
          input = spreadUrlObject(input);
        } else if (isString(input)) {
          input = spreadUrlObject(parseUrl(input));
        } else {
          callback = options;
          options = validateUrl(input);
          input = {
            protocol: protocol
          };
        }
        if (isFunction(options)) {
          callback = options;
          options = null;
        }

        // Set defaults
        options = Object.assign({
          maxRedirects: exports.maxRedirects,
          maxBodyLength: exports.maxBodyLength
        }, input, options);
        options.nativeProtocols = nativeProtocols;
        if (!isString(options.host) && !isString(options.hostname)) {
          options.hostname = "::1";
        }
        assert.equal(options.protocol, protocol, "protocol mismatch");
        debug("options", options);
        return new RedirectableRequest(options, callback);
      }

      // Executes a GET request, following redirects
      function get(input, options, callback) {
        var wrappedRequest = wrappedProtocol.request(input, options, callback);
        wrappedRequest.end();
        return wrappedRequest;
      }

      // Expose the properties on the wrapped protocol
      Object.defineProperties(wrappedProtocol, {
        request: {
          value: request,
          configurable: true,
          enumerable: true,
          writable: true
        },
        get: {
          value: get,
          configurable: true,
          enumerable: true,
          writable: true
        }
      });
    });
    return exports;
  }
  function noop() {/* empty */}
  function parseUrl(input) {
    var parsed;
    // istanbul ignore else
    if (useNativeURL) {
      parsed = new URL(input);
    } else {
      // Ensure the URL is valid and absolute
      parsed = validateUrl(url.parse(input));
      if (!isString(parsed.protocol)) {
        throw new InvalidUrlError({
          input
        });
      }
    }
    return parsed;
  }
  function resolveUrl(relative, base) {
    // istanbul ignore next
    return useNativeURL ? new URL(relative, base) : parseUrl(url.resolve(base, relative));
  }
  function validateUrl(input) {
    if (/^\[/.test(input.hostname) && !/^\[[:0-9a-f]+\]$/i.test(input.hostname)) {
      throw new InvalidUrlError({
        input: input.href || input
      });
    }
    if (/^\[/.test(input.host) && !/^\[[:0-9a-f]+\](:\d+)?$/i.test(input.host)) {
      throw new InvalidUrlError({
        input: input.href || input
      });
    }
    return input;
  }
  function spreadUrlObject(urlObject, target) {
    var spread = target || {};
    for (var key of preservedUrlFields) {
      spread[key] = urlObject[key];
    }

    // Fix IPv6 hostname
    if (spread.hostname.startsWith("[")) {
      spread.hostname = spread.hostname.slice(1, -1);
    }
    // Ensure port is a number
    if (spread.port !== "") {
      spread.port = Number(spread.port);
    }
    // Concatenate path
    spread.path = spread.search ? spread.pathname + spread.search : spread.pathname;
    return spread;
  }
  function removeMatchingHeaders(regex, headers) {
    var lastValue;
    for (var header in headers) {
      if (regex.test(header)) {
        lastValue = headers[header];
        delete headers[header];
      }
    }
    return lastValue === null || typeof lastValue === "undefined" ? undefined : String(lastValue).trim();
  }
  function createErrorType(code, message, baseClass) {
    // Create constructor
    function CustomError(properties) {
      // istanbul ignore else
      if (isFunction(Error.captureStackTrace)) {
        Error.captureStackTrace(this, this.constructor);
      }
      Object.assign(this, properties || {});
      this.code = code;
      this.message = this.cause ? message + ": " + this.cause.message : message;
    }

    // Attach constructor and set default properties
    CustomError.prototype = new (baseClass || Error)();
    Object.defineProperties(CustomError.prototype, {
      constructor: {
        value: CustomError,
        enumerable: false
      },
      name: {
        value: "Error [" + code + "]",
        enumerable: false
      }
    });
    return CustomError;
  }
  function destroyRequest(request, error) {
    for (var event of events) {
      request.removeListener(event, eventHandlers[event]);
    }
    request.on("error", noop);
    request.destroy(error);
  }
  function isSubdomain(subdomain, domain) {
    assert(isString(subdomain) && isString(domain));
    var dot = subdomain.length - domain.length - 1;
    return dot > 0 && subdomain[dot] === "." && subdomain.endsWith(domain);
  }
  function isString(value) {
    return typeof value === "string" || value instanceof String;
  }
  function isFunction(value) {
    return typeof value === "function";
  }
  function isBuffer(value) {
    return typeof value === "object" && "length" in value;
  }
  function isURL(value) {
    return URL && value instanceof URL;
  }

  // Exports
  followRedirects$1.exports = wrap({
    http: http,
    https: https
  });
  followRedirects$1.exports.wrap = wrap;
  return followRedirects$1.exports;
}

var followRedirectsExports = requireFollowRedirects();
var followRedirects = /*@__PURE__*/getDefaultExportFromCjs(followRedirectsExports);

const VERSION$1 = "1.7.9";

function parseProtocol(url) {
  const match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url);
  return match && match[1] || '';
}

const DATA_URL_PATTERN = /^(?:([^;]+);)?(?:[^;]+;)?(base64|),([\s\S]*)$/;

/**
 * Parse data uri to a Buffer or Blob
 *
 * @param {String} uri
 * @param {?Boolean} asBlob
 * @param {?Object} options
 * @param {?Function} options.Blob
 *
 * @returns {Buffer|Blob}
 */
function fromDataURI(uri, asBlob, options) {
  const _Blob = options && options.Blob || platform.classes.Blob;
  const protocol = parseProtocol(uri);
  if (asBlob === undefined && _Blob) {
    asBlob = true;
  }
  if (protocol === 'data') {
    uri = protocol.length ? uri.slice(protocol.length + 1) : uri;
    const match = DATA_URL_PATTERN.exec(uri);
    if (!match) {
      throw new AxiosError$1('Invalid URL', AxiosError$1.ERR_INVALID_URL);
    }
    const mime = match[1];
    const isBase64 = match[2];
    const body = match[3];
    const buffer = Buffer.from(decodeURIComponent(body), isBase64 ? 'base64' : 'utf8');
    if (asBlob) {
      if (!_Blob) {
        throw new AxiosError$1('Blob is not supported', AxiosError$1.ERR_NOT_SUPPORT);
      }
      return new _Blob([buffer], {
        type: mime
      });
    }
    return buffer;
  }
  throw new AxiosError$1('Unsupported protocol ' + protocol, AxiosError$1.ERR_NOT_SUPPORT);
}

const kInternals = Symbol('internals');
class AxiosTransformStream extends stream.Transform {
  constructor(options) {
    options = utils$1.toFlatObject(options, {
      maxRate: 0,
      chunkSize: 64 * 1024,
      minChunkSize: 100,
      timeWindow: 500,
      ticksRate: 2,
      samplesCount: 15
    }, null, (prop, source) => {
      return !utils$1.isUndefined(source[prop]);
    });
    super({
      readableHighWaterMark: options.chunkSize
    });
    const internals = this[kInternals] = {
      timeWindow: options.timeWindow,
      chunkSize: options.chunkSize,
      maxRate: options.maxRate,
      minChunkSize: options.minChunkSize,
      bytesSeen: 0,
      isCaptured: false,
      notifiedBytesLoaded: 0,
      ts: Date.now(),
      bytes: 0,
      onReadCallback: null
    };
    this.on('newListener', event => {
      if (event === 'progress') {
        if (!internals.isCaptured) {
          internals.isCaptured = true;
        }
      }
    });
  }
  _read(size) {
    const internals = this[kInternals];
    if (internals.onReadCallback) {
      internals.onReadCallback();
    }
    return super._read(size);
  }
  _transform(chunk, encoding, callback) {
    const internals = this[kInternals];
    const maxRate = internals.maxRate;
    const readableHighWaterMark = this.readableHighWaterMark;
    const timeWindow = internals.timeWindow;
    const divider = 1000 / timeWindow;
    const bytesThreshold = maxRate / divider;
    const minChunkSize = internals.minChunkSize !== false ? Math.max(internals.minChunkSize, bytesThreshold * 0.01) : 0;
    const pushChunk = (_chunk, _callback) => {
      const bytes = Buffer.byteLength(_chunk);
      internals.bytesSeen += bytes;
      internals.bytes += bytes;
      internals.isCaptured && this.emit('progress', internals.bytesSeen);
      if (this.push(_chunk)) {
        process.nextTick(_callback);
      } else {
        internals.onReadCallback = () => {
          internals.onReadCallback = null;
          process.nextTick(_callback);
        };
      }
    };
    const transformChunk = (_chunk, _callback) => {
      const chunkSize = Buffer.byteLength(_chunk);
      let chunkRemainder = null;
      let maxChunkSize = readableHighWaterMark;
      let bytesLeft;
      let passed = 0;
      if (maxRate) {
        const now = Date.now();
        if (!internals.ts || (passed = now - internals.ts) >= timeWindow) {
          internals.ts = now;
          bytesLeft = bytesThreshold - internals.bytes;
          internals.bytes = bytesLeft < 0 ? -bytesLeft : 0;
          passed = 0;
        }
        bytesLeft = bytesThreshold - internals.bytes;
      }
      if (maxRate) {
        if (bytesLeft <= 0) {
          // next time window
          return setTimeout(() => {
            _callback(null, _chunk);
          }, timeWindow - passed);
        }
        if (bytesLeft < maxChunkSize) {
          maxChunkSize = bytesLeft;
        }
      }
      if (maxChunkSize && chunkSize > maxChunkSize && chunkSize - maxChunkSize > minChunkSize) {
        chunkRemainder = _chunk.subarray(maxChunkSize);
        _chunk = _chunk.subarray(0, maxChunkSize);
      }
      pushChunk(_chunk, chunkRemainder ? () => {
        process.nextTick(_callback, null, chunkRemainder);
      } : _callback);
    };
    transformChunk(chunk, function transformNextChunk(err, _chunk) {
      if (err) {
        return callback(err);
      }
      if (_chunk) {
        transformChunk(_chunk, transformNextChunk);
      } else {
        callback(null);
      }
    });
  }
}

const {
  asyncIterator
} = Symbol;
const readBlob = async function* (blob) {
  if (blob.stream) {
    yield* blob.stream();
  } else if (blob.arrayBuffer) {
    yield await blob.arrayBuffer();
  } else if (blob[asyncIterator]) {
    yield* blob[asyncIterator]();
  } else {
    yield blob;
  }
};

const BOUNDARY_ALPHABET = utils$1.ALPHABET.ALPHA_DIGIT + '-_';
const textEncoder = typeof TextEncoder === 'function' ? new TextEncoder() : new require$$1.TextEncoder();
const CRLF = '\r\n';
const CRLF_BYTES = textEncoder.encode(CRLF);
const CRLF_BYTES_COUNT = 2;
class FormDataPart {
  constructor(name, value) {
    const {
      escapeName
    } = this.constructor;
    const isStringValue = utils$1.isString(value);
    let headers = `Content-Disposition: form-data; name="${escapeName(name)}"${!isStringValue && value.name ? `; filename="${escapeName(value.name)}"` : ''}${CRLF}`;
    if (isStringValue) {
      value = textEncoder.encode(String(value).replace(/\r?\n|\r\n?/g, CRLF));
    } else {
      headers += `Content-Type: ${value.type || "application/octet-stream"}${CRLF}`;
    }
    this.headers = textEncoder.encode(headers + CRLF);
    this.contentLength = isStringValue ? value.byteLength : value.size;
    this.size = this.headers.byteLength + this.contentLength + CRLF_BYTES_COUNT;
    this.name = name;
    this.value = value;
  }
  async *encode() {
    yield this.headers;
    const {
      value
    } = this;
    if (utils$1.isTypedArray(value)) {
      yield value;
    } else {
      yield* readBlob(value);
    }
    yield CRLF_BYTES;
  }
  static escapeName(name) {
    return String(name).replace(/[\r\n"]/g, match => ({
      '\r': '%0D',
      '\n': '%0A',
      '"': '%22'
    })[match]);
  }
}
const formDataToStream = (form, headersHandler, options) => {
  const {
    tag = 'form-data-boundary',
    size = 25,
    boundary = tag + '-' + utils$1.generateString(size, BOUNDARY_ALPHABET)
  } = options || {};
  if (!utils$1.isFormData(form)) {
    throw TypeError('FormData instance required');
  }
  if (boundary.length < 1 || boundary.length > 70) {
    throw Error('boundary must be 10-70 characters long');
  }
  const boundaryBytes = textEncoder.encode('--' + boundary + CRLF);
  const footerBytes = textEncoder.encode('--' + boundary + '--' + CRLF + CRLF);
  let contentLength = footerBytes.byteLength;
  const parts = Array.from(form.entries()).map(([name, value]) => {
    const part = new FormDataPart(name, value);
    contentLength += part.size;
    return part;
  });
  contentLength += boundaryBytes.byteLength * parts.length;
  contentLength = utils$1.toFiniteNumber(contentLength);
  const computedHeaders = {
    'Content-Type': `multipart/form-data; boundary=${boundary}`
  };
  if (Number.isFinite(contentLength)) {
    computedHeaders['Content-Length'] = contentLength;
  }
  headersHandler && headersHandler(computedHeaders);
  return stream.Readable.from(async function* () {
    for (const part of parts) {
      yield boundaryBytes;
      yield* part.encode();
    }
    yield footerBytes;
  }());
};

class ZlibHeaderTransformStream extends stream.Transform {
  __transform(chunk, encoding, callback) {
    this.push(chunk);
    callback();
  }
  _transform(chunk, encoding, callback) {
    if (chunk.length !== 0) {
      this._transform = this.__transform;

      // Add Default Compression headers if no zlib headers are present
      if (chunk[0] !== 120) {
        // Hex: 78
        const header = Buffer.alloc(2);
        header[0] = 120; // Hex: 78
        header[1] = 156; // Hex: 9C 
        this.push(header, encoding);
      }
    }
    this.__transform(chunk, encoding, callback);
  }
}

const callbackify = (fn, reducer) => {
  return utils$1.isAsyncFn(fn) ? function (...args) {
    const cb = args.pop();
    fn.apply(this, args).then(value => {
      try {
        reducer ? cb(null, ...reducer(value)) : cb(null, value);
      } catch (err) {
        cb(err);
      }
    }, cb);
  } : fn;
};

/**
 * Calculate data maxRate
 * @param {Number} [samplesCount= 10]
 * @param {Number} [min= 1000]
 * @returns {Function}
 */
function speedometer(samplesCount, min) {
  samplesCount = samplesCount || 10;
  const bytes = new Array(samplesCount);
  const timestamps = new Array(samplesCount);
  let head = 0;
  let tail = 0;
  let firstSampleTS;
  min = min !== undefined ? min : 1000;
  return function push(chunkLength) {
    const now = Date.now();
    const startedAt = timestamps[tail];
    if (!firstSampleTS) {
      firstSampleTS = now;
    }
    bytes[head] = chunkLength;
    timestamps[head] = now;
    let i = tail;
    let bytesCount = 0;
    while (i !== head) {
      bytesCount += bytes[i++];
      i = i % samplesCount;
    }
    head = (head + 1) % samplesCount;
    if (head === tail) {
      tail = (tail + 1) % samplesCount;
    }
    if (now - firstSampleTS < min) {
      return;
    }
    const passed = startedAt && now - startedAt;
    return passed ? Math.round(bytesCount * 1000 / passed) : undefined;
  };
}

/**
 * Throttle decorator
 * @param {Function} fn
 * @param {Number} freq
 * @return {Function}
 */
function throttle(fn, freq) {
  let timestamp = 0;
  let threshold = 1000 / freq;
  let lastArgs;
  let timer;
  const invoke = (args, now = Date.now()) => {
    timestamp = now;
    lastArgs = null;
    if (timer) {
      clearTimeout(timer);
      timer = null;
    }
    fn.apply(null, args);
  };
  const throttled = (...args) => {
    const now = Date.now();
    const passed = now - timestamp;
    if (passed >= threshold) {
      invoke(args, now);
    } else {
      lastArgs = args;
      if (!timer) {
        timer = setTimeout(() => {
          timer = null;
          invoke(lastArgs);
        }, threshold - passed);
      }
    }
  };
  const flush = () => lastArgs && invoke(lastArgs);
  return [throttled, flush];
}

const progressEventReducer = (listener, isDownloadStream, freq = 3) => {
  let bytesNotified = 0;
  const _speedometer = speedometer(50, 250);
  return throttle(e => {
    const loaded = e.loaded;
    const total = e.lengthComputable ? e.total : undefined;
    const progressBytes = loaded - bytesNotified;
    const rate = _speedometer(progressBytes);
    const inRange = loaded <= total;
    bytesNotified = loaded;
    const data = {
      loaded,
      total,
      progress: total ? loaded / total : undefined,
      bytes: progressBytes,
      rate: rate ? rate : undefined,
      estimated: rate && total && inRange ? (total - loaded) / rate : undefined,
      event: e,
      lengthComputable: total != null,
      [isDownloadStream ? 'download' : 'upload']: true
    };
    listener(data);
  }, freq);
};
const progressEventDecorator = (total, throttled) => {
  const lengthComputable = total != null;
  return [loaded => throttled[0]({
    lengthComputable,
    total,
    loaded
  }), throttled[1]];
};
const asyncDecorator = fn => (...args) => utils$1.asap(() => fn(...args));

const zlibOptions = {
  flush: zlib.constants.Z_SYNC_FLUSH,
  finishFlush: zlib.constants.Z_SYNC_FLUSH
};
const brotliOptions = {
  flush: zlib.constants.BROTLI_OPERATION_FLUSH,
  finishFlush: zlib.constants.BROTLI_OPERATION_FLUSH
};
const isBrotliSupported = utils$1.isFunction(zlib.createBrotliDecompress);
const {
  http: httpFollow,
  https: httpsFollow
} = followRedirects;
const isHttps = /https:?/;
const supportedProtocols = platform.protocols.map(protocol => {
  return protocol + ':';
});
const flushOnFinish = (stream, [throttled, flush]) => {
  stream.on('end', flush).on('error', flush);
  return throttled;
};

/**
 * If the proxy or config beforeRedirects functions are defined, call them with the options
 * object.
 *
 * @param {Object<string, any>} options - The options object that was passed to the request.
 *
 * @returns {Object<string, any>}
 */
function dispatchBeforeRedirect(options, responseDetails) {
  if (options.beforeRedirects.proxy) {
    options.beforeRedirects.proxy(options);
  }
  if (options.beforeRedirects.config) {
    options.beforeRedirects.config(options, responseDetails);
  }
}

/**
 * If the proxy or config afterRedirects functions are defined, call them with the options
 *
 * @param {http.ClientRequestArgs} options
 * @param {AxiosProxyConfig} configProxy configuration from Axios options object
 * @param {string} location
 *
 * @returns {http.ClientRequestArgs}
 */
function setProxy(options, configProxy, location) {
  let proxy = configProxy;
  if (!proxy && proxy !== false) {
    const proxyUrl = proxyFromEnv.getProxyForUrl(location);
    if (proxyUrl) {
      proxy = new URL(proxyUrl);
    }
  }
  if (proxy) {
    // Basic proxy authorization
    if (proxy.username) {
      proxy.auth = (proxy.username || '') + ':' + (proxy.password || '');
    }
    if (proxy.auth) {
      // Support proxy auth object form
      if (proxy.auth.username || proxy.auth.password) {
        proxy.auth = (proxy.auth.username || '') + ':' + (proxy.auth.password || '');
      }
      const base64 = Buffer.from(proxy.auth, 'utf8').toString('base64');
      options.headers['Proxy-Authorization'] = 'Basic ' + base64;
    }
    options.headers.host = options.hostname + (options.port ? ':' + options.port : '');
    const proxyHost = proxy.hostname || proxy.host;
    options.hostname = proxyHost;
    // Replace 'host' since options is not a URL object
    options.host = proxyHost;
    options.port = proxy.port;
    options.path = location;
    if (proxy.protocol) {
      options.protocol = proxy.protocol.includes(':') ? proxy.protocol : `${proxy.protocol}:`;
    }
  }
  options.beforeRedirects.proxy = function beforeRedirect(redirectOptions) {
    // Configure proxy for redirected request, passing the original config proxy to apply
    // the exact same logic as if the redirected request was performed by axios directly.
    setProxy(redirectOptions, configProxy, redirectOptions.href);
  };
}
const isHttpAdapterSupported = typeof process !== 'undefined' && utils$1.kindOf(process) === 'process';

// temporary hotfix

const wrapAsync = asyncExecutor => {
  return new Promise((resolve, reject) => {
    let onDone;
    let isDone;
    const done = (value, isRejected) => {
      if (isDone) return;
      isDone = true;
      onDone && onDone(value, isRejected);
    };
    const _resolve = value => {
      done(value);
      resolve(value);
    };
    const _reject = reason => {
      done(reason, true);
      reject(reason);
    };
    asyncExecutor(_resolve, _reject, onDoneHandler => onDone = onDoneHandler).catch(_reject);
  });
};
const resolveFamily = ({
  address,
  family
}) => {
  if (!utils$1.isString(address)) {
    throw TypeError('address must be a string');
  }
  return {
    address,
    family: family || (address.indexOf('.') < 0 ? 6 : 4)
  };
};
const buildAddressEntry = (address, family) => resolveFamily(utils$1.isObject(address) ? address : {
  address,
  family
});

/*eslint consistent-return:0*/
var httpAdapter = isHttpAdapterSupported && function httpAdapter(config) {
  return wrapAsync(async function dispatchHttpRequest(resolve, reject, onDone) {
    let {
      data,
      lookup,
      family
    } = config;
    const {
      responseType,
      responseEncoding
    } = config;
    const method = config.method.toUpperCase();
    let isDone;
    let rejected = false;
    let req;
    if (lookup) {
      const _lookup = callbackify(lookup, value => utils$1.isArray(value) ? value : [value]);
      // hotfix to support opt.all option which is required for node 20.x
      lookup = (hostname, opt, cb) => {
        _lookup(hostname, opt, (err, arg0, arg1) => {
          if (err) {
            return cb(err);
          }
          const addresses = utils$1.isArray(arg0) ? arg0.map(addr => buildAddressEntry(addr)) : [buildAddressEntry(arg0, arg1)];
          opt.all ? cb(err, addresses) : cb(err, addresses[0].address, addresses[0].family);
        });
      };
    }

    // temporary internal emitter until the AxiosRequest class will be implemented
    const emitter = new events.EventEmitter();
    const onFinished = () => {
      if (config.cancelToken) {
        config.cancelToken.unsubscribe(abort);
      }
      if (config.signal) {
        config.signal.removeEventListener('abort', abort);
      }
      emitter.removeAllListeners();
    };
    onDone((value, isRejected) => {
      isDone = true;
      if (isRejected) {
        rejected = true;
        onFinished();
      }
    });
    function abort(reason) {
      emitter.emit('abort', !reason || reason.type ? new CanceledError$1(null, config, req) : reason);
    }
    emitter.once('abort', reject);
    if (config.cancelToken || config.signal) {
      config.cancelToken && config.cancelToken.subscribe(abort);
      if (config.signal) {
        config.signal.aborted ? abort() : config.signal.addEventListener('abort', abort);
      }
    }

    // Parse url
    const fullPath = buildFullPath(config.baseURL, config.url);
    const parsed = new URL(fullPath, platform.hasBrowserEnv ? platform.origin : undefined);
    const protocol = parsed.protocol || supportedProtocols[0];
    if (protocol === 'data:') {
      let convertedData;
      if (method !== 'GET') {
        return settle(resolve, reject, {
          status: 405,
          statusText: 'method not allowed',
          headers: {},
          config
        });
      }
      try {
        convertedData = fromDataURI(config.url, responseType === 'blob', {
          Blob: config.env && config.env.Blob
        });
      } catch (err) {
        throw AxiosError$1.from(err, AxiosError$1.ERR_BAD_REQUEST, config);
      }
      if (responseType === 'text') {
        convertedData = convertedData.toString(responseEncoding);
        if (!responseEncoding || responseEncoding === 'utf8') {
          convertedData = utils$1.stripBOM(convertedData);
        }
      } else if (responseType === 'stream') {
        convertedData = stream.Readable.from(convertedData);
      }
      return settle(resolve, reject, {
        data: convertedData,
        status: 200,
        statusText: 'OK',
        headers: new AxiosHeaders$1(),
        config
      });
    }
    if (supportedProtocols.indexOf(protocol) === -1) {
      return reject(new AxiosError$1('Unsupported protocol ' + protocol, AxiosError$1.ERR_BAD_REQUEST, config));
    }
    const headers = AxiosHeaders$1.from(config.headers).normalize();

    // Set User-Agent (required by some servers)
    // See https://github.com/axios/axios/issues/69
    // User-Agent is specified; handle case where no UA header is desired
    // Only set header if it hasn't been set in config
    headers.set('User-Agent', 'axios/' + VERSION$1, false);
    const {
      onUploadProgress,
      onDownloadProgress
    } = config;
    const maxRate = config.maxRate;
    let maxUploadRate = undefined;
    let maxDownloadRate = undefined;

    // support for spec compliant FormData objects
    if (utils$1.isSpecCompliantForm(data)) {
      const userBoundary = headers.getContentType(/boundary=([-_\w\d]{10,70})/i);
      data = formDataToStream(data, formHeaders => {
        headers.set(formHeaders);
      }, {
        tag: `axios-${VERSION$1}-boundary`,
        boundary: userBoundary && userBoundary[1] || undefined
      });
      // support for https://www.npmjs.com/package/form-data api
    } else if (utils$1.isFormData(data) && utils$1.isFunction(data.getHeaders)) {
      headers.set(data.getHeaders());
      if (!headers.hasContentLength()) {
        try {
          const knownLength = await require$$1.promisify(data.getLength).call(data);
          Number.isFinite(knownLength) && knownLength >= 0 && headers.setContentLength(knownLength);
          /*eslint no-empty:0*/
        } catch (e) {}
      }
    } else if (utils$1.isBlob(data) || utils$1.isFile(data)) {
      data.size && headers.setContentType(data.type || 'application/octet-stream');
      headers.setContentLength(data.size || 0);
      data = stream.Readable.from(readBlob(data));
    } else if (data && !utils$1.isStream(data)) {
      if (Buffer.isBuffer(data)) ; else if (utils$1.isArrayBuffer(data)) {
        data = Buffer.from(new Uint8Array(data));
      } else if (utils$1.isString(data)) {
        data = Buffer.from(data, 'utf-8');
      } else {
        return reject(new AxiosError$1('Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream', AxiosError$1.ERR_BAD_REQUEST, config));
      }

      // Add Content-Length header if data exists
      headers.setContentLength(data.length, false);
      if (config.maxBodyLength > -1 && data.length > config.maxBodyLength) {
        return reject(new AxiosError$1('Request body larger than maxBodyLength limit', AxiosError$1.ERR_BAD_REQUEST, config));
      }
    }
    const contentLength = utils$1.toFiniteNumber(headers.getContentLength());
    if (utils$1.isArray(maxRate)) {
      maxUploadRate = maxRate[0];
      maxDownloadRate = maxRate[1];
    } else {
      maxUploadRate = maxDownloadRate = maxRate;
    }
    if (data && (onUploadProgress || maxUploadRate)) {
      if (!utils$1.isStream(data)) {
        data = stream.Readable.from(data, {
          objectMode: false
        });
      }
      data = stream.pipeline([data, new AxiosTransformStream({
        maxRate: utils$1.toFiniteNumber(maxUploadRate)
      })], utils$1.noop);
      onUploadProgress && data.on('progress', flushOnFinish(data, progressEventDecorator(contentLength, progressEventReducer(asyncDecorator(onUploadProgress), false, 3))));
    }

    // HTTP basic authentication
    let auth = undefined;
    if (config.auth) {
      const username = config.auth.username || '';
      const password = config.auth.password || '';
      auth = username + ':' + password;
    }
    if (!auth && parsed.username) {
      const urlUsername = parsed.username;
      const urlPassword = parsed.password;
      auth = urlUsername + ':' + urlPassword;
    }
    auth && headers.delete('authorization');
    let path;
    try {
      path = buildURL(parsed.pathname + parsed.search, config.params, config.paramsSerializer).replace(/^\?/, '');
    } catch (err) {
      const customErr = new Error(err.message);
      customErr.config = config;
      customErr.url = config.url;
      customErr.exists = true;
      return reject(customErr);
    }
    headers.set('Accept-Encoding', 'gzip, compress, deflate' + (isBrotliSupported ? ', br' : ''), false);
    const options = {
      path,
      method: method,
      headers: headers.toJSON(),
      agents: {
        http: config.httpAgent,
        https: config.httpsAgent
      },
      auth,
      protocol,
      family,
      beforeRedirect: dispatchBeforeRedirect,
      beforeRedirects: {}
    };

    // cacheable-lookup integration hotfix
    !utils$1.isUndefined(lookup) && (options.lookup = lookup);
    if (config.socketPath) {
      options.socketPath = config.socketPath;
    } else {
      options.hostname = parsed.hostname.startsWith("[") ? parsed.hostname.slice(1, -1) : parsed.hostname;
      options.port = parsed.port;
      setProxy(options, config.proxy, protocol + '//' + parsed.hostname + (parsed.port ? ':' + parsed.port : '') + options.path);
    }
    let transport;
    const isHttpsRequest = isHttps.test(options.protocol);
    options.agent = isHttpsRequest ? config.httpsAgent : config.httpAgent;
    if (config.transport) {
      transport = config.transport;
    } else if (config.maxRedirects === 0) {
      transport = isHttpsRequest ? require$$4 : require$$3$1;
    } else {
      if (config.maxRedirects) {
        options.maxRedirects = config.maxRedirects;
      }
      if (config.beforeRedirect) {
        options.beforeRedirects.config = config.beforeRedirect;
      }
      transport = isHttpsRequest ? httpsFollow : httpFollow;
    }
    if (config.maxBodyLength > -1) {
      options.maxBodyLength = config.maxBodyLength;
    } else {
      // follow-redirects does not skip comparison, so it should always succeed for axios -1 unlimited
      options.maxBodyLength = Infinity;
    }
    if (config.insecureHTTPParser) {
      options.insecureHTTPParser = config.insecureHTTPParser;
    }

    // Create the request
    req = transport.request(options, function handleResponse(res) {
      if (req.destroyed) return;
      const streams = [res];
      const responseLength = +res.headers['content-length'];
      if (onDownloadProgress || maxDownloadRate) {
        const transformStream = new AxiosTransformStream({
          maxRate: utils$1.toFiniteNumber(maxDownloadRate)
        });
        onDownloadProgress && transformStream.on('progress', flushOnFinish(transformStream, progressEventDecorator(responseLength, progressEventReducer(asyncDecorator(onDownloadProgress), true, 3))));
        streams.push(transformStream);
      }

      // decompress the response body transparently if required
      let responseStream = res;

      // return the last request in case of redirects
      const lastRequest = res.req || req;

      // if decompress disabled we should not decompress
      if (config.decompress !== false && res.headers['content-encoding']) {
        // if no content, but headers still say that it is encoded,
        // remove the header not confuse downstream operations
        if (method === 'HEAD' || res.statusCode === 204) {
          delete res.headers['content-encoding'];
        }
        switch ((res.headers['content-encoding'] || '').toLowerCase()) {
          /*eslint default-case:0*/
          case 'gzip':
          case 'x-gzip':
          case 'compress':
          case 'x-compress':
            // add the unzipper to the body stream processing pipeline
            streams.push(zlib.createUnzip(zlibOptions));

            // remove the content-encoding in order to not confuse downstream operations
            delete res.headers['content-encoding'];
            break;
          case 'deflate':
            streams.push(new ZlibHeaderTransformStream());

            // add the unzipper to the body stream processing pipeline
            streams.push(zlib.createUnzip(zlibOptions));

            // remove the content-encoding in order to not confuse downstream operations
            delete res.headers['content-encoding'];
            break;
          case 'br':
            if (isBrotliSupported) {
              streams.push(zlib.createBrotliDecompress(brotliOptions));
              delete res.headers['content-encoding'];
            }
        }
      }
      responseStream = streams.length > 1 ? stream.pipeline(streams, utils$1.noop) : streams[0];
      const offListeners = stream.finished(responseStream, () => {
        offListeners();
        onFinished();
      });
      const response = {
        status: res.statusCode,
        statusText: res.statusMessage,
        headers: new AxiosHeaders$1(res.headers),
        config,
        request: lastRequest
      };
      if (responseType === 'stream') {
        response.data = responseStream;
        settle(resolve, reject, response);
      } else {
        const responseBuffer = [];
        let totalResponseBytes = 0;
        responseStream.on('data', function handleStreamData(chunk) {
          responseBuffer.push(chunk);
          totalResponseBytes += chunk.length;

          // make sure the content length is not over the maxContentLength if specified
          if (config.maxContentLength > -1 && totalResponseBytes > config.maxContentLength) {
            // stream.destroy() emit aborted event before calling reject() on Node.js v16
            rejected = true;
            responseStream.destroy();
            reject(new AxiosError$1('maxContentLength size of ' + config.maxContentLength + ' exceeded', AxiosError$1.ERR_BAD_RESPONSE, config, lastRequest));
          }
        });
        responseStream.on('aborted', function handlerStreamAborted() {
          if (rejected) {
            return;
          }
          const err = new AxiosError$1('stream has been aborted', AxiosError$1.ERR_BAD_RESPONSE, config, lastRequest);
          responseStream.destroy(err);
          reject(err);
        });
        responseStream.on('error', function handleStreamError(err) {
          if (req.destroyed) return;
          reject(AxiosError$1.from(err, null, config, lastRequest));
        });
        responseStream.on('end', function handleStreamEnd() {
          try {
            let responseData = responseBuffer.length === 1 ? responseBuffer[0] : Buffer.concat(responseBuffer);
            if (responseType !== 'arraybuffer') {
              responseData = responseData.toString(responseEncoding);
              if (!responseEncoding || responseEncoding === 'utf8') {
                responseData = utils$1.stripBOM(responseData);
              }
            }
            response.data = responseData;
          } catch (err) {
            return reject(AxiosError$1.from(err, null, config, response.request, response));
          }
          settle(resolve, reject, response);
        });
      }
      emitter.once('abort', err => {
        if (!responseStream.destroyed) {
          responseStream.emit('error', err);
          responseStream.destroy();
        }
      });
    });
    emitter.once('abort', err => {
      reject(err);
      req.destroy(err);
    });

    // Handle errors
    req.on('error', function handleRequestError(err) {
      // @todo remove
      // if (req.aborted && err.code !== AxiosError.ERR_FR_TOO_MANY_REDIRECTS) return;
      reject(AxiosError$1.from(err, null, config, req));
    });

    // set tcp keep alive to prevent drop connection by peer
    req.on('socket', function handleRequestSocket(socket) {
      // default interval of sending ack packet is 1 minute
      socket.setKeepAlive(true, 1000 * 60);
    });

    // Handle request timeout
    if (config.timeout) {
      // This is forcing a int timeout to avoid problems if the `req` interface doesn't handle other types.
      const timeout = parseInt(config.timeout, 10);
      if (Number.isNaN(timeout)) {
        reject(new AxiosError$1('error trying to parse `config.timeout` to int', AxiosError$1.ERR_BAD_OPTION_VALUE, config, req));
        return;
      }

      // Sometime, the response will be very slow, and does not respond, the connect event will be block by event loop system.
      // And timer callback will be fired, and abort() will be invoked before connection, then get "socket hang up" and code ECONNRESET.
      // At this time, if we have a large number of request, nodejs will hang up some socket on background. and the number will up and up.
      // And then these socket which be hang up will devouring CPU little by little.
      // ClientRequest.setTimeout will be fired on the specify milliseconds, and can make sure that abort() will be fired after connect.
      req.setTimeout(timeout, function handleRequestTimeout() {
        if (isDone) return;
        let timeoutErrorMessage = config.timeout ? 'timeout of ' + config.timeout + 'ms exceeded' : 'timeout exceeded';
        const transitional = config.transitional || transitionalDefaults;
        if (config.timeoutErrorMessage) {
          timeoutErrorMessage = config.timeoutErrorMessage;
        }
        reject(new AxiosError$1(timeoutErrorMessage, transitional.clarifyTimeoutError ? AxiosError$1.ETIMEDOUT : AxiosError$1.ECONNABORTED, config, req));
        abort();
      });
    }

    // Send the request
    if (utils$1.isStream(data)) {
      let ended = false;
      let errored = false;
      data.on('end', () => {
        ended = true;
      });
      data.once('error', err => {
        errored = true;
        req.destroy(err);
      });
      data.on('close', () => {
        if (!ended && !errored) {
          abort(new CanceledError$1('Request stream has been aborted', config, req));
        }
      });
      data.pipe(req);
    } else {
      req.end(data);
    }
  });
};

var isURLSameOrigin = platform.hasStandardBrowserEnv ? ((origin, isMSIE) => url => {
  url = new URL(url, platform.origin);
  return origin.protocol === url.protocol && origin.host === url.host && (isMSIE || origin.port === url.port);
})(new URL(platform.origin), platform.navigator && /(msie|trident)/i.test(platform.navigator.userAgent)) : () => true;

var cookies = platform.hasStandardBrowserEnv ?
// Standard browser envs support document.cookie
{
  write(name, value, expires, path, domain, secure) {
    const cookie = [name + '=' + encodeURIComponent(value)];
    utils$1.isNumber(expires) && cookie.push('expires=' + new Date(expires).toGMTString());
    utils$1.isString(path) && cookie.push('path=' + path);
    utils$1.isString(domain) && cookie.push('domain=' + domain);
    secure === true && cookie.push('secure');
    document.cookie = cookie.join('; ');
  },
  read(name) {
    const match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
    return match ? decodeURIComponent(match[3]) : null;
  },
  remove(name) {
    this.write(name, '', Date.now() - 86400000);
  }
} :
// Non-standard browser env (web workers, react-native) lack needed support.
{
  write() {},
  read() {
    return null;
  },
  remove() {}
};

const headersToObject = thing => thing instanceof AxiosHeaders$1 ? {
  ...thing
} : thing;

/**
 * Config-specific merge-function which creates a new config-object
 * by merging two configuration objects together.
 *
 * @param {Object} config1
 * @param {Object} config2
 *
 * @returns {Object} New object resulting from merging config2 to config1
 */
function mergeConfig$1(config1, config2) {
  // eslint-disable-next-line no-param-reassign
  config2 = config2 || {};
  const config = {};
  function getMergedValue(target, source, prop, caseless) {
    if (utils$1.isPlainObject(target) && utils$1.isPlainObject(source)) {
      return utils$1.merge.call({
        caseless
      }, target, source);
    } else if (utils$1.isPlainObject(source)) {
      return utils$1.merge({}, source);
    } else if (utils$1.isArray(source)) {
      return source.slice();
    }
    return source;
  }

  // eslint-disable-next-line consistent-return
  function mergeDeepProperties(a, b, prop, caseless) {
    if (!utils$1.isUndefined(b)) {
      return getMergedValue(a, b, prop, caseless);
    } else if (!utils$1.isUndefined(a)) {
      return getMergedValue(undefined, a, prop, caseless);
    }
  }

  // eslint-disable-next-line consistent-return
  function valueFromConfig2(a, b) {
    if (!utils$1.isUndefined(b)) {
      return getMergedValue(undefined, b);
    }
  }

  // eslint-disable-next-line consistent-return
  function defaultToConfig2(a, b) {
    if (!utils$1.isUndefined(b)) {
      return getMergedValue(undefined, b);
    } else if (!utils$1.isUndefined(a)) {
      return getMergedValue(undefined, a);
    }
  }

  // eslint-disable-next-line consistent-return
  function mergeDirectKeys(a, b, prop) {
    if (prop in config2) {
      return getMergedValue(a, b);
    } else if (prop in config1) {
      return getMergedValue(undefined, a);
    }
  }
  const mergeMap = {
    url: valueFromConfig2,
    method: valueFromConfig2,
    data: valueFromConfig2,
    baseURL: defaultToConfig2,
    transformRequest: defaultToConfig2,
    transformResponse: defaultToConfig2,
    paramsSerializer: defaultToConfig2,
    timeout: defaultToConfig2,
    timeoutMessage: defaultToConfig2,
    withCredentials: defaultToConfig2,
    withXSRFToken: defaultToConfig2,
    adapter: defaultToConfig2,
    responseType: defaultToConfig2,
    xsrfCookieName: defaultToConfig2,
    xsrfHeaderName: defaultToConfig2,
    onUploadProgress: defaultToConfig2,
    onDownloadProgress: defaultToConfig2,
    decompress: defaultToConfig2,
    maxContentLength: defaultToConfig2,
    maxBodyLength: defaultToConfig2,
    beforeRedirect: defaultToConfig2,
    transport: defaultToConfig2,
    httpAgent: defaultToConfig2,
    httpsAgent: defaultToConfig2,
    cancelToken: defaultToConfig2,
    socketPath: defaultToConfig2,
    responseEncoding: defaultToConfig2,
    validateStatus: mergeDirectKeys,
    headers: (a, b, prop) => mergeDeepProperties(headersToObject(a), headersToObject(b), prop, true)
  };
  utils$1.forEach(Object.keys(Object.assign({}, config1, config2)), function computeConfigValue(prop) {
    const merge = mergeMap[prop] || mergeDeepProperties;
    const configValue = merge(config1[prop], config2[prop], prop);
    utils$1.isUndefined(configValue) && merge !== mergeDirectKeys || (config[prop] = configValue);
  });
  return config;
}

var resolveConfig = config => {
  const newConfig = mergeConfig$1({}, config);
  let {
    data,
    withXSRFToken,
    xsrfHeaderName,
    xsrfCookieName,
    headers,
    auth
  } = newConfig;
  newConfig.headers = headers = AxiosHeaders$1.from(headers);
  newConfig.url = buildURL(buildFullPath(newConfig.baseURL, newConfig.url), config.params, config.paramsSerializer);

  // HTTP basic authentication
  if (auth) {
    headers.set('Authorization', 'Basic ' + btoa((auth.username || '') + ':' + (auth.password ? unescape(encodeURIComponent(auth.password)) : '')));
  }
  let contentType;
  if (utils$1.isFormData(data)) {
    if (platform.hasStandardBrowserEnv || platform.hasStandardBrowserWebWorkerEnv) {
      headers.setContentType(undefined); // Let the browser set it
    } else if ((contentType = headers.getContentType()) !== false) {
      // fix semicolon duplication issue for ReactNative FormData implementation
      const [type, ...tokens] = contentType ? contentType.split(';').map(token => token.trim()).filter(Boolean) : [];
      headers.setContentType([type || 'multipart/form-data', ...tokens].join('; '));
    }
  }

  // Add xsrf header
  // This is only done if running in a standard browser environment.
  // Specifically not if we're in a web worker, or react-native.

  if (platform.hasStandardBrowserEnv) {
    withXSRFToken && utils$1.isFunction(withXSRFToken) && (withXSRFToken = withXSRFToken(newConfig));
    if (withXSRFToken || withXSRFToken !== false && isURLSameOrigin(newConfig.url)) {
      // Add xsrf header
      const xsrfValue = xsrfHeaderName && xsrfCookieName && cookies.read(xsrfCookieName);
      if (xsrfValue) {
        headers.set(xsrfHeaderName, xsrfValue);
      }
    }
  }
  return newConfig;
};

const isXHRAdapterSupported = typeof XMLHttpRequest !== 'undefined';
var xhrAdapter = isXHRAdapterSupported && function (config) {
  return new Promise(function dispatchXhrRequest(resolve, reject) {
    const _config = resolveConfig(config);
    let requestData = _config.data;
    const requestHeaders = AxiosHeaders$1.from(_config.headers).normalize();
    let {
      responseType,
      onUploadProgress,
      onDownloadProgress
    } = _config;
    let onCanceled;
    let uploadThrottled, downloadThrottled;
    let flushUpload, flushDownload;
    function done() {
      flushUpload && flushUpload(); // flush events
      flushDownload && flushDownload(); // flush events

      _config.cancelToken && _config.cancelToken.unsubscribe(onCanceled);
      _config.signal && _config.signal.removeEventListener('abort', onCanceled);
    }
    let request = new XMLHttpRequest();
    request.open(_config.method.toUpperCase(), _config.url, true);

    // Set the request timeout in MS
    request.timeout = _config.timeout;
    function onloadend() {
      if (!request) {
        return;
      }
      // Prepare the response
      const responseHeaders = AxiosHeaders$1.from('getAllResponseHeaders' in request && request.getAllResponseHeaders());
      const responseData = !responseType || responseType === 'text' || responseType === 'json' ? request.responseText : request.response;
      const response = {
        data: responseData,
        status: request.status,
        statusText: request.statusText,
        headers: responseHeaders,
        config,
        request
      };
      settle(function _resolve(value) {
        resolve(value);
        done();
      }, function _reject(err) {
        reject(err);
        done();
      }, response);

      // Clean up request
      request = null;
    }
    if ('onloadend' in request) {
      // Use onloadend if available
      request.onloadend = onloadend;
    } else {
      // Listen for ready state to emulate onloadend
      request.onreadystatechange = function handleLoad() {
        if (!request || request.readyState !== 4) {
          return;
        }

        // The request errored out and we didn't get a response, this will be
        // handled by onerror instead
        // With one exception: request that using file: protocol, most browsers
        // will return status as 0 even though it's a successful request
        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
          return;
        }
        // readystate handler is calling before onerror or ontimeout handlers,
        // so we should call onloadend on the next 'tick'
        setTimeout(onloadend);
      };
    }

    // Handle browser request cancellation (as opposed to a manual cancellation)
    request.onabort = function handleAbort() {
      if (!request) {
        return;
      }
      reject(new AxiosError$1('Request aborted', AxiosError$1.ECONNABORTED, config, request));

      // Clean up request
      request = null;
    };

    // Handle low level network errors
    request.onerror = function handleError() {
      // Real errors are hidden from us by the browser
      // onerror should only fire if it's a network error
      reject(new AxiosError$1('Network Error', AxiosError$1.ERR_NETWORK, config, request));

      // Clean up request
      request = null;
    };

    // Handle timeout
    request.ontimeout = function handleTimeout() {
      let timeoutErrorMessage = _config.timeout ? 'timeout of ' + _config.timeout + 'ms exceeded' : 'timeout exceeded';
      const transitional = _config.transitional || transitionalDefaults;
      if (_config.timeoutErrorMessage) {
        timeoutErrorMessage = _config.timeoutErrorMessage;
      }
      reject(new AxiosError$1(timeoutErrorMessage, transitional.clarifyTimeoutError ? AxiosError$1.ETIMEDOUT : AxiosError$1.ECONNABORTED, config, request));

      // Clean up request
      request = null;
    };

    // Remove Content-Type if data is undefined
    requestData === undefined && requestHeaders.setContentType(null);

    // Add headers to the request
    if ('setRequestHeader' in request) {
      utils$1.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {
        request.setRequestHeader(key, val);
      });
    }

    // Add withCredentials to request if needed
    if (!utils$1.isUndefined(_config.withCredentials)) {
      request.withCredentials = !!_config.withCredentials;
    }

    // Add responseType to request if needed
    if (responseType && responseType !== 'json') {
      request.responseType = _config.responseType;
    }

    // Handle progress if needed
    if (onDownloadProgress) {
      [downloadThrottled, flushDownload] = progressEventReducer(onDownloadProgress, true);
      request.addEventListener('progress', downloadThrottled);
    }

    // Not all browsers support upload events
    if (onUploadProgress && request.upload) {
      [uploadThrottled, flushUpload] = progressEventReducer(onUploadProgress);
      request.upload.addEventListener('progress', uploadThrottled);
      request.upload.addEventListener('loadend', flushUpload);
    }
    if (_config.cancelToken || _config.signal) {
      // Handle cancellation
      // eslint-disable-next-line func-names
      onCanceled = cancel => {
        if (!request) {
          return;
        }
        reject(!cancel || cancel.type ? new CanceledError$1(null, config, request) : cancel);
        request.abort();
        request = null;
      };
      _config.cancelToken && _config.cancelToken.subscribe(onCanceled);
      if (_config.signal) {
        _config.signal.aborted ? onCanceled() : _config.signal.addEventListener('abort', onCanceled);
      }
    }
    const protocol = parseProtocol(_config.url);
    if (protocol && platform.protocols.indexOf(protocol) === -1) {
      reject(new AxiosError$1('Unsupported protocol ' + protocol + ':', AxiosError$1.ERR_BAD_REQUEST, config));
      return;
    }

    // Send the request
    request.send(requestData || null);
  });
};

const composeSignals = (signals, timeout) => {
  const {
    length
  } = signals = signals ? signals.filter(Boolean) : [];
  if (timeout || length) {
    let controller = new AbortController();
    let aborted;
    const onabort = function (reason) {
      if (!aborted) {
        aborted = true;
        unsubscribe();
        const err = reason instanceof Error ? reason : this.reason;
        controller.abort(err instanceof AxiosError$1 ? err : new CanceledError$1(err instanceof Error ? err.message : err));
      }
    };
    let timer = timeout && setTimeout(() => {
      timer = null;
      onabort(new AxiosError$1(`timeout ${timeout} of ms exceeded`, AxiosError$1.ETIMEDOUT));
    }, timeout);
    const unsubscribe = () => {
      if (signals) {
        timer && clearTimeout(timer);
        timer = null;
        signals.forEach(signal => {
          signal.unsubscribe ? signal.unsubscribe(onabort) : signal.removeEventListener('abort', onabort);
        });
        signals = null;
      }
    };
    signals.forEach(signal => signal.addEventListener('abort', onabort));
    const {
      signal
    } = controller;
    signal.unsubscribe = () => utils$1.asap(unsubscribe);
    return signal;
  }
};

const streamChunk = function* (chunk, chunkSize) {
  let len = chunk.byteLength;
  if (len < chunkSize) {
    yield chunk;
    return;
  }
  let pos = 0;
  let end;
  while (pos < len) {
    end = pos + chunkSize;
    yield chunk.slice(pos, end);
    pos = end;
  }
};
const readBytes = async function* (iterable, chunkSize) {
  for await (const chunk of readStream(iterable)) {
    yield* streamChunk(chunk, chunkSize);
  }
};
const readStream = async function* (stream) {
  if (stream[Symbol.asyncIterator]) {
    yield* stream;
    return;
  }
  const reader = stream.getReader();
  try {
    for (;;) {
      const {
        done,
        value
      } = await reader.read();
      if (done) {
        break;
      }
      yield value;
    }
  } finally {
    await reader.cancel();
  }
};
const trackStream = (stream, chunkSize, onProgress, onFinish) => {
  const iterator = readBytes(stream, chunkSize);
  let bytes = 0;
  let done;
  let _onFinish = e => {
    if (!done) {
      done = true;
      onFinish && onFinish(e);
    }
  };
  return new ReadableStream({
    async pull(controller) {
      try {
        const {
          done,
          value
        } = await iterator.next();
        if (done) {
          _onFinish();
          controller.close();
          return;
        }
        let len = value.byteLength;
        if (onProgress) {
          let loadedBytes = bytes += len;
          onProgress(loadedBytes);
        }
        controller.enqueue(new Uint8Array(value));
      } catch (err) {
        _onFinish(err);
        throw err;
      }
    },
    cancel(reason) {
      _onFinish(reason);
      return iterator.return();
    }
  }, {
    highWaterMark: 2
  });
};

const isFetchSupported = typeof fetch === 'function' && typeof Request === 'function' && typeof Response === 'function';
const isReadableStreamSupported = isFetchSupported && typeof ReadableStream === 'function';

// used only inside the fetch adapter
const encodeText = isFetchSupported && (typeof TextEncoder === 'function' ? (encoder => str => encoder.encode(str))(new TextEncoder()) : async str => new Uint8Array(await new Response(str).arrayBuffer()));
const test = (fn, ...args) => {
  try {
    return !!fn(...args);
  } catch (e) {
    return false;
  }
};
const supportsRequestStream = isReadableStreamSupported && test(() => {
  let duplexAccessed = false;
  const hasContentType = new Request(platform.origin, {
    body: new ReadableStream(),
    method: 'POST',
    get duplex() {
      duplexAccessed = true;
      return 'half';
    }
  }).headers.has('Content-Type');
  return duplexAccessed && !hasContentType;
});
const DEFAULT_CHUNK_SIZE = 64 * 1024;
const supportsResponseStream = isReadableStreamSupported && test(() => utils$1.isReadableStream(new Response('').body));
const resolvers = {
  stream: supportsResponseStream && (res => res.body)
};
isFetchSupported && (res => {
  ['text', 'arrayBuffer', 'blob', 'formData', 'stream'].forEach(type => {
    !resolvers[type] && (resolvers[type] = utils$1.isFunction(res[type]) ? res => res[type]() : (_, config) => {
      throw new AxiosError$1(`Response type '${type}' is not supported`, AxiosError$1.ERR_NOT_SUPPORT, config);
    });
  });
})(new Response());
const getBodyLength = async body => {
  if (body == null) {
    return 0;
  }
  if (utils$1.isBlob(body)) {
    return body.size;
  }
  if (utils$1.isSpecCompliantForm(body)) {
    const _request = new Request(platform.origin, {
      method: 'POST',
      body
    });
    return (await _request.arrayBuffer()).byteLength;
  }
  if (utils$1.isArrayBufferView(body) || utils$1.isArrayBuffer(body)) {
    return body.byteLength;
  }
  if (utils$1.isURLSearchParams(body)) {
    body = body + '';
  }
  if (utils$1.isString(body)) {
    return (await encodeText(body)).byteLength;
  }
};
const resolveBodyLength = async (headers, body) => {
  const length = utils$1.toFiniteNumber(headers.getContentLength());
  return length == null ? getBodyLength(body) : length;
};
var fetchAdapter = isFetchSupported && (async config => {
  let {
    url,
    method,
    data,
    signal,
    cancelToken,
    timeout,
    onDownloadProgress,
    onUploadProgress,
    responseType,
    headers,
    withCredentials = 'same-origin',
    fetchOptions
  } = resolveConfig(config);
  responseType = responseType ? (responseType + '').toLowerCase() : 'text';
  let composedSignal = composeSignals([signal, cancelToken && cancelToken.toAbortSignal()], timeout);
  let request;
  const unsubscribe = composedSignal && composedSignal.unsubscribe && (() => {
    composedSignal.unsubscribe();
  });
  let requestContentLength;
  try {
    if (onUploadProgress && supportsRequestStream && method !== 'get' && method !== 'head' && (requestContentLength = await resolveBodyLength(headers, data)) !== 0) {
      let _request = new Request(url, {
        method: 'POST',
        body: data,
        duplex: "half"
      });
      let contentTypeHeader;
      if (utils$1.isFormData(data) && (contentTypeHeader = _request.headers.get('content-type'))) {
        headers.setContentType(contentTypeHeader);
      }
      if (_request.body) {
        const [onProgress, flush] = progressEventDecorator(requestContentLength, progressEventReducer(asyncDecorator(onUploadProgress)));
        data = trackStream(_request.body, DEFAULT_CHUNK_SIZE, onProgress, flush);
      }
    }
    if (!utils$1.isString(withCredentials)) {
      withCredentials = withCredentials ? 'include' : 'omit';
    }

    // Cloudflare Workers throws when credentials are defined
    // see https://github.com/cloudflare/workerd/issues/902
    const isCredentialsSupported = "credentials" in Request.prototype;
    request = new Request(url, {
      ...fetchOptions,
      signal: composedSignal,
      method: method.toUpperCase(),
      headers: headers.normalize().toJSON(),
      body: data,
      duplex: "half",
      credentials: isCredentialsSupported ? withCredentials : undefined
    });
    let response = await fetch(request);
    const isStreamResponse = supportsResponseStream && (responseType === 'stream' || responseType === 'response');
    if (supportsResponseStream && (onDownloadProgress || isStreamResponse && unsubscribe)) {
      const options = {};
      ['status', 'statusText', 'headers'].forEach(prop => {
        options[prop] = response[prop];
      });
      const responseContentLength = utils$1.toFiniteNumber(response.headers.get('content-length'));
      const [onProgress, flush] = onDownloadProgress && progressEventDecorator(responseContentLength, progressEventReducer(asyncDecorator(onDownloadProgress), true)) || [];
      response = new Response(trackStream(response.body, DEFAULT_CHUNK_SIZE, onProgress, () => {
        flush && flush();
        unsubscribe && unsubscribe();
      }), options);
    }
    responseType = responseType || 'text';
    let responseData = await resolvers[utils$1.findKey(resolvers, responseType) || 'text'](response, config);
    !isStreamResponse && unsubscribe && unsubscribe();
    return await new Promise((resolve, reject) => {
      settle(resolve, reject, {
        data: responseData,
        headers: AxiosHeaders$1.from(response.headers),
        status: response.status,
        statusText: response.statusText,
        config,
        request
      });
    });
  } catch (err) {
    unsubscribe && unsubscribe();
    if (err && err.name === 'TypeError' && /fetch/i.test(err.message)) {
      throw Object.assign(new AxiosError$1('Network Error', AxiosError$1.ERR_NETWORK, config, request), {
        cause: err.cause || err
      });
    }
    throw AxiosError$1.from(err, err && err.code, config, request);
  }
});

const knownAdapters = {
  http: httpAdapter,
  xhr: xhrAdapter,
  fetch: fetchAdapter
};
utils$1.forEach(knownAdapters, (fn, value) => {
  if (fn) {
    try {
      Object.defineProperty(fn, 'name', {
        value
      });
    } catch (e) {
      // eslint-disable-next-line no-empty
    }
    Object.defineProperty(fn, 'adapterName', {
      value
    });
  }
});
const renderReason = reason => `- ${reason}`;
const isResolvedHandle = adapter => utils$1.isFunction(adapter) || adapter === null || adapter === false;
var adapters = {
  getAdapter: adapters => {
    adapters = utils$1.isArray(adapters) ? adapters : [adapters];
    const {
      length
    } = adapters;
    let nameOrAdapter;
    let adapter;
    const rejectedReasons = {};
    for (let i = 0; i < length; i++) {
      nameOrAdapter = adapters[i];
      let id;
      adapter = nameOrAdapter;
      if (!isResolvedHandle(nameOrAdapter)) {
        adapter = knownAdapters[(id = String(nameOrAdapter)).toLowerCase()];
        if (adapter === undefined) {
          throw new AxiosError$1(`Unknown adapter '${id}'`);
        }
      }
      if (adapter) {
        break;
      }
      rejectedReasons[id || '#' + i] = adapter;
    }
    if (!adapter) {
      const reasons = Object.entries(rejectedReasons).map(([id, state]) => `adapter ${id} ` + (state === false ? 'is not supported by the environment' : 'is not available in the build'));
      let s = length ? reasons.length > 1 ? 'since :\n' + reasons.map(renderReason).join('\n') : ' ' + renderReason(reasons[0]) : 'as no adapter specified';
      throw new AxiosError$1(`There is no suitable adapter to dispatch the request ` + s, 'ERR_NOT_SUPPORT');
    }
    return adapter;
  },
  adapters: knownAdapters
};

/**
 * Throws a `CanceledError` if cancellation has been requested.
 *
 * @param {Object} config The config that is to be used for the request
 *
 * @returns {void}
 */
function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }
  if (config.signal && config.signal.aborted) {
    throw new CanceledError$1(null, config);
  }
}

/**
 * Dispatch a request to the server using the configured adapter.
 *
 * @param {object} config The config that is to be used for the request
 *
 * @returns {Promise} The Promise to be fulfilled
 */
function dispatchRequest(config) {
  throwIfCancellationRequested(config);
  config.headers = AxiosHeaders$1.from(config.headers);

  // Transform request data
  config.data = transformData.call(config, config.transformRequest);
  if (['post', 'put', 'patch'].indexOf(config.method) !== -1) {
    config.headers.setContentType('application/x-www-form-urlencoded', false);
  }
  const adapter = adapters.getAdapter(config.adapter || defaults.adapter);
  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config);

    // Transform response data
    response.data = transformData.call(config, config.transformResponse, response);
    response.headers = AxiosHeaders$1.from(response.headers);
    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel$1(reason)) {
      throwIfCancellationRequested(config);

      // Transform response data
      if (reason && reason.response) {
        reason.response.data = transformData.call(config, config.transformResponse, reason.response);
        reason.response.headers = AxiosHeaders$1.from(reason.response.headers);
      }
    }
    return Promise.reject(reason);
  });
}

const validators$1 = {};

// eslint-disable-next-line func-names
['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach((type, i) => {
  validators$1[type] = function validator(thing) {
    return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;
  };
});
const deprecatedWarnings = {};

/**
 * Transitional option validator
 *
 * @param {function|boolean?} validator - set to false if the transitional option has been removed
 * @param {string?} version - deprecated version / removed since version
 * @param {string?} message - some message with additional info
 *
 * @returns {function}
 */
validators$1.transitional = function transitional(validator, version, message) {
  function formatMessage(opt, desc) {
    return '[Axios v' + VERSION$1 + '] Transitional option \'' + opt + '\'' + desc + (message ? '. ' + message : '');
  }

  // eslint-disable-next-line func-names
  return (value, opt, opts) => {
    if (validator === false) {
      throw new AxiosError$1(formatMessage(opt, ' has been removed' + (version ? ' in ' + version : '')), AxiosError$1.ERR_DEPRECATED);
    }
    if (version && !deprecatedWarnings[opt]) {
      deprecatedWarnings[opt] = true;
      // eslint-disable-next-line no-console
      console.warn(formatMessage(opt, ' has been deprecated since v' + version + ' and will be removed in the near future'));
    }
    return validator ? validator(value, opt, opts) : true;
  };
};
validators$1.spelling = function spelling(correctSpelling) {
  return (value, opt) => {
    // eslint-disable-next-line no-console
    console.warn(`${opt} is likely a misspelling of ${correctSpelling}`);
    return true;
  };
};

/**
 * Assert object's properties type
 *
 * @param {object} options
 * @param {object} schema
 * @param {boolean?} allowUnknown
 *
 * @returns {object}
 */

function assertOptions(options, schema, allowUnknown) {
  if (typeof options !== 'object') {
    throw new AxiosError$1('options must be an object', AxiosError$1.ERR_BAD_OPTION_VALUE);
  }
  const keys = Object.keys(options);
  let i = keys.length;
  while (i-- > 0) {
    const opt = keys[i];
    const validator = schema[opt];
    if (validator) {
      const value = options[opt];
      const result = value === undefined || validator(value, opt, options);
      if (result !== true) {
        throw new AxiosError$1('option ' + opt + ' must be ' + result, AxiosError$1.ERR_BAD_OPTION_VALUE);
      }
      continue;
    }
    if (allowUnknown !== true) {
      throw new AxiosError$1('Unknown option ' + opt, AxiosError$1.ERR_BAD_OPTION);
    }
  }
}
var validator = {
  assertOptions,
  validators: validators$1
};

const validators = validator.validators;

/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 *
 * @return {Axios} A new instance of Axios
 */
let Axios$1 = class Axios {
  constructor(instanceConfig) {
    this.defaults = instanceConfig;
    this.interceptors = {
      request: new InterceptorManager(),
      response: new InterceptorManager()
    };
  }

  /**
   * Dispatch a request
   *
   * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)
   * @param {?Object} config
   *
   * @returns {Promise} The Promise to be fulfilled
   */
  async request(configOrUrl, config) {
    try {
      return await this._request(configOrUrl, config);
    } catch (err) {
      if (err instanceof Error) {
        let dummy = {};
        Error.captureStackTrace ? Error.captureStackTrace(dummy) : dummy = new Error();

        // slice off the Error: ... line
        const stack = dummy.stack ? dummy.stack.replace(/^.+\n/, '') : '';
        try {
          if (!err.stack) {
            err.stack = stack;
            // match without the 2 top stack lines
          } else if (stack && !String(err.stack).endsWith(stack.replace(/^.+\n.+\n/, ''))) {
            err.stack += '\n' + stack;
          }
        } catch (e) {
          // ignore the case where "stack" is an un-writable property
        }
      }
      throw err;
    }
  }
  _request(configOrUrl, config) {
    /*eslint no-param-reassign:0*/
    // Allow for axios('example/url'[, config]) a la fetch API
    if (typeof configOrUrl === 'string') {
      config = config || {};
      config.url = configOrUrl;
    } else {
      config = configOrUrl || {};
    }
    config = mergeConfig$1(this.defaults, config);
    const {
      transitional,
      paramsSerializer,
      headers
    } = config;
    if (transitional !== undefined) {
      validator.assertOptions(transitional, {
        silentJSONParsing: validators.transitional(validators.boolean),
        forcedJSONParsing: validators.transitional(validators.boolean),
        clarifyTimeoutError: validators.transitional(validators.boolean)
      }, false);
    }
    if (paramsSerializer != null) {
      if (utils$1.isFunction(paramsSerializer)) {
        config.paramsSerializer = {
          serialize: paramsSerializer
        };
      } else {
        validator.assertOptions(paramsSerializer, {
          encode: validators.function,
          serialize: validators.function
        }, true);
      }
    }
    validator.assertOptions(config, {
      baseUrl: validators.spelling('baseURL'),
      withXsrfToken: validators.spelling('withXSRFToken')
    }, true);

    // Set config.method
    config.method = (config.method || this.defaults.method || 'get').toLowerCase();

    // Flatten headers
    let contextHeaders = headers && utils$1.merge(headers.common, headers[config.method]);
    headers && utils$1.forEach(['delete', 'get', 'head', 'post', 'put', 'patch', 'common'], method => {
      delete headers[method];
    });
    config.headers = AxiosHeaders$1.concat(contextHeaders, headers);

    // filter out skipped interceptors
    const requestInterceptorChain = [];
    let synchronousRequestInterceptors = true;
    this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
      if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {
        return;
      }
      synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
      requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
    });
    const responseInterceptorChain = [];
    this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
      responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
    });
    let promise;
    let i = 0;
    let len;
    if (!synchronousRequestInterceptors) {
      const chain = [dispatchRequest.bind(this), undefined];
      chain.unshift.apply(chain, requestInterceptorChain);
      chain.push.apply(chain, responseInterceptorChain);
      len = chain.length;
      promise = Promise.resolve(config);
      while (i < len) {
        promise = promise.then(chain[i++], chain[i++]);
      }
      return promise;
    }
    len = requestInterceptorChain.length;
    let newConfig = config;
    i = 0;
    while (i < len) {
      const onFulfilled = requestInterceptorChain[i++];
      const onRejected = requestInterceptorChain[i++];
      try {
        newConfig = onFulfilled(newConfig);
      } catch (error) {
        onRejected.call(this, error);
        break;
      }
    }
    try {
      promise = dispatchRequest.call(this, newConfig);
    } catch (error) {
      return Promise.reject(error);
    }
    i = 0;
    len = responseInterceptorChain.length;
    while (i < len) {
      promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);
    }
    return promise;
  }
  getUri(config) {
    config = mergeConfig$1(this.defaults, config);
    const fullPath = buildFullPath(config.baseURL, config.url);
    return buildURL(fullPath, config.params, config.paramsSerializer);
  }
};

// Provide aliases for supported request methods
utils$1.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
  /*eslint func-names:0*/
  Axios$1.prototype[method] = function (url, config) {
    return this.request(mergeConfig$1(config || {}, {
      method,
      url,
      data: (config || {}).data
    }));
  };
});
utils$1.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  /*eslint func-names:0*/

  function generateHTTPMethod(isForm) {
    return function httpMethod(url, data, config) {
      return this.request(mergeConfig$1(config || {}, {
        method,
        headers: isForm ? {
          'Content-Type': 'multipart/form-data'
        } : {},
        url,
        data
      }));
    };
  }
  Axios$1.prototype[method] = generateHTTPMethod();
  Axios$1.prototype[method + 'Form'] = generateHTTPMethod(true);
});

/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @param {Function} executor The executor function.
 *
 * @returns {CancelToken}
 */
let CancelToken$1 = class CancelToken {
  constructor(executor) {
    if (typeof executor !== 'function') {
      throw new TypeError('executor must be a function.');
    }
    let resolvePromise;
    this.promise = new Promise(function promiseExecutor(resolve) {
      resolvePromise = resolve;
    });
    const token = this;

    // eslint-disable-next-line func-names
    this.promise.then(cancel => {
      if (!token._listeners) return;
      let i = token._listeners.length;
      while (i-- > 0) {
        token._listeners[i](cancel);
      }
      token._listeners = null;
    });

    // eslint-disable-next-line func-names
    this.promise.then = onfulfilled => {
      let _resolve;
      // eslint-disable-next-line func-names
      const promise = new Promise(resolve => {
        token.subscribe(resolve);
        _resolve = resolve;
      }).then(onfulfilled);
      promise.cancel = function reject() {
        token.unsubscribe(_resolve);
      };
      return promise;
    };
    executor(function cancel(message, config, request) {
      if (token.reason) {
        // Cancellation has already been requested
        return;
      }
      token.reason = new CanceledError$1(message, config, request);
      resolvePromise(token.reason);
    });
  }

  /**
   * Throws a `CanceledError` if cancellation has been requested.
   */
  throwIfRequested() {
    if (this.reason) {
      throw this.reason;
    }
  }

  /**
   * Subscribe to the cancel signal
   */

  subscribe(listener) {
    if (this.reason) {
      listener(this.reason);
      return;
    }
    if (this._listeners) {
      this._listeners.push(listener);
    } else {
      this._listeners = [listener];
    }
  }

  /**
   * Unsubscribe from the cancel signal
   */

  unsubscribe(listener) {
    if (!this._listeners) {
      return;
    }
    const index = this._listeners.indexOf(listener);
    if (index !== -1) {
      this._listeners.splice(index, 1);
    }
  }
  toAbortSignal() {
    const controller = new AbortController();
    const abort = err => {
      controller.abort(err);
    };
    this.subscribe(abort);
    controller.signal.unsubscribe = () => this.unsubscribe(abort);
    return controller.signal;
  }

  /**
   * Returns an object that contains a new `CancelToken` and a function that, when called,
   * cancels the `CancelToken`.
   */
  static source() {
    let cancel;
    const token = new CancelToken(function executor(c) {
      cancel = c;
    });
    return {
      token,
      cancel
    };
  }
};

/**
 * Syntactic sugar for invoking a function and expanding an array for arguments.
 *
 * Common use case would be to use `Function.prototype.apply`.
 *
 *  ```js
 *  function f(x, y, z) {}
 *  var args = [1, 2, 3];
 *  f.apply(null, args);
 *  ```
 *
 * With `spread` this example can be re-written.
 *
 *  ```js
 *  spread(function(x, y, z) {})([1, 2, 3]);
 *  ```
 *
 * @param {Function} callback
 *
 * @returns {Function}
 */
function spread$1(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
}

/**
 * Determines whether the payload is an error thrown by Axios
 *
 * @param {*} payload The value to test
 *
 * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
 */
function isAxiosError$1(payload) {
  return utils$1.isObject(payload) && payload.isAxiosError === true;
}

const HttpStatusCode$1 = {
  Continue: 100,
  SwitchingProtocols: 101,
  Processing: 102,
  EarlyHints: 103,
  Ok: 200,
  Created: 201,
  Accepted: 202,
  NonAuthoritativeInformation: 203,
  NoContent: 204,
  ResetContent: 205,
  PartialContent: 206,
  MultiStatus: 207,
  AlreadyReported: 208,
  ImUsed: 226,
  MultipleChoices: 300,
  MovedPermanently: 301,
  Found: 302,
  SeeOther: 303,
  NotModified: 304,
  UseProxy: 305,
  Unused: 306,
  TemporaryRedirect: 307,
  PermanentRedirect: 308,
  BadRequest: 400,
  Unauthorized: 401,
  PaymentRequired: 402,
  Forbidden: 403,
  NotFound: 404,
  MethodNotAllowed: 405,
  NotAcceptable: 406,
  ProxyAuthenticationRequired: 407,
  RequestTimeout: 408,
  Conflict: 409,
  Gone: 410,
  LengthRequired: 411,
  PreconditionFailed: 412,
  PayloadTooLarge: 413,
  UriTooLong: 414,
  UnsupportedMediaType: 415,
  RangeNotSatisfiable: 416,
  ExpectationFailed: 417,
  ImATeapot: 418,
  MisdirectedRequest: 421,
  UnprocessableEntity: 422,
  Locked: 423,
  FailedDependency: 424,
  TooEarly: 425,
  UpgradeRequired: 426,
  PreconditionRequired: 428,
  TooManyRequests: 429,
  RequestHeaderFieldsTooLarge: 431,
  UnavailableForLegalReasons: 451,
  InternalServerError: 500,
  NotImplemented: 501,
  BadGateway: 502,
  ServiceUnavailable: 503,
  GatewayTimeout: 504,
  HttpVersionNotSupported: 505,
  VariantAlsoNegotiates: 506,
  InsufficientStorage: 507,
  LoopDetected: 508,
  NotExtended: 510,
  NetworkAuthenticationRequired: 511
};
Object.entries(HttpStatusCode$1).forEach(([key, value]) => {
  HttpStatusCode$1[value] = key;
});

/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 *
 * @returns {Axios} A new instance of Axios
 */
function createInstance(defaultConfig) {
  const context = new Axios$1(defaultConfig);
  const instance = bind(Axios$1.prototype.request, context);

  // Copy axios.prototype to instance
  utils$1.extend(instance, Axios$1.prototype, context, {
    allOwnKeys: true
  });

  // Copy context to instance
  utils$1.extend(instance, context, null, {
    allOwnKeys: true
  });

  // Factory for creating new instances
  instance.create = function create(instanceConfig) {
    return createInstance(mergeConfig$1(defaultConfig, instanceConfig));
  };
  return instance;
}

// Create the default instance to be exported
const axios = createInstance(defaults);

// Expose Axios class to allow class inheritance
axios.Axios = Axios$1;

// Expose Cancel & CancelToken
axios.CanceledError = CanceledError$1;
axios.CancelToken = CancelToken$1;
axios.isCancel = isCancel$1;
axios.VERSION = VERSION$1;
axios.toFormData = toFormData$1;

// Expose AxiosError class
axios.AxiosError = AxiosError$1;

// alias for CanceledError for backward compatibility
axios.Cancel = axios.CanceledError;

// Expose all/spread
axios.all = function all(promises) {
  return Promise.all(promises);
};
axios.spread = spread$1;

// Expose isAxiosError
axios.isAxiosError = isAxiosError$1;

// Expose mergeConfig
axios.mergeConfig = mergeConfig$1;
axios.AxiosHeaders = AxiosHeaders$1;
axios.formToJSON = thing => formDataToJSON(utils$1.isHTMLForm(thing) ? new FormData(thing) : thing);
axios.getAdapter = adapters.getAdapter;
axios.HttpStatusCode = HttpStatusCode$1;
axios.default = axios;

// This module is intended to unwrap Axios default export as named.
// Keep top-level export same with static properties
// so that it can keep same with es module or cjs
const {
  Axios,
  AxiosError,
  CanceledError,
  isCancel,
  CancelToken,
  VERSION,
  all,
  Cancel,
  isAxiosError,
  spread,
  toFormData,
  AxiosHeaders,
  HttpStatusCode,
  formToJSON,
  getAdapter,
  mergeConfig
} = axios;

/**
 * Compresses the input data using gzip.
 * @param {string} data - Data to be compressed.
 * @returns {Promise<Buffer>}
 */
function condense(data) {
  return new Promise((resolve, reject) => {
    zlib.gzip(data, (err, condensed) => {
      if (err) return reject(err);
      resolve(condensed);
    });
  });
}

/**
 * Decompresses the input data using gunzip.
 * @param {Buffer} data - Data to be decompressed.
 * @returns {Promise<Buffer>}
 */
function expand(data) {
  return new Promise((resolve, reject) => {
    zlib.gunzip(data, (err, expanded) => {
      if (err) return reject(err);
      resolve(expanded);
    });
  });
}

/**
 * Loads the model from a file, decompresses it, and restores its structure.
 * @param {string} file - File path.
 * @returns {Promise<Object>}
 */
async function loadModel(file) {
  // Read and decompress the file content
  const condensedData = await fs.promises.readFile(file);
  const jsonStr = await expand(condensedData);
  if (!jsonStr) throw new Error('Decompressed data is empty');

  // Parse the JSON data
  const data = JSON.parse(jsonStr.toString('utf-8'));

  // Restore Maps from serialized arrays/objects
  data.categoryStemToId = new Map(data.categoryStemToId);
  data.categoryVariations = new Map(Object.entries(data.categoryVariations || {}).map(([stem, variations]) => [stem, new Map(Object.entries(variations))]));
  data.categoryRelations = new Map(Object.entries(data.categoryRelations || {}).map(([cat, relObj]) => [cat, new Map(Object.entries(relObj))]));

  // Restore omenFrequencies as an array of Maps
  if (data.omenFrequencies) {
    data.omenFrequencies = data.omenFrequencies.map(item => new Map(Object.entries(item)));
  }
  // 'omens' is expected to remain an array
  return data;
}

/**
 * Imports a model from a remote URL and saves it to the specified file.
 * @param {string} url - Remote URL.
 * @param {string} file - Destination file path.
 */
async function importModel(url, file) {
  // Ensure the directory exists
  await fs.promises.mkdir(path.dirname(file), {
    recursive: true
  }).catch(() => {});
  const writer = fs.createWriteStream(file);
  const response = await axios({
    method: 'get',
    url: url,
    responseType: 'stream',
    headers: {
      'Accept-Encoding': 'gzip,deflate'
    }
  });
  response.data.pipe(writer);
  await new Promise((resolve, reject) => {
    writer.on('finish', resolve);
    writer.on('error', reject);
  });
}

/**
 * Saves the model data to a file after compressing it.
 * @param {string} outputFile - Destination file path.
 * @param {Object} data - Model data.
 */
async function saveModel(outputFile, data) {
  // Normalize the data by converting Maps into serializable arrays/objects.
  const normalizedData = {
    ...data,
    categoryStemToId: Array.from(data.categoryStemToId.entries()),
    categoryVariations: Object.fromEntries([...data.categoryVariations.entries()].map(([stem, variations]) => [stem, Object.fromEntries(variations)])),
    // Normalize omenFrequencies: convert each Map in the array to an object.
    omenFrequencies: data.omenFrequencies ? data.omenFrequencies.map(map => Object.fromEntries(map)) : undefined
    // 'omens' remains as an array.
  };
  const jsonStr = JSON.stringify(normalizedData);
  const condensedData = await condense(jsonStr);
  await fs.promises.mkdir(path.dirname(outputFile), {
    recursive: true
  }).catch(() => {});
  await fs.promises.writeFile(outputFile, condensedData);
}

/**
 * chant
 * 
 * Prepares the omens (n-grams) from the provided text.
 * It tokenizes the text, applies the stemmer, filters out excluded terms,
 * and generates n-grams up to the specified 'n' value.
 * 
 * @param {string} text - Input text.
 * @param {Object} stemmer - Stemmer instance.
 * @param {Set} excludes - Set of excluded tokens.
 * @param {number} n - Maximum n-gram length.
 * @returns {string[]} - Array of n-grams.
 */
function chant(text, stemmer, excludes, n) {
  if (typeof text !== 'string') {
    console.error('chant: text is not a string', text);
    return [];
  }
  const tokens = stemmer.tokenizeAndStem(text).filter(token => !excludes.has(token) && token.length > 1);
  const omensList = [];
  for (let i = 1; i <= n; i++) {
    for (let j = 0; j <= tokens.length - i; j++) {
      omensList.push(tokens.slice(j, j + i).join(' '));
    }
  }
  return omensList;
}

/**
 * Trains the model with a given text and category.
 * Updates the context (model state) accordingly.
 * @param {Array} data - The prophetic text, an array of objects with { input, output }.
 * @param {Object} context - The training context (model state).
 */
function trainText(data, context) {
  for (const {
    input,
    output
  } of data) {
    // output may be an array of categories
    const categories = (Array.isArray(output) ? output : [output]).filter(category => !context.excludes.has(context.stemmer.stem(category)));
    if (categories.length === 0) return;
    const omensList = chant(input, context.stemmer, context.excludes, context.n);
    if (omensList.length === 0) return;
    const uniqueOmens = new Set(omensList);

    // Register new omens
    for (const omen of uniqueOmens) {
      if (!context.omenMapping.has(omen)) {
        const omenId = context.omens.length;
        context.omenMapping.set(omen, omenId);
        context.omens.push(omen);
        context.omenDocFreq[omenId] = 0;
      }
    }

    // Update global omen frequency
    for (const omen of uniqueOmens) {
      const omenId = context.omenMapping.get(omen);
      context.omenDocFreq[omenId]++;
    }
    for (const category of categories) {
      const categoryStem = context.stemmer.stem(category);
      if (!context.categoryStemToId.has(categoryStem)) {
        const oracleId = context.divinerGroups.length;
        context.categoryStemToId.set(categoryStem, oracleId);
        context.divinerGroups.push(categoryStem);
        context.categoryVariations.set(categoryStem, new Map());
        context.categoryVariations.get(categoryStem).set(category, 1);
        context.divinerDocCount[oracleId] = 0;
        context.omenCount[oracleId] = 0;
        context.omenFrequencies[oracleId] = new Map();
      } else {
        const variationCounts = context.categoryVariations.get(categoryStem);
        variationCounts.set(category, (variationCounts.get(category) || 0) + 1);
      }
      const oracleId = context.categoryStemToId.get(categoryStem);
      context.divinerDocCount[oracleId]++;

      // Update the diviner category counts
      context.divinerDocCount[oracleId]++;
      for (const omen of omensList) {
        const omenId = context.omenMapping.get(omen);
        const current = context.omenFrequencies[oracleId].get(omenId) || 0;
        context.omenFrequencies[oracleId].set(omenId, current + 1);
        context.omenCount[oracleId]++;
      }
      context.totalTransmissions++;
    }
  }
}

/**
 * Normalizes and sorts prediction results.
 * @param {Object[]} results - Array of objects with { category, score }.
 * @param {Object} options - Output options: { as: 'string'|'array'|'objects', limit: number }.
 * @param {Function} bestVariantFn - Function to retrieve the best variant.
 * @param {boolean} capitalize - Whether to capitalize categories.
 * @returns {Object[]|string|string[]} - Formatted prediction results.
 */
function norm(results, options, bestVariantFn, capitalize) {
  if (results.length) {
    if (typeof options.capitalize === 'boolean') {
      capitalize = options.capitalize;
    }
    results.forEach(result => {
      result.category = bestVariantFn(result.category);
    });
    if (capitalize) {
      results.forEach(result => {
        result.category = result.category.charAt(0).toUpperCase() + result.category.slice(1);
      });
    }
    results.sort((a, b) => b.score - a.score);
    if (options.limit) results = results.slice(0, options.limit);
  }
  switch (options.as) {
    case 'array':
      return results.map(r => r.category);
    case 'objects':
      return results;
    default:
      return results.map(r => r.category).join(', ');
  }
}

/**
 * Predicts the diviner category for the given text using a TF-IDF-based approach.
 * @param {string} text - The input text.
 * @param {Object} context - The model context.
 * @returns {Object[]} - Array of objects with { category, score }.
 */
function predictText(text, context) {
  if (context.totalTransmissions === 0) return [];
  if (typeof text === 'object' && !Array.isArray(text)) {
    return predictWeightedText(text, context);
  }

  // Tokenize text and compute term frequencies
  const omensList = chant(text, context.stemmer, context.excludes, context.n);
  const idFreq = new Map();
  for (const omen of omensList) {
    const omenId = context.omenMapping.get(omen);
    if (omenId !== undefined) {
      idFreq.set(omenId, (idFreq.get(omenId) || 0) + 1);
    }
  }
  const scores = new Map();
  let maxScore = -Infinity;
  const totalTransmissions = context.totalTransmissions;
  for (const [categoryStem, oracleId] of context.categoryStemToId.entries()) {
    const docsInCategory = context.divinerDocCount[oracleId];
    if (docsInCategory === 0) continue;
    const logPrior = Math.log(docsInCategory / totalTransmissions);
    let logLikelihood = 0;
    idFreq.forEach((tf, omenId) => {
      const df = context.omenDocFreq[omenId] || 0;
      const idf = Math.log((totalTransmissions + 1) / (df + 1)); // Smoothing
      const tfidf = tf * idf;
      const freq = context.omenFrequencies[oracleId].get(omenId) || 0;
      const totalOmens = context.omenCount[oracleId];
      const pOmen = (freq + 1) / (totalOmens + context.omens.length);
      logLikelihood += tfidf * Math.log(pOmen);
    });
    const score = logPrior + logLikelihood;
    scores.set(categoryStem, score);
    if (score > maxScore) maxScore = score;
  }
  let sumExp = 0;
  const results = [];
  scores.forEach((score, category) => {
    const expScore = Math.exp(score - maxScore);
    sumExp += expScore;
    results.push({
      category,
      score: expScore
    });
  });

  // Normalize scores to sum to 1 (softmax)
  return results.map(r => ({
    ...r,
    score: r.score / sumExp
  }));
}

/**
 * Predicts the diviner category for multiple texts with associated weights.
 * @param {Object} inputObj - An object mapping texts to their weights.
 * @param {Object} context - The model context.
 * @returns {Object[]} - Array of objects with { category, score }.
 */
function predictWeightedText(inputObj, context) {
  if (context.totalTransmissions === 0 || context.divinerGroups.length === 0) return [];
  const idFreq = new Map();
  const weightExponent = context.weightExponent;
  const totalTransmissions = context.totalTransmissions;
  for (const [rawText, weight] of Object.entries(inputObj)) {
    const omensList = chant(rawText, context.stemmer, context.excludes, context.n);
    for (const omen of omensList) {
      const omenId = context.omenMapping.get(omen);
      if (omenId === undefined) continue;
      const weightedCount = Math.pow(weight, weightExponent);
      idFreq.set(omenId, (idFreq.get(omenId) || 0) + weightedCount);
    }
  }
  const tfIdf = new Map();
  idFreq.forEach((tf, omenId) => {
    const df = context.omenDocFreq[omenId] || 0;
    const idf = Math.log((totalTransmissions + 1) / (df + 1));
    tfIdf.set(omenId, tf * idf);
  });
  const scores = new Map();
  let maxScore = -Infinity;
  for (const [categoryStem, oracleId] of context.categoryStemToId.entries()) {
    const docsInCategory = context.divinerDocCount[oracleId];
    if (docsInCategory === 0) continue;
    const logPrior = Math.log(docsInCategory / totalTransmissions);
    let logLikelihood = 0;
    tfIdf.forEach((weight, omenId) => {
      const freq = context.omenFrequencies[oracleId].get(omenId) || 0;
      const totalOmens = context.omenCount[oracleId];
      const pOmen = (freq + 1) / (totalOmens + context.omens.length);
      logLikelihood += weight * Math.log(pOmen);
    });
    const score = logPrior + logLikelihood;
    scores.set(categoryStem, score);
    if (score > maxScore) maxScore = score;
  }
  let sumExp = 0;
  const results = [];
  scores.forEach((score, category) => {
    const expScore = Math.exp(score - maxScore);
    sumExp += expScore;
    results.push({
      category,
      score: expScore
    });
  });
  return results.map(r => ({
    ...r,
    score: r.score / sumExp
  }));
}

/**
 * Trias class
 * 
 * Inspired by the ancient Greek Trias—the three prophetic nymphs (Cleodora, Melena, and Dafnis)
 * who performed divination through sacred rituals.
 * 
 * This class functions as an oracle that learns (records) prophetic texts and later predicts 
 * the oracle category (prophecy outcome) from input texts using a TF-IDF approach.
 */
class Trias {
  constructor({
    file = './model.trias',
    // model file (the "tome of prophecies")
    create = true,
    n = 3,
    language = 'en',
    weightExponent = 2,
    capitalize = false,
    excludes = [],
    size = 4096 * 1024,
    // Approximate model size in bytes (limit for the prophetic tome)
    autoImport = false,
    // Auto import pre-trained model if file doesn't exist
    modelUrl = 'https://edenware.app/trias/trained/{language}.trias' // URL template for pre-trained model
  } = {}) {
    this.file = file;
    this.weightExponent = weightExponent;
    this.autoImport = autoImport;
    this.modelUrl = modelUrl;
    this.language = language;
    this.create = create;
    this.n = n;
    this.stemmer = getStemmer(language);
    this.maxModelSize = size;
    this.avgOmenSize = null; // Average size per omen (calculated from condensed model file)

    // Model state variables
    this.categoryStemToId = new Map();
    this.categoryVariations = new Map();
    this.categoryRelations = new Map();
    this.divinerGroups = [];
    this.divinerDocCount = [];
    this.omenCount = [];
    this.omenFrequencies = [];
    this.omenMapping = new Map();
    this.omens = [];
    this.omenDocFreq = [];
    this.totalTransmissions = 0;
    this.capitalize = capitalize;
    this.excludes = new Set(excludes);
    this.contextProperties = new Set(['n', 'file', 'autoImport', 'weightExponent', 'modelUrl', 'language', 'create', 'capitalize', 'excludes', 'stemmer', 'maxModelSize', 'avgOmenSize', 'categoryStemToId', 'categoryVariations', 'categoryRelations', 'divinerGroups', 'divinerDocCount', 'omenCount', 'omenFrequencies', 'omenMapping', 'omens', 'omenDocFreq', 'totalTransmissions']);
    this.initialized = this.init();
  }
  toJSON() {
    const result = {};
    for (const p of this.contextProperties) {
      result[p] = this[p];
    }
    return result;
  }
  async init() {
    try {
      await this.load(this.file);
    } catch (err) {
      if (err.code === 'ENOENT' && this.create) {
        this.reset();
      } else {
        throw err;
      }
    }

    // Handle auto-import if enabled and the model is empty
    if (this.autoImport && this.totalTransmissions === 0) {
      const url = this.modelUrl.replace('{language}', this.language).replace('{file}', this.file);
      try {
        await importModel(url, this.file);
        await this.load(this.file);
      } catch (err) {
        console.warn(`Failed to auto-import model from ${url}: ${err.message}`);
        if (!this.create) {
          throw err;
        }
      }
    }
    if (this.omens.length > 0) {
      const {
        size
      } = await fs.promises.stat(this.file).catch(() => ({
        size: 0
      }));
      this.avgOmenSize = size / this.omens.length;
    }
  }

  /**
   * Loads the model from the given file and restores its internal structure.
   */
  async load(modelFile) {
    const model = await loadModel(modelFile);
    this.divinerGroups = model.divinerGroups || [];
    this.categoryStemToId = new Map(this.divinerGroups.map((stem, id) => [stem, id]));

    // Restore categoryVariations, converting inner values to numbers
    this.categoryVariations = model.categoryVariations || new Map();

    // Restore categoryRelations, converting inner values to numbers
    this.categoryRelations = model.categoryRelations || new Map();
    this.omens = model.omens || [];
    this.omenMapping = new Map(this.omens.map((omen, id) => [omen, id]));
    this.divinerDocCount = model.divinerDocCount ? model.divinerDocCount.map(Number) : [];
    this.omenCount = model.omenCount ? model.omenCount.map(Number) : [];
    this.omenDocFreq = model.omenDocFreq ? model.omenDocFreq.map(Number) : [];

    // Restore omenFrequencies as an array of Maps, converting keys to numbers
    this.omenFrequencies = [];
    if (model.omenFrequencies && Array.isArray(model.omenFrequencies)) {
      for (let entry of model.omenFrequencies) {
        let newMap = new Map();
        if (entry instanceof Map) {
          for (const [k, v] of entry) {
            newMap.set(Number(k), v);
          }
        } else {
          for (const [k, v] of Object.entries(entry)) {
            newMap.set(Number(k), v);
          }
        }
        this.omenFrequencies.push(newMap);
      }
    }
    this.totalTransmissions = Number(model.totalTransmissions) || 0;
    this.weightExponent = Number(model.weightExponent) || 2;
    if (this.omens.length > 0) {
      const {
        size
      } = await fs.promises.stat(modelFile).catch(() => ({
        size: 0
      }));
      this.avgOmenSize = size / this.omens.length;
      if (size > this.maxModelSize) {
        await this.purge();
      }
    }
    return true;
  }
  get size() {
    if (this.avgOmenSize > 0) return this.omens.length * this.avgOmenSize;
    return 0;
  }
  async train(text, category) {
    await this.initialized;
    if (category && !Array.isArray(text)) {
      text = [{
        input: text,
        output: category
      }];
    }

    // check category against this.excludes
    text = text.filter(item => {
      if (typeof item.output === 'string') {
        return !this.excludes.has(item.output.trim().toLowerCase());
      } else if (Array.isArray(item.output)) {
        item.output = item.output.filter(output => !this.excludes.has(output.trim().toLowerCase()));
        if (item.output.length === 0) return false;
      }
      return true;
    });
    if (text.length === 0) return;

    // Calls the main training
    trainText(text, this);

    // If there are more than one category, updates the co-occurrence relations
    for (const item of text) {
      if (!Array.isArray(item.output) || item.output.length < 2) {
        continue;
      }
      for (let i = 0; i < item.output.length; i++) {
        for (let j = 0; j < item.output.length; j++) {
          if (i === j) continue;
          const catA = this.stemmer.stem(item.output[i]);
          const catB = this.stemmer.stem(item.output[j]);
          if (!this.categoryRelations.has(catA)) {
            this.categoryRelations.set(catA, new Map());
          }
          const relMap = this.categoryRelations.get(catA);
          relMap.set(catB, (relMap.get(catB) || 0) + 1);
        }
      }
    }
    if (this.size > this.maxModelSize * 1.5) {
      await this.purge();
    }
  }
  async predict(text, options = {
    as: 'string',
    limit: 1
  }) {
    await this.initialized;
    const results = predictText(text, this);
    return norm(results, options, this.bestVariant.bind(this), this.capitalize);
  }
  bestVariant(categoryStem) {
    const variationCounts = this.categoryVariations.get(categoryStem);
    if (!variationCounts) {
      return categoryStem;
    }
    let best = null;
    let bestCount = -Infinity;
    for (const [variation, count] of variationCounts.entries()) {
      if (count > bestCount) {
        best = variation;
        bestCount = count;
      }
    }
    return best;
  }

  /**
   * getRelatedCategories
   * 
   * Given an input of the type { tag1: score1, tag2: score2 },
   * returns a list of related categories that do not contain in the input.
   * 
   * The function uses explicit relations (stored in categoryRelations) and,
   * if the candidates are insufficient, it makes fallback to predictWeightedText.
   * 
   * @param {Object} inputScores - Object with categories and their scores.
   * @param {number} limit - Limit of categories to return.
   * @returns {string[]} - List of related categories.
   */
  getRelatedCategories(inputScores, options = {
    as: 'objects',
    limit: 5
  }) {
    const relatedScores = {};
    let found = false;
    if (typeof inputScores === 'string') {
      inputScores = {
        [inputScores]: 1
      };
    }

    // Uses explicit relations if they exist
    for (const [cat, score] of Object.entries(inputScores)) {
      const categoryStem = this.stemmer.stem(cat);
      const relations = this.categoryRelations.get(categoryStem);
      if (relations) {
        for (const [relatedCat, count] of relations.entries()) {
          if (inputScores.hasOwnProperty(relatedCat)) continue;
          relatedScores[relatedCat] = (relatedScores[relatedCat] || 0) + count * score;
          found = true;
        }
      }
    }
    let candidates = [];
    if (found && Object.keys(relatedScores).length > 0) {
      candidates = Object.entries(relatedScores).sort(([, aScore], [, bScore]) => bScore - aScore).map(([category, score]) => ({
        category,
        score
      }));
    }

    // Fallback: if there are not enough candidates, uses predictWeightedText
    if (candidates.length < options.limit) {
      // Uses inputScores as pseudo input for predictWeightedText
      const fallbackResults = predictWeightedText(inputScores, this);
      // Joins explicit candidates with the fallback (without duplicates)
      candidates = candidates.concat(fallbackResults.filter(candidate => {
        const has = candidates.some(c => c.category === candidate.category);
        return !has;
      }));
    }
    return norm(candidates, options, this.bestVariant.bind(this), this.capitalize);
  }

  /**
   * purge
   * 
   * Reduces the model size by removing the least frequent omens so that the total
   * number of omens does not exceed the allowed number defined by:
   * 
   *      allowedOmens = Math.floor(this.maxModelSize / this.avgOmenSize)
   * 
   * This ensures that the compressed model stays within the maximum size.
   */
  async purge() {
    // Calculate the allowed number of omens based on max model size and average omen size.
    const allowedOmens = Math.floor(this.maxModelSize / this.avgOmenSize);
    if (this.omens.length <= allowedOmens) return;

    // Create an array of omen indices paired with their frequency (from omenCount).
    const omenFrequencyArray = this.omenCount.map((count, idx) => ({
      idx,
      count
    }));

    // Sort the array in descending order based on frequency.
    omenFrequencyArray.sort((a, b) => b.count - a.count);

    // Select indices of the top allowed omens.
    const allowedIndices = new Set(omenFrequencyArray.slice(0, allowedOmens).map(item => item.idx));

    // Build new arrays for omens, omenFrequencies, and omenCount based on allowed indices.
    const newOmens = [];
    const newOmenFrequencies = [];
    const newOmenCount = [];
    for (let i = 0; i < this.omens.length; i++) {
      if (allowedIndices.has(i)) {
        newOmens.push(this.omens[i]);
        newOmenFrequencies.push(this.omenFrequencies[i]);
        newOmenCount.push(this.omenCount[i]);
      }
    }

    // Update the model's omen-related properties.
    this.omens = newOmens;
    this.omenFrequencies = newOmenFrequencies;
    this.omenCount = newOmenCount;

    // Rebuild the omenMapping based on the new omens array.
    this.omenMapping = new Map(this.omens.map((omen, idx) => [omen, idx]));
    await this.save();
  }
  async save() {
    await this.initialized;
    await this.purge();
    await saveModel(this.file, this);
    const {
      size
    } = await fs.promises.stat(this.file).catch(() => ({
      size: 0
    }));
    this.avgOmenSize = size / this.omens.length;
  }
  reset() {
    this.categoryStemToId = new Map();
    this.categoryVariations = new Map();
    this.divinerGroups = [];
    this.omenMapping = new Map();
    this.omens = [];
    this.divinerDocCount = [];
    this.omenCount = [];
    this.omenFrequencies = [];
    this.omenDocFreq = [];
    this.totalTransmissions = 0;
  }
  async destroy() {
    this.reset();
    this.initialized = Promise.reject(new Error('Trias destroyed'));
  }
}

exports.Trias = Trias;
